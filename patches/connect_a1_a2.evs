#memory(
    0x3c0000..0x3fffff, // extension 0x3f0000++

    function_key(0x1710)..function_key(0x1716) // 0x1719 seems to be used by the engine
)

group import_copies() {
    enum SCRIPT_TRIGGER {
        B = 0x0040, // talk/loot
        DAMAGE = 0x0100, // <SCRIPT_OWNER>[HP] shows previous hp, script[0x9]=0x100, dead(<SCRIPT_OWNER>) shows 1->0
        DEATH = 0x0200, // <SCRIPT_OWNER>[HP] shows 0, script[0x9]=0x200, dead(<SCRIPT_OWNER>) shows 0
        
        // groups
        DAMAGE_DEATH = 0x0300, // <SCRIPT_OWNER>[HP] shows previous hp -> 0, script[0x9]=0x100->0x200, dead(<SCRIPT_OWNER>) shows 1->0 (used: Vigor, Rimsala statues, Sterling, green house black flowers)
        ALL = 0x0340,

        // unknown
        UNKNOWN_1 = 0x0000, // TODO (used: default loot script, boss rush dust loot)
        UNKNOWN_2 = 0x0001, // TODO (used: special scripts?)
    }
    enum ANIMATION_ALL {
        INVISIBLE = 0x0010,

        DEFAULT = 0x8000,
        
        WALK_FORWARD = 0x8002,
        RUN_FORWARD = 0x8004,
        
        SLASH_1 = 0x8006,
        SLASH_2 = 0x8008,
        SLASH_3 = 0x800a,
        SLASH_1_3 = 0x800c,

        KNOCKBACK = 0x800e,

        CAST = 0x8014,
        BLOCK = 0x8016,

        SMALL = 0x001e, // unused/buggy

        // ENEMIES ONLY: 8010, 8012
        // CRASH: 8018, 801a, 801c, 801e
    }
    enum ANIMATION_MODE {
        ONCE = 0x00,
        ONCE_FREEZE = 0x02,
        LOOP = 0x04,
        FREEZE = 0x06,

        PAUSE = 0x0a,
    }
    enum FLAG_ENEMY {
        NORMAL = 0x0000,
        INACTIVE_INVISIBLE = 0x0001,
        INVINCIBLE = 0x0002, // set for most NPCs
        INACTIVE = 0x0020, // same as control(â€¦)
        MOSQUITO = 0x0040,
        PHASING = 0x0400,
        INVISBLE_INVINCIBLE_INACTIVE = 0x1000,

        INACTIVE_IMORTAL = 0x0022,

        // special
        STONE_LEVITATE = 0x0002,
        STONE_LEVITATE_INVISIBLE = 0x0005,
        BOMBABLE = 0x0004,
    }
    enum ANIMATION_PLACEHOLDER {
        // effects
        EXPLOSION_1 = 0x0002,
        EXPLOSION_2 = 0x0004,
        EXPLOSION_3 = 0x0006,

        EXPLOSION_GREEN_1 = 0x0104,
        EXPLOSION_GREEN_2 = 0x0106,
        EXPLOSION_GREEN_3 = 0x0108,

        GORE_GREEN = 0x0090,
        GORE_RED = 0x0092,
        GORE_EXPLODE = 0x0094,

        TELEPORT_OUT = 0x00c8,
        TELEPORT_IN = 0x00ca,

        LEAVES_FALLING_1 = 0x0008,
        LEAVES_FALLING_2 = 0x000a,

        // objects
        LAVA_BLUB = 0x00b0,

        ENERGY_CORE_CLOSED = 0x00bc,
        ENERGY_CORE_OPENING = 0x00be,
        ENERGY_CORE_OPEN = 0x00c0,

        LIFT_MOVING = 0x0070,

        LIFT_CORD_VERTICAL = 0x00aa,

        ELEVATOR = 0x00b4,

        BUCKET = 0x00e4,

        WINDWALKER_IDLE = 0x014e,

        SPACESHIP_IDLE = 0x0144,
        SPACESHIP_BACK = 0x0146,
        SPACESHIP_TOP = 0x0148,
        SPACESHIP_FIRE_PARTS_1 = 0x014a,
        SPACESHIP_FIRE_PARTS_2 = 0x014c,

        ROCKET_IDLE = 0x0198,

        SHELL_BOAT = 0x006e,

        PILLAR_VIGOR = 0x009a,

        SKELETON_SHIP_1 = 0x009c,
        SKELETON_SHIP_2 = 0x009e,
        SKELETON_SHIP_3 = 0x00a0,
        SKELETON_SHIP_ROW_1 = 0x00a2,
        SKELETON_SHIP_ROW_2 = 0x00a4,

        AEGIS_MASK_1 = 0x00c6,
        AEGIS_MASK_2 = 0x00c2,
        AEGIS_MASK_3 = 0x00c4,

        DIAMOND_EYE_1 = 0x019a,
        DIAMOND_EYE_2 = 0x019c,

        CROWN = 0x0100,
        SCEPTER = 0x0102,

        POT = 0x0196,

        // npcs
        EVIL_HORACE_BACK_1 = 0x00a6,
        EVIL_HORACE_BACK_2 = 0x00a8,
        EVIL_HORACE_SHRUG = 0x0180,
        EVIL_HORACE_LAUGHING = 0x0182,

        EVIL_FIRE_EYES_TURNING = 0x00ac,

        FIRE_EYES_CAST = 0x0096,

        EVIL_QUEEN_FALLING = 0x0162,
        EVIL_QUEEN_ANGRY = 0x0164,
        EVIL_QUEEN_STANDING = 0x0160, // unused/buggy

        COLLOSEUM_VILLAGER_1 = 0x0098,

        MARKET_2_VILLAGER_1 = 0x011a,
        MARKET_2_VILLAGER_2 = 0x011c,

        COOK_RUNNING = 0x0116,
        COOK_COOKING = 0x0118,

        PIG_RUNNING = 0x00dc,
        PIG_STAND = 0x00de,

        PIGOODLE_RUNNING_SOUTH = 0x00d4,
        PIGOODLE_RUNNING_EAST = 0x00d6,
        PIGOODLE_RUNNING_WEST = 0x00d8,
        PIGOODLE_STAND = 0x00da,

        // environment
        SANDPIT_OUT = 0x000e,

        // podunk old
        PODUNK_VILLAGER_1 = 0x0128,
        PODUNK_VILLAGER_2 = 0x0190,
        PODUNK_VILLAGER_3 = 0x0192,

        CAT_CLEANING_1 = 0x012c,
        CAT_CLEANING_2 = 0x012e,
        CAT_LOOKING = 0x0130,
        CAT_RUNNING = 0x0132,

        DOVES_1 = 0x018c, // 1 right looking
        DOVES_2 = 0x018e, // 2 right looking
        DOVES_3 = 0x018a, // 1 right looking

        // podunk new
        PODUNK_VILLAGER_4 = 0x0134,
        PODUNK_VILLAGER_5 = 0x0194,

        // intro
        SPARK_LEFT = 0x0184,
        LOGO = 0x0186

        // UNIDENTIFIED: 1e, 7e (butterfly-esque), 114 (half the cooks face?)
        // INVISIBLE: 0e, 12, 12a
        // CRASH: 72, 74, 1a2, 1a8
    }
    enum FLAG {
        // system

        EMPTY_SRAM = <0x22ea, 0x04>, // intro skip

        SHOW_HUD = <0x22ea, 0x80>, // requires update_ui();

        DEBUG = <0x22eb, 0x08>,
        INTRO_DEMO_MODE = <0x22eb, 0x04>, // ?

        START_PRESSED = <0x22eb, 0x02>,

        IN_ANIMATION = <0x22eb, 0x20>, // 1 = animation/init room (also means that the boy didn't enter through a regular room transition)

        DOG_UNAVAILABLE = <0x2261, 0x01>,
        BOY_UNAVAILABLE = <0x2261, 0x02>,

        WINDWALKER_UNLOCKED = <0x22dc, 0x08>,

        // items

        // charms
        ARMOR_POLISH = <0x2261, 0x20>,
        CHOCOBO_EGG = <0x2261, 0x40>,
        INSECT_INCENSE = <0x2261, 0x80>,

        JADE_DISK = <0x2262, 0x01>,
        JAGUAR_RING = <0x2262, 0x02>,
        MAGIC_GOURD = <0x2262, 0x04>,
        MOXA_STICK = <0x2262, 0x08>,
        ORACLE_BONE = <0x2262, 0x10>,
        RUBY_HEART = <0x2262, 0x20>,
        SILVER_SHEATH = <0x2262, 0x40>,
        STAFF_OF_LIFE = <0x2262, 0x80>,

        SUN_STONE = <0x2263, 0x01>,
        THUGS_CLOAK = <0x2263, 0x02>,
        WIZARDS_COIN = <0x2263, 0x04>,

        DIAMOND_EYE = <0x2264, 0x01>,
        DIAMOND_EYES = <0x2264, 0x02>,
        GAUGE = <0x2264, 0x04>,
        WHEEL = <0x2264, 0x08>,
        QUEENS_KEY = <0x2264, 0x10>,
        ENERGY_CORE = <0x2264, 0x20>,

        // alchemy
        ACID_RAIN = <0x2258, 0x01>,
        ATLAS = <0x2258, 0x02>,
        BARRIER = <0x2258, 0x04>,
        CALL_UP = <0x2258, 0x08>,
        CORROSION = <0x2258, 0x10>,
        CRUSH = <0x2258, 0x20>,
        CURE = <0x2258, 0x40>,
        DEFEND = <0x2258, 0x80>,

        DOUBLE_DRAIN = <0x2259, 0x01>,
        DRAIN = <0x2259, 0x02>,
        ENERGIZE = <0x2259, 0x04>,
        ESCAPE = <0x2259, 0x08>,
        EXPLOSION = <0x2259, 0x10>,
        FIREBALL = <0x2259, 0x20>,
        FIRE_POWER = <0x2259, 0x40>,
        FLASH = <0x2259, 0x80>,

        FORCE_FIELD = <0x225a, 0x01>,
        HARD_BALL = <0x225a, 0x02>,
        HEAL = <0x225a, 0x04>,
        LANCE = <0x225a, 0x08>,
        LASER = <0x225a, 0x10>,
        LEVITATE = <0x225a, 0x20>,
        LIGHTNING_STORM = <0x225a, 0x40>,
        MIRACLE_CURE = <0x225a, 0x80>,

        NITRO = <0x225b, 0x01>,
        ONE_UP = <0x225b, 0x02>,
        REFLECT = <0x225b, 0x04>,
        REGROWTH = <0x225b, 0x08>,
        REVEALER = <0x225b, 0x10>,
        REVIVE = <0x225b, 0x20>,
        SLOW_BURN = <0x225b, 0x40>,
        SPEED = <0x225b, 0x80>,

        STING = <0x225c, 0x01>,
        STOP = <0x225c, 0x02>,
        SUPER_HEAL = <0x225c, 0x04>,

        // weapons
        SWORD_1 = <0x22DA, 0x02>, // "Bone Crusher"
        SWORD_2 = <0x22DA, 0x04>, // "Gladiator Sword"
        SWORD_3 = <0x22DA, 0x08>, // "Crusader Sword"
        SWORD_4 = <0x22DA, 0x10>, // "Neutron Blade"

        AXE_1 = <0x22DA, 0x20>, // "Spider's Claw"
        AXE_2 = <0x22DA, 0x40>, // "Bronze Axe"
        AXE_3 = <0x22DA, 0x80>, // "Knight Basher"
        AXE_4 = <0x22DB, 0x01>, // "Atom Smasher"

        SPEAR_1 = <0x22DB, 0x02>, // "Horn Spear"
        SPEAR_2 = <0x22DB, 0x04>, // "Bronze Spear"
        SPEAR_3 = <0x22DB, 0x08>, // "Lance"
        SPEAR_4 = <0x22DB, 0x10>, // "Laser Lance"

        BAZOOKA = <0x22DB, 0x20>, // "Bazooka"

        // loot

        LOOT_SUCCESSFUL = <0x22ea, 0x01>,

        // VANILLA

        // bosses

        RAPTORS = <0x225f, 0x40>,
        THRAXX = <0x2260, 0x10>,
        MAGMAR = <0x2260, 0x40>,
        SALABOG = <0x22f3, 0x20>,

        // events

        FLOWERS_CUTSCENE_WATCHED = <0x22ab, 0x40>,

        BLIMP_BRIDGE = <0x225f, 0x01>,

        // gourds

        GOURD_1 = <0x2268, 0x40>,
    }
    enum TRANSITION_DIRECTION {
        NORTH = 0x04,
        EAST = 0x01,
        SOUTH = 0x03,
        WEST = 0x02,

        // todo: 00, 05, 0f, 10, 11, 12
    }
    enum DIRECTION {
        NORTH = 0x26,
        EAST = 0x1d,
        SOUTH = 0x21,
        WEST = 0x19,
        
        NONE = 0x00,
        UNKNOWN = 0x01
    }
    enum MEMORY {
        // currency
        TALONS = <0x0ac6>,
        JEWELS = <0x0ac9>,
        GOLD = <0x0acc>,
        CREDITS = <0x0acf>,

        CURRENCY_CURRENT = (Byte) <0x2348>,

        PACIFIED = <0x23bf>,
        FAKE_HOUSE_ID = <0x234b>,

        DOG_WRITE = <0x2443>,
        DOG_READ = <0x2363>,
        QUESTION_ANSWER = <0x289d>,
        STRING_PARAMETER_1 = <0x2537>,
        STRING_PARAMETER_2 = <0x2539>,
        STRING_PARAMETER_3 = <0x253b>,

        // enemies
        NEXT_ENEMY_FOLLOWS_ENTITY = <0x2533>, // consumed after an enemy was added (e.g. BEE, CHAMELEON)

        NEXT_DAMAGE_NO_KNOCKBACK = <0x23d5>,
        
        Z_AFTER_TELEPORT = <0x23db>, // redundant with "entity[Z_LEVEL] = z;"

        // sniff spot looting
        LOOT_ITEM = <0x2391>,
        LOOT_OBJECT = <0x2395>,
        LOOT_AMOUNT_CURRENCY = <0x2393>,
        LOOT_AMOUNT = <0x2461>,
        
        ENTITY_1 = <0x2835>,
        ENTITY_2 = <0x2837>,
        ENTITY_3 = <0x2839>,
        ENTITY_4 = <0x283b>,
        ENTITY_5 = <0x283d>,
        LAST_ENTITY = <0x0341>,

        BOY_LEVEL = <0x0A50>,
        BOY_CURRENT_HP = <0x4EB3>,
        BOY_XP_REQUIRED = <0x4F1D>,

        DOG_LEVEL = <0x0A9A>,
        DOG_XP_REQUIRED = <0x4FCB>,

        ENEMY_SPAWNER_QUANTITY = <0x2433>,
        ENEMY_SPAWNER_UNKNOWN_1 = <0x23c5>, // mostly 0x0280, once 0x0500
        ENEMY_SPAWNER_UNKNOWN_2 = <0x23dd>, // mostly 0x0000 and 0xffff, once 0x0064

        WINDWALKER_TYPE = <0x2355>,

        // music
        // CURRENT_MUSIC = <0x0E4B>, // buggy

        // weapons
        GAIN_WEAPON = <0x2441>,
        CURRENT_WEAPON = (Byte) <0x235F>,

        // vendor

        VENDOR_RECOMMEND_CURRENCY_CHANGE = <0x240d>, // updated with call_id(VENDOR_RECOMMEND_CURRENCY_CHANGE);, 0->recommend change
        VENDOR_SHOP_ITEMS_BUY = <0x2459>,
        VENDOR_SHOP_ITEMS_SELL = <0x2457>,
        VENDOR_ENTITY = <0x2455>, // center of the ring menu

        // map

        // CURRENT_MAP = (Byte) <0x0ADB>, // buggy, shows unknown memory

        CHANGE_MUSIC = <0x238d>,

        MAP_PALETTE = <0x2437>, // thraxx (0=orange, 7=white), waterfall (7=normal, 0=?), ivor/ebon (7=ebon/ivor, 4=?), greenhouse (6=dark?), storage (7=dark?)

        CAMERA_X_MIN = <0x2401>,
        CAMERA_X_MAX = <0x2403>, // CAMERA_X_MIN + 0d256
        CAMERA_Y_MIN = <0x2405>,
        CAMERA_Y_MAX = <0x2407>, // CAMERA_Y_MIN + 0d224

        CAMERA_BOUNDRY_X_START = <0x23e9>,
        CAMERA_BOUNDRY_X_END = <0x23ed>,
        CAMERA_BOUNDRY_Y_START = <0x23eb>,
        CAMERA_BOUNDRY_Y_END = <0x23ef>,

        CAMERA_PAN_X = <0x242b>,
        CAMERA_PAN_Y = <0x242d>,
        CAMERA_PAN_SPEED = <0x242f>, // default=0x80

        FOREGROUND_OFFSET_X = <0x241b>, // only used in dark forest
        FOREGROUND_OFFSET_Y = <0x241d>,

        TRANSITION_ENTER_DIRECTION = <0x238f>,

        // NPCs

        SHOP_RING_MENU_AND_POSITION_ID = <0x2459>,

        // ingredients

        WAX = (Byte) <0x22ff>,
        WATER = (Byte) <0x2300>,
        VINEGAR = (Byte) <0x2301>,
        ROOT = (Byte) <0x2302>,
        OIL = (Byte) <0x2303>,
        MUSHROOM = (Byte) <0x2304>,
        MUD_PEPPER = (Byte) <0x2305>,
        METEORITE = (Byte) <0x2306>,
        LIMESTONE = (Byte) <0x2307>,
        IRON = (Byte) <0x2308>,
        GUNPOWDER = (Byte) <0x2309>,
        GREASE = (Byte) <0x230a>,
        FEATHER = (Byte) <0x230b>,
        ETHANOL = (Byte) <0x230c>,
        DRY_ICE = (Byte) <0x230d>,
        CRYSTAL = (Byte) <0x230e>,
        CLAY = (Byte) <0x230f>,
        BRIMSTONE = (Byte) <0x2310>,
        BONE = (Byte) <0x2311>,
        ATLAS_AMULET = (Byte) <0x2312>,
        ASH = (Byte) <0x2313>,
        ACORN = (Byte) <0x2314>,

        // consumables
        PETAL = (Byte) <0x2315>,
        NECTAR = (Byte) <0x2316>,
        HONEY = (Byte) <0x2317>,
        DOG_BISCUIT = (Byte) <0x2318>,
        WINGS = (Byte) <0x2319>,
        HERBAL_ESSENCE = (Byte) <0x231a>,
        PIXIE_DUST = (Byte) <0x231b>,
        CALL_BEADS = (Byte) <0x231c>,

        // armor
        ARMOR_1_1 = (Byte) <0x231d>,
        ARMOR_1_2 = (Byte) <0x231e>,
        ARMOR_1_3 = (Byte) <0x231f>,
        ARMOR_2_1 = (Byte) <0x2320>,
        ARMOR_2_2 = (Byte) <0x2321>,
        ARMOR_2_3 = (Byte) <0x2322>,
        ARMOR_3_1 = (Byte) <0x2323>,
        ARMOR_3_2 = (Byte) <0x2324>,
        ARMOR_3_3 = (Byte) <0x2325>,
        ARMOR_4_1 = (Byte) <0x2326>,
        ARMOR_4_2 = (Byte) <0x2327>,
        ARMOR_4_3 = (Byte) <0x2328>,
        HELM_1_1 = (Byte) <0x2329>,
        HELM_1_2 = (Byte) <0x232a>,
        HELM_1_3 = (Byte) <0x232b>,
        HELM_2_1 = (Byte) <0x232c>,
        HELM_2_2 = (Byte) <0x232d>,
        HELM_2_3 = (Byte) <0x232e>,
        HELM_3_1 = (Byte) <0x232f>,
        HELM_3_2 = (Byte) <0x2330>,
        HELM_3_3 = (Byte) <0x2331>,
        HELM_4_1 = (Byte) <0x2332>,
        HELM_4_2 = (Byte) <0x2333>,
        HELM_4_3 = (Byte) <0x2334>,
        ARMBAND_1_1 = (Byte) <0x2335>,
        ARMBAND_1_2 = (Byte) <0x2336>,
        ARMBAND_1_3 = (Byte) <0x2337>,
        ARMBAND_2_1 = (Byte) <0x2338>,
        ARMBAND_2_2 = (Byte) <0x2339>,
        ARMBAND_2_3 = (Byte) <0x233a>,
        ARMBAND_3_1 = (Byte) <0x233b>,
        ARMBAND_3_2 = (Byte) <0x233c>,
        ARMBAND_3_3 = (Byte) <0x233d>,
        ARMBAND_4_1 = (Byte) <0x233e>,
        ARMBAND_4_2 = (Byte) <0x233f>,
        ARMBAND_4_3 = (Byte) <0x2340>,
        COLLAR_1 = (Byte) <0x2341>,
        COLLAR_2 = (Byte) <0x2342>,
        COLLAR_3 = (Byte) <0x2343>,
        COLLAR_4 = (Byte) <0x2344>,

        // ammo
        AMMO_1 = (Byte) <0x2345>,
        AMMO_2 = (Byte) <0x2346>,
        AMMO_3 = (Byte) <0x2347>,

        ANNIHILATION_AMULET = <0x2517>,
        BEAD = <0x2519>,
        CERAMIC_POT = <0x251b>,
        CHICKEN = <0x251d>,
        GOLDEN_JACKAL = <0x251f>,
        JEWELED_SCARAB = <0x2521>,
        LIMESTONE_TABLET = <0x2523>,
        PERFUME = <0x2525>,
        RICE = <0x2527>,
        SPICE = <0x2529>,
        SPOON = <0x252b>,
        TAPESTRY = <0x252d>,
        TICKET_FOR_EXHIBITION = <0x252f>,

        // alchemy
        ALCHEMY_REWARD_PRESELECTION = <0x2445>,

        SELECTED_ALCHEMY_0 = (Byte) <0x0ADA>,
        SELECTED_ALCHEMY_1 = (Byte) <0x0AD9>,
        SELECTED_ALCHEMY_2 = (Byte) <0x0AD8>,
        SELECTED_ALCHEMY_3 = (Byte) <0x0AD7>,
        SELECTED_ALCHEMY_4 = (Byte) <0x0AD6>,
        SELECTED_ALCHEMY_5 = (Byte) <0x0AD5>,
        SELECTED_ALCHEMY_6 = (Byte) <0x0AD4>,
        SELECTED_ALCHEMY_7 = (Byte) <0x0AD3>,
        SELECTED_ALCHEMY_8 = (Byte) <0x0AD2>,

        ALCHEMY_LEVEL_ATLAS = <0x2F9a>, // max=10
        ALCHEMY_LEVEL_DEFEND = <0x2FA6>, // max=10? good=3
        ALCHEMY_LEVEL_SPEED = <0x2Fd6>, // max=2? good=1, but buggy?

        // weapon level
        LEVEL_FIST = <0x0ADD>, // unused
        LEVEL_BAZOOKA = <0x0AF7>,
        LEVEL_DOG = <0x0B07>,
        LEVEL_1_SWORD = <0x0ADF>, // bone crusher
        LEVEL_1_AXE = <0x0AE7>,
        LEVEL_1_SPEAR = <0x0AEF>,
        LEVEL_2_SWORD = <0x0AE1>,
        LEVEL_2_AXE = <0x0AE9>,
        LEVEL_2_SPEAR = <0x0AF1>,
        LEVEL_3_SWORD = <0x0AE3>,
        LEVEL_3_AXE = <0x0AEB>,
        LEVEL_3_SPEAR = <0x0AF3>,
        LEVEL_4_SWORD = <0x0AE5>,
        LEVEL_4_AXE = <0x0AED>,
        LEVEL_4_SPEAR = <0x0AF5>,

        // rooms
        DARK_FOREST_XY = <0x2835>,
        DARK_FOREST_LAYOUT = <0x2839>,

        DESERT_X = (Byte) <0x22fd>,
        DESERT_Y = (Byte) <0x22fc>,

        // fade effect (used for wings and cutscenes)
        FADE_X = <0x23ad>, // usually 0x80 (center)
        FADE_Y = <0x23af>, // usually 0x70 (center)
        FADE_START = <0x23b1>, // usually 0xff (closing) or 0d2 (opening)
        FADE_STEP = <0x23b3>, // usually -0d3 (closing) or 0d3 (opening)
        FADE_TRIGGER = <0x23b5>, // usually 0d1 (TODO: sometimes 0-4 are being used), causes a lot of lag

        // debug
        DEBUG_MENU_COUNT = <0x0f5a>,

        // reserved/hack (not part of the original engine)
        CURRENT_MUSIC = <0x2445>, // originally "<0x0E4B>"
        MUSIC_STACK_1 = <0x2447>,
        MUSIC_STACK_2 = <0x2449>,
        MUSIC_STACK_3 = <0x244b>,
        MUSIC_STACK_4 = <0x244d>,

        CURRENT_MAP = <0x244f>, // originally "(Byte) <0x0ADB>"
        CURRENT_MAP_VARIANT = <0x2451>, // has to be set during the transition, before the room was entered
        CURRENT_MAP_ENTRANCE_ID = <0x2453>,

        RETURN = <0x2455>,
        INPUT_P1 = <0x2457>,

        // unknown
        UNKNOWN_ETERNAL_DUST_DROP_PROPERTY = <0x23d9>, // used in: boss rush (1=for eternal dust drops)

        UNKNOWN_1 = <0x23c1>, // used in: sandpits, bugmuck, bbm_2, swamp, pipemaze_rooms, waterfall, swamp_bridge, greenhouse (1=?)
        UNKNOWN_2 = <0x23d7>, // used in: sterling grab, reactor room (1=?)
    }

    enum MAP {
        // ACT 0

        PODUNK_65 = 0x31,
        MANSION_65 = 0x02,
        PODUNK_95 = 0x32,
        MANSION_95 = 0x03,
        
        // ACT 1

        // south jungle
        FLOWERS = 0x38,
        STRONGHEART_EXTERIOR = 0x33,
        STRONGHEART = 0x34,
        RAPTORS = 0x5c,

        // village
        VILLAGE = 0x25,
        VILLAGE_HUTS = 0x51,
        DEFEND = 0x26,

        // east jungle
        EAST_JUNGLE = 0x5b,
        FIREPIT_JUNGLE = 0x36,
        SANDPITS = 0x59,
        ACID_RAIN = 0x5a,
        BUGMUCK = 0x67,
        BBM_1 = 0x16,
        BBM_2 = 0x17,
        THRAXX = 0x18,

        // north jungle
        NORTH_JUNGLE = 0x41,
        GRAVEYARD = 0x27,
        VOLCANO_PATH = 0x69,
        VOLCANO_TOP = 0x52,
        SKY = 0x50,
        SWAMP_ENTRANCE = 0x66,
        SWAMP = 0x65,
        SALABOG = 0x01,
        VOLCANO_ROOMS = 0x3c,
        VOLCANO = 0x3b,
        PIPEMAZE = 0x3d,
        PIPEMAZE_ROOMS = 0x3e,
        MAGMAR = 0x3f,

        // ACT 2

        // crusticia
        CUTSCENE_RIVER = 0x53,
        CUTSCENE_WATERFALL = 0x6a,

        CRUSTICIA = 0x68,
        CRUSTICIA_CAVES = 0x30,

        // east
        BLIMP_EXTERIOR = 0x4f,
        BLIMP = 0x2e,
        FIREPIT_BEACH = 0x04,
        DESERT = 0x1b,

        // nobilia
        NOBILIA_MARKET = 0x0a,
        NOBILIA_NORTH = 0x1c,
        NOBILIA_SQUARE = 0x08,
        AEGIS = 0x09,
        FIREPIT_NOBILIA = 0x3a,
        NOBILIA_HOUSES = 0x0c,

        ARENA_ROOM = 0x1e,
        ARENA = 0x1d,

        PALACE_SNAKES = 0x4c,
        PALACE_EXTERIOR = 0x0b,
        PALACE = 0x4d,
        
        // west
        RIVER = 0x07,
        CROSSING = 0x05,
        HORACE = 0x2f,
        WATERFALL = 0x6b,
        OGLIN_CAVE = 0x4b,
        AQUAGOTH = 0x6d,

        HALLS_EXTERIOR = 0x2b,
        HALLS_CENTER = 0x29,
        HALLS_NW = 0x24,
        HALLS_SE = 0x2c,
        HALLS_SW = 0x23,
        HALLS_BRIDGE = 0x28,
        HALLS_NE = 0x2d,
        MEGATAUR = 0x2a,

        PYRAMID_EXTERIOR = 0x06,
        PYRAMID_CAVE = 0x64,
        TINY = 0x57,
        PYRAMID_1 = 0x55,
        PYRAMID_2 = 0x56,
        RIMSALA = 0x58,

        // ACT 3

        WELL = 0x6c,
        GATE = 0x76,

        FOOTKNIGHT = 0x19,
        CHESSBOARD_STAIRS = 0x1a,
        DARK_FOREST_ENTRANCE = 0x21,
        DARK_FOREST = 0x22,
        BAD_BOYS = 0x1f,
        TIMBERDRAKE = 0x20,
        CROSSING_ACT3 = 0x13,
        SWAMP_BRIDGE = 0x40,
        STERLING = 0x37,

        // ivor+ebon

        IVOR_EBON_1 = 0x7b,
        IVOR_EBON_2 = 0x7c,
        IVOR_EBON_HOUSES = 0x7d,
        IVOR_EBON_PRISON = 0x74,

        // ivor

        IVOR_MARKET = 0x4e,
        IVOR_TRAILERS_EXTERIOR = 0x62,
        IVOR_TRAILERS_INTERIOR = 0x63,

        IVOR_HALL = 0x6e,
        IVOR_THRONE = 0x78,
        MUNGOLA = 0x77,
        IVOR_BANQUET = 0x6f,
        IVOR_BRIDGE = 0x70,
        IVOR_ROOMS_1 = 0x71,
        IVOR_ROOMS_2 = 0x72,
        DOG_MAZE = 0x73,
        IVOR_STAIRS = 0x75,
        IVOR_SEWERS = 0x79,
        IVOR_SEWERS_EXTERIOR = 0x7a,

        // ebon

        EBON_COURT = 0x5d,
        EBON_COURT_SIDEROOMS = 0x5f,
        VERMINATOR = 0x5e,
        EBON_CELLAR = 0x60,
        EBON_HALL = 0x0d,
        EBON_SEWERS = 0x12,
        EBON_BANQUET = 0x0e,
        NARIS = 0x0f,
        EBON_THRONE = 0x11,
        EBON_GLASS = 0x10,
        TINKER = 0x14,
        TINKER_EXTERIOR = 0x39,

        // ACT 4

        OMNITOPIA_JUNKYARD = 0x49,
        OMNITOPIA_JAIL = 0x7e,
        OMNITOPIA_METROPLEX = 0x48,

        // omnitopia rooms

        OMNITOPIA_SHOPPING = 0x54,
        OMNITOPIA_CONTROL = 0x43,
        FACE = 0x45,
        OMNITOPIA_REACTOR = 0x42,
        OMNITOPIA_STORAGE = 0x47,
        OMNITOPIA_GREENHOUSE = 0x44,
        OMNITOPIA_ALARM = 0x00,
        OMNITOPIA_PROFESSOR = 0x46,
        CARLTRON = 0x4a,
        
        // MISC

        ACT1_2_CAVES = 0x35,
        BRIAN = 0x15,

        // special
        OPENING = 0x61,
        START = 0x00,
    }
    enum CHARACTER {
        BOY = 0x50,
        DOG = 0x51,
        ACTIVE = 0x52,
        INACTIVE = 0x53,

        LAST_ENTITY = 0x2d,
        SCRIPT_OWNER = 0x2e,

        RANDOM = 0x2a,

        CAMERA_PAN_Y = 0x32, // ?
        CAMERA_PAN_X = 0x34, // ?

        // custom
        BOTH = 0x00,
        NONE = 0x01,
    }
    enum ENEMY {
        // npc - act 1
        FIRE_EYES = 0x15, // #12, "Fire Eyes"
        EVIL_FIRE_EYES = 0x16, // #13, "Evil Fire Eyes"
        BLIMP = 0x17, // #11, "Harry"
        HARRY = 0x34, // #46, "Harry"
        
        VILLAGER_1_1 = 0x04, // #3, "Girl", girl, teal hair, bone in hair (lizard girl)
        VILLAGER_1_2 = 0x05, // #2, "Boy", boy, green hair (bee boy)
        VILLAGER_1_3 = 0x06, // #5, "Worman", woman, fruit in hair (consumables vendor)
        VILLAGER_1_4 = 0x07, // #4, "Man", man, green hair, no shirt (fire eye guard)
        VILLAGER_1_5 = 0x08, // #7, "Old woman", woman, teal hair, pink dress
        VILLAGER_1_6 = 0x09, // #6, "Old man", man, green hair, beard, bone as cain
        VILLAGER_1_7 = 0x12, // #10, "Alchemy", man, green hair, beard (hard ball guy) (palette conflict: tumbling_weed)
        VILLAGER_1_8 = 0x7e, // #35, "Strongheart", same as ^

        BEE = 0x02, // #8, "Child's Pet"
        CHAMELEON = 0x03, // #9, "Child's Pet"

        // npc - act 2
        HORACE = 0x45, // #22, "Horace"
        HORACE_EVIL = 0x62, // #37, "Horace's Twin"
        TINY = 0x46, // #45, "Tiny"

        VILLAGER_2_1 = 0x18, // #14, "Boy", boy, dark hair
        VILLAGER_2_2 = 0x19, // #15, "Girl", girl, red hair
        VILLAGER_2_3 = 0x1a, // #16, "Man", man, dark hair, beard, laurel crown
        VILLAGER_2_4 = 0x1b, // #17, "Woman", woman, red hair
        VILLAGER_2_5 = 0x1c, // #18, "Old man", man, white hair, beard, purple scarf
        VILLAGER_2_6 = 0x1d, // #19, "Old woman", woman, headscarf (trading vendor)
        VILLAGER_2_7 = 0x31, // #20, "Advisor", man, dark hair, beard, laurel crown, orange scarf
        VILLAGER_2_8 = 0x32, // #21, "Alchemy", same as VILLAGER_2_5 (Sting guy? Madronius brother? Drain guy?)
        VILLAGER_2_9 = 0x33, // #36, "Madronius", man, white hair, beard, green scarf

        BOXER_1 = 0x2d, // #50, "Mad Monk", left
        BOXER_2 = 0x2e, // #49, "Mad Monk", right
        DRUNK_1 = 0x2f, // #48, "Mad Monk", left
        DRUNK_2 = 0x30, // #47, "Mad Monk", right

        // npc - act 3
        QUEEN = 0x4c, // #42, "Camellia Bluegarden"
        QUEEN_EVIL = 0x4b, // #43, "White Queen", default seems to be the jumping animation
        KING = 0x54, // #32, "Legendary King"
        TINKER = 0x58, // #40, "Tinker Tinderbox"
        TINKER_TWIN = 0x81, // #39, "Gomi"

        VILLAGER_3_1 = 0x48, // #44, "Barker", man, purple dress (well guy, freakshow guy)
        VILLAGER_3_2 = 0x51, // #29, "Legendary boy", boy, dark hair (naris)
        VILLAGER_3_3 = 0x52, // #30, "Legendary girl", girl, blonde hair, teddy bear
        VILLAGER_3_4 = 0x53, // #31, "Legendary Grandma", woman, white hair, purple dress (regrowth woman)
        VILLAGER_3_5 = 0x55, // #33, "Legendary Man", man, white hair (naris old)
        VILLAGER_3_6 = 0x56, // #34, "Legendary Viking", viking

        // npc - act 4
        PROFESSOR = 0x57, // #41, "Professor Ruffleberg"
        CARLTRON = 0x5f, // #38, "Carltron"

        // enemy - act 1
        MOSQUITO = 0x0f, // #113, "Mosquito", slash(1-3=fly right?)
        FLOWER_PURPLE = 0x0b, // #109, "Wimpy Flower", slash(1-3=default attack)

        SKELESNAIL = 0x26, // #98, "Skelesnail", slash(1-3=default attack)

        MAGGOT = 0x0e, // #112, "Maggot", slash(1-3=default attack)
        BONE_SNAKE = 0x0a, // #105, "Tar Skull", slash(1-3=default attack + stuck)

        FLOWER_ORANGE = 0x0c, // #108, "Carniflower"

        SPIDER = 0x22, // #100, "Widowmaker"
        LIZARD = 0x29, // #92, "Viper"

        RAPTOR_GREEN = 0x2b, // #89, "Raptor", slash(1-3=default attack)
        
        FRIPPO = 0x21, // #99, "Frippo", slash(1-3=default attack)

        LANTERN_LIGHT = 0x37, // #86, "Will o' the Wisp", slash(1-3=idle?)

        // enemy - act 2
        MONK = 0x28, // #94, "Mad Monk", slash(1-3=default attack)
        PIRATE_ANCHOR = 0x27, // #93, "Rogue", slash(1-3=default attack)

        SPIDER_YELLOW = 0x23, // #101, "Sand Spider"
        TUMBLING_WEED = 0x73, // #59, "Tumble Weed", slash(1-3=jumping?)
        BUZZARD_1 = 0x74, // #103, "Bone Buzzard"

        DANCING_DEVIL_1 = 0x76, // #65, "Dancin' Fool", slash(1-3=default attack)
        SLIME_GREEN = 0x70, // #62, "Lime Slime", slash(1-3=default attack)
        RAT_RED = 0x7c, // #81, "Rat", slash(1-3=idle?)

        PYRAMID_GUARDIAN_1 = 0x39, // #96, "Son of Anhur"
        MUMMY = 0x72, // #60, "Mummy Cat"
        SNAKE_STATUE_LEFT = 0x59, // #55, "Stone Cobra", right facing
        SNAKE_STATUE_RIGHT = 0x5a, // #54, "Stone Cobra", left facing

        BUZZARD_BLACK = 0x63, // #52, "Skullclaw"
        DOG_1_BLACK = 0x61, // #51, "Bad Dawg", slash(1-3=default attack)
        LANTERN_LIGHT_RED = 0x64, // #53, "Will o' the Wisp"

        OGLIN = 0x6e, // #56, "Oglin", slash(1-3=default attack)

        TENTACLE_WHIP = 0x3f, // #72, "Tentacle", slash(1-3=default attack)
        TENTACLE_SPIKE = 0x4a, // #73, "Tiny Tentacle", slash(1-3=default attack)
        SPARK = 0x40, // #75, "", slash(1-3=idle?)

        // enemy - act 3
        HEDGEHOG = 0x50, // #57, "Hedgadillo", slash(1-3=default attack)

        RAT = 0x42, // #80, "Rat", storage room
        
        RAPTOR_BLACK = 0x6b, // #90, "Raptor"
        SPIDER_GREEN = 0x24, // #102, "Wood Mite"
        GUARD_BOT = 0x4e, // #69, "Guardbot", slash(1-3=shoot)

        BUZZARD_2 = 0x82, // #104, "Skullclaw", slash(1-3=default attack?)

        DRAKE = 0x6d, // #125, "Gargon"

        DRAKE_GREEN = 0x89, // #126, "Dragoil"
        SLIME = 0x71, // #63, "Blue Goo"
        MAGGOT_RED = 0x77, // #111, "Gore Grub"
        
        DANCING_DEVIL_2 = 0x75, // #64, "Dancin' Fool", hall fight

        // enemy - act 4
        TENTACLE_WHIP_2 = 0x8c, // #133, "Tentacle"
        TENTACLE_SPIKE_2 = 0x8d, // #134, "Tiny Tentacle"

        OWL_GREEN = 0x78, // #66, "Neo Greeble", slash(1-2=stone, 3=transform)
        SLIME_PINK = 0x6f, // #61, "Red Jelly Ball"
        
        RIMSALA = 0x7b, // #84, "Rimsala", slash(1-3=idle)
        GATE_BOT = 0x66, // #128, "Sphere Bot", slash(1-3=chain fire)

        FLOWER_BLACK = 0x6a, // #107, "Flowering Death"
        MOSQUITO_BLACK = 0x7a, // #114, "Mosquito"
        FAN_BOT = 0x69, // #127, "Floating Fan", slash(1-3=idle?)

        RAPTOR_TEAL = 0x79, // #136, "Raptor" (boss rush)
        RIMSALA_2 = 0x83, // #138, "Eye of Rimsala"
        DUSTER_BOT = 0x4d, // #70, "Mechaduster", slash(1-3=idle + hitbox?)
        DUSTER_BOT_2 = 0x8b, // #132, "Mechaduster"
        SPIDER_BLACK = 0x25, // #137, "Death Spider"

        // boss - act 0
        GUARD_BOT_INTRO = 0x80, // #68, "Guardbot"

        // boss - act 1
        RAPTOR_PURPLE = 0x0d, // #110, "Raptor"

        THRAXX_HEART = 0x14, // #118, "Thraxx's heart", slash(1-3=crash?)
        THRAXX_LEFT_ARM = 0x10, // #123, "Left Claw", slash(1-3=default attack)
        THRAXX_RIGHT_ARM = 0x11, // #122, "Right Claw"

        LIZARD_BLACK = 0x2a, // #91, "Viper Commander", slash(1-3=tongue)

        SALABOG = 0x2c, // #106, "Salabog", slash(1-2=bite, 3=fire)

        MAGMAR = 0x35, // #87, "Magmar", slash(1=duck, 2=shoot, 3=shoot air)

        // boss - act 2
        VIGOR = 0x3d, // #82, "Vigor", slash(1=bident, 2=boomerang)

        MINITAUR = 0x38, // #97, "Mini-Taur", slash(1-3=stomp)

        MEGATAUR = 0x36, // #88, "Megataur", slash(1=stomp, 2-3=breathing)

        PYRAMID_GUARDIAN_2 = 0x3a, // #95, "Son of Set"

        RIMSALA_HOLDER = 0x3c, // #85, "Rimsla", slash(1-3=idle)
        RIMSALA_GOLD = 0x3b, // #83, "Rimsla", slash(1-3=idle)
        RIMSALA_STATUTE_ENTITY = 0x5b, // #27, "Statue"

        AEGIS_ENTITY = 0x47, // #71, "Aegis"

        AQUAGOTH_ENTITY = 0x3e, // #74, "Aquagoth"

        // boss - act 3
        FOOTKNIGHT = 0x49, // #78, "FootKnight", slash(1-3=idle?)

        // BOY_BLACK
        OWL_BLACK = 0x4f, // #67, "Greeble"

        FORESTDRAKE = 0x43, // #76, "Timberdrake", slash(1=biting, 2=spear idle, 3=wing flap)

        VERMINATOR = 0x41, // #79, "Verminator", slash(1-3=crash?)

        STERLING = 0x44, // #77, "Sterling", slash(1=spear idle, 2=biting, 3=wing flap)

        MUNGOLA_ENTITY = 0x6c, // #115, "Mungola"
        PUPPET_1 = 0x67, // #116, "Old Nick", slash(1=dance, 2=jump, 3=kick)
        PUPPET_2 = 0x68, // #117, "Mephista", slash(1=dance, 2=jump, 3=kick)

        THRAXX2_HEART = 0x84, // #119, "Coleoptera's heart"
        THRAXX2_LEFT_ARM = 0x85, // #121, "Left Claw"
        THRAXX2_RIGHT_ARM = 0x86, // #120, "Right Claw"

        // boss - act 4
        FACE_ENTITY = 0x7d, // #124, "Face"

        FAN_ENTITY = 0x5c, // #129, "Fan"
        SPEAKER_ENTITY = 0x5d, // #130, "Speaker"
        BOY_BLACK = 0x60, // #58, "Bad Boy", slash(1=sword level 1, 2=sword level 2, 3=sword level 3)
        DOG_4_BLACK = 0x8e, // #139, "Dark Toaster", slash(1-2=default attack, 3=charged attack)
        MAGMAR_METAL = 0x7f, // #140, "Magmar"
        CARLTRON_ROBOT = 0x87, // #141, "Carltron's Robot", slash(1-3=idle?)

        // special
        PLACEHOLDER = 0x20, // #25, used for explosions, windwalker, etc.

        REVEALER_TARGET_ENTITY = 0x5e, // #28, "Bridge"
        STONE = 0x1e, // #23, "Rock"
        STONE_ROUND = 0x1f, // #24, "Rock"

        BOMB = 0x65, // #135, "Bomb"

        // misc
        BOY = 0x00, // #0, "<Boy Name>", behaves weird
        DOG = 0x01, // #1, "<Dog Name>", behaves weird

        UNKNOWN_1 = 0x13, // #??, unused? invisible
        UNKNOWN_2 = 0x88, // #??, invisible, used for: palace grounds 3x, related to the dog fountain cutscene
        UNKNOWN_3 = 0x8f, // #??, unused?

        RAT_RED_HARMLESS = 0x8a, // #131, "Rat"

        // unknown IDs = #26/""
    }
    enum ATTRIBUTE {
        // See data crystals: 7E3DE5 to 7E4E88 = Monster/NPC data for the current room. Each Monster/NPC gets x8E bytes of data.

        POINTER_BEHAVIOR_CURRENT = 0x00, // ?

        POINTER_BEHAVIOR_BASE = 0x03, // ?

        POINTER_BODY_SPRITE_INFO = 0x06, // ? (3 bytes)
        POINTER_SHADOW_SPRITE_INFO = 0x09, // ? (3 bytes)

        PALETTE = 0x0b, // e.g. boy=0x000c, magmar=0x0004

        // used in the scripts
        MAX_HP = 0x0f, // <0x23e5>[0x0f] = boy max hp, <0x23e7>[0x0f] = dog max hp

        // see ATTRIBUTE_FLAGS (1 byte each)
        FLAGS_1 = 0x10,
        FLAGS_2 = 0x11,
        FLAGS_3 = 0x12,
        FLAGS_4 = 0x13,
        FLAGS_5 = 0x14,
        FLAGS_6 = 0x15,
        FLAGS_7 = 0x16,
        // positioning
        Z_LEVEL = 0x18, // used for stairs/bridges (0x10 = upper floor, 0x20 = lower floor, 0x60 = stairs?)
        X = 0x1a,
        Y = 0x1c,
        Z = 0x1e, // used for boss rush intro
        VELOCITY = 0x20, // used for wings (0xe0 signed), magmar, megataur, act2 intro, puppets, sterling flight
        FACE_DIRECTION = 0x22, // enum FACE_DIRECTION
        TARGET_LAST_WEAPON_DAMAGE = 0x24, // contains _entity_x
        X_TILE = 0x26,
        Y_TILE = 0x28,
        HP = 0x2a,

        STAMINA = 0x2e, // enum STAMINA (seems to instantly regenerate during some animations?)
        GENERAL_PURPOSE = 0x30, // DOES NOT RESET WHEN THE SPRITE CHANGES! used for secret boss bombs (set to 0 for exploded bombs) and speakers (indexed from 2^0 to 2^8)
        UNKNOWN = 0x32, // TODO: used for secret boss and boss rush fans
        DAMAGE_TYPE = 0x36, // used for vigor (weapon: 0x4e89, dog: 0x4F37, magic and default: 0x0000)
        CURRENT_GROUND = 0x3c, // good: 10 (80?, 28?, 23?, 24?, 48) bad: 31 (22?, 26?, 63?) TODO: used in ebon keep sewers (seems to be based on the tile the character stands on)

        // status effect #1
        STATUS_ID_1 = 0x46,
        STATUS_TIMER_1 = 0x48,
        STATUS_BONUS_1 = 0x4a,
        // status effect #2
        STATUS_ID_2 = 0x4c,
        STATUS_TIMER_2 = 0x4e,
        STATUS_BONUS_2 = 0x50,
        // status effect #3
        STATUS_ID_3 = 0x52,
        STATUS_TIMER_3 = 0x54,
        STATUS_BONUS_3 = 0x56,
        // status effect #4
        STATUS_ID_4 = 0x58,
        STATUS_TIMER_4 = 0x5a,
        STATUS_BONUS_4 = 0x5c,

        NEXT_ENTITY = 0x5e, // ?
        TYPE = 0x60, // see CHARACTER_TPYE

        ATTACHED_SCRIPT_ID = 0x66, // see "attach_script(â€¦)"
        ATTACHED_SCRIPT_TRIGGER = 0x68, // see SCRIPT_TRIGGER
        
        POINTER_STATUS_ICON_SPRITE = 0x6e, // ?

        LAST_DAMAGE = 0x76, // only available for one frame?

        SCALING_LEVEL = 0x8a, // hack: level offset for all stats, but hp
        UNKNOWN = 0x8c, // ffff makes the enemy despawn, when he is off screen

        ///////////////////////////////////////////////////////////////////////////////////////////
        // BOY/DOG SPECIFIC
        ///////////////////////////////////////////////////////////////////////////////////////////

        POINTER_STATUS_BAR_INFO = 0x8e, // ?
        
        TOTAL_XP_REQUIRED = 0x94,

        // outline
        OUTLINE_ID = 0x9a, // see OUTLINE, has to be set to be changed while OUTLINE_PROGRESS==0
        OUTLINE_CHOICE = 0x9c, // ?
        OUTLINE_PROGRESS = 0x9e, // 0â€¦30â€¦0 (MSB decides about the direction)
        // status effect boosts
        BOOST_ATTACK = 0xa0,
        BOOST_DEFEND = 0xa2,
        BOOST_HIT = 0xa4,
        BOOST_EVADE = 0xa6,
        // BOOST_MAGIC_DEFEND = 0x??,

        PIXIE_DUST = 0xac, // 0x0000->0x0001 while pixie dust is active

        ///////////////////////////////////////////////////////////////////////////////////////////
        // weird
        ///////////////////////////////////////////////////////////////////////////////////////////
        
        PALETTE_BLACK_GREEN = 0x00,
        INVISIBLE = 0x05,
        TILE_GLITCH_1 = 0x06,
        INVISIBLE_OR_TILE_GLITCH = 0x07,
        TILE_GLITCH_3 = 0x0a,
        PALETTE_BLACK_OR_TILE_GLITCH = 0x0c,
        TILE_GLITCH_4 = 0x0d,
        WEIRD_KNOCKBACK = 0x12,
        TURN_NORTH = 0x22,

        ///////////////////////////////////////////////////////////////////////////////////////////
        // special
        ///////////////////////////////////////////////////////////////////////////////////////////
        
        _BOY = 0x4E89,
        _DOG = 0x4F37,

        _entity_0_1 = 0x3de5,
        _entity_0_2 = 0x3e73,
        _entity_0_3 = 0x3f01,
        _entity_0_4 = 0x3f8f,
        _entity_0_5 = 0x401d,
        _entity_0_6 = 0x40ab,

        _entity_1 = 0x4139,
        _entity_2 = 0x41fd,
        _entity_3 = 0x4255,
        _entity_4 = 0x42E3,
        _entity_5 = 0x4371,
        _entity_6 = 0x43FF,
        _entity_7 = 0x448D,
        _entity_8 = 0x451B,
        _entity_9 = 0x45A9,
        _entity_10 = 0x4637,
        _entity_11 = 0x46C5,
        _entity_12 = 0x4753,
        _entity_13 = 0x47E1,
        _entity_14 = 0x486F,
        _entity_15 = 0x48FD,
        _entity_16 = 0x498B,
        _entity_17 = 0x4A19,
        _entity_18 = 0x4AA7,
        _entity_19 = 0x4B35,
        _entity_20 = 0x4BC3,
        _entity_21 = 0x4C51,
        _entity_22 = 0x4CDF,
        _entity_24 = 0x4DFB,
    }
    enum ATTRIBUTE_FLAGS {
        // ATTRIBUTE.FLAGS_1 (character+0x10)
        INVINCIBLE = 0x02, // see ATTRIBUTE_BITS.INVINCIBLE
        UNKNOWN = 0x04, // always set?
        DISABLED = 0x20, // examples: "control(NONE)", "walk(â€¦)"
        IN_ANIMATION = 0x40, // examples: ANIMATION_ALL.SLASH_1, "animate(â€¦)"
        UNKNOWN_2_1 = 0x80, // see ATTRIBUTE_BITS.UNKNOWN_2_1

        // ATTRIBUTE.FLAGS_2 (character+0x11)
        UNKNOWN = 0x01, // always set?
        LOADING_SCREEN = 0x08, // also ai following quickly?
        HEALED = 0x10, // examples: PETAL (Blue glow)
        NO_CLIP = 0x04, // see ATTRIBUTE_BITS.NO_CLIP
        INVINCIBLE_TEMP = 0x40, // see ATTRIBUTE_BITS.INVINCIBLE_TEMP

        // ATTRIBUTE.FLAGS_3 (character+0x12)
        AI_FOLLOWING = 0x04, // ai following?
        UNKNOWN_CAST = 0x38, // during cast on boy? (CRUSH, EXPLOSION, FLASH, FIREBALL)

        // ATTRIBUTE.FLAGS_4 (character+0x13
        ROOT = 0x01, // see ATTRIBUTE_BITS.ROOT
        UNKNOWN_CAST = 0x04, // during cast on boy? (CRUSH, EXPLOSION)
        SHIELD = 0x20, // shield halves damage
        UNKNOWN_1_2 = 0x40, // see ATTRIBUTE_BITS.UNKNOWN_1_2
        INVISIBLE = 0xc0, // see ATTRIBUTE_BITS.INVISIBLE
        
        // ATTRIBUTE.FLAGS_5 (character+0x14)
        AURA = 0x01, // aura invincibility
        FORCE_FIELD = 0x02, // force field prevents the next damage
        BARRIER = 0x04, // barrier invincibility
        ATLAS_GLITCH = 0x08, // atlas glitch invincibility
        REFLECT = 0x10, // reflect reflects all magic (spell target = source)
        MUTE = 0x20, // see ATTRIBUTE_BITS.MUTE

        // ATTRIBUTE.FLAGS_6 (character+0x15)
        WINGS = 0x01,
        DEAD = 0x04, // also set during KNOCKBACK, or being eaten by a flower
        AI_RUN = 0x08, // see ATTRIBUTE_BITS.AI_RUN
        CONFOUND = 0x40, // confound/disrupt reverse controls

        // ATTRIBUTE.FLAGS_7 (character+0x16)
        KNOCKBACK = 0x01, // also sets WALKING and DEAD?
        WALKING = 0x04,
        RUNNING = 0x08,
        IN_ANIMATION = 0x10,
        CASTING = 0x20, // also dodging?
    }

    fun param(value) {
        // writes arg0â€¦arg20

        if(value is Word) {
            if(value < 0x00) {
                code(0xd0 + value);
            } else if(value <= 0x0f) {
                code(0xb0 + value);
            } else if(value <= 0x1e) {
                code(0xd0 + value);
            } else if(value <= 0xff) {
                code(0x82, 0x00 + value); // TODO: only works with len(value)==1
            } else if(value <= 0xffff) {
                code(0x84, 0x0000 + value);
            }
        } else {
            calculate(value);
        }
    }

    fun entity_t(character:CHARACTER) {
        // sometimes writes arg0â€¦arg20

        if(character is Arg) {
            code(0x80 + 0x12, character);
        } else if(character is Word) {
            if(character >= 0x2834) {
                code(0x80 + 0x0d, character - 0x2834);
            } else if(character >= 0x2258) {
                code(0x80 + 0x08, character - 0x2258);
            } else {
                code(0x80 + character);
            }
        } else if(character is Memory) {
            calculate(character);
        }
    }
    fun animate(character:CHARACTER, mode:ANIMATION_MODE, id:ANIMATION_ALL) {
        code(0x78, entity_t(character), 0x0000 + id, param(mode), "// (78) UNTRACED INSTR for $2846, 0x0010 2 changes sprite/animation/...?");
    }
    fun end() {
        code(0x00, "// (00) END (return)");
    }
    fun entity_t(character:CHARACTER) {
        // sometimes writes arg0â€¦arg20

        if(character is Arg) {
            code(0x80 + 0x12, character);
        } else if(character is Word) {
            if(character >= 0x2834) {
                code(0x80 + 0x0d, character - 0x2834);
            } else if(character >= 0x2258) {
                code(0x80 + 0x08, character - 0x2258);
            } else {
                code(0x80 + character);
            }
        } else if(character is Memory) {
            calculate(character);
        }
    }
    fun destroy(character:CHARACTER) {
        if(character > 0x00) {
            code(0x9b, entity_t(character), "// (9b) DESTROY/DEALLOC ENTITY $283e");
        }
    }
    fun add_enemy(enemy:ENEMY, x, y, flags:FLAG_ENEMY) {
        if((x is Word) && (y is Word)) {
            if(flags is Word) {
                code(0x3c, 0x0000 + enemy * 0x02, 0x0000 + flags, x, y, "// (ba) LOAD NPC 0b at 49 79");
            } else {
                code(0xba, enemy, x, y, "// (ba) LOAD NPC 0b at 49 79");
            }
        } else {
            if(flags is Word) {
                code(0xa2, 0x0000 + enemy * 0x02, 0x0000 + flags, calculate((x) * 0x0008), calculate((y) * 0x0008), "// (a2) SPAWN NPC 0x00ca>>1, flags 0x20, x:$23b9, y:$23bb");
            } else {
                code(0xa2, 0x0000 + enemy * 0x02, 0x0000, calculate(x * 0x0008), calculate(y * 0x0008), "// (a2) SPAWN NPC 0x00ca>>1, flags 0x20, x:$23b9, y:$23bb");
            }
        }
    }
    fun yield() {
        code(0x3a, "// (3a) YIELD (break out of script loop, continue later)");
    }
    fun sleep(ticks) {
        if(ticks is Word) {
            if(ticks <= 0xff) {
                code(0xa7, ticks, "// (a7) SLEEP 59 TICKS");
            } else {
                code(0xa8, ticks, "// (a8) SLEEP 899 TICKS");
            }
        } else {
            code(0x3b, calculate(ticks), "// (3b) SLEEP (RAND & 3) + 4 TICKS");
        }
    }
    fun attach_to_script(character:CHARACTER) {
        code(0x4e, entity_t(character), "// (4e) ATTACH entity last entity ($0341) TO SCRIPT");
    }
    fun check_range(entity_1, entity_2, range, callback) {
        if(entity_1[X] < entity_2[X]) {
            arg[0x10] = entity_2[X] - entity_1[X];
        } else {
            arg[0x10] = entity_1[X] - entity_2[X];
        }

        if(entity_1[Y] < entity_2[Y]) {
            arg[0x12] = entity_2[Y] - entity_1[Y];
        } else {
            arg[0x12] = entity_1[Y] - entity_2[Y];
        }

        if((arg[0x10] <= range) && (arg[0x12] <= range)) {
            callback();
            sleep(0d300); // end();
        }
    }
    fun range_checker(entity_1, entity_2, range, callback) {
        attach_to_script(entity_1);

        while!(dead(<SCRIPT_OWNER>)) {
            check_range(<SCRIPT_OWNER>, entity_2, range, callback);

            yield();
        }
    }
    fun _add_placeholder(animation:ANIMATION_PLACEHOLDER, x, y, mode:ANIMATION_MODE) {
        _add_enemy(PLACEHOLDER, x, y, INVINCIBLE);
        
        if(mode is Word) {
            animate(LAST_ENTITY, mode, animation);
        } else {
            animate(LAST_ENTITY, LOOP, animation);
        }
    }
    fun add_placeholder(animation:ANIMATION_PLACEHOLDER, x, y, mode:ANIMATION_MODE) {
        add_enemy(PLACEHOLDER, x, y, INVINCIBLE);
        
        if(mode is Word) {
            animate(LAST_ENTITY, mode, animation);
        } else {
            animate(LAST_ENTITY, LOOP, animation);
        }
    }
    fun face(character:CHARACTER, direction:DIRECTION) {
        if(direction == DIRECTION.NORTH) {
            code(0x74, entity_t(character), "// (74) MAKE boy FACE NORTH");
        } else if(direction == DIRECTION.EAST) {
            code(0x77, entity_t(character), "// (77) MAKE boy FACE EAST");
        } else if(direction == DIRECTION.SOUTH) {
            code(0x75, entity_t(character), "// (75) MAKE boy FACE SOUTH");
        } else if(direction == DIRECTION.WEST) {
            code(0x76, entity_t(character), "// (76) MAKE boy FACE WEST");
        }
    }
    fun control(character:CHARACTER, control) {
        if(control is Word) {
            if(character == CHARACTER.BOY) {
                if(control) {
                    code(0xbd, "// (bd) BOY = Player controlled");
                } else {
                    code(0xbc, "// (bc) Stop/disable boy (and SELECT button)");
                }
            } else if(character == CHARACTER.DOG) {
                if(control) {
                    code(0xbf, "// (bf) DOG = Player controlled");
                } else {
                    code(0xbe, "// (be) Stop/disable doggo (and SELECT button)");
                }
            } else {
                if(control) {
                    code(0x2a, entity_t(character), "// (2a) Make $2841 script controlled");
                } else {
                    code(0x2b, entity_t(character), "// (2b) Make $2835 player/AI controlled");
                }
            }
        } else {
            if(character == CHARACTER.NONE) {
                code(0xc0, "// (c0) BOY+DOG = STOPPED");
            } else if(character == CHARACTER.BOTH) {
                code(0xc1, "// (c1) BOY+DOG = Player controlled");
            } else if(character == CHARACTER.BOY) {
                code(0xbd, "// (bd) BOY = Player controlled");
                code(0xbe, "// (be) Stop/disable doggo (and SELECT button)");
            } else if(character == CHARACTER.DOG) {
                code(0xbf, "// (bf) DOG = Player controlled");
                code(0xbc, "// (bc) Stop/disable boy (and SELECT button)");
            } else {
                if(control) {
                    code(0x2a, entity_t(character), "// (2a) Make $2841 script controlled");
                } else {
                    code(0x2b, entity_t(character), "// (2b) Make $2835 player/AI controlled");
                }
            }
        }
    }
    fun load_map(map, x, y) {
        code(0x22, x, y, map, 0x00, "// (22) CHANGE MAP = 0x34 @ [ 0x0090 | 0x0118 ]: ...");
    }
    fun transition(map:MAP, x, y, direction_in:DIRECTION, direction_out:DIRECTION, change_music, new_music:MUSIC) {
        if(False) {
            if(<ACTIVE>[Z] > 0d0) {
                end();
            }
        }

        if(False) {
            if(change_music) {
                music_fade(False);

                MEMORY.CHANGE_MUSIC = 0x01;
            }
        } else {
            if(new_music is Word) {
                if(MEMORY.CURRENT_MUSIC != new_music) {
                    music_fade(False);
                }
            }
        }

        attach_to_script(<ACTIVE>);

        if(direction_in == direction_out) {
            if(direction_out != DIRECTION.NONE) {
                call_id(direction_out); // TODO: 4x4 combinations, not 4
            }
        } else {
            if(direction_out != DIRECTION.NONE) {
                if(direction_out == DIRECTION.NORTH) {
                    MEMORY.TRANSITION_ENTER_DIRECTION = TRANSITION_DIRECTION.NORTH;
                } else if(direction_out == DIRECTION.EAST) {
                    MEMORY.TRANSITION_ENTER_DIRECTION = TRANSITION_DIRECTION.EAST;
                } else if(direction_out == DIRECTION.SOUTH) {
                    MEMORY.TRANSITION_ENTER_DIRECTION = TRANSITION_DIRECTION.SOUTH;
                } else if(direction_out == DIRECTION.WEST) {
                    MEMORY.TRANSITION_ENTER_DIRECTION = TRANSITION_DIRECTION.WEST;
                }
            }

            if(direction_in != DIRECTION.NONE) {
                if(direction_in == DIRECTION.NORTH) {
                    walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, 0x00, -0x02, NONE, NONE);
                } else if(direction_in == DIRECTION.EAST) {
                    walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, 0x02, 0x00, NONE, NONE);
                } else if(direction_in == DIRECTION.SOUTH) {
                    walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, 0x00, 0x02, NONE, NONE);
                } else if(direction_in == DIRECTION.WEST) {
                    walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, -0x02, 0x00, NONE, NONE);
                }
                sleep(0d20);
            }
        }
        if(direction_out == DIRECTION.NONE) {
            FLAG.IN_ANIMATION = False;
        } else {
            FLAG.IN_ANIMATION = True;
        }

        load_map(map, x, y);
    }
    fun attach_script(character:CHARACTER, flag:SCRIPT_TRIGGER, id) {
        if(flag == SCRIPT_TRIGGER.B) {
            if(character == CHARACTER.BOTH) {
                code(0x3d, entity_t(BOY), 0x0000 + id, "// (3d) WRITE $285b+x66=0x1b72, $285b+x68=0x0040 (talk script): Prof. Ruffelburg");
                code(0x3d, entity_t(DOG), 0x0000 + id, "// (3d) WRITE $285b+x66=0x1b72, $285b+x68=0x0040 (talk script): Prof. Ruffelburg");
            } else {
                code(0x3d, entity_t(character), 0x0000 + id, "// (3d) WRITE $285b+x66=0x1b72, $285b+x68=0x0040 (talk script): Prof. Ruffelburg");
            }
        } else {
            if(character == CHARACTER.BOTH) { // TODO: forced_memory=True when character=<memory>
                code(0x3f, entity_t(BOY), 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
                code(0x3f, entity_t(DOG), 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
            } else {
                code(0x3f, entity_t(character), 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
            }
        }
    }

};

@install()
@inject(0x958464) // [0x958464] (76) MAKE $283b FACE WEST // [0x95859b] (42) Teleport dog to fb, 01
fun test() {
    // teleport(DOG, 0xfb, 0x01);
    face(<0x283b>, WEST);

    add_placeholder(SHELL_BOAT, 0d65, 0d96);

    attach_script(LAST_ENTITY, B, reference(@install() {
        transition(MAP.MAGMAR, 0d24, 0d23, NONE, SOUTH, True);
    }));
}

@install()
@inject(0x94bd8f) // [0x94bd8f] (18) WRITE $23bf = 0x0000
fun test() {
    <0x23bf> = 0x0000;

    add_enemy(PLACEHOLDER, 0d24, 0d18);

    attach_script(LAST_ENTITY, B, reference(@install() {
        transition(MAP.CRUSTICIA, 0d65, 0d96, NONE, NORTH, True);
    }));
}