#memory(
    0x3e0000..0x3fffff // extension 0x3f0000++
)

group import_copies() {
    enum CHARACTER {
        BOY = 0x50,
        DOG = 0x51,
        ACTIVE = 0x52,
        INACTIVE = 0x53,

        LAST_ENTITY = 0x2d,
        SCRIPT_OWNER = 0x2e,

        RANDOM = 0x2a,

        CAMERA_PAN_Y = 0x32, // ?
        CAMERA_PAN_X = 0x34, // ?

        // custom
        BOTH = 0x00,
        NONE = 0x01,
    }
    enum ENEMY {
        // npc - act 1
        FIRE_EYES = 0x15, // #12, "Fire Eyes"
        EVIL_FIRE_EYES = 0x16, // #13, "Evil Fire Eyes"
        BLIMP = 0x17, // #11, "Harry"
        HARRY = 0x34, // #46, "Harry"
        
        VILLAGER_1_1 = 0x04, // #3, "Girl", girl, teal hair, bone in hair (lizard girl)
        VILLAGER_1_2 = 0x05, // #2, "Boy", boy, green hair (bee boy)
        VILLAGER_1_3 = 0x06, // #5, "Worman", woman, fruit in hair (consumables vendor)
        VILLAGER_1_4 = 0x07, // #4, "Man", man, green hair, no shirt (fire eye guard)
        VILLAGER_1_5 = 0x08, // #7, "Old woman", woman, teal hair, pink dress
        VILLAGER_1_6 = 0x09, // #6, "Old man", man, green hair, beard, bone as cain
        VILLAGER_1_7 = 0x12, // #10, "Alchemy", man, green hair, beard (hard ball guy) (palette conflict: tumbling_weed)
        VILLAGER_1_8 = 0x7e, // #35, "Strongheart", same as ^

        BEE = 0x02, // #8, "Child's Pet"
        CHAMELEON = 0x03, // #9, "Child's Pet"

        // npc - act 2
        HORACE = 0x45, // #22, "Horace"
        HORACE_EVIL = 0x62, // #37, "Horace's Twin"
        TINY = 0x46, // #45, "Tiny"

        VILLAGER_2_1 = 0x18, // #14, "Boy", boy, dark hair
        VILLAGER_2_2 = 0x19, // #15, "Girl", girl, red hair
        VILLAGER_2_3 = 0x1a, // #16, "Man", man, dark hair, beard, laurel crown
        VILLAGER_2_4 = 0x1b, // #17, "Woman", woman, red hair
        VILLAGER_2_5 = 0x1c, // #18, "Old man", man, white hair, beard, purple scarf
        VILLAGER_2_6 = 0x1d, // #19, "Old woman", woman, headscarf (trading vendor)
        VILLAGER_2_7 = 0x31, // #20, "Advisor", man, dark hair, beard, laurel crown, orange scarf
        VILLAGER_2_8 = 0x32, // #21, "Alchemy", same as VILLAGER_2_5 (Sting guy? Madronius brother? Drain guy?)
        VILLAGER_2_9 = 0x33, // #36, "Madronius", man, white hair, beard, green scarf

        BOXER_1 = 0x2d, // #50, "Mad Monk", left
        BOXER_2 = 0x2e, // #49, "Mad Monk", right
        DRUNK_1 = 0x2f, // #48, "Mad Monk", left
        DRUNK_2 = 0x30, // #47, "Mad Monk", right

        // npc - act 3
        QUEEN = 0x4c, // #42, "Camellia Bluegarden"
        QUEEN_EVIL = 0x4b, // #43, "White Queen", default seems to be the jumping animation
        KING = 0x54, // #32, "Legendary King"
        TINKER = 0x58, // #40, "Tinker Tinderbox"
        TINKER_TWIN = 0x81, // #39, "Gomi"

        VILLAGER_3_1 = 0x48, // #44, "Barker", man, purple dress (well guy, freakshow guy)
        VILLAGER_3_2 = 0x51, // #29, "Legendary boy", boy, dark hair (naris)
        VILLAGER_3_3 = 0x52, // #30, "Legendary girl", girl, blonde hair, teddy bear
        VILLAGER_3_4 = 0x53, // #31, "Legendary Grandma", woman, white hair, purple dress (regrowth woman)
        VILLAGER_3_5 = 0x55, // #33, "Legendary Man", man, white hair (naris old)
        VILLAGER_3_6 = 0x56, // #34, "Legendary Viking", viking

        // npc - act 4
        PROFESSOR = 0x57, // #41, "Professor Ruffleberg"
        CARLTRON = 0x5f, // #38, "Carltron"

        // enemy - act 1
        MOSQUITO = 0x0f, // #113, "Mosquito", slash(1-3=fly right?)
        FLOWER_PURPLE = 0x0b, // #109, "Wimpy Flower", slash(1-3=default attack)

        SKELESNAIL = 0x26, // #98, "Skelesnail", slash(1-3=default attack)

        MAGGOT = 0x0e, // #112, "Maggot", slash(1-3=default attack)
        BONE_SNAKE = 0x0a, // #105, "Tar Skull", slash(1-3=default attack + stuck)

        FLOWER_ORANGE = 0x0c, // #108, "Carniflower"

        SPIDER = 0x22, // #100, "Widowmaker"
        LIZARD = 0x29, // #92, "Viper"

        RAPTOR_GREEN = 0x2b, // #89, "Raptor", slash(1-3=default attack)
        
        FRIPPO = 0x21, // #99, "Frippo", slash(1-3=default attack)

        LANTERN_LIGHT = 0x37, // #86, "Will o' the Wisp", slash(1-3=idle?)

        // enemy - act 2
        MONK = 0x28, // #94, "Mad Monk", slash(1-3=default attack)
        PIRATE_ANCHOR = 0x27, // #93, "Rogue", slash(1-3=default attack)

        SPIDER_YELLOW = 0x23, // #101, "Sand Spider"
        TUMBLING_WEED = 0x73, // #59, "Tumble Weed", slash(1-3=jumping?)
        BUZZARD_1 = 0x74, // #103, "Bone Buzzard"

        DANCING_DEVIL_1 = 0x76, // #65, "Dancin' Fool", slash(1-3=default attack)
        SLIME_GREEN = 0x70, // #62, "Lime Slime", slash(1-3=default attack)
        RAT_RED = 0x7c, // #81, "Rat", slash(1-3=idle?)

        PYRAMID_GUARDIAN_1 = 0x39, // #96, "Son of Anhur"
        MUMMY = 0x72, // #60, "Mummy Cat"
        SNAKE_STATUE_LEFT = 0x59, // #55, "Stone Cobra", right facing
        SNAKE_STATUE_RIGHT = 0x5a, // #54, "Stone Cobra", left facing

        BUZZARD_BLACK = 0x63, // #52, "Skullclaw"
        DOG_1_BLACK = 0x61, // #51, "Bad Dawg", slash(1-3=default attack)
        LANTERN_LIGHT_RED = 0x64, // #53, "Will o' the Wisp"

        OGLIN = 0x6e, // #56, "Oglin", slash(1-3=default attack)

        TENTACLE_WHIP = 0x3f, // #72, "Tentacle", slash(1-3=default attack)
        TENTACLE_SPIKE = 0x4a, // #73, "Tiny Tentacle", slash(1-3=default attack)
        SPARK = 0x40, // #75, "", slash(1-3=idle?)

        // enemy - act 3
        HEDGEHOG = 0x50, // #57, "Hedgadillo", slash(1-3=default attack)

        RAT = 0x42, // #80, "Rat", storage room
        
        RAPTOR_BLACK = 0x6b, // #90, "Raptor"
        SPIDER_GREEN = 0x24, // #102, "Wood Mite"
        GUARD_BOT = 0x4e, // #69, "Guardbot", slash(1-3=shoot)

        BUZZARD_2 = 0x82, // #104, "Skullclaw", slash(1-3=default attack?)

        DRAKE = 0x6d, // #125, "Gargon"

        DRAKE_GREEN = 0x89, // #126, "Dragoil"
        SLIME = 0x71, // #63, "Blue Goo"
        MAGGOT_RED = 0x77, // #111, "Gore Grub"
        
        DANCING_DEVIL_2 = 0x75, // #64, "Dancin' Fool", hall fight

        // enemy - act 4
        TENTACLE_WHIP_2 = 0x8c, // #133, "Tentacle"
        TENTACLE_SPIKE_2 = 0x8d, // #134, "Tiny Tentacle"

        OWL_GREEN = 0x78, // #66, "Neo Greeble", slash(1-2=stone, 3=transform)
        SLIME_PINK = 0x6f, // #61, "Red Jelly Ball"
        
        RIMSALA = 0x7b, // #84, "Rimsala", slash(1-3=idle)
        GATE_BOT = 0x66, // #128, "Sphere Bot", slash(1-3=chain fire)

        FLOWER_BLACK = 0x6a, // #107, "Flowering Death"
        MOSQUITO_BLACK = 0x7a, // #114, "Mosquito"
        FAN_BOT = 0x69, // #127, "Floating Fan", slash(1-3=idle?)

        RAPTOR_TEAL = 0x79, // #136, "Raptor" (boss rush)
        RIMSALA_2 = 0x83, // #138, "Eye of Rimsala"
        DUSTER_BOT = 0x4d, // #70, "Mechaduster", slash(1-3=idle + hitbox?)
        DUSTER_BOT_2 = 0x8b, // #132, "Mechaduster"
        SPIDER_BLACK = 0x25, // #137, "Death Spider"

        // boss - act 0
        GUARD_BOT_INTRO = 0x80, // #68, "Guardbot"

        // boss - act 1
        RAPTOR_PURPLE = 0x0d, // #110, "Raptor"

        THRAXX_HEART = 0x14, // #118, "Thraxx's heart", slash(1-3=crash?)
        THRAXX_LEFT_ARM = 0x10, // #123, "Left Claw", slash(1-3=default attack)
        THRAXX_RIGHT_ARM = 0x11, // #122, "Right Claw"

        LIZARD_BLACK = 0x2a, // #91, "Viper Commander", slash(1-3=tongue)

        SALABOG = 0x2c, // #106, "Salabog", slash(1-2=bite, 3=fire)

        MAGMAR = 0x35, // #87, "Magmar", slash(1=duck, 2=shoot, 3=shoot air)

        // boss - act 2
        VIGOR = 0x3d, // #82, "Vigor", slash(1=bident, 2=boomerang)

        MINITAUR = 0x38, // #97, "Mini-Taur", slash(1-3=stomp)

        MEGATAUR = 0x36, // #88, "Megataur", slash(1=stomp, 2-3=breathing)

        PYRAMID_GUARDIAN_2 = 0x3a, // #95, "Son of Set"

        RIMSALA_HOLDER = 0x3c, // #85, "Rimsla", slash(1-3=idle)
        RIMSALA_GOLD = 0x3b, // #83, "Rimsla", slash(1-3=idle)
        RIMSALA_STATUTE_ENTITY = 0x5b, // #27, "Statue"

        AEGIS_ENTITY = 0x47, // #71, "Aegis"

        AQUAGOTH_ENTITY = 0x3e, // #74, "Aquagoth"

        // boss - act 3
        FOOTKNIGHT = 0x49, // #78, "FootKnight", slash(1-3=idle?)

        // BOY_BLACK
        OWL_BLACK = 0x4f, // #67, "Greeble"

        FORESTDRAKE = 0x43, // #76, "Timberdrake", slash(1=biting, 2=spear idle, 3=wing flap)

        VERMINATOR = 0x41, // #79, "Verminator", slash(1-3=crash?)

        STERLING = 0x44, // #77, "Sterling", slash(1=spear idle, 2=biting, 3=wing flap)

        MUNGOLA_ENTITY = 0x6c, // #115, "Mungola"
        PUPPET_1 = 0x67, // #116, "Old Nick", slash(1=dance, 2=jump, 3=kick)
        PUPPET_2 = 0x68, // #117, "Mephista", slash(1=dance, 2=jump, 3=kick)

        THRAXX2_HEART = 0x84, // #119, "Coleoptera's heart"
        THRAXX2_LEFT_ARM = 0x85, // #121, "Left Claw"
        THRAXX2_RIGHT_ARM = 0x86, // #120, "Right Claw"

        // boss - act 4
        FACE_ENTITY = 0x7d, // #124, "Face"

        FAN_ENTITY = 0x5c, // #129, "Fan"
        SPEAKER_ENTITY = 0x5d, // #130, "Speaker"
        BOY_BLACK = 0x60, // #58, "Bad Boy", slash(1=sword level 1, 2=sword level 2, 3=sword level 3)
        DOG_4_BLACK = 0x8e, // #139, "Dark Toaster", slash(1-2=default attack, 3=charged attack)
        MAGMAR_METAL = 0x7f, // #140, "Magmar"
        CARLTRON_ROBOT = 0x87, // #141, "Carltron's Robot", slash(1-3=idle?)

        // special
        PLACEHOLDER = 0x20, // #25, used for explosions, windwalker, etc.

        REVEALER_TARGET_ENTITY = 0x5e, // #28, "Bridge"
        STONE = 0x1e, // #23, "Rock"
        STONE_ROUND = 0x1f, // #24, "Rock"

        BOMB = 0x65, // #135, "Bomb"

        // misc
        BOY = 0x00, // #0, "<Boy Name>", behaves weird
        DOG = 0x01, // #1, "<Dog Name>", behaves weird

        UNKNOWN_1 = 0x13, // #??, unused? invisible
        UNKNOWN_2 = 0x88, // #??, invisible, used for: palace grounds 3x, related to the dog fountain cutscene
        UNKNOWN_3 = 0x8f, // #??, unused?

        RAT_RED_HARMLESS = 0x8a, // #131, "Rat"

        // unknown IDs = #26/""
    }
    enum ATTRIBUTE {
        // See data crystals: 7E3DE5 to 7E4E88 = Monster/NPC data for the current room. Each Monster/NPC gets x8E bytes of data.

        POINTER_BEHAVIOR_CURRENT = 0x00, // ?

        POINTER_BEHAVIOR_BASE = 0x03, // ?

        POINTER_BODY_SPRITE_INFO = 0x06, // ? (3 bytes)
        POINTER_SHADOW_SPRITE_INFO = 0x09, // ? (3 bytes)

        PALETTE = 0x0b, // e.g. boy=0x000c, magmar=0x0004

        // used in the scripts
        MAX_HP = 0x0f, // <0x23e5>[0x0f] = boy max hp, <0x23e7>[0x0f] = dog max hp

        // see ATTRIBUTE_FLAGS (1 byte each)
        FLAGS_1 = 0x10,
        FLAGS_2 = 0x11,
        FLAGS_3 = 0x12,
        FLAGS_4 = 0x13,
        FLAGS_5 = 0x14,
        FLAGS_6 = 0x15,
        FLAGS_7 = 0x16,
        // positioning
        Z_LEVEL = 0x18, // used for stairs/bridges (0x10 = upper floor, 0x20 = lower floor, 0x60 = stairs?)
        X = 0x1a,
        Y = 0x1c,
        Z = 0x1e, // used for boss rush intro
        VELOCITY = 0x20, // used for wings (0xe0 signed), magmar, megataur, act2 intro, puppets, sterling flight
        FACE_DIRECTION = 0x22, // enum FACE_DIRECTION
        TARGET_LAST_WEAPON_DAMAGE = 0x24, // contains _entity_x
        X_TILE = 0x26,
        Y_TILE = 0x28,
        HP = 0x2a,

        STAMINA = 0x2e, // enum STAMINA (seems to instantly regenerate during some animations?)
        GENERAL_PURPOSE = 0x30, // DOES NOT RESET WHEN THE SPRITE CHANGES! used for secret boss bombs (set to 0 for exploded bombs) and speakers (indexed from 2^0 to 2^8)
        UNKNOWN = 0x32, // TODO: used for secret boss and boss rush fans
        DAMAGE_TYPE = 0x36, // used for vigor (weapon: 0x4e89, dog: 0x4F37, magic and default: 0x0000)
        CURRENT_GROUND = 0x3c, // good: 10 (80?, 28?, 23?, 24?, 48) bad: 31 (22?, 26?, 63?) TODO: used in ebon keep sewers (seems to be based on the tile the character stands on)

        // status effect #1
        STATUS_ID_1 = 0x46,
        STATUS_TIMER_1 = 0x48,
        STATUS_BONUS_1 = 0x4a,
        // status effect #2
        STATUS_ID_2 = 0x4c,
        STATUS_TIMER_2 = 0x4e,
        STATUS_BONUS_2 = 0x50,
        // status effect #3
        STATUS_ID_3 = 0x52,
        STATUS_TIMER_3 = 0x54,
        STATUS_BONUS_3 = 0x56,
        // status effect #4
        STATUS_ID_4 = 0x58,
        STATUS_TIMER_4 = 0x5a,
        STATUS_BONUS_4 = 0x5c,

        NEXT_ENTITY = 0x5e, // ?
        TYPE = 0x60, // see CHARACTER_TPYE

        ATTACHED_SCRIPT_ID = 0x66, // see "attach_script(…)"
        ATTACHED_SCRIPT_TRIGGER = 0x68, // see SCRIPT_TRIGGER
        
        POINTER_STATUS_ICON_SPRITE = 0x6e, // ?

        LAST_DAMAGE = 0x76, // only available for one frame?

        SCALING_LEVEL = 0x8a, // hack: level offset for all stats, but hp
        UNKNOWN = 0x8c, // ffff makes the enemy despawn, when he is off screen

        ///////////////////////////////////////////////////////////////////////////////////////////
        // BOY/DOG SPECIFIC
        ///////////////////////////////////////////////////////////////////////////////////////////

        POINTER_STATUS_BAR_INFO = 0x8e, // ?
        
        TOTAL_XP_REQUIRED = 0x94,

        // outline
        OUTLINE_ID = 0x9a, // see OUTLINE, has to be set to be changed while OUTLINE_PROGRESS==0
        OUTLINE_CHOICE = 0x9c, // ?
        OUTLINE_PROGRESS = 0x9e, // 0…30…0 (MSB decides about the direction)
        // status effect boosts
        BOOST_ATTACK = 0xa0,
        BOOST_DEFEND = 0xa2,
        BOOST_HIT = 0xa4,
        BOOST_EVADE = 0xa6,
        // BOOST_MAGIC_DEFEND = 0x??,

        PIXIE_DUST = 0xac, // 0x0000->0x0001 while pixie dust is active

        ///////////////////////////////////////////////////////////////////////////////////////////
        // weird
        ///////////////////////////////////////////////////////////////////////////////////////////
        
        PALETTE_BLACK_GREEN = 0x00,
        INVISIBLE = 0x05,
        TILE_GLITCH_1 = 0x06,
        INVISIBLE_OR_TILE_GLITCH = 0x07,
        TILE_GLITCH_3 = 0x0a,
        PALETTE_BLACK_OR_TILE_GLITCH = 0x0c,
        TILE_GLITCH_4 = 0x0d,
        WEIRD_KNOCKBACK = 0x12,
        TURN_NORTH = 0x22,

        ///////////////////////////////////////////////////////////////////////////////////////////
        // special
        ///////////////////////////////////////////////////////////////////////////////////////////
        
        _BOY = 0x4E89,
        _DOG = 0x4F37,

        _entity_0_1 = 0x3de5,
        _entity_0_2 = 0x3e73,
        _entity_0_3 = 0x3f01,
        _entity_0_4 = 0x3f8f,
        _entity_0_5 = 0x401d,
        _entity_0_6 = 0x40ab,

        _entity_1 = 0x4139,
        _entity_2 = 0x41fd,
        _entity_3 = 0x4255,
        _entity_4 = 0x42E3,
        _entity_5 = 0x4371,
        _entity_6 = 0x43FF,
        _entity_7 = 0x448D,
        _entity_8 = 0x451B,
        _entity_9 = 0x45A9,
        _entity_10 = 0x4637,
        _entity_11 = 0x46C5,
        _entity_12 = 0x4753,
        _entity_13 = 0x47E1,
        _entity_14 = 0x486F,
        _entity_15 = 0x48FD,
        _entity_16 = 0x498B,
        _entity_17 = 0x4A19,
        _entity_18 = 0x4AA7,
        _entity_19 = 0x4B35,
        _entity_20 = 0x4BC3,
        _entity_21 = 0x4C51,
        _entity_22 = 0x4CDF,
        _entity_24 = 0x4DFB,
    }
    enum ATTRIBUTE_FLAGS {
        // ATTRIBUTE.FLAGS_1 (character+0x10)
        INVINCIBLE = 0x02, // see ATTRIBUTE_BITS.INVINCIBLE
        UNKNOWN = 0x04, // always set?
        DISABLED = 0x20, // examples: "control(NONE)", "walk(…)"
        IN_ANIMATION = 0x40, // examples: ANIMATION_ALL.SLASH_1, "animate(…)"
        UNKNOWN_2_1 = 0x80, // see ATTRIBUTE_BITS.UNKNOWN_2_1

        // ATTRIBUTE.FLAGS_2 (character+0x11)
        UNKNOWN = 0x01, // always set?
        LOADING_SCREEN = 0x08, // also ai following quickly?
        HEALED = 0x10, // examples: PETAL (Blue glow)
        NO_CLIP = 0x04, // see ATTRIBUTE_BITS.NO_CLIP
        INVINCIBLE_TEMP = 0x40, // see ATTRIBUTE_BITS.INVINCIBLE_TEMP

        // ATTRIBUTE.FLAGS_3 (character+0x12)
        AI_FOLLOWING = 0x04, // ai following?
        UNKNOWN_CAST = 0x38, // during cast on boy? (CRUSH, EXPLOSION, FLASH, FIREBALL)

        // ATTRIBUTE.FLAGS_4 (character+0x13
        ROOT = 0x01, // see ATTRIBUTE_BITS.ROOT
        UNKNOWN_CAST = 0x04, // during cast on boy? (CRUSH, EXPLOSION)
        SHIELD = 0x20, // shield halves damage
        UNKNOWN_1_2 = 0x40, // see ATTRIBUTE_BITS.UNKNOWN_1_2
        INVISIBLE = 0xc0, // see ATTRIBUTE_BITS.INVISIBLE
        
        // ATTRIBUTE.FLAGS_5 (character+0x14)
        AURA = 0x01, // aura invincibility
        FORCE_FIELD = 0x02, // force field prevents the next damage
        BARRIER = 0x04, // barrier invincibility
        ATLAS_GLITCH = 0x08, // atlas glitch invincibility
        REFLECT = 0x10, // reflect reflects all magic (spell target = source)
        MUTE = 0x20, // see ATTRIBUTE_BITS.MUTE

        // ATTRIBUTE.FLAGS_6 (character+0x15)
        WINGS = 0x01,
        DEAD = 0x04, // also set during KNOCKBACK, or being eaten by a flower
        AI_RUN = 0x08, // see ATTRIBUTE_BITS.AI_RUN
        CONFOUND = 0x40, // confound/disrupt reverse controls

        // ATTRIBUTE.FLAGS_7 (character+0x16)
        KNOCKBACK = 0x01, // also sets WALKING and DEAD?
        WALKING = 0x04,
        RUNNING = 0x08,
        IN_ANIMATION = 0x10,
        CASTING = 0x20, // also dodging?
    }

    fun end() {
        code(0x00, "// (00) END (return)");
    }
    fun entity_t(character:CHARACTER) {
        // sometimes writes arg0…arg20

        if(character is Arg) {
            code(0x80 + 0x12, character);
        } else if(character is Word) {
            if(character >= 0x2834) {
                code(0x80 + 0x0d, character - 0x2834);
            } else if(character >= 0x2258) {
                code(0x80 + 0x08, character - 0x2258);
            } else {
                code(0x80 + character);
            }
        } else if(character is Memory) {
            calculate(character);
        }
    }
    fun destroy(character:CHARACTER) {
        if(character > 0x00) {
            code(0x9b, entity_t(character), "// (9b) DESTROY/DEALLOC ENTITY $283e");
        }
    }
    fun add_enemy(enemy:ENEMY, x, y, flags:FLAG_ENEMY) {
        if((x is Word) && (y is Word)) {
            if(flags is Word) {
                code(0x3c, 0x0000 + enemy * 0x02, 0x0000 + flags, x, y, "// (ba) LOAD NPC 0b at 49 79");
            } else {
                code(0xba, enemy, x, y, "// (ba) LOAD NPC 0b at 49 79");
            }
        } else {
            if(flags is Word) {
                code(0xa2, 0x0000 + enemy * 0x02, 0x0000 + flags, calculate((x) * 0x0008), calculate((y) * 0x0008), "// (a2) SPAWN NPC 0x00ca>>1, flags 0x20, x:$23b9, y:$23bb");
            } else {
                code(0xa2, 0x0000 + enemy * 0x02, 0x0000, calculate(x * 0x0008), calculate(y * 0x0008), "// (a2) SPAWN NPC 0x00ca>>1, flags 0x20, x:$23b9, y:$23bb");
            }
        }
    }
    fun yield() {
        code(0x3a, "// (3a) YIELD (break out of script loop, continue later)");
    }
    fun sleep(ticks) {
        if(ticks is Word) {
            if(ticks <= 0xff) {
                code(0xa7, ticks, "// (a7) SLEEP 59 TICKS");
            } else {
                code(0xa8, ticks, "// (a8) SLEEP 899 TICKS");
            }
        } else {
            code(0x3b, calculate(ticks), "// (3b) SLEEP (RAND & 3) + 4 TICKS");
        }
    }
    fun attach_to_script(character:CHARACTER) {
        code(0x4e, entity_t(character), "// (4e) ATTACH entity last entity ($0341) TO SCRIPT");
    }
    fun check_range(entity_1, entity_2, range, callback) {
        if(entity_1[X] < entity_2[X]) {
            arg[0x10] = entity_2[X] - entity_1[X];
        } else {
            arg[0x10] = entity_1[X] - entity_2[X];
        }

        if(entity_1[Y] < entity_2[Y]) {
            arg[0x12] = entity_2[Y] - entity_1[Y];
        } else {
            arg[0x12] = entity_1[Y] - entity_2[Y];
        }

        if((arg[0x10] <= range) && (arg[0x12] <= range)) {
            callback();
            sleep(0d300); // end();
        }
    }
    fun range_checker(entity_1, entity_2, range, callback) {
        attach_to_script(entity_1);

        while!(dead(<SCRIPT_OWNER>)) {
            check_range(<SCRIPT_OWNER>, entity_2, range, callback);

            yield();
        }
    }
            fun control(character:CHARACTER, control) {
                if(control is Word) {
                    if(character == CHARACTER.BOY) {
                        if(control) {
                            code(0xbd, "// (bd) BOY = Player controlled");
                        } else {
                            code(0xbc, "// (bc) Stop/disable boy (and SELECT button)");
                        }
                    } else if(character == CHARACTER.DOG) {
                        if(control) {
                            code(0xbf, "// (bf) DOG = Player controlled");
                        } else {
                            code(0xbe, "// (be) Stop/disable doggo (and SELECT button)");
                        }
                    } else {
                        if(control) {
                            code(0x2a, entity_t(character), "// (2a) Make $2841 script controlled");
                        } else {
                            code(0x2b, entity_t(character), "// (2b) Make $2835 player/AI controlled");
                        }
                    }
                } else {
                    if(character == CHARACTER.NONE) {
                        code(0xc0, "// (c0) BOY+DOG = STOPPED");
                    } else if(character == CHARACTER.BOTH) {
                        code(0xc1, "// (c1) BOY+DOG = Player controlled");
                    } else if(character == CHARACTER.BOY) {
                        code(0xbd, "// (bd) BOY = Player controlled");
                        code(0xbe, "// (be) Stop/disable doggo (and SELECT button)");
                    } else if(character == CHARACTER.DOG) {
                        code(0xbf, "// (bf) DOG = Player controlled");
                        code(0xbc, "// (bc) Stop/disable boy (and SELECT button)");
                    } else {
                        if(control) {
                            code(0x2a, entity_t(character), "// (2a) Make $2841 script controlled");
                        } else {
                            code(0x2b, entity_t(character), "// (2b) Make $2835 player/AI controlled");
                        }
                    }
                }
            }
};

enum ROOM {
    ROW_1 = 0x90, // 0x0012 * 0d0008,
    ROW_2 = 0x1f0, // 0x003e * 0d0008,
    ROW_3 = 0x350, // 0x006a * 0d0008,
    ROW_4 = 0x4b0, // 0x0096 * 0d0008,

    COLUMN_1 = 0x90, // 0x0012 * 0d0008,
    COLUMN_2 = 0x290, // 0x0052 * 0d0008,
    COLUMN_3 = 0x490, // 0x0092 * 0d0008,
    COLUMN_4 = 0x690, // 0x00d2 * 0d0008,
}

fun guard_door(x, y) {
    if(
        (<BOY>[X] < (x - 0d30))
        || (<BOY>[X] > (x + 0d30))
        || (<BOY>[Y] < (y - 0d30))
        || (<BOY>[Y] > (y + 0d30))
    ) {
        end();
    }
}

@install()
@inject(0x9aedbf, True) // [76,56:78,58] = (id:b5e => (46dbf@928df2) => addr:0x9aedbf)
fun door_d4() {
    guard_door(ROOM.COLUMN_4, ROOM.ROW_4);

    if(<ACTIVE> != <DOG>) {
        call(0x9aedc7); // [0x9aedc7] (1b) WRITE $249d = 0x06d0
    }
}
@install()
@inject(0x9aed2c, True) // [56,56:58,58] = (id:b61 => (46d2c@928df5) => addr:0x9aed2c)
fun door_d3() {
    guard_door(ROOM.COLUMN_3, ROOM.ROW_4);

    if(<ACTIVE> != <DOG>) {
        call(0x9aed34); // [0x9aed34] (1b) WRITE $249d = 0x04d0
    }
}
@install()
@inject(0x9aecca, True) // [56,2a:58,2c] = (id:b64 => (46cca@928df8) => addr:0x9aecca)
fun door_b3() {
    guard_door(ROOM.COLUMN_3, ROOM.ROW_2);

    if(<ACTIVE> != <DOG>) {
        call(0x9aecd2); // [0x9aecd2] (1b) WRITE $249d = 0x04d0
    }
}



@install()
@inject(0x9aed5d, True) // [76,40:78,42] = (id:b67 => (46d5d@928dfb) => addr:0x9aed5d)
fun door_c4() {
    guard_door(ROOM.COLUMN_4, ROOM.ROW_3);

    if(<ACTIVE> != <DOG>) {
        call(0x9aed65); // [0x9aed65] (1b) WRITE $249d = 0x06d0
    }
}
@install()
@inject(0x9aed8e, True) // [76,2a:78,2c] = (id:b6a => (46d8e@928dfe) => addr:0x9aed8e)
fun door_b4() {
    guard_door(ROOM.COLUMN_4, ROOM.ROW_2);

    if(<ACTIVE> != <DOG>) {
        call(0x9aed96); // [0x9aed96] (1b) WRITE $249d = 0x06d0
    }
}
@install()
@inject(0x9aee83, True) // [76,14:78,16] = (id:b6d => (46e83@928e01) => addr:0x9aee83)
fun door_a4() {
    guard_door(ROOM.COLUMN_4, ROOM.ROW_1);

    if(<ACTIVE> != <DOG>) {
        call(0x9aee8b); // [0x9aee8b] (1b) WRITE $249d = 0x06d0
    }
}
@install()
@inject(0x9aecfb, True) // [56,14:58,16] = (id:b70 => (46cfb@928e04) => addr:0x9aecfb)
fun door_a3() {
    guard_door(ROOM.COLUMN_3, ROOM.ROW_1);

    if(<ACTIVE> != <DOG>) {
        call(0x9aed03); // [0x9aed03] (1b) WRITE $249d = 0x04d0
    }
}
@install()
@inject(0x9aee52, True) // [36,2a:38,2c] = (id:b73 => (46e52@928e07) => addr:0x9aee52)
fun door_b2() {
    guard_door(ROOM.COLUMN_2, ROOM.ROW_2);

    if(<ACTIVE> != <DOG>) {
        call(0x9aee5a); // [0x9aee5a] (1b) WRITE $249d = 0x02d0
    }
}
@install()
@inject(0x9aee21, True) // [36,14:38,16] = (id:b76 => (46e21@928e0a) => addr:0x9aee21)
fun door_a2() {
    guard_door(ROOM.COLUMN_2, ROOM.ROW_1);

    if(<ACTIVE> != <DOG>) {
        call(0x9aee29); // [0x9aee29] (1b) WRITE $249d = 0x02d0
    }
}


@install()
@inject(0x9aedf0, True) // [16,14:18,16] = (id:b79 => (46df0@928e0d) => addr:0x9aedf0)
fun door_a1() {
    guard_door(ROOM.COLUMN_1, ROOM.ROW_1);

    if(<ACTIVE> != <DOG>) {
        call(0x9aedf8); // [0x9aedf8] (1b) WRITE $249d = 0x00d0
    }
}

@install()
@inject(0x9aef16, True) // [16,56:18,58] = (id:b7c => (46f16@928e10) => addr:0x9aef16)
fun door_d1() {
    guard_door(ROOM.COLUMN_1, ROOM.ROW_4);

    if(<ACTIVE> != <DOG>) {
        call(0x9aef1e); // [0x9aef1e] (1b) WRITE $249d = 0x00d0
    }
}
@install()
@inject(0x9aeeb4, True) // [16,40:18,42] = (id:b7f => (46eb4@928e13) => addr:0x9aeeb4)
fun door_c1() {
    guard_door(ROOM.COLUMN_1, ROOM.ROW_3);

    if(<ACTIVE> != <DOG>) {
        call(0x9aeebc); // [0x9aeebc] (1b) WRITE $249d = 0x00d0
    }
}
@install()
@inject(0x9aeee5, True) // [36,40:38,42] = (id:b82 => (46ee5@928e16) => addr:0x9aeee5)
fun door_c2() {
    guard_door(ROOM.COLUMN_2, ROOM.ROW_3);

    if(<ACTIVE> != <DOG>) {
        call(0x9aeeed); // [0x9aeeed] (1b) WRITE $249d = 0x02d0
    }
}

@install()
@inject(0x9aef47, True) // [46,35:48,37] = (id:afb => (46f47@928d8f) => addr:0x9aef47)
fun door_saturn() {
    guard_door(0d904, 0d664);

    if(<ACTIVE> != <DOG>) {
        call(0x9aef4f); // [0x9aef4f] (1b) WRITE $249d = 0x00d0
    }
}