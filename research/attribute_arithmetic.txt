// "\+ .*\)"


<0xfffff> = 0xff;
<0xfffff> = 0xffff;
set(<0xfffff, 0x01>); -> <0xfffff, 0x01> = True;
unset(<0xfffff, 0x01>); -> <0xfffff, 0x01> = False;

<<0xffff>+0x20> = 0xff;
<<0xffff>+0x20> = 0xffff;
0xffff = <<0xffff>+0x20>;

// 7a (entity+x = entity)
// 
// left+x = right
// 7a, entity(left), operator(29), entity(x), operator(9a), entity(right)

[0x939196] (7a) WRITE *($283b + 0x2a) = 0x50
7a (0d [07 00]) 29 (02 [2a]) 9a (82 [50])

[0x93d337] (7a) WRITE *($23e5 + 15) = 0x4f
7a (08 [8d 01]) 29 (30+[0f]) 9a (82 [4f])
[0x93d340] (7a) WRITE *($23e7 + 15) = 0x4a
7a (08 [8f 01]) 29 (30+[0f]) 9a (82 [4a])

[0x93c894] (7a) WRITE *(last entity ($0341) + 30) = 0x0c80
7a [2d] 29 (50+[1e]) 9a (84 [80 0c])

[0x94bbae] (7a) WRITE *($2846 + 0x20) = $283e / 2
7a 0d [12 00] 29 (02 [20]) 9a (0d [0a 00]) 29 32 98
// ?

[0x94e8f6] (7a) WRITE *(boy + 30) = 0x1068
7a [50] 29 (50+[1e]) 9a (84 [68 10])
[0x94e8fe] (7a) WRITE *(dog + 30) = 0x1068
7a [51] 29 (50+[1e]) 9a (84 [68 10])
[0x94e926] (7a) WRITE *(boy + 0x20) = 15
7a [50] 29 (02 [20]) 9a (b0+[0f])

[0x94e906] (7a) WRITE *(boy + 0x20) = 0xd8 signed
7a [50] 29 (02 [20]) 9a (81 [d8])
[0x94e90e] (7a) WRITE *(dog + 0x20) = 0xd8 signed
7a [51] 29 (02 [20]) 9a (81 [d8])


[0x95eafe] (7a) WRITE *($23b7 + 0x26) = $23b9
7a (08 [5f 01]) 29 (02 [26]) 9a (88 [61 01])
[0x95eb09] (7a) WRITE *($23b7 + 0x28) = $23bb
7a (08 [5f 01]) 29 (02 [28]) 9a (88 [63 01])

// 18 (address = entity+x)
// 
// left = right+x
// 18, address(left), address(right), operator(29), entity(x), 1a, d5

[0x93ac19] (18) WRITE $249d = *(signed arg0 + 26)
18 [45 02] [12 00] 29 (50+[1a]) 1a d5
[0x93ac22] (18) WRITE $249f = *(signed arg0 + 28)
18 [47 02] [12 00] 29 (50+[1c]) 1a d5
[0x93ac46] (18) WRITE $249d = *(signed arg2 + 26)
18 [45 02] [12 02] 29 (50+[1a]) 1a d5
[0x93ac4f] (18) WRITE $249f = *(signed arg2 + 28)
18 [47 02] [12 02] 29 (50+[1c]) 1a d5
[0x93ac7d] (18) WRITE $249d = *(signed arg4 + 26)
18 [45 02] [12 04] 29 (50+[1a]) 1a d5
[0x93ac86] (18) WRITE $249f = *(signed arg4 + 28)
18 [47 02] [12 04] 29 (50+[1c]) 1a d5

[0x95dec1] (18) WRITE $249d = *(boy + 26)
18 [45 02] [50] 29 (50+[1a]) 1a d5
[0x95dec9] (18) WRITE $249f = *(boy + 28)
18 [47 02] [50] 29 (50+[1c]) 1a d5

[0x94bc36] (18) WRITE $249d = *($2846 + 26)
18 [45 02] (0d [12 00]) 29 (50+[1a]) 1a d5
[0x94bc40] (18) WRITE $249f = *($2846 + 28)
18 47 02 0d 12 00 29 6c 1a d5
[0x95eaa9] (18) WRITE $23b9 = *($23b7 + 26)
18 [61 01] (08 [5f 01]) 29 (50+[1a]) 1a d5
[0x95eab3] (18) WRITE $23bb = *($23b7 + 28)
18 [63 01] (08 [5f 01]) 29 (50+[1c]) 1a d5
[0x95eaa9] (18) WRITE $23b9 = *($23b7 + 26)
18 [61 01] (08 [5f 01]) 29 (50+[1a]) 1a d5

// 1a (arg = entity+x)

[0x93cbea] (1a) WRITE SCRIPT arg0 = *(boy + 26)
(1a [00]) [50] 29 (50+[1a]) 1a d5

[0x93cbf1] (1a) WRITE SCRIPT arg2 = *(boy + 28)
(1a [02]) [50] 29 (50+[1c]) 1a d5





// call
a3 xx

b4 yy aa aa aa xx xx xx

07 xx xx xx

[0x94cac7] (b4) CALL Absolute (24bit) script 0x92d93e ("Unnamed ABS script 0x92d93e")
                WITH 5 ARGS 0, 0, 0, 0x2000, 0x90
b4 05 b0 b0 b0 84 00 20 82 90 3e 59 00

B4 05 30 30 30 00 20 90 00 00 0F       // calculator([180, '05', [48, 0], [48, 0], [48, 0], '00 20', '90', '00 00 0F'])

// negative numbers
-1 = cf?

-5 = cb
-6 = ca
-16 = c0

-17? = 81 ef

arg0 = b0




// IF

// 5d ?????????   <- not an if

[0x9b9300] (5d) IF $22c2 & 0x01 THEN UNLOAD OBJ 10 (TODO: verify this)
5d ba 50 03
[0x9b9304] (5d) IF $22c2 & 0x02 THEN UNLOAD OBJ 11 (TODO: verify this)
5d bb 51 03
[0x9b9308] (5d) IF $22c2 & 0x04 THEN UNLOAD OBJ 12 (TODO: verify this)
5d bc 52 03
[0x9b930c] (5d) IF $22c2 & 0x08 THEN UNLOAD OBJ 13 (TODO: verify this)
5d bd 53 03
[0x9b9310] (5d) IF $22c2 & 0x10 THEN UNLOAD OBJ 14 (TODO: verify this)
5d be 54 03
[0x9b9314] (5d) IF $22c2 & 0x20 THEN UNLOAD OBJ 15 (TODO: verify this)
5d bf 55 03
[0x9b9318] (5d) IF $22c2 & 0x40 THEN UNLOAD OBJ 16 (TODO: verify this)
5d (e0) 56 03
[0x9b931c] (5d) IF $22c2 & 0x80 THEN UNLOAD OBJ 17 (TODO: verify this)
5d e1 57 03
[0x9b9320] (5d) IF $22c3 & 0x01 THEN UNLOAD OBJ 18 (TODO: verify this)
5d e2 58 03
[0x9b9324] (5d) IF $22c3 & 0x02 THEN UNLOAD OBJ 19 (TODO: verify this)
5d e3 59 03
[0x9b9328] (5d) IF $22c3 & 0x04 THEN UNLOAD OBJ 20 (TODO: verify this)
5d e4 5a 03
[0x9b932c] (5d) IF $22c3 & 0x08 THEN UNLOAD OBJ 21 (TODO: verify this)
5d e5 5b 03

// 0b currency < word 00 00 xx xx

[0x94a597] (0b) IF Talons (moniez) < 30 THEN SKIP 183 (to 0x94a655)
0b (b0) (1e 00 00) (b7 00)
[0x94d289] (0b) IF Talons (moniez) < 10 THEN SKIP 185 (to 0x94d349)
0b (b0) (0a 00 00) (b9 00)
[0x92cb1d] (0b) IF Talons (moniez) < 1 THEN SKIP 21 (to 0x92cb39)
0b (b6) (01 00 00) (14 00)
[0x92cb5f] (0b) IF Talons (moniez) < 1 THEN SKIP 23 (to 0x92cb7d)
0b (b0) (01 00 00) (17 00)
[0x92c9ec] (0b) IF Talons (moniez) < 1 THEN SKIP 18 (to 0x92ca05)
0b (b0) (01 00 00) (12 00)

// 0a currency >= word 00 00 xx xx

[0x92c063] (0a) IF Talons (moniez) >= 2 THEN SKIP 5 (to 0x92c06f)
0a (b0) (02 00 00) (05 00)
[0x92c099] (0a) IF Talons (moniez) >= 4 THEN SKIP 4 (to 0x92c0a4)
0a (b0) (04 00 00) (04 00)

// 08

[0x9ba6eb] (08) IF (entity attached to script? will die) == FALSE THEN SKIP 1 (to 0x9ba6f1)
08 ((2e) dc) (01 00)
[0x978b9d] (08) IF ($24e5 will die) == FALSE THEN SKIP 1 (to 0x978ba5)
08 ((08 (8d 02)) dc) (01 00)
[0x999432] (08) IF ($283d will die) == FALSE THEN SKIP 9 (to 0x999442)
08 ((0d (09 00)) dc) (09 00)

// 09

[0x9ba454] (09) IF (entity attached to script? will die) == FALSE THEN SKIP 4 (to 0x9ba45d)
09 ((2e) dc) (04 00)
[0x9ba8fc] (09) IF (entity attached to script? will die) == FALSE THEN SKIP 111 (to 0x9ba970)
09 ((2e) dc) (6f 00)
[0x92d4f4] (09) IF (signed arg0 will die) == FALSE THEN SKIP 6 (to 0x92d500)
09 ((12 00) dc) (06 00)
[0x979c44] (09) IF (boy will die) == FALSE THEN SKIP 8 (to 0x979c51)
09 ((50) dc) (08 00)
[0x93cc35] (09) IF (dog will die) == FALSE THEN SKIP 78 (to 0x93cc88)
09 ((51) dc) (4e 00)
[0x9389c5] (09) IF ($2853 will die) == FALSE THEN SKIP 4 (to 0x9389d0)
09 ((0d (1f 00)) dc) (04 00)
[0x97872e] (09) IF ($2847 will die) == FALSE THEN SKIP 7 (to 0x97873c)
09 ((0d (13 00)) dc) (07 00)
[0x95eaa2] (09) IF ($23b7 will die) == FALSE THEN SKIP 107 (to 0x95eb14)
09 ((08 (5f 01)) dc) (6b 00)

// &&

[0x95b859] (09) IF (($24ad < $2843) && ($24ad > $2845)) == FALSE THEN SKIP 4 (to 0x95b872)
09 (08 (55 02) 29 0d (0f (00 1e))) 29 (08 (55 02) 29 0d 11) 00 1f a8 (04 00)
[0x9ae171] (09) IF ((controlled char == dog) && ($2834&0x01)) == FALSE THEN SKIP 1 (to 0x9ae17e)
09 52 29 (51) 22 29 0a 00 00 a8 (01 00)
[0x99f059] (09) IF (($23b9 == 3) && (dog will die)) == FALSE THEN SKIP 13 (to 0x99f073)
09 08 61 01 29 (33) 22 29 51 5c a8 (0d 00)




// stack

3x -> 02 0x
4x -> ??? (negative)
6x -> 02 1x

// =

[0x9ba235] (19) WRITE $283f = 0x0000
19 // same as 0x18 but different addr. offset // set word. what's the difference to 1C?
0b 00 // 0x2834 + 0x000b
b0 // [0x80] + 0x30 + 0x00

[0x9bab14] (19) WRITE $283f = last entity ($0341)
19 // same as 0x18 but different addr. offset // set word. what's the difference to 1C?
0b 00 // 0x2834 + 0x000b
ad // [0x80] + 0x2d // LAST_ENTITY = 0xad,

[0x938b96] (19) WRITE $283f = $2843
19 // same as 0x18 but different addr. offset // set word. what's the difference to 1C?
0b 00 // 0x2834 + 0x000b
8d // [0x80] + 0x0d // 0x0d, # read temp word, signed
0f 00 // 0x2834 + 0x000f

[0x92c9d9] (18) WRITE CHANGE DOGGO ($2443) = Poodle (0x08)
18 // set word. what's the difference to 1C?
eb 01 // 0x2258 + 0x01eb
b8 // [0x80] + 0x30 + 0x08

// = +-
[0x938bc0] (19) WRITE $2841 = $2841 - 2
19 // same as 0x18 but different addr. offset // set word. what's the difference to 1C?
0d 00 // 0x2834 + 0x000d
0d // 0x0d, # read temp word, signed
0d 00 // 0x2834 + 0x000d
29 // 0x29, # push to stack
32 // 0x30 + 0x02
9b // [0x80] + 0x1b // 0x1b, # pulled - res

[0x92e3c1] (18) WRITE $24ab = $24ab<<4
18 // set word. what's the difference to 1C?
53 02 // 0x2258 + 0x0253
08 // 0x08, # read word, signed
53 02 // 0x2258 + 0x0253
29 // 0x29, # push to stack
34 // 0x30 + 0x04
9c // [0x80] + 0x1c // 0x1c, # pulled << res

[0x95807a] (18) WRITE $24af = $24af + (($2835)&0xff)
18 // set word. what's the difference to 1C?
57 02 // 0x2258 + 0x0257
08 // 0x08, # read word, signed
57 02 // 0x2258 + 0x0257
29 // 0x29, # push to stack
0b // 0x0b, # read temp byte, signed
01 00 // 0x2834 + 0x0001
9a // [0x80] + 0x1a // 0x1a, # pulled + res

// deref

[0x9583f3] (18) WRITE $24ab = *(boy + 26)<<2
18 // set word. what's the difference to 1C?
53 02 // 0x2258 + 0x0253
50 // BOY = 0xd0,
29 // 0x29, # push to stack
6a // 0x60 + 0x0a = 0x1a
1a // 0x1a, # pulled + res
55 // 0x55, # deref res
29 // 0x29, # push to stack
32 // 0x30 + 0x02
9c // [0x80] + 0x1c // 0x1c, # pulled << res

[0x9583fe] (18) WRITE $24af = *(boy + 28)
18 // set word. what's the difference to 1C?
57 02 // 0x2258 + 0x0257
50 // BOY = 0xd0,
29 // 0x29, # push to stack
6c // 0x60 + 0x0c = 0x1c
1a // 0x1a, # pulled + res
d5 // [0x80] + 0x55 // 0x55, # deref res

[0x92a419] (18) WRITE $2383 = *(dog + 28)
18 // set word. what's the difference to 1C?
2b 01 // 0x2258 + 0x025b
51 // DOG = 0xd1,
29 // 0x29, # push to stack
6c // 0x60 + 0x0c = 0x1c
1a // 0x1a, # pulled + res
d5 // [0x80] + 0x55 // 0x55, # deref res

[0x99a079] (18) WRITE $249d = *($283d + 26)
18 // set word. what's the difference to 1C?
45 02 // 0x2258 + 0x0245
0d // 0x0d, # read temp word, signed
09 00 // 0x2834 + 0x0009
29 // 0x29, # push to stack
6a // 0x60 + 0x0a = 0x1a
1a // 0x1a, # pulled + res
d5 // [0x80] + 0x55 // 0x55, # deref res

[0x939196] (7a) WRITE *($283b + 0x2a) = 0x50
7a // 0x7a: // *(sub-instr) = (sub-instr) according to darkmoon
0d // 0x0d, # read temp word, signed
07 00 // 0x2834 + 0x0007
29 // 0x29, # push to stack
02 // 0x02, # unsigned const byte
2a
9a // [0x80] + 0x1a // 0x1a, # pulled + res
82 // [0x80] + 0x02 // 0x02, # unsigned const byte
50

// rand
[0x99f03c] (18) WRITE $23b9 = RAND & 3
18 // set word. what's the difference to 1C?
61 01 // 0x2258 + 0x0161
2a // 0x2a, # random word
29 // 0x29, # push to stack
33 // 0x30 + 0x03 = 0x03
a4 // [0x80] + 0x24 // 0x24, # pulled & res

[0x96e286] (18) WRITE $23b9 = RANDRANGE(0,<8)
18 // set word. what's the difference to 1C?
61 01 // 0x2258 + 0x0161
38 // 0x30 + 0x08 = 0x08
ab // [0x80] + 0x2b // 0x2b, # (random word * $2) >> 16 = randrange[0,$2[

// signed

[0x94ca26] (19) WRITE $2867 = $2867 + 0xd0 signed
19 // same as 0x18 but different addr. offset // set word. what's the difference to 1C?
33 00 // 0x2258 + 0x0033
0d // 0x0d, # read temp word, signed
33 00 // 0x2258 + 0x0033
29 // 0x29, # push to stack
01 // 0x01, # signed const byte
d0
9a // [0x80] + 0x1a // 0x1a, # pulled + res

[0x9ba3e7] (1a) WRITE SCRIPT arg10 = signed arg6
1a // unknown, get current script addr, read 1 byte offset, run sub-instr, modify script
0a 
92 // [0x80] + 0x12 // 0x12, # signed word script arg
06

[0x94ab5d] (18) WRITE $24b7 = 0xea signed
18 // set word. what's the difference to 1C?
5f 02 // 0x2258 + 0x035f
81 // [0x80] + 0x01 // 0x01, # signed const byte
ea

[0x9ba7a4] (1a) WRITE SCRIPT arg12 = (signed arg2 + signed arg12) - (signed arg4>>2)
1a // unknown, get current script addr, read 1 byte offset, run sub-instr, modify script
0c
12 // 0x12, # signed word script arg
02
29 // 0x29, # push to stack
12 // 0x12, # signed word script arg
0c
1a // 0x1a, # pulled + res
29 // 0x29, # push to stack
12 // 0x12, # signed word script arg
04
29 // 0x29, # push to stack
32 // 0x30 + 0x02 = 0x02
1d // 0x1d, # pulled >> res
9b // [0x80] + 0x1b // 0x1b, # pulled - res





// AST

<0x283b>[0x2a] = 0x50;
[0x939196] (7a) WRITE *($283b + 0x2a) = 0x50
// =
7a // 0x7a: // *(sub-instr) = (sub-instr) according to darkmoon
// left = <0x283b>[0x2a]
0d // 0x0d, # read temp word, signed
07 00 // 0x2834 + 0x0007
29 // 0x29, # push to stack
02 // 0x02, # unsigned const byte
2a
9a // [0x80] + 0x1a // 0x1a, # pulled + res
// right = 0x50
82 // [0x80] + 0x02 // 0x02, # unsigned const byte
50

<0x283b>[0x2a] = 0x50;

// =




<0x2834> = 0x02 * 0x50 + 0x01;
// EQUALS(<0x2834, ADD(MUL(0x02, 0x50), 0x01))
//      MUL(0x02, 0x50) = 0xA0
//      ADD(0xA0, 0x01) = 0xA1
//      EQUALS(<0x2834>, 0xA1)

<0x2834> = 0x02 * 0x50 + <0x2834>;
// EQUALS(<0x2834, ADD(MUL(0x02, 0x50), <0x2834>))
//      MUL(0x02, 0x50) = 0xA0
//      ADD(0x50, <0x2834>) = xx xx
//      EQUALS(<0x2834>, xx xx)

<0x2834> = 0x02 * <0x2834> + 0x01;
// EQUALS(<0x2834, ADD(MUL(0x02, <0x2834>), 0x01))
//      MUL(0x02, <0x2834>) = xx xx
//      ADD(xx xx, 0x01) = yy yy
//      EQUALS(<0x2834>, yy yy)


SUB(x, y).code() -> WORD().calculate()
MUL(x, y).code() -> WORD().calculate()

ASIGN(x, y).code() -> Calculator().calculate()
IF(x).code() -> Calculator().if()



// if

[0x92d62c] (09) IF ($246d == 0) == FALSE THEN SKIP 14 (to 0x92d643)
09 // 
08 // 0x08, # read word, signed
15 02 // 0x2258 + 0x0215
29 // 0x29, # push to stack
30 // 0x30 + 0x00
a2 // [0x80] + 0x22 // 0x22, # pulled == res
0e 00

[0x9a867c] (1a) WRITE SCRIPT arg2 = $283d == 3
1a // unknown, get current script addr, read 1 byte offset, run sub-instr, modify script
02
0d // 0x0d, # read temp word, signed
09 00 // 0x2834 + 0x0009
29 // 0x29, # push to stack
33 // 0x30 + 0x03
a2 // [0x80] + 0x22 // 0x22, # pulled == res

[0x97e098] (09) IF (*($2851 + 26) > $2855) == FALSE THEN SKIP 17 (to 0x97e0b8)
09 // 
0d // 0x0d, # read temp word, signed
1d 00 // 0x2834 + 0x001d
29 // 0x29, # push to stack
6a // 0x60 + 0x0a = 0x1a
1a
55 // 0x55, # deref res
29 // 0x29, # push to stack
0d // 0x0d, # read temp word, signed
21 00 // 0x2834 + 0x0021
9f // [0x80] + 0x22 // 0x1f, # pulled > res (signed)
11 00



(08) IF (entity attached to script? will die) == FALSE THEN SKIP 1 (to 0x9ba26a)
08 //
2e // SCRIPT_OWNER = 0xae
dc // [0x80] + 0x5c
01 00

[0x95eaa2] (09) IF ($23b7 will die) == FALSE THEN SKIP 107 (to 0x95eb14)
09 // 
08 // 0x08, # read word, signed
5f 01 // 0x2258 + 0x015f
dc // [0x80] + 0x5c
6b 00



// todo

died(<0x2834>)
rand(0x01)
randrange(0x05)


[0x97e060] (08) IF (RAND & 7) == FALSE THEN SKIP 27 (to 0x97e082)
08 // 
2a // random
29 // 0x29, # push to stack
37 // 0x30 + 0x07
a4 // [0x80] + 0x24
1b 00


[0x98dc39] (19) WRITE $2837 = ($2343)&0xff
19 03 00 87 eb 00






[0x998b96] (09) IF !($2264&0x20) NOT(Energy Core) SKIP 6 (to 0x998ba2)
09 85 65 00 06 00