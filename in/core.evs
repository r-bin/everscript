group general_enums() {
    enum SYSTEM {
        WITH_DEBUG_SUBTEXT = True,

        HP_MAX = 0x7fff,
        ITEM_MAX = 0x63,
    }

    group rom() {
        enum ADDRESS {
            // intro

            INTRO_FIRST_CODE_EXECUTED = 0x92e0ca,

            // act 0

            INTRO_START_PRESSED = 0x92e44e,

            // act 1

            SOUTH_JUNGLE_ENTER = 0x9384d9,
            SOUTH_JUNGLE_ENTER_GOURD_1 = 0x93802b,

            STRONG_HEART_EXTERIOR_ENTER = 0x94e5fb,

            FE_EXIT_NORTH = 0x94bead,
            FE_EXIT_NORTH_GATED = 0x94bedc,
            FE_EXIT_EAST = 0x94be9f,
            FE_EXIT_SOUTH = 0x94be91,
            FE_EXIT_WEST = 0x94bee2,

            RAPTORS_EXIT_ENTER = 0x93912c,
            RAPTORS_EXIT_NORTH = 0x93873f,
            RAPTORS_EXIT_SOUTH = 0x93874d,
            RAPTORS_STEP_ON_FIGHT = 0x93875f,
            RAPTORS_BUSH_WIGGLE = 0x938da0,

            THRAXX_EXIT_NORTH = 0x93c6d8,
            THRAXX_EXIT_SOUTH = 0x93c6ae,

            SALABOG_EXIT_SOUTH = 0x9786e4,
            SALABOG_EXIT_NORTH = 0x9786ec,

            // misc. maps

            BRIAN_MAP_POINTER = 0x928084, // inavalid memory
            BRIAN_ENTER = 0x928000,

            // scripts

            FADE_IN_AND_DEFAULT_LOOT_DUST_REWARD = 0x92de75,

            RAISE_CURRENT_WEAPON = 0x92bf33,

            STATUS_BAR_SHOW = 0x92a3ed,
            STATUS_BAR_HIDE = 0x92a3e7,

            FADE_TO_WHITE = 0x92d723,
            FADE_FROM_WHITE = 0x92d752,

            FADE_TO_NIGHT = 0x92d89b,
            FADE_FROM_NIGHT = 0x92d8c2,

            FLASH_WHITE = 0x92d7b1,
            FLASH_WHITE_SLOWER = 0x92d752,

            EXPLODE_BOSS_STOP = 0x92df70,

            RAIN = 0x92d92a,

            MODE7_SPACESHIP = 0x92dc1b,
            MODE7_SPACESHIP_ACT4 = 0x92dc51,

            STERLING_ROAR = 0x99988a,
            METAL_MAGMAR_HEAL = 0x9ba56b,

            TURN_OFF_RAIN = 0x92d939,

            // script (weird)

            RNG2849 = 0x99e8a2, // sets $2949 to #12,#14,#16 or #18 at random, to decide what the vigor mob throws

            // asm

            DEBUG_MENU_BUTTON_1 = 0xfd8000, // button 1, "Debug: Create a monster"/"Debug: Full equipment", 40 bytes
            DEBUG_MENU_BUTTON_2 = 0xfd8040, // button 2, "Debug: Heel", 40 bytes
            DEBUG_MENU_BUTTON_3 = 0xfd8080, // button 3, "Debug: Show thud balls on path"/"Debug: Walk through walls", 40 bytes
            DEBUG_MENU_BUTTON_4 = 0xfd80c0, // button 4, "Debug: Turn off both backgrounds", 40 bytes
            DEBUG_MENU_BUTTON_5 = 0xfd8100, // button 5, "Debug: Show background 1 only", 40 bytes
            DEBUG_MENU_BUTTON_6 = 0xfd8140, // button 6, "Debug: Show background 2 only", 40 bytes
            DEBUG_MENU_BUTTON_7 = 0xfd8180, // button 7, "Debug: Show both backgrounds", 40 bytes
            DEBUG_MENU_BUTTON_8 = 0xfd81c0, // button 8, "Debug: Select map", 40 bytes
            DEBUG_MENU_BUTTON_9 = 0xfd8200, // button 9, "Debug: Mode 7 Flight", 40 bytes
            DEBUG_MENU_BUTTON_10 = 0xfd8240, // button 10, "Alchemist", 40 bytes
            DEBUG_MENU_BUTTON_11 = 0xfd8280, // button 11, "ROM Creation Date", 40 bytes

            HOTKEY_START = 0xfd82c0, // hotkey start, 40 bytes
            HOTKEY_START_L = 0xfd8300, // hotkey start+L, 40 bytes
            HOTKEY_START_R = 0xfd8340, // hotkey start+R, 40 bytes
            HOOK_MENU_CLOSE = 0xfd8380, // hook menu close, 40 bytes
        }

        enum ADDRESS_ID {
            // map

            FADE_IN = 0x36, // reads: BOY_UNAVAILABLE+DOG_UNAVAILABLE, TRANSITION_ENTER_DIRECTION, DOG_READ, writes: JUMP_HEIGHT+FALLING_HEIGHT, TRANSITION_ENTER_DIRECTION

            FADE_OUT_CREDITS = 0x57,

            // transition

            TRANSITION_NORTH = 0x27,
            TRANSITION_NORTH_SHORT = 0x26,
            TRANSITION_NORTH_NORTH = 0x2a,
            TRANSITION_EAST = 0x1d,
            TRANSITION_EAST_SOUTH = 0x20, // act3 sewers entrance
            TRANSITION_SOUTH = 0x21,
            TRANSITION_SOUTH_SHORT = 0x22,
            TRANSITION_WEST = 0x19,
            TRANSITION_UNKNOWN_1 = 0x1f,
            TRANSITION_UNKNOWN_2 = 0x1e,
            TRANSITION_UNKNOWN_3 = 0x1a,
            TRANSITION_UNKNOWN_4 = 0x29,
            TRANSITION_UNKNOWN_5 = 0x2e,
            TRANSITION_UNKNOWN_6 = 0x2d,
            TRANSITION_UNKNOWN_7 = 0x1c,
            TRANSITION_UNKNOWN_8 = 0x28,

            UNKNOWN_TRANSITION_ENTER_HANDLER = 0x36, // reads: TRANSITION_ENTER_DIRECTION+BOY_UNAVAILABLE+DOG_UNAVAILABLE, does: walk by 1 tile or FALLING_HEIGHT or JUMPING_HEIGHT

            WINGS_HELPER = 0x5b,

            // loot

            LOOT_SNIFF = 0x39,
            LOOT_GOURD = 0x3a,

            LOOT_DUST_REWARD = 0x172b, // includes the rng etc.

            LOOT_DIALOG_CURRENCY = 0x42, // reads: LOOT_AMOUNT_CURRENCY+CURRENCY_CURRENT, does: plots money lootet and currency
            LOOT_DIALOG_ITEM = 0x40, // reads: LOOT_ITEM, does: loot item with quantity 1(?)

            VANILLA_ETERNAL_DUST = 0x1b5d, // used for the boss rush

            NAME_CURRENCY = 0x51,

            // dialogue

            NPC_DIALOGUE_START = 0x32, // control_enemy(ACTIVE, True) + face_each(SCRIPT_OWNER, ACTIVE)
            NPC_DIALOGUE_STOP = 0x33, // control_enemy(ACTIVE, False)

            OPEN_TEXTBOX_DEFAULT = 0x02, // x=0x0a y=0x02 w=0x14 h=0x07
            OPEN_TEXTBOX_1 = 0x04, // x=0x0a y=0x02 w=0x14 h=0x06
            OPEN_TEXTBOX_2 = 0x05, // x=0x0a y=0x02 w=0x14 h=0x04
            OPEN_TEXTBOX_3 = 0x06, // x=0x0a y=0x02 w=0x14 h=0x03
            OPEN_TEXTBOX_4 = 0x07, // x=0x02 y=0x02 w=0x14 h=0x07
            OPEN_TEXTBOX_5 = 0x09, // x=0x02 y=0x02 w=0x14 h=0x06
            OPEN_TEXTBOX_6 = 0x0a, // x=0x02 y=0x02 w=0x14 h=0x04
            OPEN_TEXTBOX_7 = 0x0b, // x=0x02 y=0x02 w=0x14 h=0x03
            OPEN_TEXTBOX_8 = 0x0d, // x=0x03 y=0x14 w=0x1a h=0x02 (unbordered?)
            OPEN_TEXTBOX_9 = 0x0e, // x=0x0a y=0x02 w=0x14 h=0x08
            OPEN_TEXTBOX_10 = 0x13, // x=0x02 y=0x02 w=0x14 h=0x08
            OPEN_TEXTBOX_11 = 0x18, // x=0x0c y=0x13 w=0x12 h=0x05
            OPEN_TEXTBOX_12 = 0x03, // x=0x0a y=0x02 w=0x14 h=0x08

            DIALOGUE_BUY_INGREDIENT = 0x54,
            DIALOGUE_SAVE = 0x4d,

            // music

            MUSIC_FADE_IN = 0x01,
            MUSIC_FADE_OUT = 0x00,

            // scripts

            BOMB_EXPLOSION = 0x1b66,

            OUTRO = 0x59, // starts in nobilia, but the boy

            VENDOR_EXCHANGE_CURRENCY_HELPER = 0x55,
            VENDOR_SHOPPING_CURRENCY_CHANGE_HELPER = 0x53,
            VENDOR_NOT_ENOUGH_CURRENCY_HELPER = 0x50,
            VENDOR_BUY_HELPER = 0x47,
            VENDOR_SELL_HELPER = 0x49,

            // unknown

            UNKNOWN_1 = 0x34, // "(5a) UNTRACED INSTR, checking message timer"
            UNKNOWN_2 = 0x35, // "(5b) UNTRACED INSTR, checking message timer"

            // VANILLA

            // bosses

            RIMSALA_STATUE_RESET_1 = 0xbb, // statue=$283d
            RIMSALA_STATUE_RESET_2 = 0xbc, // statue=$283f
            RIMSALA_STATUE_RESET_3 = 0xbd, // statue=$2841
            RIMSALA_STATUE_RESET_4 = 0xbe, // statue=$2843
            RIMSALA_STATUE_RESET_5 = 0xbf, // statue=$2845
            RIMSALA_STATUE_RESET_6 = 0xc0, // statue=$2847

            // events

            TINY_TRADE_TAPESTRY = 0xd4,

            // talk scripts

            VANILLA_TALK_STRONGHEART = 0x1863,

            // death scripts

            VANILLA_DEATH_GRAVEYARD_LIZARD_2 = 0x17d6,
            VANILLA_DEATH_GRAVEYARD_LIZARD_3 = 0x17d9,
            VANILLA_DEATH_GRAVEYARD_LIZARD_4 = 0x17dc,
        }

        enum ATTACK_PROC {
            DEFAULT = 0x00,
            
            VORE = 0x0c, // flowers
            NO_KNOCKBACK = 0x0e, // mosquito (insect incense)
            
            POISON = 0x12, // "Son of Set" (1/4)
            POISON_SPIDER = 0x14, // spiders (1/4, insect incense)
            PLAGUE = 0x16, // rat
            POISON_SNAKE = 0x18, // "stone cobra" (100%)
            PLAGUE_CONFOUND = 0x1c, // monk (1/4, 1/4, level 5)

            BOY = 0x08, // grants weapon xp?
            DOG = 0x0a, // grants weapon xp?

            // weird
            PROJECTILE = 0x02,
            PIERCING = 0x04, // toaster projectiles? (deals little damage)
            ARMOR_PIERCING = 0x06, // bomb? (deals little damage)
            NO_KNOCKBACK = 0x10, // unused?
            GUARANTEED_HIT = 0x1a, // bomb? (deals a lot of damage)

            // crash: 1e, 20, â€¦
        }

        enum ALCHEMY_TARGET {
            BOY = 0x0008, // atlas, call up, one up
            BOTH = 0x0802, // wings, escape, super heal
            BOY_DOG = 0x0a00, // petal, nectar, honey, essence, pixie dust
            BOY_DOG_BOTH = 0x0800, // barrier, cure, defend, force field, heal, miracle cure, reflect, regrowth, speed
            ENEMY_ALL = 0x1020, // acid rain, double drain, drain, explosion, fireball, fire power, flash, hard ball, lance, laser, lightning storm, nitro, slow burn, sting, stop

            // special
            DOG_DEAD_1 = 0x0214, // biscuit
            DOG_DEAD_2 = 0x0014, // revive
            LEVITATE = 0x2200, // levitate
            REVEALER = 0x0240, // revealer

            // weird
            MENU = 0x6600, // call beads, pouch
        }

        enum ARMOR_INDEX {
            ARMOR_1_1 = 0x01,
            ARMOR_1_2 = 0x02,
            ARMOR_1_3 = 0x03,
            ARMOR_2_1 = 0x04,
            ARMOR_2_2 = 0x05,
            ARMOR_2_3 = 0x06,
            ARMOR_3_1 = 0x07,
            ARMOR_3_2 = 0x08,
            ARMOR_3_3 = 0x09,
            ARMOR_4_1 = 0x0a,
            ARMOR_4_2 = 0x0b,
            ARMOR_4_3 = 0x0c,

            HELM_1_1 = 0x0d,
            HELM_1_2 = 0x0e,
            HELM_1_3 = 0x0f,
            HELM_2_1 = 0x10,
            HELM_2_2 = 0x11,
            HELM_2_3 = 0x12,
            HELM_3_1 = 0x13,
            HELM_3_2 = 0x14,
            HELM_3_3 = 0x15,
            HELM_4_1 = 0x16,
            HELM_4_2 = 0x17,
            HELM_4_3 = 0x18,

            ARMBAND_1_1 = 0x19,
            ARMBAND_1_2 = 0x1a,
            ARMBAND_1_3 = 0x1b,
            ARMBAND_2_1 = 0x1c,
            ARMBAND_2_2 = 0x1d,
            ARMBAND_2_3 = 0x1e,
            ARMBAND_3_1 = 0x1f,
            ARMBAND_3_2 = 0x20,
            ARMBAND_3_3 = 0x21,
            ARMBAND_4_1 = 0x22,
            ARMBAND_4_2 = 0x23,
            ARMBAND_4_3 = 0x24,
            
            COLLAR_1 = 0x25,
            COLLAR_2 = 0x26,
            COLLAR_3 = 0x27,
            COLLAR_4 = 0x28,
        }
    };

    group ram() {
        enum MEMORY {
            // currency
            TALONS = <0x0ac6>,
            JEWELS = <0x0ac9>,
            GOLD = <0x0acc>,
            CREDITS = <0x0acf>,

            CURRENCY_CURRENT = (Byte) <0x2348>,

            MAP = (Byte) <0xadb>, // buggy
            PACIFIED = <0x23bf>,
            FAKE_HOUSE_ID = <0x234b>,

            DOG_WRITE = <0x2443>,
            DOG_READ = <0x2363>,
            QUESTION_ANSWER = <0x289d>,
            STRING_PARAMETER_1 = <0x2537>,
            STRING_PARAMETER_2 = <0x2539>,
            STRING_PARAMETER_3 = <0x253b>,

            // enemies

            NEXT_ENEMY_FOLLOWS_ENTITY = <0x2533>, // consumed after an enemy was added (e.g. BEE, CHAMELEON)

            // sniff spot looting
            LOOT_ITEM = <0x2391>,
            LOOT_OBJECT = <0x2395>,
            LOOT_AMOUNT_CURRENCY = <0x2393>,
            LOOT_AMOUNT = <0x2461>,
            
            ENTITY_1 = <0x2835>,
            ENTITY_2 = <0x2837>,
            ENTITY_3 = <0x2839>,
            ENTITY_4 = <0x283b>,
            ENTITY_5 = <0x283d>,
            LAST_ENTITY = <0x0341>,

            BOY_LEVEL = <0x0A50>,
            BOY_CURRENT_HP = <0x4EB3>,
            BOY_XP_REQUIRED = <0x4F1D>,

            DOG_LEVEL = <0x0A9A>,
            DOG_XP_REQUIRED = <0x4FCB>,

            ENEMY_SPAWNER_QUANTITY = <0x2433>,

            WINDWALKER_TYPE = <0x2355>,

            // music
            CURRENT_MUSIC = <0x0E4B>, // buggy

            // weapons
            GAIN_WEAPON = <0x2441>,
            CURRENT_WEAPON = (Byte) <0x235F>,

            // vendor

            VENDOR_RECOMMEND_CURRENCY_CHANGE = <0x240d>, // updated with call_id(VENDOR_RECOMMEND_CURRENCY_CHANGE);, 0->recommend change

            // map

            CHANGE_MUSIC = <0x238d>,

            MAP_PALETTE = <0x2437>, // thraxx (0=orange, 7=white), waterfall (7=normal, 0=?), ivor/ebon (7=ebon/ivor, 4=?), greenhouse (6=dark?), storage (7=dark?)

            CAMERA_X = <0x242b>,
            CAMERA_Y = <0x242d>,
            CAMERA_SPEED = <0x242f>,

            FOREGROUND_OFFSET_X = <0x241b>, // only used in dark forest
            FOREGROUND_OFFSET_Y = <0x241d>,

            TRANSITION_ENTER_DIRECTION = <0x238f>,

            // NPCs

            SHOP_RING_MENU_AND_POSITION_ID = <0x2459>,

            // ingredients

            WAX = (Byte) <0x22ff>,
            WATER = (Byte) <0x2300>,
            VINEGAR = (Byte) <0x2301>,
            ROOT = (Byte) <0x2302>,
            OIL = (Byte) <0x2303>,
            MUSHROOM = (Byte) <0x2304>,
            MUD_PEPPER = (Byte) <0x2305>,
            METEORITE = (Byte) <0x2306>,
            LIMESTONE = (Byte) <0x2307>,
            IRON = (Byte) <0x2308>,
            GUNPOWDER = (Byte) <0x2309>,
            GREASE = (Byte) <0x230a>,
            FEATHER = (Byte) <0x230b>,
            ETHANOL = (Byte) <0x230c>,
            DRY_ICE = (Byte) <0x230d>,
            CRYSTAL = (Byte) <0x230e>,
            CLAY = (Byte) <0x230f>,
            BRIMSTONE = (Byte) <0x2310>,
            BONE = (Byte) <0x2311>,
            ATLAS_AMULET = (Byte) <0x2312>,
            ASH = (Byte) <0x2313>,
            ACORN = (Byte) <0x2314>,

            // consumables
            PETAL = (Byte) <0x2315>,
            NECTAR = (Byte) <0x2316>,
            HONEY = (Byte) <0x2317>,
            DOG_BISCUIT = (Byte) <0x2318>,
            WINGS = (Byte) <0x2319>,
            ESSENCE = (Byte) <0x231a>,
            PIXIE_DUST = (Byte) <0x231b>,
            CALL_BEADS = (Byte) <0x231c>,

            // armor
            ARMOR_1_1 = (Byte) <0x231d>,
            ARMOR_1_2 = (Byte) <0x231e>,
            ARMOR_1_3 = (Byte) <0x231f>,
            ARMOR_2_1 = (Byte) <0x2320>,
            ARMOR_2_2 = (Byte) <0x2321>,
            ARMOR_2_3 = (Byte) <0x2322>,
            ARMOR_3_1 = (Byte) <0x2323>,
            ARMOR_3_2 = (Byte) <0x2324>,
            ARMOR_3_3 = (Byte) <0x2325>,
            ARMOR_4_1 = (Byte) <0x2326>,
            ARMOR_4_2 = (Byte) <0x2327>,
            ARMOR_4_3 = (Byte) <0x2328>,
            HELM_1_1 = (Byte) <0x2329>,
            HELM_1_2 = (Byte) <0x232a>,
            HELM_1_3 = (Byte) <0x232b>,
            HELM_2_1 = (Byte) <0x232c>,
            HELM_2_2 = (Byte) <0x232d>,
            HELM_2_3 = (Byte) <0x232e>,
            HELM_3_1 = (Byte) <0x232f>,
            HELM_3_2 = (Byte) <0x2330>,
            HELM_3_3 = (Byte) <0x2331>,
            HELM_4_1 = (Byte) <0x2332>,
            HELM_4_2 = (Byte) <0x2333>,
            HELM_4_3 = (Byte) <0x2334>,
            ARMBAND_1_1 = (Byte) <0x2335>,
            ARMBAND_1_2 = (Byte) <0x2336>,
            ARMBAND_1_3 = (Byte) <0x2337>,
            ARMBAND_2_1 = (Byte) <0x2338>,
            ARMBAND_2_2 = (Byte) <0x2339>,
            ARMBAND_2_3 = (Byte) <0x233a>,
            ARMBAND_3_1 = (Byte) <0x233b>,
            ARMBAND_3_2 = (Byte) <0x233c>,
            ARMBAND_3_3 = (Byte) <0x233d>,
            ARMBAND_4_1 = (Byte) <0x233e>,
            ARMBAND_4_2 = (Byte) <0x233f>,
            ARMBAND_4_3 = (Byte) <0x2340>,
            COLLAR_1 = (Byte) <0x2341>,
            COLLAR_2 = (Byte) <0x2342>,
            COLLAR_3 = (Byte) <0x2343>,
            COLLAR_4 = (Byte) <0x2344>,

            // ammo
            AMMO_1 = (Byte) <0x2345>,
            AMMO_2 = (Byte) <0x2346>,
            AMMO_3 = (Byte) <0x2347>,

            ANNIHILATION_AMULET = <0x2517>,
            BEAD = <0x2519>,
            CERAMIC_POT = <0x251b>,
            CHICKEN = <0x251d>,
            GOLDEN_JACKAL = <0x251f>,
            JEWELED_SCARAB = <0x2521>,
            LIMESTONE_TABLET = <0x2523>,
            PERFUME = <0x2525>,
            RICE = <0x2527>,
            SPICE = <0x2529>,
            SPOON = <0x252b>,
            TAPESTRY = <0x252d>,
            TICKET_FOR_EXHIBITION = <0x252f>,

            // selected alchemy
            SELECTED_ALCHEMY_0 = (Byte) <0x0ADA>,
            SELECTED_ALCHEMY_1 = (Byte) <0x0AD9>,
            SELECTED_ALCHEMY_2 = (Byte) <0x0AD8>,
            SELECTED_ALCHEMY_3 = (Byte) <0x0AD7>,
            SELECTED_ALCHEMY_4 = (Byte) <0x0AD6>,
            SELECTED_ALCHEMY_5 = (Byte) <0x0AD5>,
            SELECTED_ALCHEMY_6 = (Byte) <0x0AD4>,
            SELECTED_ALCHEMY_7 = (Byte) <0x0AD3>,
            SELECTED_ALCHEMY_8 = (Byte) <0x0AD2>,

            ALCHEMY_LEVEL_ATLAS = <0x2F9a>, // max=10
            ALCHEMY_LEVEL_DEFEND = <0x2FA6>, // max=10? good=3

            // weapon level
            LEVEL_FIST = <0x0ADD>, // unused
            LEVEL_BAZOOKA = <0x0AF7>,
            LEVEL_DOG = <0x0B07>,
            LEVEL_1_SWORD = <0x0ADF>, // bone crusher
            LEVEL_1_AXE = <0x0AE7>,
            LEVEL_1_SPEAR = <0x0AEF>,
            LEVEL_2_SWORD = <0x0AE1>,
            LEVEL_2_AXE = <0x0AE9>,
            LEVEL_2_SPEAR = <0x0AF1>,
            LEVEL_3_SWORD = <0x0AE3>,
            LEVEL_3_AXE = <0x0AEB>,
            LEVEL_3_SPEAR = <0x0AF3>,
            LEVEL_4_SWORD = <0x0AE5>,
            LEVEL_4_AXE = <0x0AED>,
            LEVEL_4_SPEAR = <0x0AF5>,

            // rooms
            DARK_FOREST_XY = <0x2835>,
            DARK_FOREST_LAYOUT = <0x2839>,

            // debug
            DEBUG_MENU_COUNT = <0x0f5a>,

            // unknown
            UNKNOWN_ETERNAL_DUST_DROP_PROPERTY = <0x23d9>, // used in: boss rush (1=for eternal dust drops)

            UNKNOWN_1 = <0x23c1>, // used in: sandpits, bugmuck, bbm_2, swamp, pipemaze_rooms, waterfall, swamp_bridge, greenhouse (1=?)
        }

        enum FLAG {
            // system

            EMPTY_SRAM = <0x22ea, 0x04>, // intro skip

            SHOW_HUD = <0x22ea, 0x80>, // requires update_ui();

            DEBUG = <0x22eb, 0x08>,
            INTRO_DEMO_MODE = <0x22eb, 0x04>, // ?

            START_PRESSED = <0x22eb, 0x02>,

            IN_ANIMATION = <0x22eb, 0x20>,

            DOG_UNAVAILABLE = <0x2261, 0x01>,
            BOY_UNAVAILABLE = <0x2261, 0x02>,

            WINDWALKER_UNLOCKED = <0x22dc, 0x08>,

            // items

            // charms
            ARMOR_POLISH = <0x2261, 0x20>,
            CHOCOBO_EGG = <0x2261, 0x40>,
            INSECT_INCENSE = <0x2261, 0x80>,

            JADE_DISK = <0x2262, 0x01>,
            JAGUAR_RING = <0x2262, 0x02>,
            MAGIC_GOURD = <0x2262, 0x04>,
            MOXA_STICK = <0x2262, 0x08>,
            ORACLE_BONE = <0x2262, 0x10>,
            RUBY_HEART = <0x2262, 0x20>,
            SILVER_SHEATH = <0x2262, 0x40>,
            STAFF_OF_LIFE = <0x2262, 0x80>,

            SUN_STONE = <0x2263, 0x01>,
            THUGS_CLOAK = <0x2263, 0x02>,
            WIZARDS_COIN = <0x2263, 0x04>,

            DIAMOND_EYE = <0x2264, 0x01>,
            DIAMOND_EYES = <0x2264, 0x02>,
            GAUGE = <0x2264, 0x04>,
            WHEEL = <0x2264, 0x08>,
            QUEENS_KEY = <0x2264, 0x10>,
            ENERGY_CORE = <0x2264, 0x20>,

            // alchemy
            ACID_RAIN = <0x2258, 0x01>,
            ATLAS = <0x2258, 0x02>,
            BARRIER = <0x2258, 0x04>,
            CALL_UP = <0x2258, 0x08>,
            CORROSION = <0x2258, 0x10>,
            CRUSH = <0x2258, 0x20>,
            CURE = <0x2258, 0x40>,
            DEFEND = <0x2258, 0x80>,

            DOUBLE_DRAIN = <0x2259, 0x01>,
            DRAIN = <0x2259, 0x02>,
            ENERGIZE = <0x2259, 0x04>,
            ESCAPE = <0x2259, 0x08>,
            EXPLOSION = <0x2259, 0x10>,
            FIREBALL = <0x2259, 0x20>,
            FIRE_POWER = <0x2259, 0x40>,
            FLASH = <0x2259, 0x80>,

            FORCE_FIELD = <0x225a, 0x01>,
            HARD_BALL = <0x225a, 0x02>,
            HEAL = <0x225a, 0x04>,
            LANCE = <0x225a, 0x08>,
            LASER = <0x225a, 0x10>,
            LEVITATE = <0x225a, 0x20>,
            LIGHTNING_STORM = <0x225a, 0x40>,
            MIRACLE_CURE = <0x225a, 0x80>,

            NITRO = <0x225b, 0x01>,
            ONE_UP = <0x225b, 0x02>,
            REFLECT = <0x225b, 0x04>,
            REGROWTH = <0x225b, 0x08>,
            REVEALER = <0x225b, 0x10>,
            REVIVE = <0x225b, 0x20>,
            SLOW_BURN = <0x225b, 0x40>,
            SPEED = <0x225b, 0x80>,

            STING = <0x225c, 0x01>,
            STOP = <0x225c, 0x02>,
            SUPER_HEAL = <0x225c, 0x04>,

            // weapons
            SWORD_1 = <0x22DA, 0x02>, // "Bone Crusher"
            SWORD_2 = <0x22DA, 0x04>, // "Gladiator Sword"
            SWORD_3 = <0x22DA, 0x08>, // "Crusader Sword"
            SWORD_4 = <0x22DA, 0x10>, // "Neutron Blade"

            AXE_1 = <0x22DA, 0x20>, // "Spider's Claw"
            AXE_2 = <0x22DA, 0x40>, // "Bronze Axe"
            AXE_3 = <0x22DA, 0x80>, // "Knight Basher"
            AXE_4 = <0x22DB, 0x01>, // "Atom Smasher"

            SPEAR_1 = <0x22DB, 0x02>, // "Horn Spear"
            SPEAR_2 = <0x22DB, 0x04>, // "Bronze Spear"
            SPEAR_3 = <0x22DB, 0x08>, // "Lance"
            SPEAR_4 = <0x22DB, 0x10>, // "Laser Lance"

            // loot

            LOOT_SUCCESSFUL = <0x22ea, 0x01>,

            // VANILLA

            // bosses

            RAPTORS = <0x225f, 0x40>,
            THRAXX = <0x2260, 0x10>,
            MAGMAR = <0x2260, 0x40>,
            SALABOG = <0x22f3, 0x20>,

            // events

            FLOWERS_CUTSCENE_WATCHED = <0x22ab, 0x40>,

            BLIMP_BRIDGE = <0x225f, 0x01>,

            // gourds

            GOURD_1 = <0x2268, 0x40>,
        }
    };

    group everscript() {
        group map() {
            enum MAP {
                // ACT 0

                PODUNK_65 = 0x31,
                MANSION_65 = 0x02,
                PODUNK_95 = 0x32,
                MANSION_95 = 0x03,
                
                // ACT 1

                // south jungle
                FLOWERS = 0x38,
                STRONGHEART_EXTERIOR = 0x33,
                STRONGHEART = 0x34,
                RAPTORS = 0x5c,

                // village
                VILLAGE = 0x25,
                VILLAGE_HUTS = 0x51,
                DEFEND = 0x51,

                // east jungle
                EAST_JUNGLE = 0x5b,
                FIREPIT_JUNGLE = 0x36,
                SANDPITS = 0x59,
                ACID_RAIN = 0x5a,
                BUGMUCK = 0x67,
                BBM_1 = 0x16,
                BBM_2 = 0x17,
                THRAXX = 0x18,

                // north jungle
                NORTH_JUNGLE = 0x41,
                GRAVEYARD = 0x27,
                VOLCANO_PATH = 0x69,
                VOLCANO_TOP = 0x52,
                SKY = 0x50,
                SWAMP_ENTRANCE = 0x66,
                SWAMP = 0x65,
                SALABOG = 0x01,
                VOLCANO_ROOMS = 0x3c,
                VOLCANO = 0x3b,
                PIPEMAZE = 0x3d,
                PIPEMAZE_ROOMS = 0x3e,
                MAGMAR = 0x3f,

                // ACT 2

                // crusticia
                CUTSCENE_RIVER = 0x53,
                CUTSCENE_WATERFALL = 0x6a,

                CRUSTICIA = 0x68,
                CRUSTICIA_CAVES = 0x30,

                // east
                BLIMP_EXTERIOR = 0x4f,
                BLIMP = 0x2e,
                FIREPIT_BEACH = 0x04,
                DESERT = 0x1b,

                // nobilia
                NOBILIA_MARKET = 0x0a,
                NOBILIA_NORTH = 0x1c,
                NOBILIA_SQUARE = 0x08,
                AEGIS = 0x09,
                FIREPIT_NOBILIA = 0x3a,
                NOBILIA_HOUSES = 0x0c,

                ARENA_ROOM = 0x1e,
                ARENA = 0x1d,

                PALACE_SNAKES = 0x4c,
                PALACE_EXTERIOR = 0x0b,
                PALACE = 0x4d,
                
                // west
                RIVER = 0x07,
                CROSSING = 0x05,
                HORACE = 0x2f,
                WATERFALL = 0x6b,
                OGLIN_CAVE = 0x4b,
                AQUAGOTH = 0x6d,

                HALLS_EXTERIOR = 0x2b,
                HALLS_CENTER = 0x29,
                HALLS_NW = 0x24,
                HALLS_SE = 0x2c,
                HALLS_SW = 0x23,
                HALLS_BRIDGE = 0x28,
                HALLS_NE = 0x2d,
                MEGATAUR = 0x2a,

                PYRAMID_EXTERIOR = 0x06,
                PYRAMID_CAVE = 0x64,
                TINY = 0x57,
                PYRAMID_1 = 0x55,
                PYRAMID_2 = 0x56,
                RIMSALA = 0x58,

                // ACT 3

                WELL = 0x6c,
                GATE = 0x76,

                FOOTKNIGHT = 0x19,
                CHESSBOARD_STAIRS = 0x1a,
                DARK_FOREST_ENTRANCE = 0x21,
                DARK_FOREST = 0x22,
                BAD_BOYS = 0x1f,
                TIMBERDRAKE = 0x20,
                CROSSING_ACT3 = 0x13,
                SWAMP_BRIDGE = 0x40,
                STERLING = 0x37,

                // ivor+ebon

                IVOR_EBON_1 = 0x7b,
                IVOR_EBON_2 = 0x7c,
                IVOR_EBON_HOUSES = 0x7d,
                IVOR_EBON_PRISON = 0x74,

                // ivor

                IVOR_MARKET = 0x4e,
                IVOR_TRAILERS_EXTERIOR = 0x62,
                IVOR_TRAILERS_INTERIOR = 0x63,

                IVOR_HALL = 0x6e,
                IVOR_THRONE = 0x78,
                MUNGOLA = 0x77,
                IVOR_BANQUET = 0x6f,
                IVOR_BRIDGE = 0x70,
                IVOR_ROOMS_1 = 0x71,
                IVOR_ROOMS_2 = 0x72,
                DOG_MAZE = 0x73,
                IVOR_STAIRS = 0x75,
                IVOR_SEWERS = 0x79,
                IVOR_SEWERS_EXTERIOR = 0x7a,

                // ebon

                EBON_COURT = 0x5d,
                EBON_COURT_SIDEROOMS = 0x5f,
                VERMINATOR = 0x5e,
                EBON_CELLAR = 0x60,
                EBON_HALL = 0x0d,
                EBON_SEWERS = 0x12,
                EBON_BANQUET = 0x0e,
                NARIS = 0x0f,
                EBON_THRONE = 0x11,
                EBON_GLASS = 0x10,
                TINKER = 0x14,
                TINKER_EXTERIOR = 0x39,

                // ACT 4

                OMNITOPIA_JUNKYARD = 0x49,
                OMNITOPIA_JAIL = 0x7e,
                OMNITOPIA_METROPLEX = 0x48,

                // omnitopia rooms

                OMNITOPIA_SHOPPING = 0x54,
                OMNITOPIA_CONTROL = 0x43,
                FACE = 0x45,
                OMNITOPIA_REACTOR = 0x42,
                OMNITOPIA_STORAGE = 0x47,
                OMNITOPIA_GREENHOUSE = 0x44,
                OMNITOPIA_ALARM = 0x00,
                OMNITOPIA_PROFESSOR = 0x46,
                CARLTRON = 0x4a,
                
                // MISC

                ACT1_2_CAVES = 0x35,
                BRIAN = 0x15,

                // special
                OPENING = 0x61,
                START = 0x00,
            }

            enum SPECIAL_SCRIPTS {
                LOOTING = 0xb1,
                REVEALER = 0xb2,
                LEVITATE = 0xb3,
                SELECT_PRESSED = 0xb4,
                WINGS = 0xb5,
                UNKNOWN = 0xb6 // used inside and outside of the pyramids
            }

            enum SFX_EFFECT {
                RAIN = 0x0001,
                NIGHT = 0x0002,
                SHAKING = 0x003,
                SEPIA = 0x0004,
            }
        };

        group dialog() {
            enum FONT {
                DEFAULT = 0x00,
                OUTRO = 0x02,
            }

            enum MESSAGE_BOX_TYPE {
                DEFAULT = 0x44,
                TRANSPARENT_CENTERED = 0x47,
            }
        };
        
        group audio() {
            enum MUSIC {
                // ambient
                JUNGLE_AMBIENT_BIRDS = 0x7a,
                BUGMUCK_AMBIENT_MELODY = 0x14,

                // theme

                // event
                BOSS = 0x24,

                // effect
                FANFARE = 0x36,
                FANFARE_ITEM = 0x78,
            }
            
            enum SOUND {
                NONE = 0x00,

                MENU_WHEEL_TURN = 0x02,
                MENU_WHEEL_OPEN = 0x04,
                MENU_WHEEL_CLOSE = 0x06,

                GORE_FLOWER = 0x08,
                HEAVY_IMPACT = 0x0a,

                AXE_ATTACK = 0x10, // ?
                SPIDER_ATTACK = 0x1a,
                FLOWER_VORE = 0x1c,

                SPEAR_ATTACK = 0x20, // same as sword?
                DOG_ATTACK = 0x24,

                AXE_ATTACK = 0x20, // ?
                SWORD_ATTACK = 0x2a,
                MECHANICAL_MOVEMENT = 0x2c, // same as wall hits?
                HEAL_START = 0x2e,

                HEAL_END = 0x30,
                GORE_EXPLOSION = 0x32,
                TESLA = 0x34, // intro title reveal
                TELEPORTER = 0x36,
                CLICK_1 = 0x38, // ring turn, same as MENU_WHEEL_TURN?
                CLICK_2 = 0x3a, // inner menu?

                IMPACT = 0x3c, // same as HEAVY_IMPACT?
                GORE_MOSQUITO = 0x3e,

                PURCHASE = 0x40,
                CLICK_3 = 0x44, // save state selection?
                UNKNOWN_ALCHEMY = 0x4c, // ?
                BIRD = 0x4e, // ???

                
                WEIRD_SOUND = 0x50, // ???
                PIPING_SOUND = 0x52,
                TEMPLE_BRIDGE_COLLAPSING = 0x54,
                MENU_WHEEL_OPEN_2 = 0x56, // same as MENU_WHEEL_OPEN?
                THRAXX_BRIDGE_COLLAPSING = 0x58,
                MAGMA_HARDENING = 0x5a, // same as switch triggered
                DOG_MAZE_HINT = 0x5c,
                SANDPIT_SWALLOW = 0x5e, // also: act3 vents

                MOSQUITO_ATTACK = 0x66,
                FLOWER_ATTACK = 0x68,

                THRAXX_DAMAGE = 0x22, // music:0x04

                NITRO_START = 0x74,
                UNKNOWN_ALCHEMY_2 = 0x7e,

                HOVER_SOUNDS = 0x86,
                UNKNOWN_ALCHEMY_3 = 0x88,
                LEVITATE = 0x8a,
                UNKNOWN_ALCHEMY_4 = 0x8c,
                PROJECTILE_SHOOTING = 0x8e, // magmar puke
                UNKNOWN_ALCHEMY_5 = 0x90,
                UNKNOWN_ALCHEMY_6 = 0x92,
                UNKNOWN_ALCHEMY_7 = 0x96,
                UNKNOWN_ALCHEMY_8 = 0x98,
                ACT4_SWITCH = 0x9c,
                UNKNOWN_ALCHEMY_9 = 0x9e, // not alchemy?

                // inaudible: 0c, 0e, 16, 18, 26, 28, 62
                // glitchy: 12, 14, 1e, 42, 46, 48, 4a, 60, 64, 6a, 6c, 6e, 70, 72, 76, 78, 7a, 7c?, 80?, 84, 94, 9a
                // todo: b2
                DOOR = 0x46, // works for music: 40
                // crash: 100
            }
        };

        group sprites() {
            enum CHARACTER {
                BOY = 0x50,
                DOG = 0x51,
                ACTIVE = 0x52,
                INACTIVE = 0x53,

                LAST_ENTITY = 0x2d,
                SCRIPT_OWNER = 0x2e,

                RANDOM = 0x2a,

                // custom
                BOTH = 0x00,
                NONE = 0x01,
            }
            enum DOG {
                WOLF = 0x2,
                WOLF2 = 0x4,
                GREYHOUND = 0x6,
                POODLE = 0x8,
                PUPPER = 0xa,
                TOASTER = 0xc
            }

            enum ENEMY {
                // npc - act 1
                FIRE_EYES = 0x15, // "Fire Eyes"
                EVIL_FIRE_EYES = 0x16, // "Evil Fire Eyes"
                BLIMP = 0x17,
                HARRY = 0x34, // "Harry"
                
                VILLAGER_1_1 = 0x04, // girl, teal hair, bone in hair (lizard girl)
                VILLAGER_1_2 = 0x05, // boy, green hair (bee boy)
                VILLAGER_1_3 = 0x06, // woman, fruit in hair (consumables vendor)
                VILLAGER_1_4 = 0x07, // man, green hair, no shirt (fire eye guard)
                VILLAGER_1_5 = 0x08, // woman, teal hair, pink dress
                VILLAGER_1_6 = 0x09, // man, green hair, beard, bone as cain
                VILLAGER_1_7 = 0x12, // man, green hair, beard (hard ball guy)
                VILLAGER_1_8 = 0x7e, // same as ^

                BEE = 0x02, // "Child's Pet"
                CHAMELEON = 0x03, // "Child's Pet"

                // npc - act 2
                HORACE = 0x45, // "Horace"
                HORACE_EVIL = 0x62, // "Horace's Twin"
                TINY = 0x46, // "Tiny"

                VILLAGER_2_1 = 0x18, // boy, dark hair
                VILLAGER_2_2 = 0x19, // girl, red hair
                VILLAGER_2_3 = 0x1a, // man, dark hair, beard, laurel crown
                VILLAGER_2_4 = 0x1b, // woman, red hair
                VILLAGER_2_5 = 0x1c, // man, white hair, beard, purple scarf
                VILLAGER_2_6 = 0x1d, // woman, headscarf (trading vendor)
                VILLAGER_2_7 = 0x31, // man, dark hair, beard, laurel crown, orange scarf
                VILLAGER_2_8 = 0x32, // same as VILLAGER_2_5
                VILLAGER_2_9 = 0x33, // man, white hair, beard, green scarf

                BOXER_1 = 0x2d, // "Mad Monk", left
                BOXER_2 = 0x2e, // "Mad Monk", right
                DRUNK_1 = 0x2f, // "Mad Monk", left
                DRUNK_2 = 0x30, // "Mad Monk", right

                // npc - act 3
                QUEEN = 0x4c,
                QUEEN_JUMP = 0x4b,
                KING = 0x54, // "Legendary King"
                TINKER = 0x58, // "Tinker Tinderbox"
                TINKER_TWIN = 0x81, // "Gomi"

                VILLAGER_3_1 = 0x48, // man, purple dress (well guy, freakshow guy)
                VILLAGER_3_2 = 0x51, // "Legendary boy", boy, dark hair (naris)
                VILLAGER_3_3 = 0x52, // girl, blonde hair, teddy bear
                VILLAGER_3_4 = 0x53, // woman, white hair, purple dress (regrowth woman)
                VILLAGER_3_5 = 0x55, // man, white hair (naris old)
                VILLAGER_3_6 = 0x56, // viking

                // npc - act 4
                PROFESSOR = 0x57, // "Professor Ruffleberg"
                CARLTRON = 0x5f, // "Carltron"

                // enemy - act 1
                MOSQUITO = 0x0f, // "Mosquito"
                FLOWER_PURPLE = 0x0b, // "Wimpy Flower"

                SKELESNAIL = 0x26, // "Skelesnail"

                MAGGOT = 0x0e, // "Maggot"
                BONE_SNAKE = 0x0a, // "Tar Skull"

                FLOWER_ORANGE = 0x0c, // "Carniflower"

                SPIDER = 0x22, // "Widowmaker"
                LIZARD = 0x29, // "Viper"

                RAPTOR_GREEN = 0x2b, // "Raptor"
                
                FRIPPO = 0x21, // "Frippo"

                LANTERN_LIGHT = 0x37, // "Will o' the Wisp"

                // enemy - act 2
                MONK = 0x28, // "Mad Monk"
                PIRATE_ANCHOR = 0x27, // "Rogue"

                SPIDER_YELLOW = 0x23, // "Sand Spider"
                TUMBLING_WEED = 0x73, // "Tumble Weed"
                BUZZARD_1 = 0x74, // "Bone Buzzard"

                DANCING_DEVIL_1 = 0x76, // "Dancin' Fool"
                SLIME_GREEN = 0x70, // "Lime Slime"
                RAT_RED = 0x7c, // "Rat"

                PYRAMID_GUARDIAN_1 = 0x39, // "Son of Anhur"
                MUMMY = 0x72, // "Mummy Cat"
                SNAKE_STATUE_1 = 0x59, // "Stone Cobra"
                SNAKE_STATUE_2 = 0x5a, // "Stone Cobra"

                BUZZARD_BLACK = 0x63, // "Skullclaw"
                DOG_1_BLACK = 0x61, // "Bad Dawg"
                LANTERN_LIGHT_RED = 0x64, // "Will o' the Wisp"

                OGLIN = 0x6e, // "Oglin"

                TENTACLE_WHIP = 0x3f, // "Tentacle"
                TENTACLE_SPIKE = 0x4a,
                SPARK = 0x40,

                // enemy - act 3
                HEDGEHOG = 0x50, // "Hedgadillo"

                RAT = 0x42, // "Rat", storage room
                
                RAPTOR_BLACK = 0x6b, // "Raptor"
                SPIDER_GREEN = 0x24, // "Wood Mite"
                GUARD_BOT = 0x4e, // "Guardbot"

                BUZZARD_2 = 0x82, // "Skullclaw"

                DRAKE = 0x6d, // "Gargon"

                DRAKE_GREEN = 0x89, // "Dragoil"
                SLIME = 0x71, // "Blue Goo"
                MAGGOT_RED = 0x77, // "Gore Grub"
                
                DANCING_DEVIL_2 = 0x75, // hall fight

                // enemy - act 4
                TENTACLE_WHIP_2 = 0x8c, // "Tentacle"
                TENTACLE_SPIKE_2 = 0x8d, // "Tiny Tentacle"

                OWL_GREEN = 0x78, // "Neo Greeble"
                SLIME_PINK = 0x6f, // "Red Jelly Ball"
                
                RIMSALA = 0x7b, // "Rimsala"
                GATE_BOT = 0x66, // "Sphere Bot"

                FLOWER_BLACK = 0x6a, // "Flowering Death"
                MOSQUITO_BLACK = 0x7a, // "Mosquito"
                FAN_BOT = 0x69, // "Floating Fan"

                RAPTOR_TEAL = 0x79, // "Raptor"
                RIMSALA_2 = 0x83, // "Eye of Rimsala"
                DUSTER_BOT = 0x4d, // "Mechaduster
                DUSTER_BOT_2 = 0x8b,
                SPIDER_BLACK = 0x25, // "Death Spider"

                // boss - act 0
                GUARD_BOT_INTRO = 0x80, // "Guardbot"

                // boss - act 1
                RAPTOR_PURPLE = 0x0d, // "Raptor"

                THRAXX_HEART = 0x14, // "Thraxx's heart"
                THRAXX_LEFT_ARM = 0x10, // "Left Claw"
                THRAXX_RIGHT_ARM = 0x11, // "Right Claw"

                LIZARD_BLACK = 0x2a, // "Viper Commander"

                SALABOG = 0x2c, // "Salabog"

                MAGMAR = 0x35, // "Magmar"

                // boss - act 2
                VIGOR = 0x3d, // "Vigor"

                MINITAUR = 0x38, // "Mini-Taur"

                MEGATAUR = 0x36, // "Megataur"

                PYRAMID_GUARDIAN_2 = 0x3a, // "Son of Set"

                RIMSALA_STATUTE_ENTITY = 0x5b, // "Statue"
                RIMSALA_BOSS_1 = 0x3b,
                RIMSALA_BOSS_2 = 0x3c,

                AEGIS_ENTITY = 0x47, // "Aegis"

                AQUAGOTH_ENTITY = 0x3e, // "Aquagoth"

                // boss - act 3
                FOOTKNIGHT = 0x49, // "FootKnight"

                // BOY_BLACK
                OWL_BLACK = 0x4f, // "Greeble"

                FORESTDRAKE = 0x43, // "Timberdrake"

                VERMINATOR = 0x41, // "Verminator"

                STERLING = 0x44, // "Sterling"

                MUNGOLA_ENTITY = 0x6c, // "Mungola"
                PUPPET_1 = 0x67, // "Old Nick"
                PUPPET_2 = 0x68, // "Mephista"

                THRAXX2_HEART = 0x84, // "Coleoptera's heart"
                THRAXX2_LEFT_ARM = 0x85, // "Left Claw"
                THRAXX2_RIGHT_ARM = 0x86, // "Right Claw"

                // boss - act 4
                FACE_ENTITY = 0x7d, // "Face"

                FAN_ENTITY = 0x5c, // "Fan"
                SPEAKER_ENTITY = 0x5d, // "Speaker"
                BOY_BLACK = 0x60, // "Bad Boy"
                DOG_4_BLACK = 0x8e, // "Dark Toaster"
                MAGMAR_METAL = 0x7f, // "Magmar"
                CARLTRON_ROBOT = 0x87, // "Carltron's Robot"

                // special
                PLACEHOLDER = 0x20, // used for explosions, windwalker, etc.

                REVEALER_TARGET_ENTITY = 0x5e, // "Bridge"
                STONE = 0x1e, // "Rock"
                STONE_ROUND = 0x1f, // "Rock"

                BOMB = 0x65, // "Bomb"

                // misc
                BOY_DERPY = 0x00, // "<Boy Name>"
                DOG_DERPY = 0x01, // "<Dog Name>"

                UNKNOWN_1 = 0x13, // unused? invisible
                UNKNOWN_2 = 0x88, // invisible, used for: palace grounds 3x, related to the dog fountain cutscene
                UNKNOWN_3 = 0x8f, // unused?

                RAT_RED_2 = 0x8a, // "Rat"
            }
            enum FLAG_ENEMY {
                NORMAL = 0x0000,
                INACTIVE_INVISIBLE = 0x0001,
                INVINCIBLE = 0x0002,
                INACTIVE = 0x0020,
                MOSQUITO = 0x0040,
                PHASING = 0x0400,
                INVISBLE_INVINCIBLE_INACTIVE = 0x1000,

                INACTIVE_IMORTAL = 0x0022,

                // special
                STONE_LEVITATE = 0x0002,
                STONE_LEVITATE_INVISIBLE = 0x0005,
                BOMBABLE = 0x0004,
            }
            enum SCRIPT_TRIGGER {
                DEATH = 0x0200,
                DAMAGE = 0x0300,

                LOOT = 0x0040,

                TALK = 0xffff // fake id
            }

            enum DIRECTION {
                NORTH = 0x26,
                EAST = 0x1d,
                SOUTH = 0x21,
                WEST = 0x19,
                
                NONE = 0x00,
                UNKNOWN = 0x01
            }
            enum FACE_DIRECTION {
                NORTH = 0x00,
                NORTH_EAST = 0x02,
                EAST = 0x04,
                SOUTH_EAST = 0x06,
                SOUTH = 0x08,
                SOUTH_WEST = 0x0a,
                WEST = 0x0c,
                NORTH_WEST = 0x0e,
            }
            enum TRANSITION_DIRECTION {
                NORTH = 0x04,
                EAST = 0x01,
                SOUTH = 0x03,
                WEST = 0x02,

                // todo: 00, 05, 0f, 10, 11, 12
            }

            enum WALK_TYPE {
                TILE_ABSOLUTE = 0x6c,
                TILE_ABSOLUTE_DIRECT = 0x6e,

                COORDINATE_ABSOLUTE = 0x9d,
                COORDINATE_ABSOLUTE_DIRECT = 0x73,
                COORDINATE_RELATIVE = 0x6d,
                COORDINATE_RELATIVE_DIRECT = 0x6f,
            }

            enum PALETTE {
                BOY_DEFAULT = 0x0cca,
                BOY_BAZOOKA = 0x0ccb,
                BOY_NON_BAZOOKA_WEAPON = 0x0c00,

                DOG_DEFAULT = 0x0e00,
                DOG_TOASTER = 0x0e00,

                // enemies
                MOSQUITO = 0x0400, // also: thraxx, sterling, carltron
                BAD_TOASTER = 0x4cb,
                MAGMAR = 0x4cd,
                FOOTKNIGHT = 0x4ce,

                // experimental
                BLACK = 0x0000,
                BLACK_2 = 0x0050,
            }

            enum ATTRIBUTE {
                // See data crystals: 7E3DE5 to 7E4E88 = Monster/NPC data for the current room. Each Monster/NPC gets x8E bytes of data.

                // used in the scripts
                MAX_HP = 0x0f, // <0x23e5>[0x0f] = boy max hp, <0x23e7>[0x0f] = dog max hp
                Z = 0x18,
                X = 0x1a,
                Y = 0x1c,
                FALLING_HEIGHT = 0x1e, // used for boss rush intro
                JUMP_HEIGHT = 0x20, // used for wings (0xe0 signed), magmar, megataur, act2 intro, puppets, sterling flight
                FACE_DIRECTION = 0x22, // enum FACE_DIRECTION
                X_TILE = 0x26,
                Y_TILE = 0x28,
                HP = 0x2a,
                GENERAL_PURPOSE = 0x30, // TODO: used for secret boss bombs (set to 0 for exploded bombs) and speakers (indexed from 2^0 to 2^8)
                UNKNOWN = 0x32, // TODO: used for secret boss and boss rush fans
                DAMAGE_TYPE = 0x36, // used for vigor (weapon: 0x4e89, dog: 0x4F37, magic and default: 0x0000)
                UNKNOWN = 0x3c, // TODO: used in ebon keep sewers (seems to be based on the tile the character stands on)

                // weird
                PALETTE_BLACK_GREEN = 0x00,
                INVISIBLE = 0x05,
                TILE_GLITCH_1 = 0x06,
                INVISIBLE_OR_TILE_GLITCH = 0x07,
                TILE_GLITCH_3 = 0x0a,
                PALETTE = 0x0b,
                PALETTE_BLACK_OR_TILE_GLITCH = 0x0c,
                TILE_GLITCH_4 = 0x0d,
                BEHAVIOUR = 0x10,
                WEIRD_KNOCKBACK = 0x12,
                TURN_NORTH = 0x22
            }
            enum ATTRIBUTE_BITS {
                // used by the game

                VINCIBLE_TEMP = 0x10,
                INVINCIBLE_TEMP = 0x12, // used for: outro, boss kills (doubles, drake, verminator)

                INVINCIBLE = 0x14,
                VINCIBLE = 0x16,

                UNROOT = 0x18,
                ROOT = 0x1a,

                UNKNOWN_1_1 = 0x1c,
                UNKNOWN_1_2 = 0x1e, // used for: dog enter/exit the upper level of act4

                NO_CLIP = 0x20,
                CLIP = 0x22,

                UNKNOWN_2_1 = 0x024, // used for: thraxx knockback
                UNKNOWN_2_2 = 0x026,

                INVISIBLE = 0x28,
                VISIBLE = 0x2a,

                UNMUTE = 0x2c,
                MUTE = 0x2e, // used for: boy during bazooka cutscene
                
                AI_RUN = 0x34,
                AI_WALK = 0x36,

                // unknown/weird

                TURN_NORTH = 0x00,
                TURN_EAST_1 = 0x02,
                TURN_EAST_2 = 0x04,
                TURN_EAST_3 = 0x06,
                TURN_SOUTH = 0x08,
                TURN_WEST_1 = 0x0a,
                TURN_WEST_2 = 0x0c,
                TURN_WEST_3 = 0x0e

                // CRASH: 38, 3a, â€¦
            }

            enum DAMAGE_TYPE {
                BOY_ATTACK = 0x4e89,
                DOG_ATTACK = 0x4F37,
                MAGIC = 0x00,
                DEFAULT = 0x00,
            }

            enum THROWABLE {
                BEACH_BALL = 0x00,
                SPOON = 0x02,
                SPEAR = 0x04,
                MISSILE_2 = 0x06,
                LIGHTNING_BALL = 0x08, // salabog
                BIDENT = 0x0a, // vigor
                BOOMERANG = 0x0c, // vigor

                ONION = 0x0e,
                ONION = 0x10,
                BOTTLE = 0x12,
                BOTTLE_BROKEN = 0x14,
                CITRON = 0x16,
                ROCK = 0x18,

                LIGHTNING = 0x1a, // no damage
                BOMB_EXPLOSION = 0x1c, // piercing
                MISSILE = 0x1e, // carltron
                // CRASH: 20, 22, â€¦
            }
        };

        group items() {
            enum ITEM {
                // special/groups
                NO_ITEM = 0x0000,
                NOTHING = 0x0001,

                ALL = 0x0010,
                INGREDIENTS = 0x0011,
                MONEY = 0x0012,
                TRADING_GOODS = 0x0013,
                WEAPON_LEVEL_2 = 0x0014,
                WEAPON_LEVEL_3 = 0x0015,
                DOG_LEVEL_2 = 0x0015,
                DOG_LEVEL_3 = 0x0016,
                BASICS = 0x0017,
                CONSUMABLES = 0x0018,
                ALCHEMY = 0x0019,
                WEAPONS = 0x001a,
                ARMOR = 0x001b,
                CHARMS = 0x001c,

                // charms
                ARMOR_POLISH = 0x0100,
                CHOCOBO_EGG = 0x0101,
                INSECT_INCENSE = 0x0102,
                JADE_DISK = 0x0103,
                JAGUAR_RING = 0x0104,
                MAGIC_GOURD = 0x0105,
                MOXA_STICK = 0x0106,
                ORACLE_BONE = 0x0107,
                RUBY_HEART = 0x0108,
                SILVER_SHEATH = 0x0109,
                STAFF_OF_LIFE = 0x010a,
                SUN_STONE = 0x010b,
                THUGS_CLOAK = 0x010c,
                WIZARDS_COIN = 0x010d,

                DIAMOND_EYE = 0x0110,
                DIAMOND_EYES = 0x0111,
                GAUGE = 0x0112,
                WHEEL = 0x0113,
                QUEENS_KEY = 0x0114,
                ENERGY_CORE = 0x0115,

                // weapon
                SWORD_1 = 0x0201,
                SWORD_2 = 0x0202,
                SWORD_3 = 0x0203,
                SWORD_4 = 0x0204,
                AXE_1 = 0x0211,
                AXE_2 = 0x0212,
                AXE_3 = 0x0213,
                AXE_4 = 0x0214,
                SPEAR_1 = 0x0221,
                SPEAR_2 = 0x0222,
                SPEAR_3 = 0x0223,
                SPEAR_4 = 0x0224,
                
                // alchemy
                ACID_RAIN = 0x0300,
                ATLAS = 0x0301,
                BARRIER = 0x0302,
                CALL_UP = 0x0303,
                CORROSION = 0x0304,
                CRUSH = 0x0305,
                CURE = 0x0306,
                DEFEND = 0x0307,

                DOUBLE_DRAIN = 0x0310,
                DRAIN = 0x0311,
                ENERGIZE = 0x0312,
                ESCAPE = 0x0313,
                EXPLOSION = 0x0314,
                FIREBALL = 0x0315,
                FIRE_POWER = 0x0316,
                FLASH = 0x0317,

                FORCE_FIELD = 0x0320,
                HARD_BALL = 0x0321,
                HEAL = 0x0322,
                LANCE = 0x0323,
                LASER = 0x0324,
                LEVITATE = 0x0325,
                LIGHTNING_STORM = 0x0326,
                MIRACLE_CURE = 0x0327,

                NITRO = 0x0330,
                ONE_UP = 0x0331,
                REFLECT = 0x0332,
                REGROWTH = 0x0333,
                REVEALER = 0x0334,
                REVIVE = 0x0335,
                SLOW_BURN = 0x0336,
                SPEED = 0x0337,

                STING = 0x0340,
                STOP = 0x0341,
                SUPER_HEAL = 0x0342,

                // consumables
                WINGS = 0x0400,
                PETAL = 0x0401,
                NECTAR = 0x0402,

                // ingredients
                WAX = 0x0500,
                WATER = 0x501,
                VINEGAR = 0x502,
                ROOT = 0x503,
                OIL = 0x504,
                MUSHROOM = 0x505,
                MUD_PEPPER = 0x506,
                METEORITE = 0x507,
                LIMESTONE = 0x508,
                IRON = 0x509,
                GUNPOWDER = 0x50a,
                GREASE = 0x50b,
                FEATHER = 0x50c,
                ETHANOL = 0x50d,
                DRY_ICE = 0x50e,
                CRYSTAL = 0x50f,
                CLAY = 0x510,
                BRIMSTONE = 0x511,
                BONE = 0x512,
                ATLAS_AMULET = 0x513,
                ASH = 0x514,
                ACORN = 0x515,

                // tradable
                ANNIHILATION_AMULET = 0x601,
                BEAD = 0x602,
                CERAMIC_POT = 0x603,
                CHICKEN = 0x604,
                GOLDEN_JACKAL = 0x65,
                JEWELED_SCARAB = 0x606,
                LIMESTONE_TABLET = 0x607,
                PERFUME = 0x608,
                RICE = 0x609,
                SPICE = 0x60a,
                SPOON = 0x60b,
                TAPESTRY = 0x60c,
                TICKET_FOR_EXHIBITION = 0x60d,
            }

            enum INGREDIENT {
                WAX = 0x00,
                WATER = 0x01,
                VINEGAR = 0x02,
                ROOT = 0x03,
                OIL = 0x04,
                MUSHROOM = 0x05,
                MUD_PEPPER = 0x06,
                METEORITE = 0x07,
                LIMESTONE = 0x08,
                IRON = 0x09,
                GUNPOWDER = 0x0a,
                GREASE = 0x0b,
                FEATHER = 0x0c,
                ETHANOL = 0x0d,
                DRY_ICE = 0x0e,
                CRYSTAL = 0x0f,
                CLAY = 0x10,
                BRIMSTONE = 0x11,
                BONE = 0x12,
                ATLAS_AMULET = 0x13,
                ASH = 0x14,
                ACORN = 0x15,
            }

            enum CURRENCY {
                TALONS = 0x00,
                JEWELES = 0x03,
                GOLD_COINS = 0x06,
                CREDITS = 0x09
            }

            enum LOOT_REWARD {
                NOTHING = 0x0000,

                // currency
                MONEY = 0x0001,

                // ingredients
                WAX = 0x0200,
                WATER = 0x0201,
                VINEGAR = 0x0202,
                ROOTS = 0x0203,
                OIL = 0x0204,
                MUD_PEPPER = 0x0205,
                MUSHROOM = 0x0206,
                METEORITE = 0x0207,
                LIMESTONE = 0x0208,
                IRON = 0x0209,
                GUNPOWDER = 0x020A,
                GREASE = 0x020B,
                FEATHER = 0x020C,
                ETHANOL = 0x020D,
                DRY_ICE = 0x020E,
                CRYSTAL = 0x020F,
                CLAY = 0x0210,
                BRIMSTONE = 0x0211,
                BONE = 0x0212,
                ATLAS_MEDALLION = 0x0213,
                ASH = 0x0214,
                ACORNS = 0x0215,

                // armor
                ARMOR_1_1 = 0x0401,
                ARMOR_1_2 = 0x0402,
                ARMOR_1_3 = 0x0403,
                ARMOR_2_1 = 0x0404,
                ARMOR_2_2 = 0x0405,
                ARMOR_2_3 = 0x0406,
                ARMOR_3_1 = 0x0407,
                ARMOR_3_2 = 0x0408,
                ARMOR_3_3 = 0x0409,
                ARMOR_4_1 = 0x040a,
                ARMOR_4_2 = 0x040B,
                ARMOR_4_3 = 0x040c,

                HELM_1_1 = 0x040d,
                HELM_1_2 = 0x040e,
                HELM_1_3 = 0x040f,
                HELM_2_1 = 0x0410,
                HELM_2_2 = 0x0411,
                HELM_2_3 = 0x0412,
                HELM_3_1 = 0x0413,
                HELM_3_2 = 0x0414,
                HELM_3_3 = 0x0415,
                HELM_4_1 = 0x0416,
                HELM_4_2 = 0x0417,
                HELM_4_3 = 0x0418,

                ARMBAND_1_1 = 0x0419,
                ARMBAND_1_2 = 0x041a,
                ARMBAND_1_3 = 0x041b,
                ARMBAND_2_1 = 0x041c,
                ARMBAND_2_2 = 0x041d,
                ARMBAND_2_3 = 0x041e,
                ARMBAND_3_1 = 0x041f,
                ARMBAND_3_2 = 0x0420,
                ARMBAND_3_3 = 0x0421,
                ARMBAND_4_1 = 0x0422,
                ARMBAND_4_2 = 0x0423,
                ARMBAND_4_3 = 0x0424,
                
                COLLAR_1 = 0x0425,
                COLLAR_2 = 0x0426,
                COLLAR_3 = 0x0427,
                COLLAR_4 = 0x0428,

                // consumables
                PETAL = 0x0800,
                NECTAR = 0x0801,
                HONEY = 0x0802,
                BISCUIT = 0x0803,
                WINGS = 0x0804,
                HERBAL_ESSENCE = 0x0805,
                PIXIE_DUST = 0x0806,
                CALL_BEADS = 0x0807,

                // custom
                ANNIHILATION_AMULET = 0x1000,
                BEAD = 0x1001,
                CERAMIC_POT = 0x1002,
                CHICKEN = 0x1003,
                GOLDEN_JACKAL = 0x1004,
                JEWELED_SCARAB = 0x1005,
                LIMESTONE_TABLET = 0x1006,
                PERFUME = 0x1007,
                RICE = 0x1008,
                SPICE = 0x1009,
                SPOON = 0x100a,
                TAPESTRY = 0x100b,
                TICKET_FOR_EXHIBITION = 0x100c,
            }

            enum WEAPON_INDEX {
                SWORD_1 = 0x02, // "Bone Crusher"
                SWORD_2 = 0x04, // "Gladiator Sword"
                SWORD_3 = 0x06, // "Crusader Sword"
                SWORD_4 = 0x08, // "Neutron Blade"

                AXE_1 = 0x0a, // "Spider's Claw"
                AXE_2 = 0x0c, // "Bronze Axe"
                AXE_3 = 0x0e, // "Knight Basher"
                AXE_4 = 0x10, // "Atom Smasher"

                SPEAR_1 = 0x12, // "Horn Spear"
                SPEAR_2 = 0x14, // "Bronze Spear"
                SPEAR_3 = 0x16, // "Lance"
                SPEAR_4 = 0x18, // "Laser Lance"

                BAZOOKA = 0x1a, // "Bazooka"
            }
            enum GAIN_WEAPON {
                SWORD_1 = 0x02,
                SWORD_2 = 0x04,
                SWORD_3 = 0x06,
                SWORD_4 = 0x08,

                AXE_1 = 0x0a,
                AXE_2 = 0x0c,
                AXE_3 = 0x0e,
                AXE_4 = 0x10,

                SPEAR_1 = 0x12,
                SPEAR_2 = 0x14,
                SPEAR_3 = 0x16,
                SPEAR_4 = 0x18,

                BAZOOKA = 0x1a,

                // weird
                UNKNOWN = 0x00,
                BAZOOKA = 0x1c, // only temporary
            }
        };

        group alchemy() {
            enum ALCHEMY_INDEX {
                ACID_RAIN = 0x00,
                ATLAS = 0x02,
                BARRIER = 0x04,
                CALL_UP = 0x06,
                CORROSION = 0x08,
                CRUSH = 0x0a,
                CURE = 0x0c,
                DEFEND = 0x0e,

                DOUBLE_DRAIN = 0x10,
                DRAIN = 0x12,
                ENERGIZE = 0x14,
                ESCAPE = 0x16,
                EXPLOSION = 0x18,
                FIREBALL = 0x1a,
                FIRE_POWER = 0x1c,
                FLASH = 0x1e,

                FORCE_FIELD = 0x20,
                HARD_BALL = 0x22,
                HEAL = 0x24,
                LANCE = 0x26,
                LASER = 0x28,
                LEVITATE = 0x2a,
                LIGHTNING_STORM = 0x2c,
                MIRACLE_CURE = 0x2f,

                NITRO = 0x30,
                ONE_UP = 0x32,
                REFLECT = 0x34,
                REGROWTH = 0x36,
                REVEALER = 0x38,
                REVIVE = 0x3a,
                SLOW_BURN = 0x3c,
                SPEED = 0x3e,

                STING = 0x40,
                STOP = 0x42,
                SUPER_HEAL = 0x44
            }
            enum ALCHEMY_PRESELECT_INDEX {
                ACID_RAIN = 0x00,
                FLASH = 0x17,
                CRUSH = 0x05,

                ATLAS = 0x01,
                BARRIER = 0x02,
                CALL_UP = 0x03,
                CORROSION = 0x04,
                CURE = 0x06,
                DEFEND = 0x07,

                DOUBLE_DRAIN = 0x10,
                DRAIN = 0x11,
                ENERGIZE = 0x12,
                ESCAPE = 0x13,
                EXPLOSION = 0x14,
                FIREBALL = 0x15,
                FIRE_POWER = 0x16,

                FORCE_FIELD = 0x20,
                HARD_BALL = 0x21,
                HEAL = 0x22,
                LANCE = 0x23,
                LASER = 0x24,
                LEVITATE = 0x25,
                LIGHTNING_STORM = 0x26,
                MIRACLE_CURE = 0x27,

                NITRO = 0x30,
                ONE_UP = 0x31,
                REFLECT = 0x32,
                REGROWTH = 0x33,
                REVEALER = 0x34,
                REVIVE = 0x35,
                SLOW_BURN = 0x36,
                SPEED = 0x37,

                STING = 0x40,
                STOP = 0x41,
                SUPER_HEAL = 0x42
            }

            enum CAST {
                // projectile
                FLASH = 0x02,
                FIREBALL = 0x16,

                // animation
                ACID_RAIN = 0x00,
                CRUSH = 0x04,
                DRAIN = 0x06,
                DOUBLE_DRAIN = 0x08,
                STING = 0x0a,
                LIGHTNING_STORM = 0x0c,
                EXPLOSION = 0x0e,
                COROSION = 0x10,
                NITRO = 0x12,
                SLOW_BURN = 0x22,
                HEAT_WAVE = 0x26,
                STORM = 0x28,
                PLAGUE = 0x2c,

                // debuff
                CONFOUND = 0x18,
                DISRUPT = 0x2a,
                STOP = 0x14,

                // heal/buff
                HEAL = 0x1c,
                ONE_UP = 0x20,
                CURE = 0x1a,
                MIRACLE_CURE = 0x1e,
                FORCEFIELD = 0x24,

                // derpy
                WATER = 0x30
                // CRASH: 2e, 32, 34, 36, â€¦
            }

            enum ALCHEMY_TYPE_PROJECTILE {
                // alchemy
                FIREBALL = 0x48f8, // [FIRE]
                FLASH = 0x4834, // [FIRE] same as flare
                HARD_BALL = 0x481b, // [EARTH]

                // call beads
                FLARE = 0x4834, // [FIRE] same as flash
            }
            enum ALCHEMY_TYPE_ANIMATION {
                // alchemy
                ACID_RAIN = 0x4d44, // [NATURE?] same as laser
                ATLAS = 0x4683, // same as heal/consumeable heals
                BARRIER = 0x5492,
                CALL_UP = 0x576d,
                // CORROSION = 0x0000,
                CRUSH = 0x50bf, // [EARTH]
                CURE = 0x45fa, // same as miracle cure
                DEFEND = 0x45ad,

                DOUBLE_DRAIN = 0x499D, // [MAGIC] same as drain (not 0x494d?)
                DRAIN = 0x499D, // [MAGIC] same as double drain (not 0x494d?)
                ENERGIZE = 0x532f,
                // ESCAPE = 0x0000,
                EXPLOSION = 0x47B6, // [FIRE] same as nitro (not 0x4786?)
                FIRE_POWER = 0x4834, // [FIRE] (not 0x52d4?)

                FORCE_FIELD = 0x56c6,
                HEAL = 0x4683, // atlas/heal/consumeable heals
                LANCE = 0x4f84, // [MAGIC]
                LASER = 0x4d44, // same as acid rain
                LEVITATE = 0x4fe0,
                LIGHTNING_STORM = 0x4e84, // [LIGHTNING]
                MIRACLE_CURE = 0x45fa, // same as cure

                NITRO = 0x47B6, // [FIRE] same as explosion (not 0x4786?)
                ONE_UP = 0x4727,
                REFLECT = 0x561b,
                REGROWTH = 0x529a,
                REVEALER = 0x4cab,
                REVIVE = 0x0000,
                // SLOW_BURN = 0x0000,
                SPEED = 0x4ee7,

                STING = 0x5014, // [NATURE?]
                STOP = 0x5588,
                SUPER_HEAL = 0x4683, // same as atlas/heal/consumeable heals

                // call beads
                // HEAT_WAVE = 0x0000,
                STORM = 0x4e12, // [LIGHTNING]
                LIFE_SPARK = 0x4683, // same as atlas/heal/consumeable heals

                CONFOUND = 0x51f0, // same as disrupt
                REGENERATE = 0x53d1,
                AURA = 0x5401,
                TIME_WARP = 0x5171,
                FIRST_AID = 0x4cd4, // same as restore
                
                PLAGUE = 0x0400,
                HYPNOTIZE = 0x4987,
                // SHOCK_WAVE = 0x0000,
                SHIELD = 0x5520,
                
                RESTORE = 0x4cd4, // same as first aid
                ELECTRA_BOLT = 0x4ec3, // [LIGHTNING]
                DISRUPT = 0x51f0, // same as confound

                // consumables
                PETAL = 0x4683, // atlas/heal/consumeable heals
                NECTAR = 0x4683, // atlas/heal/consumeable heals
                HONEY = 0x4683, // atlas/heal/consumeable heals
                DOG_BISCUIT = 0x0000,
                WINGS = 0x0000,
                ESSENCE = 0x45fa, // same as cure
                PIXIE_DUST = 0x53d1,
            }

            enum ALCHEMY_TYPE_GROUP {
                FIRE = 0x00,
                EARTH = 0x01,
                LIGHTNING = 0x02,
                MAGIC = 0x03,
                NATURE = 0x04,
            }
        };

        group animation() {
            enum ANIMATION_MODE {
                ONCE = 0x00,
                ONCE_FREEZE = 0x02,
                LOOP = 0x04,
                FREEZE = 0x06
            }

            enum ANIMATION_ALL {
                INVISIBLE = 0x0010,

                DEFAULT = 0x8000,
                
                WALK_FORWARD = 0x8002,
                RUN_FORWARD = 0x8004,
                
                SLASH_1 = 0x8006,
                SLASH_2 = 0x8008,
                SLASH_3 = 0x800a,
                SLASH_1_3 = 0x800c,

                KNOCKBACK = 0x800e,

                CAST = 0x8014,
                BLOCK = 0x8016

                // ENEMIES ONLY: 8010, 8012
                // CRASH: 8018, 801a, 801c, 801e
            }
            enum ANIMATION_BOY {
                SLEEP_UP = 0x001a,
                DRAGGED = 0x001c,
                SWIRL_ENTER = 0x0020,
                SWIRL_EXIT = 0x0022,
                FALL_1 = 0x0024,
                FALL_2 = 0x0026,
                SLEEP_DOWN = 0x0028,
                KNEEL = 0x002a,
                SLEEP_WATER = 0x002C,
                TELEPORT_IN = 0x002e,

                BOY_STICK_THROWING = 0x0014,
                BOY_STICK_HOLDING = 0x0016,
                LOOT = 0x0018
            }
            enum ANIMATION_DOG {
                // act0
                ACT0_RUN = 0x0068,
                ACT0_STAND = 0x006a,
                ACT0_WALK = 0x006c,

                // act1
                ACT1_STICK_RUNNING = 0x0030,
                ACT1_STICK_DROPPING = 0x0032,
                ACT1_SWIRL_ENTER = 0x0038,
                
                ACT1_TINY = 0x0036,

                ACT1_DRAGGING = 0x0034,
                ACT1_SLEEP = 0x003a,
                ACT1_SIT = 0x003e,
                ACT1_FALL1 = 0x003c,
                ACT1_FALL2 = 0x0040,
                ACT1_FALL3 = 0x0042,
                ACT1_ANGRY = 0x0044,

                // act2
                ACT2_FALL = 0x0052,
                ACT2_LEAP = 0x0046,
                ACT2_SLEEP = 0x0048,
                ACT2_SIT = 0x004a,
                ACT2_DUCK = 0x004c,
                ACT2_FALL_1 = 0x004e,
                ACT2_FALL_2 = 0x0050,
                ACT2_FALL_3 = 0x0052,
                ACT2_FALL_4 = 0x0054,
                ACT2_SNIFF = 0x0056,
                ACT2_TELEPORT = 0x0058,
                
                // act3
                ACT3_SLEEP = 0x005a,
                ACT3_SIT = 0x005c,
                ACT3_STAND_1 = 0x005e,
                ACT3_STAND_2 = 0x0060,
                ACT3_STAND_3 = 0x0062,
                ACT3_FALL_1 = 0x0064,
                ACT3_FALL_2 = 0x0066
            }
            enum ANIMATION_ENEMY {
                // special
                GORE = 0x8010,
                DUST = 0x01a6,

                // bosses
                MAGMAR_ROLL = 0x800c,
                MAGMAR_ENTER = 0x00ae,
                MAGMAR_EXIT = 0x00b0,

                SALABOG_DUCK = 0x0072,

                VERMINATOR_CAST_1 = 0x8014,
                VERMINATOR_CAST_2 = 0x010a,
                VERMINATOR_SERCHING = 0x010c, // doesn't exist?
                VERMINATOR_DAMAGE = 0x010e,

                MINITAUR_STOMP = 0x00b2,

                RIMSALA_1 = 0x00b6,
                RIMSALA_2 = 0x00b8,

                VIGOR_FLEX = 0x00ba,

                TINY_FLEX = 0x00cc,
                TINY_JUGGLE = 0x00ce,
                TINY_THROW_1 = 0x00d0,
                TINY_THROW_2 = 0x00d2,

                STERLING_ATTACK = 0x011e,
                STERLING_FLY_1 = 0x0120,
                STERLING_FLY_2 = 0x0122,
                STERLING_IDLE_1 = 0x0124,
                STERLING_IDLE_2 = 0x0126,

                MEGATAUR_STOMP = 0x0150,
                MEGATAUR_IDLE = 0x0152,
                MEGATAUR_DAMAGE = 0x0154,
                MEGATAUR_STILL = 0x0156,
                MEGATAUR_ENTER = 0x0158,
                MEGATAUR_EXIT = 0x015a,
                MEGATAUR_BREATH = 0x015c,
                MEGATAUR_DUCK = 0x015e,

                // enemies
                LIZARD_TALK = 0x0076,
                LIZARD_DUCK_1 = 0x0078,
                LIZARD_DUCK_2 = 0x007c,
                LIZARD_ROLL = 0x007a,

                TENTACLE_WHIP_ATTACK = 0x00e0,
                TENTACLE_ATTACK = 0x00e2,

                BLACK_OWL_ACTIVATE = 0x8006,
                BLACK_OWL_JUMP = 0x800c,
                BLACK_OWL_FUSION = 0x800a,

                PUPPET_1_JUMP_1 = 0x00e6,
                PUPPET_1_JUMP_2 = 0x00e8,
                PUPPET_1_ENTER = 0x00ea,
                PUPPET_1_DANGLING = 0x00ec,
                PUPPET_1_ATTACK = 0x00ee,
                PUPPET_1_DANCE = 0x00ee,

                PUPPET_2_JUMP = 0x00f2,
                PUPPET_2_ENTER = 0x00f4,
                PUPPET_2_DANGLING = 0x00f6,
                PUPPET_2_ATTACK_1 = 0x00f8,
                PUPPET_2_ATTACK_2 = 0x00fa,
                PUPPET_2_DANCE = 0x00fc,

                GATE_BOT_DEAD = 0x8012, 

                // npcs
                DAVID_SEARCHING = 0x0000,

                KING_ROCKING = 0x00fe,

                CECIL = 0x0110,

                VILLAGER_FREAKSHOW_1 = 0x0112,

                TINKER_1 = 0x0136,
                TINKER_2 = 0x0138,

                CARLTRON_TALK = 0x013a,
                CARLTRON_LYING = 0x013c,
                CARLTRON_CLEANING = 0x013e,
                CARLTRON_DROPPING = 0x0140,
                CARLTRON_SMUG = 0x0142,

                PIRATE_VILLAGER_1 = 0x0080, // boxer right
                PIRATE_VILLAGER_2 = 0x0082, // boxer left
                PIRATE_VILLAGER_3 = 0x0084, // drinking left
                PIRATE_VILLAGER_4 = 0x0086, // drinking up 1
                PIRATE_VILLAGER_5 = 0x008a, // drinking up 2
                PIRATE_VILLAGER_6 = 0x008c, // barkeeper
                PIRATE_VILLAGER_7 = 0x008e, // tiny/pirate lifting?
            }
            enum ANIMATION_PLACEHOLDER {
                // effects
                EXPLOSION_1 = 0x0002,
                EXPLOSION_2 = 0x0004,
                EXPLOSION_3 = 0x0006,

                EXPLOSION_GREEN_1 = 0x0104,
                EXPLOSION_GREEN_2 = 0x0106,
                EXPLOSION_GREEN_3 = 0x0108,

                GORE_GREEN = 0x0090,
                GORE_RED = 0x0092,
                GORE_EXPLODE = 0x0094,

                TELEPORT_OUT = 0x00c8,
                TELEPORT_IN = 0x00ca,

                LEAVES_FALLING_1 = 0x0008,
                LEAVES_FALLING_2 = 0x000a,

                // objects
                ENERGY_CORE_CLOSED = 0x00bc,
                ENERGY_CORE_OPENING = 0x00be,
                ENERGY_CORE_OPEN = 0x00c0,

                LIFT_MOVING = 0x0070,

                LIFT_CORD_VERTICAL = 0x00aa,

                ELEVATOR = 0x00b4,

                BUCKET = 0x00e4,

                WINDWALKER_IDLE = 0x014e,

                SPACESHIP_IDLE = 0x0144,
                SPACESHIP_BACK = 0x0146,
                SPACESHIP_TOP = 0x0148,
                SPACESHIP_FIRE_PARTS_1 = 0x014a,
                SPACESHIP_FIRE_PARTS_2 = 0x014c,

                ROCKET_IDLE = 0x0198,

                SHELL_BOAT = 0x006e,

                PILLAR_VIGOR = 0x009a,

                SKELETON_SHIP_1 = 0x009c,
                SKELETON_SHIP_2 = 0x009e,
                SKELETON_SHIP_3 = 0x00a0,
                SKELETON_SHIP_ROW_1 = 0x00a2,
                SKELETON_SHIP_ROW_2 = 0x00a4,

                AEGIS_MASK_1 = 0x00c6,
                AEGIS_MASK_2 = 0x00c2,
                AEGIS_MASK_3 = 0x00c4,

                CROWN = 0x0100,
                SCEPTER = 0x0102,

                // npcs
                EVIL_HORACE_BACK_1 = 0x00a6,
                EVIL_HORACE_BACK_2 = 0x00a8,

                EVIL_FIRE_EYES_TURNING = 0x00ac,

                FIRE_EYES_CAST = 0x0096,

                COLLOSEUM_VILLAGER_1 = 0x0098,

                MARKET_2_VILLAGER_1 = 0x011a,
                MARKET_2_VILLAGER_2 = 0x011c,

                COOK_RUNNING = 0x0116,
                COOK_COOKING = 0x0118,

                PIG_RUNNING = 0x00dc,
                PIG_STAND = 0x00de,

                PIGOODLE_RUNNING_SOUTH = 0x00d4,
                PIGOODLE_RUNNING_EAST = 0x00d6,
                PIGOODLE_RUNNING_WEST = 0x00d8,
                PIGOODLE_STAND = 0x00da,

                // environment
                SANDPIT_OUT = 0x000e,

                // podunk old
                PODUNK_VILLAGER_1 = 0x0128,
                PODUNK_VILLAGER_2 = 0x0190,
                PODUNK_VILLAGER_3 = 0x0192,

                CAT_CLEANING_1 = 0x012c,
                CAT_CLEANING_2 = 0x012e,
                CAT_LOOKING = 0x0130,
                CAT_RUNNING = 0x0132,

                DOVES_1 = 0x018c,
                DOVES_2 = 0x018e,

                // podunk new
                PODUNK_VILLAGER_4 = 0x0134,
                PODUNK_VILLAGER_5 = 0x0194,

                // intro
                SPARK_LEFT = 0x0184,
                LOGO = 0x0186

                // UNIDENTIFIED: 1e, 7e, 114 (half the cooks face?)
                // INVISIBLE: 0e, 12, 12a
                // CRASH: 72, 74
            }
        };
    };
};

// BASICS

group functions() {
    group system() {
        fun reboot() {
            code(0xab, "// (ab) Reset game");
        }

        fun update_ui() {
            code(0x83, "// (83) Change visible layers, ... based on $7e0f80..7e0f83");
        }
        
        fun hide_non_dialog_layers() {
            <0x235b> = 0x04;
            <0x235c> = 0x00;
            <0x235e> = 0x00;
            <0x235d> = 0x00;

            code(0x82, "// (82) Also change visible layers?");
        }

        fun boot_into_loading_screen() {
            // triggers after the next `end();`
            // only works of no game has been loaded(?)

            set(<0x22ea, 0x08>);

            set(<0x22ea, 0x10>);
            set(<0x22ea, 0x20>);
        }
    };

    group calculation_helper() {
        fun address(address) {
            if(address >= 0x960000) {
                code(address - 0x960000);
            } else if(address >= 0x958000) {
                code(address - 0x958000);
            } else if(address >= 0x950000) {
                code(address - 0x950000);
            } else if(address >= 0x948000) {
                code(address - 0x948000);
            } else if(address >= 0x940000) {
                code(address - 0x940000);
            } else if(address >= 0x938000) {
                code(address - 0x938000);
            } else if(address >= 0x930000) {
                code(address - 0x930000);
            } else if(address >= 0x928000) {
                code(address - 0x928000);
            } else if(address >= 0x2834) {
                code(address - 0x2834);
            } else if(address >= 0x2258) {
                code(address - 0x2258);
            }
        }

        fun arg(index) {
            code(0x00 + index);
        }
        fun arg_signed(index) {
            code(0x92, arg(index));
        }

        fun param(value) {
            // writes arg0â€¦arg20

            if(value < 0x00) {
                code(0xd0 + value);
            } else if(value <= 0x0f) {
                code(0xb0 + value);
            } else if(value <= 0x1e) {
                code(0xd0 + value);
            } else if(value <= 0xff) {
                code(0x82, 0x00 + value);
            } else if(value <= 0xffff) {
                code(0x84, 0x0000 + value);
            }
        }

        fun entity(character:CHARACTER) {
            // sometimes writes arg0â€¦arg20

            if(character is Arg) {
                code(0x80 + 0x12, character);
            } else if(character is Word) {
                if(character >= 0x2834) {
                    code(0x80 + 0x0d, character - 0x2834);
                } else if(character >= 0x2258) {
                    code(0x80 + 0x08, character - 0x2258);
                } else {
                    code(0x80 + character);
                }
            } else if(character is Memory) {
                calculate(character); // TODO: should terminate?
            }
        }
        fun entity_t(character:CHARACTER) {
            // sometimes writes arg0â€¦arg20

            if(character is Arg) {
                code(0x80 + 0x12, character);
            } else if(character is Word) {
                if(character >= 0x2834) {
                    code(0x80 + 0x0d, character - 0x2834);
                } else if(character >= 0x2258) {
                    code(0x80 + 0x08, character - 0x2258);
                } else {
                    code(0x80 + character);
                }
            } else if(character is Memory) {
                calculate(character);
            }
        }
    };

    group everscript_commands() {
        fun end() {
            code(0x00, "// (00) END (return)");
        }

        fun nop() {
            code(0x4d, "// NOP");
        }

        fun yield() {
            code(0x3a, "// (3a) YIELD (break out of script loop, continue later)");
        }

        fun sleep(ticks) {
            code(0xa7, ticks, "// (a7) SLEEP 59 TICKS");
        }

        fun call_id(script_id:ADDRESS_ID) {
            code(0xa3, script_id, "// (a3) CALL 'Unnamed Global script 0x3d' (0x3d)");
        }

        fun call_async(script_address) {
            code(0x07, address(script_address), "// (07) CALL 0x92a3e7");
        }

        fun tile_animate(index, to, state) {
            code(0x62, index, 0x0000 + to, 0x0000 + state, "// (62) UNTRACED INSTR vals 0x03 0x00ff 0x0000");
        }

        group audio() {
            fun sound(sound_effect:SOUND) {
                code(0x30, sound_effect, "// (30) PLAY SOUND EFFECT 0x58 ??");
            }
            fun music(music:MUSIC) {
                code(0x33, music, "// PLAY MUSIC 0x12");
            }
            fun volume(volume) {
                code(0x86, param(volume), "// (86) SET AUDIO volume to 0x64");
            }
            fun music_volume(music, volume) {
                music(music);
                volume(volume);
            }
            fun music_fade(on) {
                if(on == True) {
                    call_id(MUSIC_FADE_IN);
                } else {
                    call_id(MUSIC_FADE_OUT);
                }
            }
            fun fade_to_music(music:MUSIC) {
                music_fade(False);
                music_volume(music, 0xff);
            }
            fun music_enter(music, volume) {
                if(MEMORY.CHANGE_MUSIC != 0x00) {
                    music_fade(False);
                    music_volume(music, volume);
                    
                    if(volume == 0xff) {
                        music_fade(True);
                    } else {
                        volume(volume);
                    }
                }
            }
        };

        group character_manipulation() {
            fun control(character:CHARACTER) {
                if(character == CHARACTER.NONE) {
                    code(0xc0, "// (c0) BOY+DOG = STOPPED");
                } else if(character == CHARACTER.BOTH) {
                    code(0xc1, "// (c1) BOY+DOG = Player controlled");
                }
            }
            fun control_enemy(character:CHARACTER, control) {
                if(control == True) {
                    code(0x2a, entity_t(character), "// (2a) Make $2841 script controlled");
                } else {
                    code(0x2b, entity_t(character), "// (2b) Make $2835 player/AI controlled");
                }
            }
            fun _control_enemy(character:CHARACTER, control) {
                if(control == True) {
                    code(0x2a, calculate(character), "// (2a) Make $2841 script controlled");
                } else {
                    code(0x2b, calculate(character), "// (2b) Make $2835 player/AI controlled");
                }
            }

            fun wait(character:CHARACTER) {
                if(character == CHARACTER.NONE) {
                    nop();
                } else if(character == CHARACTER.BOTH) {
                    code(0x2e, entity_t(BOY), "// (2e) Wait for boy (d0) to reach destination");
                    code(0x2e, entity_t(DOG), "// (2e) Wait for boy (d0) to reach destination");
                } else {
                    code(0x2e, entity_t(character), "// (2e) Wait for boy (d0) to reach destination");
                }
            }

            fun walk(character:CHARACTER, walk_type:WALK_TYPE, x, y, wait_for:CHARACTER) {
                if((walk_type == WALK_TYPE.TILE_ABSOLUTE) || (walk_type == WALK_TYPE.TILE_ABSOLUTE_DIRECT)) {
                    code(walk_type, entity_t(character), x, y, "// (6e) Make $2841 walk to x=0x01,y=0x1c");

                    if(wait_for != CHARACTER.NONE) {
                        wait(wait_for);
                        if!(wait_for is Memory) {
                            control(BOTH);
                        }
                    }
                } else {
                    code(walk_type, entity_t(character), param(x), param(y), "// (6e) Make $2841 walk to x=0x01,y=0x1c");

                    if(wait_for != CHARACTER.NONE) {
                        wait(wait_for);
                        if!(wait_for is Memory) {
                            control(BOTH);
                        }
                    }
                }
            }
            fun _walk(character:CHARACTER, walk_type:WALK_TYPE, x, y, wait_for:CHARACTER) {
                code(walk_type, entity_t(character), calculate(x), calculate(y), "// (6e) Make $2841 walk to x=0x01,y=0x1c");
                
                wait(wait_for);
            }

            fun walk_relative(character:CHARACTER, walk_type:WALK_TYPE, x, y, waiting) {
                code(walk_type, entity_t(character), param(x), param(y), "// (6e) Make $2841 walk to x=0x01,y=0x1c");
                
                if(waiting == True) {
                    code(walk_type, entity_t(character), param(x), param(y), "// (6e) Make $2841 walk to x=0x01,y=0x1c");
                    wait(character);
                }
            }

            fun entity_script_controlled(character:CHARACTER) {
                code(0x2a, entity_t(character), "// (2a) Make $283b script controlled");
            }
        };

        group map_manipulation() {
            fun fade_out() {
                code(0x27, "// (27) Fade-out screen (WRITE $0b83=0x8000)");
            }
            fun fade_out_black() {
                code(0x82, "// (82) Also change visible layers?");
            }
            fun load_map(map, x, y) {
                code(0x22, x, y, map, 0x00, "// (22) CHANGE MAP = 0x34 @ [ 0x0090 | 0x0118 ]: ...");
            }
            fun prepare_transition(direction_in, direction_out) {
                set(FLAG.IN_ANIMATION);
                // MEMORY.TRANSITION_ENTER_DIRECTION = 0x03;
                fade_out();
                call_id(direction_out); // TODO: 4x4 combinations, not 4
                sleep(0x10);
            }

            fun transition(map, x, y, direction_in:DIRECTION, direction_out:DIRECTION, change_music) {
                if(change_music) {
                    music_fade(False);

                    MEMORY.CHANGE_MUSIC = 0x01;
                }

                if(direction_in == direction_out) {
                    if(direction_out != DIRECTION.NONE) {
                        call_id(direction_out); // TODO: 4x4 combinations, not 4
                    }
                } else {
                    if(direction_out != DIRECTION.NONE) {
                        if(direction_out == DIRECTION.NORTH) {
                            MEMORY.TRANSITION_ENTER_DIRECTION = TRANSITION_DIRECTION.NORTH;
                        } else if(direction_out == DIRECTION.EAST) {
                            MEMORY.TRANSITION_ENTER_DIRECTION = TRANSITION_DIRECTION.EAST;
                        } else if(direction_out == DIRECTION.SOUTH) {
                            MEMORY.TRANSITION_ENTER_DIRECTION = TRANSITION_DIRECTION.SOUTH;
                        } else if(direction_out == DIRECTION.WEST) {
                            MEMORY.TRANSITION_ENTER_DIRECTION = TRANSITION_DIRECTION.WEST;
                        }
                    }

                    if(direction_out != DIRECTION.NONE) {
                        if(direction_in == DIRECTION.NORTH) {
                            walk_relative(SCRIPT_OWNER, COORDINATE_RELATIVE_DIRECT, 0x00, -0x02, False);
                        } else if(direction_in == DIRECTION.EAST) {
                            walk_relative(SCRIPT_OWNER, COORDINATE_RELATIVE_DIRECT, 0x02, 0x00, False);
                        } else if(direction_in == DIRECTION.SOUTH) {
                            walk_relative(SCRIPT_OWNER, COORDINATE_RELATIVE_DIRECT, 0x00, 0x02, False);
                        } else if(direction_in == DIRECTION.WEST) {
                            walk_relative(SCRIPT_OWNER, COORDINATE_RELATIVE_DIRECT, -0x02, 0x00, False);
                        }
                        sleep(0x15);
                    }
                }
                if(direction_out == DIRECTION.NONE) {
                    unset(FLAG.IN_ANIMATION);
                } else {
                    set(FLAG.IN_ANIMATION);
                }

                load_map(map, x, y);
            }

            fun teleport(character:CHARACTER, x, y) {
                if(character == CHARACTER.BOTH) {
                    code(0x20, x, y, "// (20) Teleport both to 43 93");
                } else {
                    code(0x42, entity_t(character), x, y, "// (42) Teleport $2835 to a7, b9");
                }
            }
            fun _teleport(character:CHARACTER, x, y) {
                if(character == CHARACTER.BOTH) {
                    code(0x43, entity_t(BOY), calculate(x), calculate(y), "// (42) Teleport $2835 to a7, b9");
                    code(0x43, entity_t(DOG), calculate(x), calculate(y), "// (42) Teleport $2835 to a7, b9");
                } else {
                    code(0x43, entity_t(character), calculate(x), calculate(y), "// (42) Teleport $2835 to a7, b9");
                }
            }
            // fun teleport_relative(character, x, y) {
            //     <character>[0x1a] = <character>[0x26];
            //     <character>[0x1c] = <character>[0x28];
            // }

            fun init_map(x_start, y_start, x_end, y_end) {
                code(0x1b, address(0x23e9), address(0x23eb), x_start, y_start, "// (1b) WRITE MAP X start ($23e9) = 0x0000  (1b) WRITE MAP Y start ($23eb) = 0x0010");
                code(0x1b, address(0x23ed), address(0x23ef), x_end, y_end, "// (1b) WRITE MAP X end   ($23ed) = 0x0400  (1b) WRITE MAP Y end   ($23ef) = 0x04b0");
            }

            fun tile_flashing(p1, p2, p3, p4) {
                // p1=0 -> rain is black
                code(0xb6, param(p1), param(p2), param(p3), param(p4), "// (b6) START TILE FLASHING 10 1 15 0");
            }

            fun price(index, rate, drop, quantity) {
                if(index == 0x1) {
                    <0x239b> = rate;
                    <0x23a1> = drop;
                    <0x23a7> = quantity;
                } else if(index == 0x2) {
                    <0x239d> = rate;
                    <0x23a3> = drop;
                    <0x23a9> = quantity;
                } else if(index == 0x3) {
                    <0x239f> = rate;
                    <0x23a5> = drop;
                    <0x23ab> = quantity;
                }
            }

            fun color_filter(color, saturation) {
                if(False) {
                    code(0xb4, 0x05, param(0x00), param(0x00), param(0x00), param(color), param(saturation), address(0x92d93e), "// (b4) CALL Absolute (24bit) script 0x92d93e ('Unnamed ABS script 0x92d93e')  WITH 5 ARGS 0, 0, 0, 0x84, 0x90");
                } else {
                    code(0x97, param(0x00), param(0x00), param(0x00), param(saturation), param(color), param(0x00), param(0x01), "// (97) UNTRACED INSTR 0x97, 7 sub-instrs: signed arg0, signed arg2, signed arg4, signed arg8, signed arg6, 0, 1");
                    code(0x97, param(0x00), param(0x00), param(0x00), param(saturation), param(color), param(0x11), param(0xef), "// (97) UNTRACED INSTR 0x97, 7 sub-instrs: signed arg0, signed arg2, signed arg4, signed arg8, signed arg6, 17, 0xef");
                }
            }
            fun color_filter_fade_to(color, saturation) {
                code(0xb4, 0x05, param(0x00), param(0x00), param(0x00), param(color), param(saturation), address(0x92da2d), "// (b4) CALL Absolute (24bit) script 0x92da2d ('Unnamed ABS script 0x92da2d')  WITH 5 ARGS 0, 0, 0, 0x84, 0x90");
            }
            fun color_filter_fade_from(color, saturation) {
                code(0xb4, 0x05, param(0x00), param(0x00), param(0x00), param(color), param(saturation), address(0x92d9a4), "// (b4) CALL Absolute (24bit) script 0x92d9a4 ('Unnamed ABS script 0x92d9a4')  WITH 5 ARGS 0, 0, 0, 0x84, 0x90");
            }

            fun brightness(brightness) {
                code(0x91, param(brightness), "// (91) Sets brightness to 0");
            }

            fun sfx_effect(effect:SFX_EFFECT, on) {
                if(effect == SFX_EFFECT.RAIN) {
                    if(on) {
                        if(False) {
                            call(ADDRESS.RAIN);
                        } else {
                            <0x23c9> = 0x01;
                            <0x23cb> = 0x20;

                            tile_flashing(0x0a, 0x01, 0x0f, 0x00);
                        }
                    } else {
                        nop();
                    }
                } else if(effect == SFX_EFFECT.NIGHT) {
                    if(on == True) {
                        color_filter(0x2000, 0x90);
                    } else {
                        color_filter(0x00, 0x00);
                    }
                } else if(effect == SFX_EFFECT.SHAKING) {
                    if(on == True) {
                        code(0x8d, 0x01, "// (8d) 01 Start screen shaking");
                        <0x2409> = 0x0001; // (18) WRITE SCREEN SHAKING MAGNITUDE X
                        <0x240b> = 0x0001; // (18) WRITE SCREEN SHAKING MAGNITUDE Y
                    } else {
                        code(0x8d, 0x00, "// (8d) 01 Start screen shaking");
                    }
                } else if(effect == SFX_EFFECT.SEPIA) {
                    if(on == True) {
                        color_filter(0x84, 0x90);
                    } else {
                        color_filter(0x00, 0x00);
                    }
                }
            }

            fun object(index, value) {
                code(0x5c, param(index), param(value), "// (5c) SET OBJ 5 STATE = val:1 (load/unload)");
            }

            fun special_script(script:SPECIAL_SCRIPTS, id) {
                if(script == SPECIAL_SCRIPTS.LOOTING) {
                    code(0x3f, param(0x01), 0x0040, 0x0000 + id, "// (3f) WRITE $0ea2+0=0x40, $0eac+0=0x172b (unknown): Unknown 0eac+0 (set in lots of places)?");
                } else if(script == SPECIAL_SCRIPTS.REVEALER) {
                    code(0x3f, param(0x02), 0x0001, 0x0000 + id, "// (3f) WRITE $0ea2+2=0x01, $0eac+2=0x1959 (unknown): Unnamed Short script 0x1959?");
                } else if(script == SPECIAL_SCRIPTS.LEVITATE) {
                    code(0x3f, param(0x03), 0x0001, 0x0000 + id, "// (3f) WRITE $0ea2+4=0x01, $0eac+4=0x17b5 (unknown): Unnamed Short script 0x17b5?");
                } else if(script == SPECIAL_SCRIPTS.SELECT_PRESSED) {
                    code(0x3f, param(0x04), 0x0001, 0x0000 + id, "// (3f) WRITE $0ea2+6=0x01, $0eac+6=0x1878 (unknown): Unnamed Short script 0x1878?");
                } else if(script == SPECIAL_SCRIPTS.WINGS) {
                    code(0x3f, param(0x05), 0x0001, 0x0000 + id, "// (3f) WRITE $0ea2+8=0x01, $0eac+8=0x178e (unknown): BBM Wings?");
                }
            }

            fun _fade_in() {
                code(0x26, "// (26) UNTRACED INSTR, writing to VRAM"); // fades brightness to `brightness(0x??)`
            }
            fun fade_in() {
                // handles default loot script
                // handles transition animation (walk x/y into direction z)
                // fades in bridghtness

                if(False) {
                    call(ADDRESS.FADE_IN_AND_DEFAULT_LOOT_DUST_REWARD);
                } else if(True) {
                    special_script(LOOTING, ADDRESS_ID.LOOT_DUST_REWARD);
                    call_id(FADE_IN);
                } else if(False) {
                    _fade_in();
                } else {
                    call_id(FADE_IN);
                }

                // unset(FLAG.IN_ANIMATION); // neccessary?
            }

            fun show_hud(show) {
                if(show == True) {
                    if(False) {
                        call(ADDRESS.STATUS_BAR_SHOW);
                    } else {
                        set(FLAG.SHOW_HUD);
                        update_ui();
                    }
                } else {
                    if(False) {
                        call(ADDRESS.STATUS_BAR_HIDE);
                    } else {
                        unset(FLAG.SHOW_HUD);
                        update_ui();
                    }
                }
            }

            fun save_dialog(slot, location) { // buggy
                <0x2449> = slot; // ?
                code(0xa3, location, "// (a3) CALL 'Actual save dialog' (0x4e)");
            }
            fun save(id) {
                code(0x8c, install_string(id), "// (a3) CALL 'Actual save dialog' (0x4e)");
            }

            fun set_camera(x, y, speed) {
                MEMORY.CAMERA_X = x;
                MEMORY.CAMERA_Y = y;
                MEMORY.CAMERA_SPEED = speed;
            }
            fun free_camera() {
                MEMORY.CAMERA_X = 0xffff;
            }
        };

        group currency() {
            fun currency_get(type:CURRENCY, amount) {
                code(0x7c, param(type), 0x000000 + amount, "// (7c) Give 50 Talons (moniez)");
            }
            fun currency_take(type:CURRENCY, amount) {
                code(0x7d, param(type), 0x000000 + amount, "// (7d) Take 10 Talons (moniez)");
            }
            fun currency_convert(from_amount, from_type:CURRENCY, to_amount, to_type:CURRENCY) {
                code(0x7e, param(from_amount), param(from_type), param(to_amount), param(to_type), "// (7e) Exchange 1 Gold Coins to 8 Credits (moniez)");
            }
            fun show_currency(show) {
                if(show == True) {
                    code(0x55, "// (55) CLEAR TEXT"); // TODO: workaround, in case a subtext is being shown and would cause a crash
                    yield();

                    code(0x9f, "// (9f) PREPARE CURRENCY DISPLAY");
                    code(0xa0, "// (a0) SHOW CURRENCY AMOUNT");
                } else {
                    code(0xa1, "// (a1) HIDE CURRENCY DISPLAY");
                }
            }
        };

        group sprite() {
            fun animate(character:CHARACTER, mode:ANIMATION_MODE, id) {
                code(0x78, entity_t(character), 0x0000 + id, param(mode), "// (78) UNTRACED INSTR for $2846, 0x0010 2 changes sprite/animation/...?");
            }
            fun _animate(character:CHARACTER, mode:ANIMATION_MODE, id) {
                code(0x78, calculate(character), 0x0000 + id, param(mode), "// (78) UNTRACED INSTR for $2846, 0x0010 2 changes sprite/animation/...?");
            }

            fun add_enemy(enemy:ENEMY, x, y) {
                code(0xba, enemy, x, y, "// (ba) LOAD NPC 0b at 49 79");
            }
            fun add_enemy_with_flags(enemy:ENEMY, x, y, flags:FLAG_ENEMY) {
                code(0x3c, 0x0000 + enemy * 0x02, 0x0000 + flags, x, y, "// (ba) LOAD NPC 0b at 49 79");
            }

            fun add_dynamic_enemy_with_flags(enemy:ENEMY, x, y, flags:FLAG_ENEMY) {
                code(0xa2, 0x0000 + enemy * 0x02, 0x0000 + flags, calculate(x), calculate(y), "// (a2) SPAWN NPC 0x00ca>>1, flags 0x20, x:$23b9, y:$23bb");
            }

            fun add_placeholder(animation:ANIMATION_PLACEHOLDER, x, y) {
                add_enemy(PLACEHOLDER, x, y);
                animate(LAST_ENTITY, LOOP, animation);
            }
            fun _add_placeholder(animation:ANIMATION_PLACEHOLDER, x, y) {
                add_dynamic_enemy_with_flags(PLACEHOLDER, x, y, 0x00);
                animate(LAST_ENTITY, LOOP, animation);
            }


            fun add_enemy_spawner(enemy, x, y, quantity) {
                MEMORY.ENEMY_SPAWNER_QUANTITY = quantity;

                code(0xc2, enemy, x, y, "// (c2) Add NPC 0x71 spawner at 0x13,0x09");
            }

            fun available(character:CHARACTER) {
                // TODO: parameter bug
                
                if(character == CHARACTER.BOY) {
                    // teleport(DOG, 0x00, 0x00);
                    
                    unset(FLAG.BOY_UNAVAILABLE);
                    set(FLAG.DOG_UNAVAILABLE);

                    code(0xbd, "// (bd) BOY = Player controlled");
                    code(0x98, entity_t(character), "// (98) SWITCH CHAR TO boy");
                    code(0xbe, "// (be) Stop/disable doggo (and SELECT button)");
                } else if(character == CHARACTER.DOG) {
                    // teleport(BOY, 0x00, 0x00);
                    
                    set(FLAG.BOY_UNAVAILABLE);
                    unset(FLAG.DOG_UNAVAILABLE);

                    code(0xbf, "// (bf) DOG = Player controlled");
                    code(0x98, entity_t(character), "// (98) SWITCH CHAR TO dog");
                    code(0xbc, "// (bc) Stop/disable boy (and SELECT button)");
                } else if(character == CHARACTER.BOTH) {
                    unset(FLAG.BOY_UNAVAILABLE);
                    unset(FLAG.DOG_UNAVAILABLE);

                    code(0xc1, "// (c1) BOY+DOG = Player controlled");
                } else if(character == CHARACTER.NONE) {
                    set(FLAG.BOY_UNAVAILABLE);
                    set(FLAG.DOG_UNAVAILABLE);

                    // code(0xbe, "// (be) Stop/disable doggo (and SELECT button)");
                    // code(0xbc, "// (bc) Stop/disable boy (and SELECT button)");
                }
            }

            fun clear_status_effects() {
                code(0xaa, "// (aa) Clear boy and dog statuses");
            }

            fun cure() {
                code(0xaa, "// (aa) Clear boy and dog statuses");
            }

            fun heal(character:CHARACTER, amount, animation) {
                if(animation == False) {
                    if(character == CHARACTER.BOTH) {
                        code(0x95, entity_t(BOY), param(amount), "// (95) HEAL dog FOR 0x03e7 = 999");
                        code(0x95, entity_t(DOG), param(amount), "// (95) HEAL dog FOR 0x03e7 = 999");
                    } else {
                        code(0x95, entity_t(character), param(amount), "// (95) HEAL dog FOR 0x03e7 = 999");
                    }
                } else {
                    if(character == CHARACTER.BOTH) {
                        code(0x94, entity_t(BOY), 0x08, 0x8d, 0x01, 0x29, 0x3f, 0x1a, 0xd5, "// (94) HEAL boy FOR *($23e5 + 15) WITH ANIMATION = health");
                        code(0x94, entity_t(DOG), 0x08, 0x8f, 0x01, 0x29, 0x3f, 0x1a, 0xd5, "// (94) HEAL dog FOR *($23e7 + 15) WITH ANIMATION = health");
                    } else {
                        code(0x94, entity_t(character), 0x08, 0x8f, 0x01, 0x29, 0x3f, 0x1a, 0xd5, "// (94) HEAL dog FOR *($23e7 + 15) WITH ANIMATION = health");
                    }
                }
            }
            fun full_heal(character:CHARACTER, animation) {
                if(animation == False) {
                    heal(character, 0x03e7, animation);
                } else {
                    heal(character, 0x00, animation);
                }
            }

            fun select_alchemy() {
                code(0x63, "// (63) SHOW ALCHEMY SELECTION SCREEN");
            }
            fun select_alchemy_with_preselection(alchemy_index:ALCHEMY_PRESELECT_INDEX) {
                code(0x18, 0xed, 0x01, param(alchemy_index), "// (18) WRITE PRESELECT ALCHEMY ($2445) = Flash (0x1e)");
                select_alchemy();
            }

            fun cast(character:CHARACTER, target:CHARACTER, spell:CAST, level) {
                code(0xac, entity_t(character), param(spell), param(level), entity_t(target), 0xb0, "// (ac) $283d CASTS SPELL 22 POWER 0x64 ON boy if alive");
            }

            fun face(character:CHARACTER, direction:DIRECTION) {
                if(direction == DIRECTION.NORTH) {
                    code(0x74, entity_t(character), "// (74) MAKE boy FACE NORTH");
                } else if(direction == DIRECTION.EAST) {
                    code(0x77, entity_t(character), "// (77) MAKE boy FACE EAST");
                } else if(direction == DIRECTION.SOUTH) {
                    code(0x75, entity_t(character), "// (75) MAKE boy FACE SOUTH");
                } else if(direction == DIRECTION.WEST) {
                    code(0x76, entity_t(character), "// (76) MAKE boy FACE WEST");
                }
            }
            fun _face(character, direction:DIRECTION) {
                if(direction == DIRECTION.NORTH) {
                    code(0x74, calculate(character), "// (74) MAKE boy FACE NORTH");
                } else if(direction == DIRECTION.EAST) {
                    code(0x77, calculate(character), "// (77) MAKE boy FACE EAST");
                } else if(direction == DIRECTION.SOUTH) {
                    code(0x75, calculate(character), "// (75) MAKE boy FACE SOUTH");
                } else if(direction == DIRECTION.WEST) {
                    code(0x76, calculate(character), "// (76) MAKE boy FACE WEST");
                }
            }

            fun face_each(character:CHARACTER, character2:CHARACTER) {
                code(0x71, entity_t(character), entity_t(character2), "// (71) Make $2835 and controlled char face each other");
            }
            fun _face_each(character:CHARACTER, character2:CHARACTER) {
                code(0x71, calculate(character), calculate(character2), "// (71) Make $2835 and controlled char face each other");
            }

            fun attach_to_script(character:CHARACTER) {
                code(0x4e, entity_t(character), "// (4e) ATTACH entity last entity ($0341) TO SCRIPT");
            }
            fun _attach_to_script(character) {
                code(0x4e, calculate(character), "// (4e) ATTACH entity last entity ($0341) TO SCRIPT");
            }

            fun attach_script(character:CHARACTER, flag:SCRIPT_TRIGGER, id) {
                if(flag == SCRIPT_TRIGGER.TALK) {
                    if(character == CHARACTER.BOTH) {
                        code(0x3d, entity_t(BOY), 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
                        code(0x3d, entity_t(DOG), 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
                    } else {
                        code(0x3d, entity_t(character), 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
                    }
                } else {
                    if(character == CHARACTER.BOTH) { // TODO: forced_memory=True when character=<memory>
                        code(0x3f, entity_t(BOY), 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
                        code(0x3f, entity_t(DOG), 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
                    } else {
                        code(0x3f, entity_t(character), 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
                    }
                }
            }

            fun destroy(character:CHARACTER) {
                if(character > 0x00) {
                    code(0x9b, entity_t(character), "// (9b) DESTROY/DEALLOC ENTITY $283e");
                }
            }
            fun _destroy(character:CHARACTER) {
                if(character > 0x00) {
                    code(0x9b, calculate(character), "// (9b) DESTROY/DEALLOC ENTITY $283e");
                }
            }

            fun damage(character:CHARACTER, value, animation) {
                if(animation) {
                    if(character == CHARACTER.BOTH) {
                        code(0x92, entity_t(BOY), param(value), "// (92) DAMAGE boy FOR 5 WITH ANIMATION");
                        code(0x92, entity_t(DOG), param(value), "// (92) DAMAGE boy FOR 5 WITH ANIMATION");
                    } else {
                        code(0x92, entity_t(character), param(value), "// (92) DAMAGE boy FOR 5 WITH ANIMATION");
                    }
                } else {
                    if(character == CHARACTER.BOTH) {
                        code(0x93, entity_t(BOY), param(value), "// (93) DAMAGE $2843 FOR 0x03e8");
                        code(0x93, entity_t(DOG), param(value), "// (93) DAMAGE $2843 FOR 0x03e8");
                    } else {
                        code(0x93, entity_t(character), param(value), "// (93) DAMAGE $2843 FOR 0x03e8");
                    }
                }
            }

            fun attribute_bit(character:CHARACTER, attribute:ATTRIBUTE_BITS) {
                code(0xa9, entity_t(character), param(attribute), "// (a9) UNTRACED INSTR modifies entity dog bits 0x20");
            }
            fun _attribute_bit(character, attribute:ATTRIBUTE_BITS) {
                code(0xa9, calculate(character), param(attribute), "// (a9) UNTRACED INSTR modifies entity dog bits 0x20");
            }

            fun attribute(character:CHARACTER, attribute:ATTRIBUTE_BITS, on) {
                if(attribute == ATTRIBUTE_BITS.INVINCIBLE) {
                    if(on) {
                        attribute_bit(character, INVINCIBLE);
                    } else {
                        attribute_bit(character, VINCIBLE);
                    }
                } else if(attribute == ATTRIBUTE_BITS.INVINCIBLE_TEMP) {
                    if(on) {
                        attribute_bit(character, INVINCIBLE_TEMP);
                    } else {
                        attribute_bit(character, VINCIBLE_TEMP);
                    }
                } else if(attribute == ATTRIBUTE_BITS.ROOT) {
                    if(on) {
                        attribute_bit(character, ROOT);
                    } else {
                        attribute_bit(character, UNROOT);
                    }
                } else if(attribute == ATTRIBUTE_BITS.UNKNOWN_1_2) {
                    if(on) {
                        attribute_bit(character, UNKNOWN_1_2);
                    } else {
                        attribute_bit(character, UNKNOWN_1_1);
                    }
                } else if(attribute == ATTRIBUTE_BITS.NO_CLIP) {
                    if(on) {
                        attribute_bit(character, NO_CLIP);
                    } else {
                        attribute_bit(character, CLIP);
                    }
                } else if(attribute == ATTRIBUTE_BITS.UNKNOWN_2_1) {
                    if(on) {
                        attribute_bit(character, UNKNOWN_2_1);
                    } else {
                        attribute_bit(character, UNKNOWN_2_2);
                    }
                } else if(attribute == ATTRIBUTE_BITS.INVISIBLE) {
                    if(on) {
                        attribute_bit(character, INVISIBLE);
                    } else {
                        attribute_bit(character, VISIBLE);
                    }
                } else if(attribute == ATTRIBUTE_BITS.MUTE) {
                    if(on) {
                        attribute_bit(character, MUTE);
                    } else {
                        attribute_bit(character, UNMUTE);
                    }
                } else if(attribute == ATTRIBUTE_BITS.AI_RUN) {
                    if(on) {
                        attribute_bit(character, AI_RUN);
                    } else {
                        attribute_bit(character, AI_WALK);
                    }
                }
            }

            fun heel(character) {
                eval("18 61 01 50 29 6a 1a d5 // (18) WRITE $23b9 = boy.x");
                eval("18 63 01 50 29 6c 1a d5 // $23bb = boy.y");

                code(0xaf, 0x04, entity_t(character), entity_t(0x23b9), entity_t(0x23bb), 0xd0 + 0x14, address(0x99cc1e), "// (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");
            }
            fun _heel(character, x, y) {
                code(0xaf, 0x04, entity_t(character), calculate(x), calculate(y), 0xd0 + 0x14, address(0x99cc1e), "// (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");
            }

            fun drag(enemy, x, y) {
                <0x23b9> = x;
                <0x23bb> = y;

                // eval("af 04 8d 02 00 88 61 01 88 63 01 e0 1e cc 03 // (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");

                code(0xaf, 0x04, entity_t(enemy), entity_t(0x23b9), entity_t(0x23bb), 0xd0 + 0x14, address(0x99cc1e), "// (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");
            }
        };

        group projectile() {
            fun projectile(source, throwable, source_x, source_y, target_x, target_y, z, overshoot) {
                // (b5) REVEAL ENTITY?? args 26 $2869 $24ab + 20 $24af - 0x30 0 signed arg0 signed arg2 0x3c // thraxx eye
                // (b5) REVEAL ENTITY?? args 26 boy $2890 $2894 0 $2898 $289a 30 // aegis
                // (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20 // vigor mob
                // (b5) REVEAL ENTITY?? args 26 boy $2839 $283b 0 $283d - 8 $283f 1 // professor
                // (b5) REVEAL ENTITY?? args 26 boy $24ab $24af - 0x28 0 $2861 $2863 - 16 0x78 // boss rush

                // (b5) REVEAL ENTITY?? args 28 boy signed arg0 signed arg2 0 0x32 0x32 0 // bomb 1
                // (b5) REVEAL ENTITY?? args 28 entity attached to script? signed arg0 signed arg2 0 0x32 0x28 0 // bomb 2

                // (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20 // vigor mob
                // (b5) REVEAL ENTITY?? args 30 entity attached to script? signed arg0 signed arg2 0x0140 signed arg0 signed arg2 + 0x20 0 // carltron missile
                // (b5) REVEAL ENTITY?? args 28 entity attached to script? signed arg10 signed arg12 0 0x46 0x32 0 // carltron stomp

                code(0xb5, entity_t(throwable), entity_t(source), entity_t(source_x), entity_t(source_y), param(overshoot), x, y, param(z), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }

            fun shoot_entity_absolute(entity:CHARACTER, projectile:THROWABLE, x, y, z, overshoot) {
                code(0xb5, param(projectile), entity_t(entity), calculate(entity[X]), calculate(entity[Y]), param(overshoot), calculate(x), calculate(y), calculate(z), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }
            fun shoot_entity_relative(entity:CHARACTER, projectile:THROWABLE, x, y, z, overshoot) {
                code(0xb5, param(projectile), entity_t(entity), calculate(entity[X]), calculate(entity[Y]), param(overshoot), calculate(entity[X] + x), calculate(entity[Y] + y), calculate(z), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }
            fun shoot_entity_entity(entity:CHARACTER, projectile:THROWABLE, target:CHARACTER, z, overshoot) { // TODO: target=BOY crashes
                code(0xb5, param(projectile), entity_t(entity), calculate(entity[X]), calculate(entity[Y]), param(overshoot), calculate(target[X]), calculate(target[Y]), calculate(z), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }

            fun shoot_entity_offset_relative(entity:CHARACTER, projectile:THROWABLE, offset_x, offset_y, x, y, z, overshoot) {
                code(0xb5, param(projectile), entity_t(entity), calculate(entity[X] + offset_x), calculate(entity[Y] + offset_y), param(overshoot), calculate(entity[X] + (offset_x + x)), calculate(entity[Y] + (offset_y + y)), param(z), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }

            fun bomb_absolute(entity:CHARACTER, x, y, size) {
                code(0xb5, param(THROWABLE.BOMB_EXPLOSION), entity_t(entity), calculate(x), calculate(y), param(0x00), param(size), param(size), param(0x00), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }
            fun bomb_entity(entity:CHARACTER, size) {
                code(0xb5, param(THROWABLE.BOMB_EXPLOSION), entity_t(entity), calculate(entity[X]), calculate(entity[Y]), param(0x00), param(size), param(size), param(0x00), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }
        };

        group strings() {
            fun font(font:FONT) {
                code(0x9a, param(font), "// (9a) CHANGE FONT TO 2");
            }

            fun open_message_box(type:MESSAGE_BOX_TYPE, x, y, w, h) {
                if(type == MESSAGE_BOX_TYPE.DEFAULT) {
                    code(0x44, 0x00, x, y, w, h, "// (44) UNTRACED INSTR, Open messagebox? slot=0x00 x=0x0a y=0x02 w=0x14 h=0x0c");
                } else {
                    code(0x47, 0x00, x, y, w, h, "// (47) UNTRACED INSTR, Open messagebox? slot=0x00 x=0x04 y=0x04 w=0x18 h=0x14");
                }
            }

            fun text_start() {
                control(NONE);

                if(True) {
                    call_id(OPEN_TEXTBOX_DEFAULT);
                } else {
                    open_message_box(DEFAULT, 0x0a, 0x02, 0x14, 0x07);
                }
            }
            fun text(id) {
                code(0x51, install_string(id), "// (51) SHOW TEXT 10bf FROM 0x91e0bf compressed WINDOWED c14dd8> '[0x97][0x8b]Goat[LF]' '[0x8b]Chicken[LF]' '[0x8b]Basket'");
            }
            fun text_end() {
                code(0x55, "// (55) CLEAR TEXT");
            }

            fun subtext(id) {
                code(0x52, install_string(id), "// (52) SHOW TEXT 066f FROM 0x91d66f compressed UNWINDOWED c03ad9> 'Received Jaguar Ring'");
            }

            fun _question(id) {
                text_start();

                text(id);
                
                eval("1d 69 00 30 ac // (1d) WRITE $289d = Dialog response (preselect 0)");
                
                text_end();
            }
            fun question(id) {
                _question(id);
                
                control(BOTH);
            }

            fun _question_max(id, h) {
                control(NONE);
                
                open_message_box(DEFAULT, 0x0a, 0x02, 0x14, h);

                text(id);
                
                eval("1d 69 00 30 ac // (1d) WRITE $289d = Dialog response (preselect 0)");
                
                text_end();
            }
            fun question_max(id, h) {
                _question_max(id, h);
                
                control(BOTH);
            }

            fun _dialog(id, retain_control) {
                text_start();

                text(id);

                text_end();
            }
            fun dialog(id) {
                _dialog(id);

                control(BOTH);
            }

            fun outro_text_box(text_header, text_content) {
                // example: outro_text_box("header[LF]", "text1[LF]text2");

                fade_out();
                sleep(0d15);

                hide_non_dialog_layers();

                open_message_box(TRANSPARENT_CENTERED, 0x04, 0x04, 0x18, 0x14);

                font(OUTRO);
                text(text_header);

                font(DEFAULT);
                text(text_content);

                call_id(FADE_OUT_CREDITS);
            }

            fun debug_subtext(text) {
                if(SYSTEM.WITH_DEBUG_SUBTEXT) {
                    if(False) {
                        open_message_box(TRANSPARENT_CENTERED, 0x01, 0x01, 0x10, 0x04);
                        
                        text(text);

                        text_end();
                    } else {
                        font(OUTRO);
                        subtext(text);
                        yield();
                        font(DEFAULT);
                    }
                }
            }
        };

        group items() {
            fun fanfare_start() {
                control(NONE);

                music_fade(True);
            }
            fun fanfare_end() {
                sleep(0x08);

                call(0x92bf33); // (29) CALL 0x92bf33 Hold up weapon

                sleep(0xc8);

                control(BOTH);

                // MEMORY.CHANGE_MUSIC = 0x01; // TODO: should change music directly
            }

            fun fanfare_boss() {
                fanfare_start();
                music(FANFARE);
                fanfare_end();
            }
            fun fanfare_item() {
                fanfare_start();
                music(FANFARE_ITEM);
                fanfare_end();
            }

            fun unlock_armor(unlocked) {
                if(unlocked == True) {
                    MEMORY.ARMOR_1_1 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_1_2 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_1_3 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_2_1 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_2_2 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_2_3 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_3_1 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_3_2 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_3_3 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_4_1 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_4_2 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMOR_4_3 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_1_1 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_1_2 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_1_3 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_2_1 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_2_2 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_2_3 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_3_1 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_3_2 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_3_3 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_4_1 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_4_2 = SYSTEM.ITEM_MAX;
                    MEMORY.HELM_4_3 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_1_1 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_1_2 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_1_3 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_2_1 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_2_2 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_2_3 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_3_1 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_3_2 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_3_3 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_4_1 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_4_2 = SYSTEM.ITEM_MAX;
                    MEMORY.ARMBAND_4_3 = SYSTEM.ITEM_MAX;
                    MEMORY.COLLAR_1 = SYSTEM.ITEM_MAX;
                    MEMORY.COLLAR_2 = SYSTEM.ITEM_MAX;
                    MEMORY.COLLAR_3 = SYSTEM.ITEM_MAX;
                    MEMORY.COLLAR_4 = SYSTEM.ITEM_MAX;
                } else {
                    MEMORY.ARMOR_1_1 = 0x00;
                    MEMORY.ARMOR_1_2 = 0x00;
                    MEMORY.ARMOR_1_3 = 0x00;
                    MEMORY.ARMOR_2_1 = 0x00;
                    MEMORY.ARMOR_2_2 = 0x00;
                    MEMORY.ARMOR_2_3 = 0x00;
                    MEMORY.ARMOR_3_1 = 0x00;
                    MEMORY.ARMOR_3_2 = 0x00;
                    MEMORY.ARMOR_3_3 = 0x00;
                    MEMORY.ARMOR_4_1 = 0x00;
                    MEMORY.ARMOR_4_2 = 0x00;
                    MEMORY.ARMOR_4_3 = 0x00;
                    MEMORY.HELM_1_1 = 0x00;
                    MEMORY.HELM_1_2 = 0x00;
                    MEMORY.HELM_1_3 = 0x00;
                    MEMORY.HELM_2_1 = 0x00;
                    MEMORY.HELM_2_2 = 0x00;
                    MEMORY.HELM_2_3 = 0x00;
                    MEMORY.HELM_3_1 = 0x00;
                    MEMORY.HELM_3_2 = 0x00;
                    MEMORY.HELM_3_3 = 0x00;
                    MEMORY.HELM_4_1 = 0x00;
                    MEMORY.HELM_4_2 = 0x00;
                    MEMORY.HELM_4_3 = 0x00;
                    MEMORY.ARMBAND_1_1 = 0x00;
                    MEMORY.ARMBAND_1_2 = 0x00;
                    MEMORY.ARMBAND_1_3 = 0x00;
                    MEMORY.ARMBAND_2_1 = 0x00;
                    MEMORY.ARMBAND_2_2 = 0x00;
                    MEMORY.ARMBAND_2_3 = 0x00;
                    MEMORY.ARMBAND_3_1 = 0x00;
                    MEMORY.ARMBAND_3_2 = 0x00;
                    MEMORY.ARMBAND_3_3 = 0x00;
                    MEMORY.ARMBAND_4_1 = 0x00;
                    MEMORY.ARMBAND_4_2 = 0x00;
                    MEMORY.ARMBAND_4_3 = 0x00;
                    MEMORY.COLLAR_1 = 0x00;
                    MEMORY.COLLAR_2 = 0x00;
                    MEMORY.COLLAR_3 = 0x00;
                    MEMORY.COLLAR_4 = 0x00;
                }
            }
            fun unlock_weapons(unlocked) {
                if(unlocked == True) {
                    <0x22DA> = 0xff;
                    <0x22DB> = 0xff;

                    MEMORY.AMMO_1 = 0xff;
                    MEMORY.AMMO_2 = 0xff;
                    MEMORY.AMMO_3 = 0xff;
                } else {
                    <0x22DA> = 0x00;
                    <0x22DB> = 0x00;

                    MEMORY.AMMO_1 = 0x00;
                    MEMORY.AMMO_2 = 0x00;
                    MEMORY.AMMO_3 = 0x00;
                }
            }
            fun unlock_alchemy(unlocked) {
                if(unlocked == True) {
                    <0x2258> = 0xff;
                    <0x2259> = 0xff;
                    <0x225A> = 0xff;
                    <0x225B> = 0xff;
                    <0x225C> = 0xff;
                    <0x225D> = 0xff;
                } else {
                    <0x2258> = 0x00;
                    <0x2259> = 0x00;
                    <0x225A> = 0x00;
                    <0x225B> = 0x00;
                    <0x225C> = 0x00;
                    <0x225D> = 0x00;
                }
            }
            fun unlock_charms(unlocked) {
                if(unlocked == True) {
                    <0x2261> = 0xf4;
                    <0x2262> = 0xff;
                    <0x2263> = 0xff;
                    <0x2264> = 0xff;
                } else {
                    <0x2261> = 0x00;
                    <0x2262> = 0x00;
                    <0x2263> = 0x00;
                    <0x2264> = 0x00;
                }
            }
            fun unlock_consumables(amount) {
                MEMORY.PETAL = amount;
                MEMORY.NECTAR = amount;
                MEMORY.HONEY = amount;
                MEMORY.DOG_BISCUIT = amount;
                MEMORY.WINGS = amount;
                MEMORY.ESSENCE = amount;
                MEMORY.PIXIE_DUST = amount;
                MEMORY.CALL_BEADS = amount;
            }
            fun unlock_ingredients(amount) {
                MEMORY.WAX = amount;
                MEMORY.WATER = amount;
                MEMORY.VINEGAR = amount;
                MEMORY.ROOT = amount;
                MEMORY.OIL = amount;
                MEMORY.MUSHROOM = amount;
                MEMORY.MUD_PEPPER = amount;
                MEMORY.METEORITE = amount;
                MEMORY.LIMESTONE = amount;
                MEMORY.IRON = amount;
                MEMORY.GUNPOWDER = amount;
                MEMORY.GREASE = amount;
                MEMORY.FEATHER = amount;
                MEMORY.ETHANOL = amount;
                MEMORY.DRY_ICE = amount;
                MEMORY.CRYSTAL = amount;
                MEMORY.CLAY = amount;
                MEMORY.BRIMSTONE = amount;
                MEMORY.BONE = amount;
                MEMORY.ATLAS_AMULET = amount;
                MEMORY.ASH = amount;
                MEMORY.ACORN = amount;
            }
            fun unlock_money(amount) {
                currency_get(TALONS, amount);
                currency_get(JEWELES, amount);
                currency_get(GOLD_COINS, amount);
                currency_get(CREDITS, amount);
            }
            // ui breaks with 0xff and 0xffff
            fun unlock_trading_goods(amount) {
                MEMORY.ANNIHILATION_AMULET = amount;
                MEMORY.BEAD = amount;
                MEMORY.CERAMIC_POT = amount;
                MEMORY.CHICKEN = amount;
                MEMORY.GOLDEN_JACKAL = amount;
                MEMORY.JEWELED_SCARAB = amount;
                MEMORY.LIMESTONE_TABLET = amount;
                MEMORY.PERFUME = amount;
                MEMORY.RICE = amount;
                MEMORY.SPICE = amount;
                MEMORY.SPOON = amount;
                MEMORY.TAPESTRY = amount;
                MEMORY.TICKET_FOR_EXHIBITION = amount;
            }
            fun unlock_weapon_level(level) {
                MEMORY.LEVEL_FIST = level;
                MEMORY.LEVEL_BAZOOKA = level;
                MEMORY.LEVEL_1_SWORD = level;
                MEMORY.LEVEL_1_AXE = level;
                MEMORY.LEVEL_1_SPEAR = level;
                MEMORY.LEVEL_2_SWORD = level;
                MEMORY.LEVEL_2_AXE = level;
                MEMORY.LEVEL_2_SPEAR = level;
                MEMORY.LEVEL_3_SWORD = level;
                MEMORY.LEVEL_3_AXE = level;
                MEMORY.LEVEL_3_SPEAR = level;
                MEMORY.LEVEL_4_SWORD = level;
                MEMORY.LEVEL_4_AXE = level;
                MEMORY.LEVEL_4_SPEAR = level;
            }

            fun unlock(item:ITEM) {
                if(item == ITEM.ACID_RAIN) { // alchemy (32)
                    set(FLAG.ACID_RAIN);
                } else if(item == ITEM.FLASH) {
                    set(FLAG.FLASH);
                } else if(item == ITEM.CRUSH) {
                    set(FLAG.CRUSH);
                } else if(item == ITEM.ATLAS) {
                    set(FLAG.ATLAS);
                } else if(item == ITEM.BARRIER) {
                    set(FLAG.BARRIER);
                } else if(item == ITEM.CALL_UP) {
                    set(FLAG.CALL_UP);
                } else if(item == ITEM.CORROSION) {
                    set(FLAG.CORROSION);
                } else if(item == ITEM.CURE) {
                    set(FLAG.CURE);
                } else if(item == ITEM.DEFEND) {
                    set(FLAG.DEFEND);
                } else if(item == ITEM.DOUBLE_DRAIN) {
                    set(FLAG.DOUBLE_DRAIN);
                } else if(item == ITEM.DRAIN) {
                    set(FLAG.DRAIN);
                } else if(item == ITEM.ENERGIZE) {
                    set(FLAG.ENERGIZE);
                } else if(item == ITEM.ESCAPE) {
                    set(FLAG.ESCAPE);
                } else if(item == ITEM.EXPLOSION) {
                    set(FLAG.EXPLOSION);
                } else if(item == ITEM.FIREBALL) {
                    set(FLAG.FIREBALL);
                } else if(item == ITEM.FIRE_POWER) {
                    set(FLAG.FIRE_POWER);
                } else if(item == ITEM.FORCE_FIELD) {
                    set(FLAG.FORCE_FIELD);
                } else if(item == ITEM.HARD_BALL) {
                    set(FLAG.HARD_BALL);
                } else if(item == ITEM.HEAL) {
                    set(FLAG.HEAL);
                } else if(item == ITEM.LANCE) {
                    set(FLAG.LANCE);
                } else if(item == ITEM.LASER) {
                    set(FLAG.LASER);
                } else if(item == ITEM.LEVITATE) {
                    set(FLAG.LEVITATE);
                } else if(item == ITEM.LIGHTNING_STORM) {
                    set(FLAG.LIGHTNING_STORM);
                } else if(item == ITEM.MIRACLE_CURE) {
                    set(FLAG.MIRACLE_CURE);
                } else if(item == ITEM.NITRO) {
                    set(FLAG.NITRO);
                } else if(item == ITEM.ONE_UP) {
                    set(FLAG.REFLECT);
                } else if(item == ITEM.REGROWTH) {
                    set(FLAG.REGROWTH);
                } else if(item == ITEM.REVEALER) {
                    set(FLAG.REVEALER);
                } else if(item == ITEM.REVIVE) {
                    set(FLAG.REVIVE);
                } else if(item == ITEM.SLOW_BURN) {
                    set(FLAG.SLOW_BURN);
                } else if(item == ITEM.SPEED) {
                    set(FLAG.SPEED);
                } else if(item == ITEM.STING) {
                    set(FLAG.STING);
                } else if(item == ITEM.STOP) {
                    set(FLAG.STOP);
                } else if(item == ITEM.SUPER_HEAL) {
                    set(FLAG.SUPER_HEAL);
                } else if(item == ITEM.DOG_LEVEL_2) { // weapon level (?)
                    MEMORY.LEVEL_DOG = 0x0200;
                } else if(item == ITEM.DOG_LEVEL_3) {
                    MEMORY.LEVEL_DOG = 0x0300;
                } else if(item == ITEM.SWORD_1) { // weapons(4+4+4)
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.SWORD_1;
                } else if(item == ITEM.SWORD_2) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.SWORD_2;
                } else if(item == ITEM.SWORD_3) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.SWORD_3;
                } else if(item == ITEM.SWORD_4) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.SWORD_4;
                } else if(item == ITEM.AXE_1) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.AXE_1;
                } else if(item == ITEM.AXE_2) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.AXE_2;
                } else if(item == ITEM.AXE_3) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.AXE_3;
                } else if(item == ITEM.AXE_4) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.AXE_4;
                } else if(item == ITEM.SPEAR_1) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.SPEAR_1;
                } else if(item == ITEM.SPEAR_2) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.SPEAR_2;
                } else if(item == ITEM.SPEAR_3) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.SPEAR_3;
                } else if(item == ITEM.SPEAR_4) {
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.SPEAR_4;
                } else if(item == ITEM.ARMOR_POLISH) { // charms (14+6)
                    set(FLAG.ARMOR_POLISH);
                } else if(item == ITEM.CHOCOBO_EGG) {
                    set(FLAG.CHOCOBO_EGG);
                } else if(item == ITEM.INSECT_INCENSE) {
                    set(FLAG.INSECT_INCENSE);
                } else if(item == ITEM.JADE_DISK) {
                    set(FLAG.JADE_DISK);
                } else if(item == ITEM.JAGUAR_RING) {
                    set(FLAG.JAGUAR_RING);
                } else if(item == ITEM.MAGIC_GOURD) {
                    set(FLAG.MAGIC_GOURD);
                } else if(item == ITEM.MOXA_STICK) {
                    set(FLAG.MOXA_STICK);
                } else if(item == ITEM.ORACLE_BONE) {
                    set(FLAG.ORACLE_BONE);
                } else if(item == ITEM.RUBY_HEART) {
                    set(FLAG.RUBY_HEART);
                } else if(item == ITEM.SILVER_SHEATH) {
                    set(FLAG.SILVER_SHEATH);
                } else if(item == ITEM.STAFF_OF_LIFE) {
                    set(FLAG.STAFF_OF_LIFE);
                } else if(item == ITEM.SUN_STONE) {
                    set(FLAG.SUN_STONE);
                } else if(item == ITEM.THUGS_CLOAK) {
                    set(FLAG.THUGS_CLOAK);
                } else if(item == ITEM.WIZARDS_COIN) {
                    set(FLAG.WIZARDS_COIN);
                } else if(item == ITEM.DIAMOND_EYE) {
                    set(FLAG.DIAMOND_EYE);
                } else if(item == ITEM.DIAMOND_EYES) {
                    set(FLAG.DIAMOND_EYES);
                } else if(item == ITEM.GAUGE) {
                    set(FLAG.GAUGE);
                } else if(item == ITEM.WHEEL) {
                    set(FLAG.WHEEL);
                } else if(item == ITEM.QUEENS_KEY) {
                    set(FLAG.QUEENS_KEY);
                } else if(item == ITEM.ENERGY_CORE) {
                    set(FLAG.ENERGY_CORE);
                } else if(item == ITEM.MONEY) { // misc
                    unlock_money(0x65B9AA);
                } else if(item == ITEM.ALL) { // groups
                    unlock_money(0x65B9AA);
                    unlock_alchemy(True);
                    unlock_charms(True);
                    unlock_trading_goods(0x0063);
                    unlock_ingredients(SYSTEM.ITEM_MAX);
                    unlock_consumables(SYSTEM.ITEM_MAX);
                    unlock_armor(True);
                    unlock_weapons(True);
                } else if(item == ITEM.TRADING_GOODS) {
                    unlock_trading_goods(0x0063);
                } else if(item == ITEM.CONSUMABLES) {
                    unlock_consumables(SYSTEM.ITEM_MAX);
                } else if(item == ITEM.ALCHEMY) {
                    unlock_alchemy(True);
                } else if(item == ITEM.WEAPONS) {
                    unlock_weapons(True);
                } else if(item == ITEM.ARMOR) {
                    unlock_armor(True);
                } else if(item == ITEM.CHARMS) {
                    unlock_charms(True);
                } else if(item == ITEM.BASICS) {
                    set(FLAG.JAGUAR_RING);
                    MEMORY.GAIN_WEAPON = 0x14;
                } else if(item == ITEM.INGREDIENTS) {
                    unlock_ingredients(SYSTEM.ITEM_MAX);
                } else if(item == ITEM.WEAPON_LEVEL_2) {
                    unlock_weapon_level(0x0200);
                } else if(item == ITEM.WEAPON_LEVEL_3) {
                    unlock_weapon_level(0x0300);
                }
            }

            fun reward(item:ITEM) {
                if(item == ITEM.ARMOR_POLISH) { // charms
                    subtext("Armor Polish"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.CHOCOBO_EGG) {
                    subtext("Chocobo Egg"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.INSECT_INCENSE) {
                    subtext("Insect Incense"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.JADE_DISK) {
                    subtext("Jade Disk"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.JAGUAR_RING) {
                    subtext("Jaguar Ring"); // subtext(0x066f);
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.MAGIC_GOURD) {
                    subtext("Magic Gourd"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.MOXA_STICK) {
                    subtext("Moxa Stick"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.ORACLE_BONE) {
                    subtext("Oracle Bone"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.RUBY_HEART) {
                    subtext("Ruby Heart"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.SILVER_SHEATH) {
                    subtext("Silver Sheath"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.STAFF_OF_LIFE) {
                    subtext("Staff of Life"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.SUN_STONE) {
                    subtext("Sun Stone"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.THUGS_CLOAK) {
                    subtext("Thug's Cloak"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.WIZARDS_COIN) {
                    subtext("Wizard's Coin"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.DIAMOND_EYE) {
                    subtext("Diamond Eye"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.DIAMOND_EYES) {
                    subtext("Diamond Eyes"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.GAUGE) {
                    subtext("Gauge"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.WHEEL) {
                    subtext("Wheel"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.QUEENS_KEY) {
                    subtext("Queen's Key"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.ENERGY_CORE) {
                    subtext("Energy Core"); // ?
                    
                    fanfare_item();

                    unlock(item);
                } else if(item == ITEM.AXE_1) { // weapons
                    MEMORY.GAIN_WEAPON = GAIN_WEAPON.AXE_1;
                    
                    subtext(0x05b8);
                    fanfare_item();
                } else if(item == ITEM.SPEAR_3) {
                    unlock(item);
                    
                    subtext(0x2247);
                    fanfare_item();
                } else if(item == ITEM.ACID_RAIN) { // alchemy
                    unlock(item);
                    
                    subtext("Learned Acid Rain"); // subtext(0x059d);
                    fanfare_item();
                } else if(item == ITEM.ATLAS) {
                    set(FLAG.ATLAS);
                    
                    subtext("Learned Atlas");
                    fanfare_item();
                } else if(item == ITEM.BARRIER) {
                    set(FLAG.BARRIER);
                    
                    subtext("Learned Barrier");
                    fanfare_item();
                } else if(item == ITEM.CALL_UP) {
                    set(FLAG.CALL_UP);
                    
                    subtext("Learned Call Up");
                    fanfare_item();
                } else if(item == ITEM.CORROSION) {
                    set(FLAG.CORROSION);
                    
                    subtext("Learned Corrosion");
                    fanfare_item();
                } else if(item == ITEM.CRUSH) {
                    set(FLAG.CRUSH);
                    
                    subtext("Learned Crush");
                    fanfare_item();
                } else if(item == ITEM.CURE) {
                    set(FLAG.CURE);
                    
                    subtext("Learned Cure");
                    fanfare_item();
                } else if(item == ITEM.DEFEND) {
                    set(FLAG.DEFEND);
                    
                    subtext("Learned Defend");
                    fanfare_item();
                } else if(item == ITEM.DOUBLE_DRAIN) {
                    set(FLAG.DOUBLE_DRAIN);
                    
                    subtext("Learned Double Drain");
                    fanfare_item();
                } else if(item == ITEM.DRAIN) {
                    set(FLAG.DRAIN);
                    
                    subtext("Learned Drain");
                    fanfare_item();
                } else if(item == ITEM.ENERGIZE) {
                    set(FLAG.ENERGIZE);
                    
                    subtext("Learned Energize");
                    fanfare_item();
                } else if(item == ITEM.ESCAPE) {
                    set(FLAG.ESCAPE);
                    
                    subtext("Learned Escape");
                    fanfare_item();
                } else if(item == ITEM.EXPLOSION) {
                    set(FLAG.EXPLOSION);
                    
                    subtext("Learned Explosion");
                    fanfare_item();
                } else if(item == ITEM.FIREBALL) {
                    set(FLAG.FIREBALL);
                    
                    subtext("Learned Fireball");
                    fanfare_item();
                } else if(item == ITEM.FIRE_POWER) {
                    set(FLAG.FIRE_POWER);
                    
                    subtext("Learned Fire Power");
                    fanfare_item();
                } else if(item == ITEM.FLASH) {
                    set(FLAG.FLASH);
                    
                    subtext("Learned Flash"); // subtext(0x0963);
                    fanfare_item();
                } else if(item == ITEM.FORCE_FIELD) {
                    set(FLAG.FORCE_FIELD);
                    
                    subtext("Learned Force Field");
                    fanfare_item();
                } else if(item == ITEM.HARD_BALL) {
                    set(FLAG.HARD_BALL);
                    
                    subtext("Learned Hard Ball"); // subtext(0x0651);
                    fanfare_item();
                } else if(item == ITEM.HEAL) {
                    set(FLAG.HEAL);
                    
                    subtext("Learned Heal");
                    fanfare_item();
                } else if(item == ITEM.LANCE) {
                    set(FLAG.LANCE);
                    
                    subtext("Learned Lance");
                    fanfare_item();
                } else if(item == ITEM.LASER) {
                    set(FLAG.LASER);
                    
                    subtext("Learned Laser");
                    fanfare_item();
                } else if(item == ITEM.LEVITATE) {
                    set(FLAG.LEVITATE);
                    
                    subtext("Learned Levitate");
                    fanfare_item();
                } else if(item == ITEM.LIGHTNING_STORM) {
                    set(FLAG.LIGHTNING_STORM);
                    
                    subtext("Learned Lightning Storm");
                    fanfare_item();
                } else if(item == ITEM.MIRACLE_CURE) {
                    set(FLAG.MIRACLE_CURE);
                    
                    subtext("Learned Miracle Cure");
                    fanfare_item();
                } else if(item == ITEM.NITRO) {
                    set(FLAG.NITRO);
                    
                    subtext("Learned Nitro");
                    fanfare_item();
                } else if(item == ITEM.ONE_UP) {
                    set(FLAG.ONE_UP);
                    
                    subtext("Learned One Up");
                    fanfare_item();
                } else if(item == ITEM.REFLECT) {
                    set(FLAG.REFLECT);
                    
                    subtext("Learned Reflect");
                    fanfare_item();
                } else if(item == ITEM.REGROWTH) {
                    set(FLAG.REGROWTH);
                    
                    subtext("Learned Regrowth");
                    fanfare_item();
                } else if(item == ITEM.REVEALER) {
                    set(FLAG.REVEALER);
                    
                    subtext("Learned Revealer");
                    fanfare_item();
                } else if(item == ITEM.REVIVE) {
                    set(FLAG.REVIVE);
                    
                    subtext("Learned Revive");
                    fanfare_item();
                } else if(item == ITEM.SLOW_BURN) {
                    set(FLAG.SLOW_BURN);
                    
                    subtext("Learned Slow Burn");
                    fanfare_item();
                } else if(item == ITEM.SPEED) {
                    set(FLAG.SPEED);
                    
                    subtext("Learned speed");
                    fanfare_item();
                } else if(item == ITEM.STING) {
                    set(FLAG.STING);
                    
                    subtext("Learned Sting");
                    fanfare_item();
                } else if(item == ITEM.STOP) {
                    set(FLAG.STOP);
                    
                    subtext("Learned Stop");
                    fanfare_item();
                } else if(item == ITEM.SUPER_HEAL) {
                    set(FLAG.SUPER_HEAL);
                    
                    subtext("Learned Super Heal");
                    fanfare_item();
                } else if(item == ITEM.WINGS) {
                    MEMORY.LOOT_ITEM = LOOT_REWARD.WINGS;
                    MEMORY.LOOT_OBJECT = 0xff;
                    call_id(LOOT_GOURD);
                    
                    fanfare_item();
                } else if(item == ITEM.PETAL) { // consumables
                    MEMORY.LOOT_ITEM = LOOT_REWARD.PETAL;
                    MEMORY.LOOT_OBJECT = 0xff;
                    call_id(LOOT_GOURD);
                    
                    fanfare_item();
                } else if(item == ITEM.NECTAR) {
                    MEMORY.LOOT_ITEM = LOOT_REWARD.NECTAR;
                    MEMORY.LOOT_OBJECT = 0xff;
                    call_id(LOOT_GOURD);
                    
                    fanfare_item();
                } else if(item == ITEM.TICKET_FOR_EXHIBITION) { // tradable
                    MEMORY.TICKET_FOR_EXHIBITION += 0x01;

                    subtext("Found a ticket");
                    
                    fanfare_item();
                }
            }
        };
    };

    group complex() {
        fun loot(animation, flag, object_id, reward:LOOT_REWARD, amount, next) {
            if!(flag) {
                if(reward < 0x1000) {
                    MEMORY.LOOT_ITEM = reward;

                    MEMORY.LOOT_OBJECT = object_id;

                    if(reward < 0x0100) { 
                        if(amount > 0x00) {
                            MEMORY.LOOT_AMOUNT_CURRENCY = amount;
                        }
                    } else {
                        if(amount > 0x01) {
                            MEMORY.LOOT_AMOUNT = amount - 0x01;
                        }    
                    }

                    call_id(animation);
                    
                    if(next > 0x00) {
                        MEMORY.LOOT_AMOUNT = next;
                    }

                    if(FLAG.LOOT_SUCCESSFUL) {
                        set(flag);
                    }
                } else {
                    if(reward == LOOT_REWARD.SPOON) {
                        MEMORY.SPOON += 0x01;
                        call_id(LOOT_GOURD);
                        object[object_id] = 0x01;
                        set(flag);

                        subtext("Found a spoon");
                    } else if(reward == LOOT_REWARD.TICKET_FOR_EXHIBITION) {
                        MEMORY.TICKET_FOR_EXHIBITION += 0x01;
                        call_id(LOOT_GOURD);
                        object[object_id] = 0x01;
                        set(flag);

                        subtext("Found a ticket");
                    }
                }
            }
        }
            
        fun axe2_wall(flag, object) {
            if(<ACTIVE> == <BOY>) {
                animate(BOY, ONCE, ANIMATION_ALL.SLASH_2);

                if(((Byte) <0x235f>) >= 0x0c) {
                    if(((Byte) <0x2360>) == 0x02) {
                        add_dynamic_enemy_with_flags(PLACEHOLDER, <BOY>[X] - 0x10, <BOY>[Y] - 0x10, 0x00);
                        animate(LAST_ENTITY, ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);

                        add_dynamic_enemy_with_flags(PLACEHOLDER, <BOY>[X] + 0x20, <BOY>[Y] - 0x20, 0x00);
                        animate(LAST_ENTITY, ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);

                        sleep(0x04);

                        sound(0x58);

                        object = 0x01;
                        set(flag);
                    }
                }
            }
        }

        @install()
        fun reset_alchemy_types() {
            // projectile
            <0x3567> = 0x0000;
            <0x35dd> = 0x0000;
            <0x3653> = 0x0000;
            <0x36c9> = 0x0000;
            <0x373f> = 0x0000;
            <0x37b5> = 0x0000;
            <0x382b> = 0x0000;
            <0x38a1> = 0x0000;

            // animation
            <0x3367> = 0x0000;
            <0x33a7> = 0x0000;
            <0x33e7> = 0x0000;
            <0x3427> = 0x0000;
            <0x3467> = 0x0000;
            <0x34a7> = 0x0000;
            <0x34e7> = 0x0000;
            <0x3527> = 0x0000;
        }
        fun check_alchemy_type_projectile(type:ALCHEMY_TYPE_PROJECTILE, counter) {
            if(
                (<0x3567> == type) ||
                (<0x35dd> == type) ||
                (<0x3653> == type) ||
                (<0x36c9> == type) ||
                (<0x373f> == type) ||
                (<0x37b5> == type) ||
                (<0x382b> == type) ||
                (<0x38a1> == type)
            ) {
                counter += 0x01;
            }
        }
        fun check_alchemy_type_animation(type:ALCHEMY_TYPE_ANIMATION, counter) {
            if(
                (<0x3367> == type) ||
                (<0x33a7> == type) ||
                (<0x33e7> == type) ||
                (<0x3427> == type) ||
                (<0x3467> == type) ||
                (<0x34a7> == type) ||
                (<0x34e7> == type) ||
                (<0x3527> == type)
            ) {
                counter += 0x01;
            }
        }
        fun check_damage_type(type:ALCHEMY_TYPE_GROUP, counter) {
            if(type == ALCHEMY_TYPE_GROUP.FIRE) {
                check_alchemy_type_projectile(FIREBALL, counter);
                check_alchemy_type_projectile(FLASH, counter);
                check_alchemy_type_projectile(FLARE, counter);

                check_alchemy_type_animation(EXPLOSION, counter);
                check_alchemy_type_animation(FIRE_POWER, counter);
                check_alchemy_type_animation(NITRO, counter);
            } else if(type == ALCHEMY_TYPE_GROUP.EARTH) {
                check_alchemy_type_projectile(HARD_BALL, counter);

                check_alchemy_type_animation(CRUSH, counter);
            } else if(type == ALCHEMY_TYPE_GROUP.LIGHTNING) {
                check_alchemy_type_animation(LIGHTNING_STORM, counter);
                check_alchemy_type_animation(STORM, counter);
                check_alchemy_type_animation(ELECTRA_BOLT, counter);
            } else if(type == ALCHEMY_TYPE_GROUP.MAGIC) {
                check_alchemy_type_animation(DOUBLE_DRAIN, counter);
                check_alchemy_type_animation(DRAIN, counter);
                check_alchemy_type_animation(LANCE, counter);
            } else if(type == ALCHEMY_TYPE_GROUP.NATURE) {
                check_alchemy_type_animation(ACID_RAIN, counter);
                check_alchemy_type_animation(STING, counter);
            }
        }
    };

    group cutscenes() {
        @install()
        fun generic_yeet(direction:DIRECTION, depth) {
            control(NONE);

            animate(BOY, LOOP, ANIMATION_BOY.FALL_1);
            sleep(0x05);

            animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
            <BOY>[JUMP_HEIGHT] = 0x20;

            if(arg[0x00] == DIRECTION.NORTH) {
                arg[0x02] = <BOY>[Y] - 0x30;
                while(<BOY>[Y] > arg[0x02]) {
                    <BOY>[Y] -= 0x01;

                    yield();
                }
            } else if(arg[0x00] == DIRECTION.EAST) {
                arg[0x02] = <BOY>[X] + 0x30;
                while(<BOY>[X] < arg[0x02]) {
                    <BOY>[X] += 0x01;

                    yield();
                }
            } else if(arg[0x00] == DIRECTION.SOUTH) {
                arg[0x02] = <BOY>[Y] + 0x30;
                while(<BOY>[Y] < arg[0x02]) {
                    <BOY>[Y] += 0x01;

                    yield();
                }
            } else {
                arg[0x02] = <BOY>[X] - 0x30;
                while(<BOY>[X] > arg[0x02]) {
                    <BOY>[X] -= 0x01;

                    yield();
                }
            }

            arg[0x02] = <BOY>[Y] + 0x20;
            while(<BOY>[Y] < arg[0x02]) {
                <BOY>[Y] += 0x02;

                yield();
            }
        }

        @install()
        fun generic_fall(depth, cutoff) {
            yield();
            control(NONE);

            attribute_bit(BOY, ROOT, True);
            attribute_bit(DOG, ROOT, True);

            if(<ACTIVE>[FACE_DIRECTION] == DIRECTION.NORTH) {
                _teleport(INACTIVE, <ACTIVE>[X] + 0x10, <ACTIVE>[Y]);
            } else if(<ACTIVE>[FACE_DIRECTION] == DIRECTION.EAST) {
                _teleport(INACTIVE, <ACTIVE>[X], <ACTIVE>[Y] + 0x10);
            } else if(<ACTIVE>[FACE_DIRECTION] == DIRECTION.SOUTH) {
                _teleport(INACTIVE, <ACTIVE>[X] - 0x10, <ACTIVE>[Y]);
            } else {
                _teleport(INACTIVE, <ACTIVE>[X] - 0x10, <ACTIVE>[Y]);
            }

            <INACTIVE>[Z] = <ACTIVE>[Z];

            // teleport(INACTIVE, <ACTIVE>[X], <ACTIVE>[Y]);

            animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
            animate(DOG, LOOP, ANIMATION_DOG.ACT1_FALL1);

            arg[0x12] = <ACTIVE>[X];
            arg[0x14] = <ACTIVE>[Y] + depth;

            while(<ACTIVE>[Y] < arg[0x14]) {
                <ACTIVE>[Y] += 0x02;
                <INACTIVE>[Y] += 0x02;

                if((cutoff > 0x00) && (<ACTIVE>[Y] >= cutoff)) {
                    attribute_bit(BOY, INVISIBLE, True);
                    attribute_bit(DOG, INVISIBLE, True);
                }

                yield();
            }

            attribute_bit(BOY, INVISIBLE, True);
            attribute_bit(DOG, INVISIBLE, True);
        }

        @install()
        fun pit_act2_between(height) {
            if(False) { // [0x05] Antiqua - Between 'mids and halls
                call(0x98b4b5);
            } else {
                control(NONE);

                <0x24ab> = <ACTIVE>[X];
                <0x24af> = <ACTIVE>[Y];

                <0x249d> = 0x0128;
                <0x249f> = height;

                animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
                animate(DOG, LOOP, ANIMATION_DOG.ACT2_FALL_4);

                yield();

                <0x23db> = 0x0020;
                _teleport(BOY, <0x24ab> + 0x08, <0x24af>);
                yield();
                <0x23db> = 0x0020;
                _teleport(DOG, <0x24ab> - 0x08, <0x24af>);
                yield();

                while(<0x24af> < <0x249f>) {
                    <0x23db> = 0x0020;
                    _teleport(BOY, <0x24ab> + 0x08, <0x24af>);
                    yield();
                    <0x23db> = 0x0020;
                    _teleport(DOG, <0x24ab> - 0x08, <0x24af>);
                    yield();

                    <0x24af> += 0x02;
                }

                // animate(BOY, LOOP, ANIMATION_ALL.INVISIBLE);
                // animate(DOG, LOOP, ANIMATION_ALL.INVISIBLE);
                attribute(BOY, INVISIBLE, True);
                attribute(DOG, INVISIBLE, True);
                attribute(BOY, ROOT, True);
                attribute(DOG, ROOT, True);
                yield();

                set(<0x22ed, 0x80>);
            }
        }

        @install()
        fun pit_act3_sewers() {
            if(True) { // [0x7a] Gothica - Ivor Tower Sewers Exterior (landing spot)
                call(0x98b4b5);
            } else { // buggy
                control(NONE);
                
                <0x24ab> = <0x2421> lshift 0x04;
                <0x24af> = <0x2423> lshift 0x04;

                if(<ACTIVE> == CHARACTER.BOY) {
                    animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
                } else {
                    animate(DOG, LOOP, ANIMATION_DOG.ACT3_FALL_2);
                }

                <0x24a7> = 0xfffe;

                while(<0x24a7> < 0x22) {
                    <0x24af> += <0x24a7>;
                    <0x24ab> += 0x10;

                    _teleport(ACTIVE, <0x24ab> rshift 0x04, <0x24af> rshift 0x04);
                    yield();

                    <0x24a7> += 0x01;
                }

                if(<ACTIVE> == CHARACTER.BOY) {
                    animate(BOY, LOOP, ANIMATION_BOY.FALL_1);
                } else {
                    animate(DOG, LOOP, ANIMATION_DOG.ACT3_SIT);
                }

                <0x24a7> = 0xfffe;

                while(<0x24a7> < 0x22) {
                    <0x24af> += <0x24a7>;
                    <0x24ab> += 0x10;

                    _teleport(ACTIVE, <0x24ab> rshift 0x04, <0x24af> rshift 0x04);
                    yield();

                    <0x24a7> += 0x01;
                }

                if(<ACTIVE> == CHARACTER.BOY) {
                    animate(BOY, ONCE, ANIMATION_BOY.FALL_1);
                } else {
                    animate(DOG, ONCE, ANIMATION_DOG.ACT3_SIT);
                }
            }
        }

        fun door_act4_airlock(x, y, door) {
            control(NONE);

            walk(ACTIVE, TILE_ABSOLUTE_DIRECT, x, y, ACTIVE);
            control(NONE);

            face(ACTIVE, SOUTH);
            door = 0x7e;
            sound(0xb0);

            sleep(0x14);

            arg[0x00] = <ACTIVE>[Y] + 0d40;
            while(<ACTIVE>[Y] < arg[0x00]) {
                <ACTIVE>[Y] += 0x02;
                yield();
            }

            door = 0x00;
            sound(0xb0);

            sleep(0x10);
        }
        @install()
        @async()
        fun door_act4_airlock_reverse(x, y, door) {
            control(NONE);
            face(ACTIVE, SOUTH);

            arg[0x10] = <ACTIVE>[Y];
            <ACTIVE>[Y] += 0d40;

            object[door] = 0x7e;
            sound(0xb0);

            sleep(0x14);

            while(<ACTIVE>[Y] > arg[0x10]) {
                <ACTIVE>[Y] -= 0x02;
                yield();
            }

            sleep(0x10);

            object[door] = 0x00;
            sound(0xb0);

            control(BOTH);
        }

        fun scene_raptors_death_escape() {
            control(NONE);

            // boy collapses
            animate(BOY, LOOP, ANIMATION_BOY.SLEEP_UP);

            eval("18 1f 02 50 29 6a 1a d5 // (18) WRITE $2477 = *(boy + 26)");
            eval("18 21 02 50 29 6c 1a d5 // (18) WRITE $2479 = *(boy + 28)");

            eval("18 1f 02 08 1f 02 29 02 20 9a // (18) WRITE $2477 = $2477 + 0x20");

            eval("73 d1 88 1f 02 88 21 02 // (73) Make dog walk to $2477,$2479 directly");

            // dog walks to boy and looks west
            wait(DOG);
            face(DOG, WEST);
            sleep(0x3c);

            // dog drags boy east
            animate(BOY, LOOP, ANIMATION_BOY.DRAGGED);
            animate(DOG, LOOP, ANIMATION_DOG.ACT1_DRAGGING);

            eval("43 d0 08 1f 02 29 02 20 9b 88 21 02 // (43) Teleport boy to x:$2477 - 0x20, y:$2479");
            eval("43 d1 88 1f 02 88 21 02 // (43) Teleport dog to x:$2477, y:$2479");
            sleep(0x0f);

            eval("18 1f 02 08 1f 02 29 32 9a // (18) WRITE $2477 = $2477 + 2");

            // repeat 19 times
            eval("1a 00 12 00 29 31 9a // (1a) WRITE SCRIPT arg0 = signed arg0 + 1");
            eval("09 12 00 29 62 9f 07 00 // (09) IF (signed arg0 > 18) == FALSE THEN SKIP 7 (to 0x939069)");

            // fade out
            call(0x93907e);
            eval("04 02 00 // (04) SKIP 2 (to 0x93906b)");
            eval("05 cb // (05) SKIP -53 (to 0x939034)");

            fade_out();
        }

        fun explode_boss(x, y, radius) {
            <0x23bb> = x;
            <0x23b9> = y;
            
            code(0xb4, 0x03, entity_t(0x23bb), entity_t(0x23b9), 0xb0 + radius, address(0x92df1c), "// (b4) CALL Absolute (24bit) script 0x92df1c ('Unnamed ABS script 0x92df1c') WITH 3 ARGS $23b9, $23bb, 5");

            sleep(0xf0);
            call(ADDRESS.FADE_TO_WHITE);

            call(ADDRESS.EXPLODE_BOSS_STOP);
            call(0x92d752);
        }
        fun explode_last_entity(radius) {
            <0x2834> = <LAST_ENTITY>;

            eval("18 45 02 0d 00 00 29 6a 1a d5 // (18) WRITE $249d = *($2834 + 26)");
            eval("18 47 02 0d 00 00 29 6c 1a d5 // (18) WRITE $249f = *($2834 + 28)");
            
            code(0xb4, 0x03, entity_t(0x249d), entity_t(0x249f), param(radius), address(0x92df1c), "// (b4) CALL Absolute (24bit) script 0x92df1c ('Unnamed ABS script 0x92df1c') WITH 3 ARGS $23b9, $23bb, 5");

            sleep(0xf0);
            call(ADDRESS.FADE_TO_WHITE);

            call(ADDRESS.EXPLODE_BOSS_STOP);
            call(0x92d752);
        }

        fun dog_fountain() {
            call(0x96d5d7);
        }
    };

    group start_gimmicks() {
        fun drop_bomb(costs_ingredients) {
            if(costs_ingredients) {
                if(MEMORY.IRON < 0x04) {
                    if(False) {
                        MEMORY.STRING_PARAMETER_1 = MEMORY.IRON;
                        MEMORY.STRING_PARAMETER_2 = 0x04;

                        subtext("not enought iron([MEM1]<[MEM2])");
                    }

                    end();
                }
                if(MEMORY.GREASE < 0x02) {
                    if(False) {
                        MEMORY.STRING_PARAMETER_1 = MEMORY.GUNPOWDER;
                        MEMORY.STRING_PARAMETER_2 = 0x02;

                        subtext("not enought gunpowder([MEM1]<[MEM2])");
                    }
                    end();
                }

                MEMORY.IRON -= 0x04;
                MEMORY.GUNPOWDER -= 0x02;
            }

            animate(BOY, ONCE, ANIMATION_BOY.LOOT);

            add_dynamic_enemy_with_flags(BOMB, <BOY>[0x1a], <BOY>[0x1c], 0x0000);
            attach_to_script(LAST_ENTITY);
            attach_script(SCRIPT_OWNER, DEATH, ADDRESS_ID.BOMB_EXPLOSION);

            sleep(0x80);

            damage(SCRIPT_OWNER, 0x270f, False);

            sleep(0x40);
            
            destroy(SCRIPT_OWNER);
        }

        fun isaac_tear(costs_ingredients) {
            if(costs_ingredients) {
                if(MEMORY.WATER < 0x04) {
                    if(False) {
                        MEMORY.STRING_PARAMETER_1 = MEMORY.WATER;
                        MEMORY.STRING_PARAMETER_2 = 0x04;

                        subtext("not enought water([MEM1]<[MEM2])");
                    }

                    end();
                }

                MEMORY.WATER -= 0x04;
            }
            
            if(<BOY>[FACE_DIRECTION] == 0x00) {
                shoot_entity_offset_relative(BOY, ONION, 0x00, -0x15, 0x00, -0x60, 0x10, 0x0a);
            } else if(<BOY>[FACE_DIRECTION] == 0x04) {
                shoot_entity_offset_relative(BOY, ONION, 0x00, -0x15, 0x60, 0x00, 0x10, 0x0a);
            } else if(<BOY>[FACE_DIRECTION] == 0x08) {
                shoot_entity_offset_relative(BOY, ONION, 0x00, -0x15, 0x00, 0x60, 0x10, 0x0a);
            } else {
                shoot_entity_offset_relative(BOY, ONION, 0x00, -0x15, -0x60, 0x00, 0x10, 0x0a);
            }
        }

        @install()
        fun mario_yump() {
            if(FLAG.IN_ANIMATION) {
                end();
            }

            if!(FLAG.DEBUG) {
                if(MEMORY.WINGS <= 0x00) {
                    subtext("Cannot be used without wings");
                    end();
                }
            }

            arg[0x00] = <BOY>[X];
            arg[0x02] = <BOY>[Y];
            <BOY>[JUMP_HEIGHT] = 0x20;
            attribute(BOY, NO_CLIP, True);
            set(FLAG.IN_ANIMATION);

            sleep(0x35);
            // animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
            control(NONE);
            sleep(0x05);

            bomb_entity(BOY, 0x20);
            sound(HEAVY_IMPACT);
            // debug_memory(<BOY>[FACE_DIRECTION], <BOY>[FACE_DIRECTION]);
            
            arg[0x04] = <BOY>[X];
            arg[0x06] = <BOY>[Y];

            attribute(BOY, INVISIBLE, True);

            if(<BOY>[FACE_DIRECTION] == 0x00) {
                walk_relative(BOY, COORDINATE_RELATIVE, 0x00, -0x01, False);
                face(BOY, DIRECTION.NORTH);
            } else if(<BOY>[FACE_DIRECTION] == 0x04) {
                walk_relative(BOY, COORDINATE_RELATIVE, 0x01, 0x00, False);
                face(BOY, DIRECTION.EAST);
            } else if(<BOY>[FACE_DIRECTION] == 0x08) {
                walk_relative(BOY, COORDINATE_RELATIVE, 0x00, 0x01, False);
                face(BOY, DIRECTION.SOUTH);
            } else {
                walk_relative(BOY, COORDINATE_RELATIVE, -0x01, 0x00, False);
                face(BOY, WEST);
            }
            sleep(0x03);

            if((arg[0x04] == <BOY>[X]) && (arg[0x06] == <BOY>[Y])) {
                <BOY>[X] = arg[0x00];
                <BOY>[Y] = arg[0x02];

                damage(BOY, 0x01, True);
            } else {
                <BOY>[Y] = arg[0x06];
                <BOY>[X] = arg[0x04];
            }
            attribute(BOY, INVISIBLE, False);

            // animate(BOY, LOOP, ANIMATION_ALL.DEFAULT);
            attribute(BOY, NO_CLIP, False);
            control(BOTH);
            // walk_relative(BOY, COORDINATE_RELATIVE, 0x00, 0x00, False);
            // debug_memory(<0x2834>, <BOY>[X]);
            // sleep(0x30);
            // debug_memory(<0x2836>, <BOY>[Y]);

            unset(FLAG.IN_ANIMATION);
        }

        fun windwalker_rocket() {
            shoot_entity_offset_relative(BOY, ONION, 0x10, 0x00, 0x00ff, 0x00, 0x10, 0xff);
            sound(PROJECTILE_SHOOTING);
        }
    };

    group debug_helper() {
        @install()
        fun debug_boy() {
            MEMORY.STRING_PARAMETER_1 = <BOY>[X] / 0x08;
            MEMORY.STRING_PARAMETER_2 = <BOY>[Y] / 0x08;

            debug_subtext("boy = [MEM1]/[MEM2]");
        }

        fun debug_memory(m1, m2) {
            MEMORY.STRING_PARAMETER_1 = m1;
            MEMORY.STRING_PARAMETER_2 = m2;

            debug_subtext("memory = [MEM1] / [MEM2]");
        }

        fun test_stuff() {
            unlock(INGREDIENTS);

            unlock(REVEALER);
            unlock(LEVITATE);

            select_alchemy();
        }

        fun test_map_palettes() {
            <0x2437> = 0x0000;
            sleep(0x30);
            <0x2437> = 0x0001;
            sleep(0x30);
            <0x2437> = 0x0002;
            sleep(0x30);
            <0x2437> = 0x0003;
            sleep(0x30);
            <0x2437> = 0x0004;
            sleep(0x30);
            <0x2437> = 0x0005;
            sleep(0x30);
            <0x2437> = 0x0006;
            sleep(0x30);
            <0x2437> = 0x0007;
            sleep(0x30);
            <0x2437> = 0x0008;
            sleep(0x30);
            <0x2437> = 0x0009;
            sleep(0x30);
            <0x2437> = 0x000a;
            sleep(0x30);
            <0x2437> = 0x000b;
            sleep(0x30);
            <0x2437> = 0x000c;
            sleep(0x30);
            <0x2437> = 0x000d;
            sleep(0x30);
            <0x2437> = 0x000e;
            sleep(0x30);
            <0x2437> = 0x000f;
            sleep(0x30);
        }
    };

    group experimental() {
        fun attach_sterling_script_to_last_entity() {
            <0x283d> = <LAST_ENTITY>;
            
            call(0x9997a7); // (07) CALL 0x9997a7 Sterling battle over, Gomi introduction
        }

        fun crash_land(character:CHARACTER) {
            if(character == CHARACTER.BOY) {
                <BOY>[FALLING_HEIGHT] = 0x1068;
                animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
                sleep(0x60);
                <BOY>[JUMP_HEIGHT] = 0x10;
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
                sleep(0x10);
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
                sleep(0x10);
                animate(BOY, ONCE, ANIMATION_BOY.KNEEL);
            } else if(character == CHARACTER.DOG) {
                <DOG>[FALLING_HEIGHT] = 0x1068;
                animate(DOG, LOOP, ANIMATION_DOG.ACT1_FALL1);
                sleep(0x60);
                <DOG>[JUMP_HEIGHT] = 0x10;
                animate(DOG, ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);
                sleep(0x10);
                animate(DOG, ONCE_FREEZE, ANIMATION_DOG.ACT1_FALL1);
                sleep(0x10);
                animate(DOG, ONCE, ANIMATION_DOG.ACT1_SIT);
            } else if(character == CHARACTER.BOTH) {
                <BOY>[FALLING_HEIGHT] = 0x1068;
                animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
                <DOG>[FALLING_HEIGHT] = 0x1068;
                animate(DOG, LOOP, ANIMATION_DOG.ACT1_FALL1);
                sleep(0x60);
                <BOY>[JUMP_HEIGHT] = 0x10;
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
                <DOG>[JUMP_HEIGHT] = 0x10;
                animate(DOG, ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);
                sleep(0x10);
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
                animate(DOG, ONCE, ANIMATION_DOG.ACT1_FALL1);
                sleep(0x10);
                animate(BOY, ONCE, ANIMATION_BOY.KNEEL);
            }
        }

        fun sand_tunnel() {
            // TODO: extract script, add parameters
            call(0x939fd2);
        }

        fun bonfire_activate(x, y, id) {
            // add_enemy_with_flags(LANTERN_LIGHT, x, y, INACTIVE_IMORTAL);
            // attach_script(LAST_ENTITY, TALK, 0x181e);
            // entity_script_controlled(LAST_ENTITY);

            add_enemy_with_flags(LANTERN_LIGHT_RED, 0x00, 0x00, INACTIVE);
            <LAST_ENTITY>[0x1a] = x;
            <LAST_ENTITY>[0x1c] = y;
            attach_script(LAST_ENTITY, DAMAGE, id);
        }
        fun bonfire_dialog() {
            control(NONE);
            color_filter(0x84, 0x90);
            sleep(0x10);
            animate(BOY, LOOP, ANIMATION_BOY.SLEEP_DOWN);
            color_filter(0x84, 0x66);
            sleep(0x10);
            color_filter(0x55, 0x55);
            animate(BOY, LOOP, ANIMATION_BOY.SLEEP_UP);
            yield();

            // question("[0x96][0x8b]test[LF][0x8b]test[LF][0x8b]test");

            color_filter(0x84, 0x90);
            sleep(0x10);
            color_filter(0x84, 0x66);
            sleep(0x10);
            color_filter(0x00, 0x00);
        }

        fun cannonball() {
            add_enemy_with_flags(0x6a, 0x1e, 0x21, 0x0000); // ENEMY.MAGMAR
            <0x2846> = <LAST_ENTITY>;
            animate(0x2846, LOOP, ANIMATION_ENEMY.MAGMAR_ROLL);
            
            while(0x01) {
                sleep(0x70);

                teleport(0x2846, 0x1e, 0x21);
            }
        }

        fun homing_cannonball() {
            add_enemy_with_flags(0x6a, 0x1e, 0x21, 0x0000); // ENEMY.MAGMAR
            <0x2846> = <LAST_ENTITY>;
            animate(0x2846, LOOP, ANIMATION_ENEMY.MAGMAR_ROLL);
            
            while(0x01) {
                eval("18 21 02 50 29 6c 1a d5 // (18) WRITE $2479 = *(boy + 28)");
                eval("18 21 02 08 21 02 29 3f 9b // (18) WRITE $2477 = $2477 + 2");

                eval("18 1f 02 08 1f 02 29 32 9a // (18) WRITE $2477 = $2477 + 2");

                // teleport(0x2846, 0x1e, 0x21);
                code(0x43, entity_t(0x2846), entity_t(0x2477), entity_t(0x2479), "// (42) Teleport $2835 to a7, b9");

                sleep(0x02);
            }
        }

        fun show_shop(ingredient_id) {
            // call_id(NPC_DIALOGUE_START);
            call_id(OPEN_TEXTBOX_DEFAULT);
            <0x2459> = ingredient_id;
            call_id(DIALOGUE_BUY_INGREDIENT);
            // call_id(NPC_DIALOGUE_STOP);
        }
    };
};