enum ADDRESS {
    // intro

    INTRO_FIRST_CODE_EXECUTED = 0x92e0ca,

    // act 0

    INTRO_START_PRESSED = 0x92e44e,

    // act 1

    SOUTH_JUNGLE_ENTER = 0x9384d9,
    SOUTH_JUNGLE_ENTER_GOURD_1 = 0x93802b,

    STRONG_HEART_EXTERIOR_ENTER = 0x94e5fb,

    FE_EXIT_NORTH = 0x94bead,
    FE_EXIT_NORTH_GATED = 0x94bedc,
    FE_EXIT_EAST = 0x94be9f,
    FE_EXIT_SOUTH = 0x94be91,
    FE_EXIT_WEST = 0x94bee2,

    RAPTORS_EXIT_ENTER = 0x93912c,
    RAPTORS_EXIT_NORTH = 0x93873f,
    RAPTORS_EXIT_SOUTH = 0x93874d,
    RAPTORS_STEP_ON_FIGHT = 0x93875f,
    RAPTORS_BUSH_WIGGLE = 0x938da0,

    THRAXX_EXIT_NORTH = 0x93c6d8,
    THRAXX_EXIT_SOUTH = 0x93c6ae,

    SALABOG_EXIT_SOUTH = 0x9786e4,
    SALABOG_EXIT_NORTH = 0x9786ec,

    // misc. maps

    BRIAN_MAP_POINTER = 0x928084, // inavalid memory
    BRIAN_ENTER = 0x928000,

    // scripts

    FADE_IN = 0x92de75,

    RAISE_CURRENT_WEAPON = 0x92bf33,

    STATUS_BAR_SHOW = 0x92a3ed,
    STATUS_BAR_HIDE = 0x92a3e7,

    FADE_TO_WHITE = 0x92d723,
    FADE_FROM_WHITE = 0x92d752,

    FADE_TO_NIGHT = 0x92d89b,
    FADE_FROM_NIGHT = 0x92d8c2,

    FLASH_WHITE = 0x92d7b1,
    FLASH_WHITE_SLOWER = 0x92d752,

    EXPLODE_BOSS_STOP = 0x92df70,

    RAIN = 0x92d92a
}

enum ADDRESS_ID {
    // talk scripts

    TALK_STRONGHEART = 0x1863,

    // death scripts

    DEATH_GRAVEYARD_LIZARD_2 = 0x17d6,
    DEATH_GRAVEYARD_LIZARD_3 = 0x17d9,
    DEATH_GRAVEYARD_LIZARD_4 = 0x17dc,

    // dialogue helper

    NPC_DIALOGUE_START = 0x32,
    NPC_DIALOGUE_STOP = 0x33,

    OPEN_TEXTBOX_DEFAULT = 0x02, // x=0x0a y=0x02 w=0x14 h=0x07
    OPEN_TEXTBOX_1 = 0x04, // x=0x0a y=0x02 w=0x14 h=0x06
    OPEN_TEXTBOX_2 = 0x05, // x=0x0a y=0x02 w=0x14 h=0x04
    OPEN_TEXTBOX_3 = 0x06, // x=0x0a y=0x02 w=0x14 h=0x03
    OPEN_TEXTBOX_4 = 0x07, // x=0x02 y=0x02 w=0x14 h=0x07
    OPEN_TEXTBOX_5 = 0x09, // x=0x02 y=0x02 w=0x14 h=0x06
    OPEN_TEXTBOX_6 = 0x0a, // x=0x02 y=0x02 w=0x14 h=0x04
    OPEN_TEXTBOX_7 = 0x0b, // x=0x02 y=0x02 w=0x14 h=0x03
    OPEN_TEXTBOX_8 = 0x0d, // x=0x03 y=0x14 w=0x1a h=0x02 (unbordered?)
    OPEN_TEXTBOX_9 = 0x0e, // x=0x0a y=0x02 w=0x14 h=0x08
    OPEN_TEXTBOX_10 = 0x13, // x=0x02 y=0x02 w=0x14 h=0x08
    OPEN_TEXTBOX_11 = 0x18, // x=0x0c y=0x13 w=0x12 h=0x05

    DIALOGUE_BUY_INGREDIENT = 0x54,
    DIALOGUE_SAVE = 0x4d,

    // music

    MUSIC_FADE_IN = 0x01,
    MUSIC_FADE_OUT = 0x00,

    // scripts

    LOOT = 0x3a,

    LIGHTNING = 0x36,

    BOMB_EXPLOSION = 0x1b66,

    OUTRO = 0x59 // starts in nobilia, but the boy 
}

enum MEMORY {
    TALONS = <0x0ac6>,
    JEWELS = <0x0ac9>,
    GOLD = <0x0acc>,
    CREDITS = <0x0acf>,

    MAP = <0xadb>,
    PACIFIED = <0x23bf>,
    FAKE_HOUSE_ID = <0x234b>,

    DOG = <0x2443>,
    GAIN_WEAPON = <0x2441>,
    QUESTION_ANSWER = <0x289d>,
    
    ENTITY_1 = <0x2835>,
    ENTITY_2 = <0x2837>,
    ENTITY_3 = <0x2839>,
    ENTITY_4 = <0x283b>,
    ENTITY_5 = <0x283d>,
    LAST_ENTITY = <0x0341>,

    BOY_LEVEL = <0x0A50>,
    BOY_CURRENT_HP = <0x4EB3>,
    BOY_XP_REQUIRED = <0x4F1D>,

    DOG_LEVEL = <0x0A9A>,
    DOG_XP_REQUIRED = <0x4FCB>,

    ENEMY_SPAWNER_QUANTITY = <0x2433>,

    // NPCs

    SHOP_RING_MENU_AND_POSITION_ID = <0x2459>,

    // ingredients

    WAX = <0x22ff>,
    WATER = <0x2300>,
    VINEGAR = <0x2301>,
    ROOT = <0x2302>,
    OIL = <0x2303>,
    MUSHROOM = <0x2304>,
    MUD_PEPPER = <0x2305>,
    METEORITE = <0x2306>,
    LIMESTONE = <0x2307>,
    IRON = <0x2308>,
    GUNPOWDER = <0x2309>,
    GREASE = <0x230a>,
    FEATHER = <0x230b>,
    ETHANOL = <0x230c>,
    DRY_ICE = <0x230d>,
    CRYSTAL = <0x230e>,
    CLAY = <0x230f>,
    BRIMSONE = <0x2310>,
    BONE = <0x2311>,
    ATLAS_AMULET = <0x2312>,
    ASH = <0x2313>,
    ACORN = <0x2314>
}

enum MAP {
    START = 0x00,
    STRONGHEART = 0x34,
    RAPTORS = 0x5c,
    FE_VILLAGE = 0x25,
    THRAXX = 0x18,
    MAGMAR = 0x3f,
    SALABOG = 0x01,
    
    BRIAN = 0x15
}

enum DOG {
    WOLF = 0x2,
    WOLF2 = 0x4,
    GREYHOUND = 0x6,
    POODLE = 0x8,
    PUPPER = 0xa,
    TOASTER = 0xc
}

enum CHARACTER {
    BOY = 0xd0,
    DOG = 0xd1,
    ACTIVE = 0xd2,
    INACTIVE = 0xd3,

    BOTH = 0x00,
    NONE = 0x01,

    LAST_ENTITY = 0xad,
    SCRIPT_OWNER = 0xae // d5?
}

enum MUSIC {
    START = 0x12,
    RAPTORS = 0x0a,
    THRAXX = 0x04,

    FANFARE = 0x78
}

enum DIRECTION {
    NORTH = 0x26,
    EAST = 0x1d,
    SOUTH = 0x21,
    WEST = 0x19,
    
    UNKNOWN = 0x00
}

enum FLAG {
    DEBUG = <0x22eb, 0x08>,

    START_PRESSED = <0x22eb, 0x02>,
    FLOWERS_CUTSCENE_WATCHED = <0x22ab, 0x40>,

    RAPTORS = <0x225f, 0x40>,
    THRAXX = <0x2260, 0x10>,
    MAGMAR = <0x2260, 0x40>,
    SALABOG = <0x22f3, 0x20>,

    GOURD_1 = <0x2268, 0x40>,
    
    IN_ANIMATION = <0x22eb, 0x20>,

    RANDOM_1 = <0x2266, 0x01>,
    RANDOM_2 = <0x2266, 0x02>,
    RANDOM_3 = <0x2266, 0x04>,
    RANDOM_4 = <0x2266, 0x08>,
    RANDOM_5 = <0x2266, 0x10>,
    RANDOM_6 = <0x2266, 0x20>,
    RANDOM_7 = <0x2266, 0x30>,
    RANDOM_8 = <0x2266, 0x40>,

    JAGUAR_RING = <0x2262, 0x02>,

    DOG_UNAVAILABLE = <0x2261, 0x01>,
    BOY_UNAVAILABLE = <0x2261, 0x02>,
    BLIMP_BRIDGE = <0x225f, 0x01>
}


enum ATTRIBUTE {
    // See data crystals: 7E3DE5 to 7E4E88 = Monster/NPC data for the current room. Each Monster/NPC gets x8E bytes of data.

    UNKNOWN_1 = 0x0f, // only used on 0x23e5+0x0f (boy max health?) and 0x23e7+0x0f (dog max health?) in combination with heals and during the intro cutscene
    HP_MAX = 0x15,
    X_WRITE = 0x1a,
    Y_WRITE = 0x1c,
    FALLING_HEIGHT = 0x1e, // used for boss rush intro
    JUMP_HEIGHT = 0x20, // used for wings (0xe0 signed), magmar, megataur, act2 intro, puppets, sterling flight
    FACE_DIRECTION = 0x22, // enum = DIRECTION
    X_READ = 0x26,
    Y_READ = 0x28,
    HP = 0x2a,
    UNKNOWN_5 = 0x30,
    UNKNOWN_6 = 0x32,
    UNKNOWN_7 = 0x36,
    UNKNOWN_8 = 0x3c,

    // weird
    TURN_NORTH = 0x22
}

enum ATTRIBUTE_BITS {
    // used by the game

    VINCIBLE = 0x10,
    INVINCIBLE = 0x12, // used for: outro, boss kills (doubles, drake, verminator)

    INVINCIBLE_2 = 0x14,
    VINCIBLE_2 = 0x16,

    UNLOCK = 0x18,
    LOCK_IN_PLACE = 0x1a,

    UNKNOWN_1_1 = 0x1c,
    UNKNOWN_1_2 = 0x1e, // used for: dog enter/exit the upper level of act4

    NO_CLIP = 0x20,
    CLIP = 0x22,

    INVISIBLE = 0x28,
    VISIBLE = 0x2a,

    UNMUTE = 0x2c,
    MUTE = 0x2e, // used for: boy during bazooka cutscene
    
    AI_RUN = 0x34,
    AI_WALK = 0x36,

    // unknown/weird

    TURN_NORTH = 0x00,
    TURN_EAST_1 = 0x02,
    TURN_EAST_2 = 0x04,
    TURN_EAST_3 = 0x06,
    TURN_SOUTH = 0x08,
    TURN_WEST_1 = 0x0a,
    TURN_WEST_2 = 0x0c,
    TURN_WEST_3 = 0x0e

    // CRASH: 38, 3a, â€¦
}

enum ENEMY {
    BOY_DERPY = 0x00,
    DOG_DERPY = 0x01,
    BEE = 0x02,
    CHAMELEON = 0x03,
    VILLAGER_1_1 = 0x04,
    VILLAGER_1_2 = 0x05,
    VILLAGER_1_3 = 0x06,
    VILLAGER_1_4 = 0x07,
    VILLAGER_1_5 = 0x08,
    VILLAGER_1_6 = 0x09,
    BONE_SNAKE = 0x0a,
    FLOWER_PURPLE = 0x0b,
    FLOWER_ORANGE = 0x0c,
    RAPTOR = 0x0d,
    MAGGOT = 0x0e,
    MOSQUITO = 0x0f,
    
    THRAXX_LEFT_ARM = 0x10,
    THRAXX_RIGHT_ARM = 0x11,
    VILLAGER_1_7 = 0x12,
    UNKNOWN_1 = 0x13, // unused?
    THRAXX_HEART = 0x14,
    FIRE_EYES = 0x15,
    VILLAGER_1_8 = 0x16,
    VILLAGER_1_9 = 0x17,
    VILLAGER_2_1 = 0x18,
    VILLAGER_2_2 = 0x19,
    VILLAGER_2_3 = 0x1a,
    VILLAGER_2_4 = 0x1b,
    VILLAGER_2_5 = 0x1c,
    VILLAGER_2_6 = 0x1d,
    STONE = 0x1e,
    STONE_ROUND = 0x1f,
    
    PLACEHOLDER = 0x20, // used for explosions, windwalker, etc.
    FRIPPO = 0x21,
    SPIDER = 0x22,
    SPIDER_YELLOW = 0x23,
    SPIDER_GREEN = 0x24,
    SPIDER_BLACK = 0x25,
    SKELESNAIL = 0x26,
    PIRATE_ANCHOR = 0x27,
    MONK = 0x28,
    LIZARD = 0x29,
    LIZARD_BLACK = 0x2a,
    RAPTOR_GREEN = 0x2b,
    SALABOG = 0x2c,
    BOXER_1 = 0x2d,
    BOXER_2 = 0x2e,
    DRUNK_1 = 0x2f,

    DRUNK_2 = 0x30,
    VILLAGER_2_7 = 0x31,
    VILLAGER_1_10 = 0x32,
    VILLAGER_1_11 = 0x33,
    VILLAGER_1_12 = 0x34,
    MAGMAR = 0x35,
    MEGATAUR = 0x36,
    LANTERN_LIGHT = 0x37,
    MINITAUR = 0x38,
    PYRAMID_GUARDIAN_1 = 0x39,
    PYRAMID_GUARDIAN_2 = 0x3a,
    RIMSALA_BOSS_1 = 0x3b,
    RIMSALA_BOSS_2 = 0x3c,
    VIGOR = 0x3d,
    AQUAGOTH_ENTITY = 0x3e,
    TENTACLE_WHIP = 0x3f,

    SPARK = 0x40,
    VERMINATOR = 0x41,
    RAT = 0x42,
    FORESTDRAKE = 0x43,
    STERLING = 0x44,
    HORACE = 0x45,
    TINY = 0x46,
    AEGIS_ENTITY = 0x47,
    VILLAGER_3_1 = 0x48,
    FOOTKNIGHT = 0x49,
    TENTACLE_SPIKE = 0x4a,
    QUEEN_JUMP = 0x4b,
    QUEEN = 0x4c,
    DUSTER_BOT = 0x4d,
    GUARD_BOT = 0x4e,
    OWL_BLACK = 0x4f,

    HEDGEHOG = 0x50,
    NARIS_YOUNG = 0x51,
    VILLAGER_3_2 = 0x52,
    VILLAGER_3_3 = 0x53,
    KING = 0x54,
    VILLAGER_1_13 = 0x55,
    VILLAGER_1_14 = 0x56,
    PROFESSOR = 0x57,
    TINKER = 0x58,
    SNAKE_STATUE_1 = 0x59,
    SNAKE_STATUE_2 = 0x5a,
    RIMSALA_STATUTE_ENTITY = 0x5b,
    FAN_ENTITY = 0x5c,
    SPEAKER_ENTITY = 0x5d,
    REVEALER_TARGET_ENTITY = 0x5e,
    CARLTRON = 0x5f,

    BOY_BLACK = 0x60,
    DOG_1_BLACK = 0x61,
    HORACE_EVIL = 0x62,
    BUZZARD_BLACK = 0x63,
    LANTERN_LIGHT_RED = 0x64,
    BOMB = 0x65,
    GATE_BOT = 0x66,
    PUPPET_1 = 0x67,
    PUPPET_2 = 0x68,
    FAN_BOT = 0x69,
    FLOWER_BLACK = 0x6a,
    RAPTOR_BLACK = 0x6b,
    MUNGOLA_ENTITY = 0x6c,
    DRAKE = 0x6d,
    OGLIN = 0x6e,
    SLIME_PINK = 0x6f,

    SLIME_GREEN = 0x70,
    SLIME = 0x71,
    MUMMY = 0x72,
    TUMBLING_WEED = 0x73,
    BUZZARD_2 = 0x74,
    DANCING_DEVIL_1 = 0x75,
    DANCING_DEVIL_2 = 0x76,
    MAGGOT_RED = 0x77,
    OWL_GREEN = 0x78,
    RAPTOR_TEAL = 0x79,
    MOSQUITO_BLACK = 0x7a,
    RIMSALA = 0x7b,
    RAT_RED = 0x7c,
    FACE_ENTITY = 0x7d,
    VILLAGER_1_15 = 0x7e,
    MAGMAR_METAL = 0x7f,

    GUARD_BOT_INTRO = 0x80,
    TINKER_TWIN = 0x81,
    BUZZARD_3 = 0x82,
    RIMSALA_2 = 0x83,
    THRAXX2_HEART = 0x84,
    THRAXX2_LEFT_ARM = 0x85,
    THRAXX2_RIGHT_ARM = 0x86,
    CARLTRON_ROBOT = 0x87,
    UNKNOWN_2 = 0x88, // used for: palace grounds 3x, related to the dog fountain cutscene
    DRAKE_GREEN = 0x89,
    RAT_RED_2 = 0x8a,
    DUSTER_BOT_2 = 0x8b,
    TENTACLE_WHIP_2 = 0x8c,
    TENTACLE_SPIKE_2 = 0x8d,
    DOG_4_BLACK = 0x8e,
    UNKNOWN_3 = 0x8f // unused?
}

enum FLAG_ENEMY {
    NORMAL = 0x0000,
    INACTIVE_INVISIBLE = 0x0001,
    INVINCIBLE = 0x0002,
    INACTIVE = 0x0020,
    MOSQUITO = 0x0040,
    PHASING = 0x0400,
    INVISBLE_INVINCIBLE_INACTIVE = 0x1000,

    INACTIVE_IMORTAL = 0x0022,

    STONE_LEVITATE = 0x0002,
    STONE_LEVITATE_INVISIBLE = 0x0005
}

enum ITEM {
    // special/groups
    ALL = 0x0000,
    INGREDIENTS = 0x0001,
    MONEY = 0x0002,
    TRADING_GOODS = 0x0003,

    // charms
    JAGUAR_RING = 0x0100,

    // weapon
    SPEAR_1 = 0x0200,
    SPEAR_2 = 0x0201,
    SPEAR_3 = 0x0202,
    AXE_1 = 0x0210,
    
    // alchemy
    ACID_RAIN = 0x0300,
    ATLAS = 0x0301,
    BARRIER = 0x0302,
    CALL_UP = 0x0303,
    CORROSION = 0x0304,
    CRUSH = 0x0305,
    CURE = 0x0306,
    DEFEND = 0x0307,

    DOUBLE_DRAIN = 0x0310,
    DRAIN = 0x0311,
    ENERGIZE = 0x0312,
    ESCAPE = 0x0313,
    EXPLOSION = 0x0314,
    FIREBALL = 0x0315,
    FIRE_POWER = 0x0316,
    FLASH = 0x0317,

    FORCE_FIELD = 0x0320,
    HARD_BALL = 0x0321,
    HEAL = 0x0322,
    LANCE = 0x0323,
    LASER = 0x0324,
    LEVITATE = 0x0325,
    LIGHTNING_STORM = 0x0326,
    MIRACLE_CURE = 0x0327,

    NITRO = 0x0330,
    ONE_UP = 0x0331,
    REFLECT = 0x0332,
    REGROWTH = 0x0333,
    REVEALER = 0x0334,
    REVIVE = 0x0335,
    SLOW_BURN = 0x0336,
    SPEED = 0x0337,

    SRING = 0x0340,
    STOP = 0x0341,
    SUPER_HEAL = 0x0342,

    // consumables
    WINGS = 0x0400,
    PETAL = 0x0401,
    NECTAR = 0x0402,

    // ingredients
    WAX = 0x0500,
    WATER = 0x501,
    VINEGAR = 0x502,
    ROOT = 0x503,
    OIL = 0x504,
    MUSHROOM = 0x505,
    MUD_PEPPER = 0x506,
    METEORITE = 0x507,
    LIMESTONE = 0x508,
    IRON = 0x509,
    GUNPOWDER = 0x50a,
    GREASE = 0x50b,
    FEATHER = 0x50c,
    ETHANOL = 0x50d,
    DRY_ICE = 0x50e,
    CRYSTAL = 0x50f,
    CLAY = 0x510,
    BRIMSONE = 0x511,
    BONE = 0x512,
    ATLAS_AMULET = 0x513,
    ASH = 0x514,
    ACORN = 0x515
}

enum ALCHEMY_INDEX {
    FLASH = 0x1e
}

enum CAST {
    ACID_RAIN = 0x00,
    FLASH = 0x02,
    CRUSH = 0x04,
    DRAIN = 0x06,
    DOUBLE_DRAIN = 0x08,
    STING = 0x0a,
    LIGHTNING_STORM = 0x0c,
    EXPLOSION = 0x0e,

    COROSION = 0x10,
    NITRO = 0x12,
    STOP = 0x14,
    FIREBALL = 0x16,
    CONFOUND = 0x18,
    CURE = 0x1a,
    HEAL = 0x1c,
    MIRACLE_CURE = 0x1e,

    ONE_UP = 0x20,
    SLOW_BURN = 0x22,
    FORCEFIELD = 0x24,
    SLOW_BURN = 0x26,
    STORM = 0x28,
    DISRUPT = 0x2a,
    PLAGUE = 0x2c
}

enum CAST_ENEMEY {
    COROSION = 0xe0,
    NITRO = 0xe2,
    STOP = 0xe4,
    FIREBALL = 0xe6,
    CONFOUND = 0xe8,
    CURE = 0xea,
    HEAL = 0xec,
    MIRACLE_CURE = 0xee
}

enum ANIMATION_MODE {
    ONCE = 0xb0,
    ONCE_FREEZE = 0xb2,
    LOOP = 0xb4,
    FREEZE = 0xb6
}

enum ANIMATION_ALL {
    INVISIBLE = 0x0010,

    DEFAULT = 0x8000,
    
    WALK_FORWARD = 0x8002,
    RUN_FORWARD = 0x8004,
    
    SLASH_1 = 0x8006,
    SLASH_2 = 0x8008,
    SLASH_3 = 0x800a,
    SLASH_1_3 = 0x800c,

    KNOCKBACK = 0x800e,

    CAST = 0x8014,
    BLOCK = 0x8016

    // ENEMIES ONLY: 8010, 8012
    // CRASH: 8018, 801a, 801c, 801e
}

enum ANIMATION_BOY {
    SLEEP_UP = 0x001a,
    DRAGGED = 0x001c,
    SWIRL_ENTER = 0x0020,
    SWIRL_EXIT = 0x0022,
    FALL_1 = 0x0024,
    FALL_2 = 0x0026,
    SLEEP_DOWN = 0x0028,
    KNEEL = 0x002a,
    SLEEP_WATER = 0x002C,
    TELEPORT_IN = 0x002e,

    BOY_STICK_THROWING = 0x0014,
    BOY_STICK_HOLDING = 0x0016,
    LOOT = 0x0018
}

enum ANIMATION_DOG {
    // act0
    ACT0_RUN = 0x0068,
    ACT0_STAND = 0x006a,
    ACT0_WALK = 0x006c,

    // act1
    ACT1_STICK_RUNNING = 0x0030,
    ACT1_STICK_DROPPING = 0x0032,
    ACT1_SWIRL_ENTER = 0x0038,
    
    ACT1_TINY = 0x0036,

    ACT1_DRAGGING = 0x0034,
    ACT1_SLEEP = 0x003a,
    ACT1_SIT = 0x003e,
    ACT1_FALL1 = 0x003c,
    ACT1_FALL2 = 0x0040,
    ACT1_FALL3 = 0x0042,
    ACT1_ANGRY = 0x0044,

    // act2
    ACT2_FALL = 0x0052,
    ACT2_LEAP = 0x0046,
    ACT2_SLEEP = 0x0048,
    ACT2_SIT = 0x004a,
    ACT2_DUCK = 0x004c,
    ACT2_FALL_1 = 0x004e,
    ACT2_FALL_2 = 0x0050,
    ACT2_FALL_3 = 0x0052,
    ACT2_FALL_4 = 0x0054,
    ACT2_SNIFF = 0x0056,
    ACT2_TELEPORT = 0x0058,
    
    // act3
    ACT3_SLEEP = 0x005a,
    ACT3_SIT = 0x005c,
    ACT3_STAND_1 = 0x005e,
    ACT3_STAND_2 = 0x0060,
    ACT3_STAND_3 = 0x0062,
    ACT3_FALL_1 = 0x0064,
    ACT3_FALL_2 = 0x0066
}

enum ANIMATION_ENEMY {
    // special
    GORE = 0x8010,
    DUST = 0x01a6,

    // bosses
    MAGMAR_ROLL = 0x800c,
    MAGMAR_ENTER = 0x00ae,
    MAGMAR_EXIT = 0x00b0,

    SALABOG_DUCK = 0x0072,

    VERMINATOR_CAST_1 = 0x8014,
    VERMINATOR_CAST_2 = 0x010a,
    VERMINATOR_SERCHING = 0x010c,
    VERMINATOR_DAMAGE = 0x010e,

    MINITAUR_STOMP = 0x00b2,

    RIMSALA_1 = 0x00b6,
    RIMSALA_2 = 0x00b8,

    VIGOR_FLEX = 0x00ba,

    TINY_FLEX = 0x00cc,
    TINY_JUGGLE = 0x00ce,
    TINY_THROW_1 = 0x00d0,
    TINY_THROW_2 = 0x00d2,

    STERLING_ATTACK = 0x011e,
    STERLING_FLY_1 = 0x0120,
    STERLING_FLY_2 = 0x0122,
    STERLING_IDLE_1 = 0x0124,
    STERLING_IDLE_2 = 0x0126,

    MEGATAUR_STOMP = 0x0150,
    MEGATAUR_IDLE = 0x0152,
    MEGATAUR_DAMAGE = 0x0154,
    MEGATAUR_STILL = 0x0156,
    MEGATAUR_ENTER = 0x0158,
    MEGATAUR_EXIT = 0x015a,
    MEGATAUR_BREATH = 0x015c,
    MEGATAUR_DUCK = 0x015e,

    // enemies
    LIZARD_TALK = 0x0076,
    LIZARD_DUCK_1 = 0x0078,
    LIZARD_DUCK_2 = 0x007c,
    LIZARD_ROLL = 0x007a,

    TENTACLE_WHIP_ATTACK = 0x00e0,
    TENTACLE_ATTACK = 0x00e2,

    BLACK_OWL_ACTIVATE = 0x8006,
    BLACK_OWL_JUMP = 0x800c,
    BLACK_OWL_FUSION = 0x800a,

    PUPPET_1_JUMP_1 = 0x00e6,
    PUPPET_1_JUMP_2 = 0x00e8,
    PUPPET_1_ENTER = 0x00ea,
    PUPPET_1_DANGLING = 0x00ec,
    PUPPET_1_ATTACK = 0x00ee,
    PUPPET_1_DANCE = 0x00ee,

    PUPPET_2_JUMP = 0x00f2,
    PUPPET_2_ENTER = 0x00f4,
    PUPPET_2_DANGLING = 0x00f6,
    PUPPET_2_ATTACK_1 = 0x00f8,
    PUPPET_2_ATTACK_2 = 0x00fa,
    PUPPET_2_DANCE = 0x00fc,

    GATE_BOT_DEAD = 0x8012,

    // npcs
    DAVID_SEARCHING = 0x0000,

    KING_ROCKING = 0x00fe,

    LANCE = 0x0110,

    VILLAGER_FREAKSHOW_1 = 0x0112,

    TINKER_1 = 0x0136,
    TINKER_2 = 0x0138,

    CARLTRON_TALK = 0x013a,
    CARLTRON_LYING = 0x013c,
    CARLTRON_CLEANING = 0x013e,
    CARLTRON_DROPPING = 0x0140,
    CARLTRON_SMUG = 0x0142,

    PIRATE_VILLAGER_1 = 0x0080,
    PIRATE_VILLAGER_2 = 0x0082,
    PIRATE_VILLAGER_3 = 0x0084,
    PIRATE_VILLAGER_4 = 0x0086,
    PIRATE_VILLAGER_5 = 0x008a,
    PIRATE_VILLAGER_6 = 0x008c,
    PIRATE_VILLAGER_7 = 0x008e
}

enum ANIMATION_PLACEHOLDER {
    // effects
    EXPLOSION_1 = 0x0002,
    EXPLOSION_2 = 0x0004,
    EXPLOSION_3 = 0x0006,

    EXPLOSION_GREEN_1 = 0x0104,
    EXPLOSION_GREEN_2 = 0x0106,
    EXPLOSION_GREEN_3 = 0x0108,

    GORE_GREEN = 0x0090,
    GORE_RED = 0x0092,
    GORE_EXPLODE = 0x0094,

    TELEPORT_OUT = 0x00c8,
    TELEPORT_IN = 0x00ca,

    LEAVES_FALLING_1 = 0x0008,
    LEAVES_FALLING_2 = 0x000a,

    // objects
    ENERGY_CORE_CLOSED = 0x00bc,
    ENERGY_CORE_OPENING = 0x00be,
    ENERGY_CORE_OPEN = 0x00c0,

    LIFT_MOVING = 0x006e,

    LIFT_CORD_VERTICAL = 0x00aa,

    ELEVATOR = 0x00b4,

    BUCKET = 0x00e4,

    WINDWALKER_IDLE = 0x014e,

    SPACESHIP_IDLE = 0x0144,
    SPACESHIP_BACK = 0x0146,
    SPACESHIP_TOP = 0x0148,
    SPACESHIP_FIRE_PARTS_1 = 0x014a,
    SPACESHIP_FIRE_PARTS_2 = 0x014c,

    ROCKET_IDLE = 0x0198,

    SHELL_BOAT = 0x006e,

    PILLAR_VIGOR = 0x009a,

    SKELETON_SHIP_1 = 0x009c,
    SKELETON_SHIP_2 = 0x009e,
    SKELETON_SHIP_3 = 0x00a0,
    SKELETON_SHIP_ROW_1 = 0x00a2,
    SKELETON_SHIP_ROW_2 = 0x00a4,

    AEGIS_MASK_1 = 0x00c6,
    AEGIS_MASK_2 = 0x00c2,
    AEGIS_MASK_3 = 0x00c4,

    PIG_RUNNING = 0x00dc,
    PIG_STAND = 0x00de,
    PIGOODLE_RUNNING_1 = 0x00d4,
    PIGOODLE_RUNNING_2 = 0x00d6,
    PIGOODLE_RUNNING_3 = 0x00d8,
    PIGOODLE_STAND = 0x00da,

    SZEPTER = 0x0102,

    // npcs
    EVIL_HORACE_BACK_1 = 0x00a6,
    EVIL_HORACE_BACK_2 = 0x00a8,

    EVIL_FIRE_EYES_TURNING = 0x00ac,

    FIRE_EYES_CAST = 0x0096,

    COLLOSEUM_VILLAGER_1 = 0x0098,

    MARKET_2_VILLAGER_1 = 0x011a,
    MARKET_2_VILLAGER_2 = 0x011c,

    COOK_RUNNING = 0x0116,
    COOK_COOKING = 0x0118,

    // environment

    SANDPIT_OUT = 0x000e,

    // podunk old
    PODUNK_VILLAGER_1 = 0x0128,
    PODUNK_VILLAGER_2 = 0x0190,
    PODUNK_VILLAGER_3 = 0x0192,

    CAT_CLEANING_1 = 0x012c,
    CAT_CLEANING_2 = 0x012e,
    CAT_LOOKING = 0x0130,
    CAT_RUNNING = 0x0132,

    DOVES_1 = 0x018c,
    DOVES_2 = 0x018e,

    // podunk new
    PODUNK_VILLAGER_4 = 0x0134,
    PODUNK_VILLAGER_5 = 0x0194,

    // intro
    SPARK_LEFT = 0x0184,
    LOGO = 0x0186

    // UNIDENTIFIED: 1e, 7e, 100, 114
    // INVISIBLE: 0e, 12, 12a
    // CRASH: 72, 74
}

enum SCRIPT_TRIGGER {
    DEATH = 0x0200,
    DAMAGE = 0x0300,

    LOOT = 0x0040,

    TALK = 0xffff // fake id
}

enum SPECIAL_SCRIPTS {
    LOOTING = 0xb1,
    REVEALER = 0xb2,
    LEVITATE = 0xb3,
    SELECT_PRESSED = 0xb4,
    WINGS = 0xb5,
    UNKNOWN = 0xb6 // used inside and outside of the pyramids
}

enum CURRENCY {
    TALONS = 0xb0,
    JEWELES = 0xb3,
    GOLD_COINS = 0xb6,
    CREDITS = 0xb9
}

enum WALK_TYPE {
    UNKNOWN_1 = 0x6c,
    UNKNOWN_2 = 0x6d,
    UNKNOWN_3 = 0x6e
}

// BASICS

fun end() {
    code(0x00, "// (00) END (return)");
}

fun nop() {
    code(0x4d, "// NOP");
}

fun yield() {
    code(0x3a, "// (3a) YIELD (break out of script loop, continue later)");
}

fun sleep(ticks) {
    code(0xa7, ticks, "// (a7) SLEEP 59 TICKS");
}

fun call_id(script_id) {
    code(0xa3, script_id, "// (a3) CALL 'Unnamed Global script 0x3d' (0x3d)");
}

// MUSIC

fun music(music) {
    code(0x33, music, "// PLAY MUSIC 0x12");
}
fun music_volume(music, volume) {
    music(music);
    code(0x86, 0x82, volume, "// (86) SET AUDIO volume to 0x64");
}
fun music_fade(on) {
    if(on == True) {
        call_id(ADDRESS_ID.MUSIC_FADE_IN);
    } else {
        call_id(ADDRESS_ID.MUSIC_FADE_OUT);
    }
}

// MAP INITIALIZATION

fun fade_out() {
    code(0x27, "// (27) Fade-out screen (WRITE $0b83=0x8000)");
}
fun fade_out_black() {
    code(0x82, "// (82) Also change visible layers?");
}
fun load_map(map, x, y) {
    code(0x22, x, y, map, 0x00, "// (22) CHANGE MAP = 0x34 @ [ 0x0090 | 0x0118 ]: ...");
}
fun prepare_transition(direction_in, direction_out) {
    eval("0c 9d 04 b1 // (0c) $22eb |= 0x20 (in animation)");
    eval("18 37 01 b3 // (18) WRITE $238f = 0x0003");
    eval("27 // (27) Fade-out screen (WRITE $0b83=0x8000)");
    code(0xa3, direction_out, "// (a3) CALL 'Prepare room change? North exit/south entrance outdoor-indoor?' (0x26)");
    eval("a7 10 // (a7) SLEEP 15 TICKS");
}

fun transition(map, x, y, direction_in, direction_out) {
    music_fade(False);
    prepare_transition(direction_in, direction_out);
    load_map(map, x, y);
}

fun teleport(character, x, y) {
    if(character == CHARACTER.BOY) {
        code(0x42, character, y, x, "// (42) Teleport boy to 1f, 17");
    } else if(character == CHARACTER.DOG) {
        code(0x42, character, y, x, "// (42) Teleport boy to 1f, 17");
    } else if(character == CHARACTER.BOTH) {
        code(0x20, x, y, "// (20) Teleport both to 43 93");
    } else {
        code(0x42, 0x8d, character - 0x2834, y, x, "// (42) Teleport $2835 to a7, b9");
    }
}

fun init_map(x_start, y_start, x_end, y_end) {
    code(0x1b, 0x23e9 - 0x2258, 0x23eb - 0x2258, x_start, y_start, "// (1b) WRITE MAP X start ($23e9) = 0x0000  (1b) WRITE MAP Y start ($23eb) = 0x0010");
    code(0x1b, 0x23ed - 0x2258, 0x23ef - 0x2258, x_end, y_end, "// (1b) WRITE MAP X end   ($23ed) = 0x0400  (1b) WRITE MAP Y end   ($23ef) = 0x04b0");
}

fun price(index, rate, drop, quantity) {
    if(index == 0x1) {
        <0x239b> = rate;
        <0x23a1> = drop;
        <0x23a7> = quantity;
    } else if(index == 0x2) {
        <0x239d> = rate;
        <0x23a3> = drop;
        <0x23a9> = quantity;
    } else if(index == 0x3) {
        <0x239f> = rate;
        <0x23a5> = drop;
        <0x23ab> = quantity;
    }
}

// CURRENCY

fun currency_get(type, amount) {
    code(0x7c, type, 0x000000 + amount, "// (7c) Give 50 Talons (moniez)");
}
fun currency_take(type, amount) {
    code(0x7c, type, 0x000000 + amount, "// (7d) Take 10 Talons (moniez)");
}
fun currency_convert(from_amount, from_type, to_amount, to_type) {
    code(0x7e, 0xb0 + from_amount, from_type, 0xb0 + to_amount, to_type, "// (7e) Exchange 1 Gold Coins to 8 Credits (moniez)");
}
fun show_currency(show) {
    if(show == True) {
        eval("9f // (9f) PREPARE CURRENCY DISPLAY");
        eval("a0 // (a0) SHOW CURRENCY AMOUNT");
    } else {
        eval("a1 // (a1) HIDE CURRENCY DISPLAY");
    }
}

// MISC.

fun add_enemy(enemy, x, y) {
    code(0xba, enemy, x, y, "// (ba) LOAD NPC 0b at 49 79");
}

fun add_enemy_with_flags(enemy, x, y, flags) {
    // enemy = ENEMY * 2

    code(0x3c, 0x0000 + enemy * 0x02, 0x0000 + flags, x, y, "// (ba) LOAD NPC 0b at 49 79");
}

fun add_enemy_spawner(enemy, x, y, quantity) {
    MEMORY.ENEMY_SPAWNER_QUANTITY = quantity;

    code(0xc2, enemy, x, y, "// (c2) Add NPC 0x71 spawner at 0x13,0x09");
}

fun control(character) {
    if(character == CHARACTER.NONE) {
        code(0xc0, "// (c0) BOY+DOG = STOPPED");
    } else if(character == CHARACTER.BOTH) {
        code(0xc1, "// (c1) BOY+DOG = Player controlled");
    }
}
fun control_enemy(character, control) {
    if(control == True) {
        code(0x2a, 0x8d, character - 0x2834, "// (2a) Make $2841 script controlled");
    } else {
        code(0x2b, 0x8d, character - 0x2834, "// (2b) Make $2835 player/AI controlled");
    }
}

fun available(character) {
    // TODO: parameter bug
    
    if(character == CHARACTER.BOY) {
        // teleport(CHARACTER.DOG, 0x00, 0x00);
        
        unset(FLAG.BOY_UNAVAILABLE);
        set(FLAG.DOG_UNAVAILABLE);

        code(0xbd, "// (bd) BOY = Player controlled");
        code(0x98, character, "// (98) SWITCH CHAR TO boy");
        code(0xbe, "// (be) Stop/disable doggo (and SELECT button)");
    } else if(character == CHARACTER.DOG) {
        // teleport(CHARACTER.BOY, 0x00, 0x00);
        
        set(FLAG.BOY_UNAVAILABLE);
        unset(FLAG.DOG_UNAVAILABLE);

        code(0xbf, "// (bf) DOG = Player controlled");
        code(0x98, character, "// (98) SWITCH CHAR TO dog");
        code(0xbc, "// (bc) Stop/disable boy (and SELECT button)");
    } else if(character == CHARACTER.BOTH) {
        unset(FLAG.BOY_UNAVAILABLE);
        unset(FLAG.DOG_UNAVAILABLE);

        code(0xc1, "// (c1) BOY+DOG = Player controlled");
    }
}

fun text_start() {
    control(CHARACTER.NONE);
    call_id(ADDRESS_ID.OPEN_TEXTBOX_DEFAULT);
}
fun text(id) {
    code(0x51, id, "// (51) SHOW TEXT 10bf FROM 0x91e0bf compressed WINDOWED c14dd8> '[0x97][0x8b]Goat[LF]' '[0x8b]Chicken[LF]' '[0x8b]Basket'");
}
fun text_end() {
    code(0x55, "// (55) CLEAR TEXT");
    
    control(CHARACTER.BOTH);
}

fun subtext(id) {
    code(0x52, id, "// (52) SHOW TEXT 066f FROM 0x91d66f compressed UNWINDOWED c03ad9> 'Received Jaguar Ring'");
}

fun question(id) {
    text_start();

    text(id);
    
    eval("1d 69 00 30 ac // (1d) WRITE $289d = Dialog response (preselect 0)");
    
    text_end();
}

fun open_message_box(x, y, w, h) {
    // eval("44 00 0a 02 14 10 // (44) UNTRACED INSTR, Open messagebox? slot=0x00 x=0x0a y=0x02 w=0x14 h=0x0c");

    code(0x44, 0x00, x, y, w, h, "// (44) UNTRACED INSTR, Open messagebox? slot=0x00 x=0x0a y=0x02 w=0x14 h=0x0c");
}

fun question_max(id, h) {
    control(CHARACTER.NONE);
    
    open_message_box(0x0a, 0x02, 0x14, h);

    text(id);
    
    eval("1d 69 00 30 ac // (1d) WRITE $289d = Dialog response (preselect 0)");
    
    text_end();
}

fun dialog(id) {
    text_start();

    text(id);

    text_end();
}

fun fanfare() {
    music_fade(True);
    music(MUSIC.FANFARE);
    music_fade(False);
}
fun fanfare_item() {
    fanfare();
}
fun fanfare_weapon() {
    control(CHARACTER.NONE);
    eval("29 33 3f 00 // (29) CALL 0x92bf33 Hold up weapon");

    sleep(0x08);
    fanfare();
        
    sleep(0xc8);
    control(CHARACTER.BOTH);
}

fun unlock(item) {
    if(item == ITEM.HARD_BALL) {
        set(<0x225a, 0x02>);
    } else if(item == ITEM.FLASH) {
        set(<0x2259, 0x80>);
    } else if(item == ITEM.ACID_RAIN) {
        set(<0x2258, 0x01>);
    } else if(item == ITEM.DRAIN) {
        set(<0x2259, 0x02>);
    } else if(item == ITEM.REVEALER) {
        set(<0x225b, 0x10>);
    } else if(item == ITEM.LEVITATE) {
        set(<0x225a, 0x20>);
    } else if(item == ITEM.INGREDIENTS) {
        <0x22FF> = 0xff;
        <0x2300> = 0xff;
        <0x2301> = 0xff;
        <0x2302> = 0xff;
        <0x2303> = 0xff;
        <0x2304> = 0xff;
        <0x2305> = 0xff;
        <0x2306> = 0xff;
        <0x2307> = 0xff;
        <0x2308> = 0xff;
        <0x2309> = 0xff;
        <0x230A> = 0xff;
        <0x230B> = 0xff;
        <0x230C> = 0xff;
        <0x230D> = 0xff;
        <0x230E> = 0xff;
        <0x230F> = 0xff;
        <0x2310> = 0xff;
        <0x2311> = 0xff;
        <0x2312> = 0xff;
        <0x2313> = 0xff;
        <0x2314> = 0xff;
        <0x2315> = 0xff;
    } else if(item == ITEM.ALL) {
        currency_get(CURRENCY.TALONS, 0x65B9AA);
        currency_get(CURRENCY.JEWELES, 0x65B9AA);
        currency_get(CURRENCY.GOLD_COINS, 0x65B9AA);
        currency_get(CURRENCY.CREDITS, 0x65B9AA);

        // alchemy
        <0x2258> = 0xff;
        <0x2259> = 0xff;
        <0x225A> = 0xff;
        <0x225B> = 0xff;
        <0x225C> = 0xff;
        <0x225D> = 0xff;

        // charms
        <0x2261> = 0xf4;
        <0x2262> = 0xff;
        <0x2263> = 0xff;
        <0x2264> = 0xff;

        // weapons
        <0x22DA> = 0xff;
        <0x22DB> = 0xff;

        // ingredients
        <0x22FF> = 0xff;
        <0x2300> = 0xff;
        <0x2301> = 0xff;
        <0x2302> = 0xff;
        <0x2303> = 0xff;
        <0x2304> = 0xff;
        <0x2305> = 0xff;
        <0x2306> = 0xff;
        <0x2307> = 0xff;
        <0x2308> = 0xff;
        <0x2309> = 0xff;
        <0x230A> = 0xff;
        <0x230B> = 0xff;
        <0x230C> = 0xff;
        <0x230D> = 0xff;
        <0x230E> = 0xff;
        <0x230F> = 0xff;
        <0x2310> = 0xff;
        <0x2311> = 0xff;
        <0x2312> = 0xff;
        <0x2313> = 0xff;
        <0x2314> = 0xff;
        <0x2315> = 0xff;

        // consumables
        <0x2316> = 0xff;
        <0x2317> = 0xff;
        <0x2318> = 0xff;
        <0x2319> = 0xff;
        <0x231A> = 0xff;
        <0x231B> = 0xff;
        <0x231C> = 0xff;
        <0x231D> = 0xff;

        // armor
        <0x231E> = 0xff;
        <0x231F> = 0xff;
        <0x2320> = 0xff;
        <0x2321> = 0xff;
        <0x2322> = 0xff;
        <0x2323> = 0xff;
        <0x2324> = 0xff;
        <0x2325> = 0xff;
        <0x2326> = 0xff;
        <0x2327> = 0xff;
        <0x2328> = 0xff;
        <0x2329> = 0xff;
        <0x232A> = 0xff;
        <0x232B> = 0xff;
        <0x232C> = 0xff;
        <0x232D> = 0xff;
        <0x232E> = 0xff;
        <0x232F> = 0xff;
        <0x2330> = 0xff;
        <0x2331> = 0xff;
        <0x2332> = 0xff;
        <0x2333> = 0xff;
        <0x2334> = 0xff;
        <0x2335> = 0xff;
        <0x2336> = 0xff;
        <0x2337> = 0xff;
        <0x2338> = 0xff;
        <0x2339> = 0xff;
        <0x233A> = 0xff;
        <0x233B> = 0xff;
        <0x233C> = 0xff;
        <0x233D> = 0xff;
        <0x233E> = 0xff;
        <0x233F> = 0xff;
        <0x2340> = 0xff;
        <0x2341> = 0xff;
        <0x2342> = 0xff;
        <0x2343> = 0xff;
        <0x2344> = 0xff;

        // ammo
        <0x2345> = 0xff;
        <0x2346> = 0xff;
        <0x2347> = 0xff;

        // trading goods
        <0x2517> = 0xff;
        <0x2519> = 0xff;
        <0x251b> = 0xff;
        <0x251d> = 0xff;
        <0x251f> = 0xff;
        <0x2521> = 0xff;
        <0x2523> = 0xff;
        <0x2525> = 0xff;
        <0x2527> = 0xff;
        <0x2529> = 0xff;
        <0x252b> = 0xff;
        <0x252d> = 0xff;
        <0x252f> = 0xff;
    } else if(item == ITEM.MONEY) {
        currency_get(CURRENCY.TALONS, 0x65B9AA);
        currency_get(CURRENCY.JEWELES, 0x65B9AA);
        currency_get(CURRENCY.GOLD_COINS, 0x65B9AA);
        currency_get(CURRENCY.CREDITS, 0x65B9AA);
    } else if(item == ITEM.TRADING_GOODS) {
        <0x2517> = 0xff;
        <0x2519> = 0xff;
        <0x251b> = 0xff;
        <0x251d> = 0xff;
        <0x251f> = 0xff;
        <0x2521> = 0xff;
        <0x2523> = 0xff;
        <0x2525> = 0xff;
        <0x2527> = 0xff;
        <0x2529> = 0xff;
        <0x252b> = 0xff;
        <0x252d> = 0xff;
        <0x252f> = 0xff;
    } else if(item == ITEM.JAGUAR_RING) {
         set(<0x2262, 0x02>);
    } else if(item == ITEM.SPEAR_1) {
        <0x2441> = 0x14;
    } else if(item == ITEM.SPEAR_3) {
        <0x2441> = 0x18;
    }
}

fun reward(item) {
    if(item == ITEM.JAGUAR_RING) {
        fanfare_item();

        unlock(item);

        sleep(0x20);
        subtext(0x066f);
        
        fanfare_weapon();
    } else if(item == ITEM.AXE_1) {
        <0x2441> = 0x0a;
        
        subtext(0x05b8);
        fanfare_weapon();
    } else if(item == ITEM.SPEAR_3) {
        unlock(item);
        
        subtext(0x2247);
        fanfare_weapon();
    } else if(item == ITEM.HARD_BALL) {
        set(<0x225a, 0x02>);
        
        dialog(0x0651);
        fanfare_weapon();
    } else if(item == ITEM.FLASH) {
        set(<0x2259, 0x80>);
        
        dialog(0x0963);
        fanfare_weapon();
    } else if(item == ITEM.ACID_RAIN) {
        set(<0x2258, 0x01>);
        
        dialog(0x059d);
        fanfare_weapon();
    } else if(item == ITEM.WINGS) {
        <0x2391> = 0x0804;
        <0x2395> = 0x0014;
        call_id(ADDRESS_ID.LOOT);
        
        fanfare_weapon();
    } else if(item == ITEM.PETAL) {
        <0x2391> = 0x0800;
        <0x2395> = 0x0002;
        call_id(ADDRESS_ID.LOOT);
        
        fanfare_weapon();
    } else if(item == ITEM.NECTAR) {
        <0x2391> = 0x0801;
        <0x2395> = 0x0012;
        call_id(ADDRESS_ID.LOOT);
        
        fanfare_weapon();
    }
}

fun wait(character) {
    code(0x2e, character, "// (2e) Wait for boy (d0) to reach destination");
}

fun walk(walk_type, character, x, y, waiting) {
    if(character == CHARACTER.BOY) {
        code(walk_type, character, x, y, "// (6e) Make controlled char walk to x=0x1c,y=0x1f");
        wait(character);
    } else if(character == CHARACTER.DOG) {
        code(walk_type, character, x, y, "// (6e) Make controlled char walk to x=0x1c,y=0x1f");
        wait(character);
    } else {
        code(walk_type, 0x8d, character - 0x2834, x, y, "// (6e) Make $2841 walk to x=0x01,y=0x1c");
    }
}

fun color_filter(color, saturation) {
    code(0xb4, 0x05, 0xb0, 0xb0, 0xb0, 0x82, color, 0x82, saturation, 0x3e, 0x59, 0x00, "// (b4) CALL Absolute (24bit) script 0x92d93e ('Unnamed ABS script 0x92d93e')  WITH 5 ARGS 0, 0, 0, 0x84, 0x90");
}
fun sepia(active) {
    if(active == True) {
        color_filter(0x84, 0x90);
    } else {
        color_filter(0x00, 0x00);
    }
}

fun clear_status_effects() {
    code(0xaa, "// (aa) Clear boy and dog statuses");
}

fun brightness(brightness) {
    code(0x91, brightness, "// (91) Sets brightness to 0");
}

fun lightning() {
    // TODO: buggy? might require rain or low brightness

    call_id(0x36);
}

fun rain() {
    call(ADDRESS.RAIN);
}
fun rain_dark() {
    rain();
    
    brightness(0xb5);
}

fun heal(character, animation) {
    if(animation == False) {
        if(character == CHARACTER.BOTH) {
            code(0x95, CHARACTER.BOY, 0x84, 0x03e7, "// (95) HEAL dog FOR 0x03e7 = 999");
            code(0x95, CHARACTER.DOG, 0x84, 0x03e7, "// (95) HEAL dog FOR 0x03e7 = 999");
        } else {
            code(0x95, character, 0x84, 0x03e7, "// (95) HEAL dog FOR 0x03e7 = 999");
        }
    } else {
        if(character == CHARACTER.BOY) {
            code(0x94, character, 0x08, 0x8d, 0x01, 0x29, 0x3f, 0x1a, 0xd5, "// (94) HEAL boy FOR *($23e5 + 15) WITH ANIMATION = health");
        } else if(character == CHARACTER.DOG) {
            code(0x94, character, 0x08, 0x8f, 0x01, 0x29, 0x3f, 0x1a, 0xd5, "// (94) HEAL dog FOR *($23e7 + 15) WITH ANIMATION = health");
        } else if(character == CHARACTER.BOTH) {
            code(0x94, CHARACTER.BOY, 0x08, 0x8d, 0x01, 0x29, 0x3f, 0x1a, 0xd5, "// (94) HEAL boy FOR *($23e5 + 15) WITH ANIMATION = health");
            code(0x94, CHARACTER.DOG, 0x08, 0x8f, 0x01, 0x29, 0x3f, 0x1a, 0xd5, "// (94) HEAL dog FOR *($23e7 + 15) WITH ANIMATION = health");
        }
    }
}

fun shaking(on) {
    if(on > 0x00) {
        code(0x8d, 0x01, "// (8d) 01 Start screen shaking");
        code(0x18, 0xb1, 0x01, 0xb1, "// (18) WRITE SCREEN SHAKING MAGNITUDE X ($2409) = 0x0001");
        code(0x18, 0xb3, 0x01, 0xb1, "// (18) WRITE SCREEN SHAKING MAGNITUDE Y ($240b) = 0x0001");
    } else {
        code(0x8d, 0x00, "// (8d) 01 Start screen shaking");
    }

}

fun fade_in() {
    eval("29 75 5e 00 // (29) CALL 0x92de75 Some cinematic script (used multiple times)");
}

fun object(index, value) {
    code(0x5c, 0xb0 + index, 0xb0 + value, "// (5c) SET OBJ 5 STATE = val:1 (load/unload)");
}

fun select_alchemy() {
    code(0x63, "// (63) SHOW ALCHEMY SELECTION SCREEN");
}
fun select_alchemy_with_preselection(alchemy_index) {
    code(0x18, 0xed, 0x01, 0xd0 + alchemy_index, "// (18) WRITE PRESELECT ALCHEMY ($2445) = Flash (0x1e)");
    select_alchemy();
}

fun cast(character, target, spell, level) {
    // spell = CAST

    if(character == CHARACTER.BOY) {
        if(target == CHARACTER.BOY) {
            code(0xac, 0xd0, 0x82, spell, 0x82, level, 0xd0, 0xb0, "// (ac) entity attached to script? CASTS SPELL 0x26 POWER 0xdc ON boy, dog if alive");
        } else if(target == CHARACTER.DOG) {
            code(0xac, 0xd0, 0x82, spell, 0x82, level, 0xd1, 0xb0, "// (ac) entity attached to script? CASTS SPELL 0x26 POWER 0xdc ON boy, dog if alive");
        } else if(target == CHARACTER.BOTH) {
            code(0xac, 0xd0, 0x82, spell, 0x82, level, 0xd0, 0xd1, 0xb0, "// (ac) entity attached to script? CASTS SPELL 0x26 POWER 0xdc ON boy, dog if alive");
        } else {
            code(0xac, 0xd0, 0x82, spell, 0x82, level, 0x8d, target - 0x2834, 0xb0, "// (ac) entity attached to script? CASTS SPELL 0x26 POWER 0xdc ON boy, dog if alive");
        }
    } else if(character == CHARACTER.LAST_ENTITY) {
        if(target == CHARACTER.BOY) {
            code(0xac, 0xad, 0x82, spell, 0x82, level, 0xd0, 0xb0, "// (ac) entity attached to script? CASTS SPELL 0x26 POWER 0xdc ON boy, dog if alive");
        } else if(target == CHARACTER.DOG) {
            code(0xac, 0xad, 0x82, spell, 0x82, level, 0xd1, 0xb0, "// (ac) entity attached to script? CASTS SPELL 0x26 POWER 0xdc ON boy, dog if alive");
        } else if(target == CHARACTER.BOTH) {
            code(0xac, 0xad, 0x82, spell, 0x82, level, 0xd0, 0xd1, 0xb0, "// (ac) entity attached to script? CASTS SPELL 0x26 POWER 0xdc ON boy, dog if alive");
        } else {
            code(0xac, 0xad, 0x82, spell, 0x82, level, 0x8d, target - 0x2834, 0xb0, "// (ac) entity attached to script? CASTS SPELL 0x26 POWER 0xdc ON boy, dog if alive");
        }
    } else {
        if(target == CHARACTER.BOY) {
            code(0xac, 0x8d,  character - 0x2834, 0x82, spell, 0x82, level, target, 0xb0, "// (ac) $283d CASTS SPELL 22 POWER 0x64 ON boy if alive");
        } else if(target == CHARACTER.DOG) {
            code(0xac, 0x8d, character - 0x2834, 0x82, spell, 0x82, level, target, 0xb0, "// (ac) $283d CASTS SPELL 22 POWER 0x64 ON boy if alive");
        } else {
            code(0xac, 0x8d, character - 0x2834, 0x82, spell, 0x82, level, 0x8d, target - 0x2834, 0xb0, "// (ac) $283d CASTS SPELL 22 POWER 0x64 ON boy if alive");
        }
    }
}

fun face(character, direction) {
    if(character == CHARACTER.BOY) {
        if(direction == DIRECTION.NORTH) {
            code(0x74, character, "// (74) MAKE boy FACE NORTH");
        } else if(direction == DIRECTION.EAST) {
            code(0x77, character, "// (77) MAKE boy FACE EAST");
        } else if(direction == DIRECTION.SOUTH) {
            code(0x75, character, "// (75) MAKE boy FACE SOUTH");
        } else if(direction == DIRECTION.WEST) {
            code(0x76, character, "// (76) MAKE boy FACE WEST");
        }
    } else if(character == CHARACTER.DOG) {
        if(direction == DIRECTION.NORTH) {
            code(0x74, character, "// (74) MAKE boy FACE NORTH");
        } else if(direction == DIRECTION.EAST) {
            code(0x77, character, "// (77) MAKE boy FACE EAST");
        } else if(direction == DIRECTION.SOUTH) {
            code(0x75, character, "// (75) MAKE boy FACE SOUTH");
        } else if(direction == DIRECTION.WEST) {
            code(0x76, character, "// (76) MAKE boy FACE WEST");
        }
    } else if(character == CHARACTER.LAST_ENTITY) {
        if(direction == DIRECTION.NORTH) {
            code(0x74, character, "// (74) MAKE boy FACE NORTH");
        } else if(direction == DIRECTION.EAST) {
            code(0x77, character, "// (77) MAKE boy FACE EAST");
        } else if(direction == DIRECTION.SOUTH) {
            code(0x75, character, "// (75) MAKE boy FACE SOUTH");
        } else if(direction == DIRECTION.WEST) {
            code(0x76, character, "// (76) MAKE boy FACE WEST");
        }
    } else if(character == CHARACTER.SCRIPT_OWNER) {
        if(direction == DIRECTION.NORTH) {
            code(0x74, character, "// (74) MAKE boy FACE NORTH");
        } else if(direction == DIRECTION.EAST) {
            code(0x77, character, "// (77) MAKE boy FACE EAST");
        } else if(direction == DIRECTION.SOUTH) {
            code(0x75, character, "// (75) MAKE boy FACE SOUTH");
        } else if(direction == DIRECTION.WEST) {
            code(0x76, character, "// (76) MAKE boy FACE WEST");
        }
    } else {
        if(direction == DIRECTION.NORTH) {
            code(0x74, 0x8d, character - 0x2834, "// (74) MAKE boy FACE NORTH");
        } else if(direction == DIRECTION.EAST) {
            code(0x77, 0x8d, character - 0x2834, "// (77) MAKE boy FACE EAST");
        } else if(direction == DIRECTION.SOUTH) {
            code(0x75, 0x8d, character - 0x2834, "// (75) MAKE boy FACE SOUTH");
        } else if(direction == DIRECTION.WEST) {
            code(0x76, 0x8d, character - 0x2834, "// (76) MAKE boy FACE WEST");
        }
    }
}

fun attach_to_script(character) {
    if(character == CHARACTER.BOY) {
        code(0x4e, character, "// (4e) ATTACH entity last entity ($0341) TO SCRIPT");
    } else if(character == CHARACTER.DOG) {
        code(0x4e, character, "// (4e) ATTACH entity last entity ($0341) TO SCRIPT");
    } else if(character == CHARACTER.LAST_ENTITY) {
        code(0x4e, character, "// (4e) ATTACH entity last entity ($0341) TO SCRIPT");
    } else {
        code(0x4e, 0x8d, character - 0x2834, "// (4e) ATTACH entity last entity ($0341) TO SCRIPT");
    }
}

fun attach_script(character, flag, id) {
    if(flag == SCRIPT_TRIGGER.TALK) {
        if(character == CHARACTER.BOY) {
            code(0x3d, character, id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        } else if(character == CHARACTER.DOG) {
            code(0x3d, character, id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        } else if(character == CHARACTER.BOTH) {
            code(0x3d, CHARACTER.BOY, id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
            code(0x3d, CHARACTER.DOG, id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        } else if(character == CHARACTER.LAST_ENTITY) {
            code(0x3d, CHARACTER.LAST_ENTITY, id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        } else {
            code(0x3d, character - 0x2834, id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        }
    } else {
        if(character == CHARACTER.BOY) {
            code(0x3f, character, 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        } else if(character == CHARACTER.DOG) {
            code(0x3f, character, 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        } else if(character == CHARACTER.BOTH) {
            code(0x3f, CHARACTER.BOY, 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
            code(0x3f, CHARACTER.DOG, 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        } else if(character == CHARACTER.LAST_ENTITY) {
            code(0x3f, CHARACTER.LAST_ENTITY, 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        } else if(character == CHARACTER.SCRIPT_OWNER) {
            code(0x3f, CHARACTER.SCRIPT_OWNER, 0x0000 + flag, 0x0000 + id, "// (3f) WRITE entity attached to script?+x68=0x40, entity attached to script?+x66=0x1b5a (set script): Boss rush loot script");
        } else {
            code(0x3f, character - 0x2834, 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        }
    }
}

fun destroy(enemy) {
    code(0x9b, 0x8d, enemy - 0x2834, "// (9b) DESTROY/DEALLOC ENTITY $283e");
}

fun damage(character, value) {
    if(character == CHARACTER.BOY) {
        code(0x93, character, 0x84, 0x0000 + value, "// (93) DAMAGE $2843 FOR 0x03e8");
    } else if(character == CHARACTER.DOG) {
        code(0x93, character, 0x84, 0x0000 + value, "// (93) DAMAGE $2843 FOR 0x03e8");
    }  else if(character == CHARACTER.SCRIPT_OWNER) {
        code(0x93, character, 0x84, 0x0000 + value, "// (93) DAMAGE $2843 FOR 0x03e8");
    } else {
        code(0x93, 0x8d, character - 0x2834, 0x84, 0x0000 + value, "// (93) DAMAGE $2843 FOR 0x03e8");
    }
}

fun store_last_entity(tmp) {
    code(0x19, tmp - 0x2834, 0xad, "// (19) WRITE $283b = last entity ($0341)");
}

fun animate(character, mode, id) {
    if(character == CHARACTER.BOY) {
        code(0x78, character, 0x0000 + id, mode, "// (78) UNTRACED INSTR for boy, 0x8008 0 changes sprite/animation/...?");
    } else if(character == CHARACTER.DOG) {
        code(0x78, character, 0x0000 + id, mode, "// (78) UNTRACED INSTR for boy, 0x8008 0 changes sprite/animation/...?");
    } else if(character == CHARACTER.LAST_ENTITY) {
        code(0x78, character, 0x0000 + id, mode, "// (78) UNTRACED INSTR for boy, 0x8008 0 changes sprite/animation/...?");
    } else if(character == CHARACTER.SCRIPT_OWNER) {
        code(0x78, character, 0x0000 + id, mode, "// (78) UNTRACED INSTR for boy, 0x8008 0 changes sprite/animation/...?");
    } else {
        code(0x78, 0x8d, character - 0x2834, 0x0000 + id, mode, "// (78) UNTRACED INSTR for $2846, 0x0010 2 changes sprite/animation/...?");
    }
}

fun attribute(character, attribute, value) {
    // value = 2 bytes

    // eval("7a (2d) 29 02 (2a) 9a 84 (01 00) // (7a) WRITE *(last entity ($0341) + 0x2a) = 0x03e8");
    // eval("7a (2d) 29 6e 9a 84 (80 0c) // (7a) WRITE *(last entity ($0341) + 30) = 0x0c80");

    // eval("7a (50) 29 6e 9a 84 (68 10) // (7a) WRITE *(boy + 30) = 0x1068");
    // eval("7a (50) 29 02 (20) 9a 81 (d8) // (7a) WRITE *(boy + 0x20) = 0xd8 signed");
    // eval("7a (50) 29 02 (20) 9a (bf) // (7a) WRITE *(boy + 0x20) = 15");

    // eval("7a (51) 29 6e 9a 84 (68 10) // (7a) WRITE *(dog + 30) = 0x1068");
    // eval("7a (51) 29 02 (20) 9a 81 (d8) // (7a) WRITE *(dog + 0x20) = 0xd8 signed");

    // eval("7a 08 (8d 01) 29 (3f) 9a 82 (70) // (7a) WRITE *($23e5 + 15) = 0x70");

    // eval("7a 50 29 02 2a 9a 84 01 00 // (7a) WRITE *(last entity ($0341) + 0x2a) = 0x03e8");

    if(character == CHARACTER.BOY) {
        code(0x7a, 0x50, 0x29, 0x02, attribute, 0x9a, 0x84, 0x0000 + value, "// (7a) WRITE *(boy + 0x20) = 15");
    } else if(character == CHARACTER.DOG) {
        code(0x7a, 0x51, 0x29, 0x02, attribute, 0x9a, 0x84, 0x0000 + value, "// (7a) WRITE *(dog + 30) = 0x1068");
    } else if(character == CHARACTER.LAST_ENTITY) {
        code(0x7a, 0x2d, 0x29, 0x02, attribute, 0x9a, 0x84, 0x0000 + value, "// (7a) WRITE *(last entity ($0341) + 0x2a) = 0x03e8");
    } else {
        code(0x7a, 0x0d, character - 0x2834, 0x29, 0x02, attribute, 0x9a, 0x84, 0x0000 + value, "// (7a) WRITE *($23e5 + 15) = 0x70");
    }
}

fun attribute_bit(character, attribute) {
    code(0xa9, character, 0x82, attribute, "// (a9) UNTRACED INSTR modifies entity dog bits 0x20");
}

fun special_script(script, id) {
    if(script == SPECIAL_SCRIPTS.LOOTING) {
        code(0x3f, 0xb1, 0x40, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+0=0x40, $0eac+0=0x172b (unknown): Unknown 0eac+0 (set in lots of places)?");
    } else if(script == SPECIAL_SCRIPTS.REVEALER) {
        code(0x3f, 0xb2, 0x01, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+2=0x01, $0eac+2=0x1959 (unknown): Unnamed Short script 0x1959?");
    } else if(script == SPECIAL_SCRIPTS.LEVITATE) {
        code(0x3f, 0xb3, 0x01, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+4=0x01, $0eac+4=0x17b5 (unknown): Unnamed Short script 0x17b5?");
    } else if(script == SPECIAL_SCRIPTS.SELECT_PRESSED) {
        code(0x3f, 0xb4, 0x01, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+6=0x01, $0eac+6=0x1878 (unknown): Unnamed Short script 0x1878?");
    } else if(script == SPECIAL_SCRIPTS.WINGS) {
        code(0x3f, 0xb5, 0x01, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+8=0x01, $0eac+8=0x178e (unknown): BBM Wings?");
    } else if(script == SPECIAL_SCRIPTS.UNKNOWN) {
        code(0x3f, 0xb6, 0x01, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+6=0x01, $0eac+6=0x1878 (unknown): Unnamed Short script 0x1878?");
    }
}

fun show_status_bar(show) {
    if(show == True) {
        call(ADDRESS.STATUS_BAR_SHOW);
    } else {
        call(ADDRESS.STATUS_BAR_HIDE);
    }
}

fun show_shop(ingredient_id) {
    // call_id(ADDRESS_ID.NPC_DIALOGUE_START);
    call_id(ADDRESS_ID.OPEN_TEXTBOX_DEFAULT);
    <0x2459> = ingredient_id;
    call_id(ADDRESS_ID.DIALOGUE_BUY_INGREDIENT);
    // call_id(ADDRESS_ID.NPC_DIALOGUE_STOP);
}

fun save(slot, location) { // buggy
    <0x2449> = slot; // ?
    code(0xa3, location, "// (a3) CALL 'Actual save dialog' (0x4e)");
}

// CINEMATICS

fun scene_raptors_death_escape() {
    control(CHARACTER.NONE);

    // boy collapses
    animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.SLEEP_UP);

    eval("18 1f 02 50 29 6a 1a d5 // (18) WRITE $2477 = *(boy + 26)");
    eval("18 21 02 50 29 6c 1a d5 // (18) WRITE $2479 = *(boy + 28)");

    eval("18 1f 02 08 1f 02 29 02 20 9a // (18) WRITE $2477 = $2477 + 0x20");

    eval("73 d1 88 1f 02 88 21 02 // (73) Make dog walk to $2477,$2479 directly");

    // dog walks to boy and looks west
    wait(CHARACTER.DOG);
    face(CHARACTER.DOG, DIRECTION.WEST);
    sleep(0x3c);

    // dog drags boy east
    animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.DRAGGED);
    animate(CHARACTER.DOG, ANIMATION_MODE.LOOP, ANIMATION_DOG.ACT1_DRAGGING);

    eval("43 d0 08 1f 02 29 02 20 9b 88 21 02 // (43) Teleport boy to x:$2477 - 0x20, y:$2479");
    eval("43 d1 88 1f 02 88 21 02 // (43) Teleport dog to x:$2477, y:$2479");
    sleep(0x0f);

    eval("18 1f 02 08 1f 02 29 32 9a // (18) WRITE $2477 = $2477 + 2");

    // repeat 19 times
    eval("1a 00 12 00 29 31 9a // (1a) WRITE SCRIPT arg0 = signed arg0 + 1");
    eval("09 12 00 29 62 9f 07 00 // (09) IF (signed arg0 > 18) == FALSE THEN SKIP 7 (to 0x939069)");

    // fade out
    call(0x93907e);
    eval("04 02 00 // (04) SKIP 2 (to 0x93906b)");
    eval("05 cb // (05) SKIP -53 (to 0x939034)");

    fade_out();
}

fun explode_boss(x, y, radius) {
    <0x23bb> = x;
    <0x23b9> = y;
    code(0xb4, 0x03, 0x88, 0x23bb - 0x2258, 0x88, 0x23b9 - 0x2258, 0xb0 + radius, 0x1c, 0x5f, 0x00, "// (b4) CALL Absolute (24bit) script 0x92df1c ('Unnamed ABS script 0x92df1c') WITH 3 ARGS $23b9, $23bb, 5");

    sleep(0xf0);
    call(ADDRESS.FADE_TO_WHITE);

    call(ADDRESS.EXPLODE_BOSS_STOP);
    call(0x92d752);
}
fun explode_last_entity(radius) {
    store_last_entity(0x2834);

    eval("18 45 02 0d 00 00 29 6a 1a d5 // (18) WRITE $249d = *($2834 + 26)");
    eval("18 47 02 0d 00 00 29 6c 1a d5 // (18) WRITE $249f = *($2834 + 28)");
    
    code(0xb4, 0x03, 0x88, 0x23bb - 0x2258, 0x88, 0x23b9 - 0x2258, 0xb0 + radius, 0x1c, 0x5f, 0x00, "// (b4) CALL Absolute (24bit) script 0x92df1c ('Unnamed ABS script 0x92df1c') WITH 3 ARGS $23b9, $23bb, 5");

    sleep(0xf0);
    call(ADDRESS.FADE_TO_WHITE);

    call(ADDRESS.EXPLODE_BOSS_STOP);
    call(0x92d752);
}

fun dog_fountain() {
    call(0x96d5d7);
}

// EXPERIMENTAL

fun attach_sterling_script_to_last_entity() {
    store_last_entity(0x283d);
    
    eval("07 a7 97 03 // (07) CALL 0x9997a7 Sterling battle over, Gomi introduction");
}

fun boy_falling() {
    eval("7a 50 29 6e 9a 84 68 10 // (7a) WRITE *(boy + 30) = 0x1068");
}

fun sand_tunnel() {
    // TODO: extract script, add parameters
    call(0x939fd2);
}

fun bonfire() {
    add_enemy(ENEMY.STONE_ROUND, 0x1e, 0x21);
    attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, 0x181e);
}

fun bonfire_dialog() {
    control(CHARACTER.NONE);
    color_filter(0x84, 0x90);
    sleep(0x10);
    animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.SLEEP_DOWN);
    color_filter(0x84, 0x66);
    sleep(0x10);
    color_filter(0x55, 0x55);
    animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.SLEEP_UP);
    yield();

    // question(string("[0x96][0x8b]test[LF][0x8b]test[LF][0x8b]test[END]"));

    color_filter(0x84, 0x90);
    sleep(0x10);
    color_filter(0x84, 0x66);
    sleep(0x10);
    color_filter(0x00, 0x00);
}

fun cannonball() {
    add_enemy_with_flags(0x6a, 0x1e, 0x21, 0x0000); // ENEMY.MAGMAR
    store_last_entity(0x2846);
    animate(0x2846, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.MAGMAR_ROLL);
    
    while(0x01) {
        sleep(0x70);

        teleport(0x2846, 0x1e, 0x21);
    }
}

fun homing_cannonball() {
    add_enemy_with_flags(0x6a, 0x1e, 0x21, 0x0000); // ENEMY.MAGMAR
    store_last_entity(0x2846);
    animate(0x2846, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.MAGMAR_ROLL);
    
    while(0x01) {
        eval("18 21 02 50 29 6c 1a d5 // (18) WRITE $2479 = *(boy + 28)");
        eval("18 21 02 08 21 02 29 3f 9b // (18) WRITE $2477 = $2477 + 2");

        eval("18 1f 02 08 1f 02 29 32 9a // (18) WRITE $2477 = $2477 + 2");

        // teleport(0x2846, 0x1e, 0x21);
        code(0x43, 0x8d, 0x2846 - 0x2834, 0x88, 0x021f, 0x88, 0x0221, "// (42) Teleport $2835 to a7, b9");

        sleep(0x02);
    }
}

fun drag(enemy, x, y) {
    <0x23b9> = x;
    <0x23bb> = y;

    // eval("af 04 8d 02 00 88 61 01 88 63 01 e0 1e cc 03 // (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");

    code(0xaf, 0x04, 0x8d, enemy - 0x2834, 0x88, 0x23b9 - 0x2258, 0x88, 0x23bb - 0x2258, 0xd0 + 0x14, 0x03cc1e, "// (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");
}

fun heel(enemy) {
    eval("18 61 01 50 29 6a 1a d5 // (18) WRITE $23b9 = boy.x");
    eval("18 63 01 50 29 6c 1a d5 // $23bb = boy.y");

    code(0xaf, 0x04, 0x8d, enemy - 0x2834, 0x88, 0x23b9 - 0x2258, 0x88, 0x23bb - 0x2258, 0xd0 + 0x14, 0x03cc1e, "// (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");
}

fun test_stuff() {
    unlock(ITEM.INGREDIENTS);

    unlock(ITEM.REVEALER);
    unlock(ITEM.LEVITATE);

    select_alchemy();
}