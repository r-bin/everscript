enum SYSTEM {
    HP_MAX = 0x7fff,
    ITEM_MAX = 0x63,
}

enum ADDRESS {
    // intro

    INTRO_FIRST_CODE_EXECUTED = 0x92e0ca,

    // act 0

    INTRO_START_PRESSED = 0x92e44e,

    // act 1

    SOUTH_JUNGLE_ENTER = 0x9384d9,
    SOUTH_JUNGLE_ENTER_GOURD_1 = 0x93802b,

    STRONG_HEART_EXTERIOR_ENTER = 0x94e5fb,

    FE_EXIT_NORTH = 0x94bead,
    FE_EXIT_NORTH_GATED = 0x94bedc,
    FE_EXIT_EAST = 0x94be9f,
    FE_EXIT_SOUTH = 0x94be91,
    FE_EXIT_WEST = 0x94bee2,

    RAPTORS_EXIT_ENTER = 0x93912c,
    RAPTORS_EXIT_NORTH = 0x93873f,
    RAPTORS_EXIT_SOUTH = 0x93874d,
    RAPTORS_STEP_ON_FIGHT = 0x93875f,
    RAPTORS_BUSH_WIGGLE = 0x938da0,

    THRAXX_EXIT_NORTH = 0x93c6d8,
    THRAXX_EXIT_SOUTH = 0x93c6ae,

    SALABOG_EXIT_SOUTH = 0x9786e4,
    SALABOG_EXIT_NORTH = 0x9786ec,

    // misc. maps

    BRIAN_MAP_POINTER = 0x928084, // inavalid memory
    BRIAN_ENTER = 0x928000,

    // scripts

    FADE_IN = 0x92de75,

    RAISE_CURRENT_WEAPON = 0x92bf33,

    STATUS_BAR_SHOW = 0x92a3ed,
    STATUS_BAR_HIDE = 0x92a3e7,

    FADE_TO_WHITE = 0x92d723,
    FADE_FROM_WHITE = 0x92d752,

    FADE_TO_NIGHT = 0x92d89b,
    FADE_FROM_NIGHT = 0x92d8c2,

    FLASH_WHITE = 0x92d7b1,
    FLASH_WHITE_SLOWER = 0x92d752,

    EXPLODE_BOSS_STOP = 0x92df70,

    RAIN = 0x92d92a,

    MODE7_SPACESHIP = 0x92dc1b,
    MODE7_SPACESHIP_ACT4 = 0x92dc51,

    STERLING_ROAR = 0x99988a,
    METAL_MAGMAR_HEAL = 0x9ba56b,

    // script (weird)

    RNG2849 = 0x99e8a2, // sets $2949 to #12,#14,#16 or #18 at random, to decide what the vigor mob throws

    // asm

    DEBUG_MENU_BUTTON_1 = 0xfd8000, // button 1, "Debug: Create a monster"/"Debug: Full equipment", 40 bytes
    DEBUG_MENU_BUTTON_2 = 0xfd8040, // button 2, "Debug: Heel", 40 bytes
    DEBUG_MENU_BUTTON_3 = 0xfd8080, // button 3, "Debug: Show thud balls on path"/"Debug: Walk through walls", 40 bytes
    DEBUG_MENU_BUTTON_4 = 0xfd80c0, // button 4, "Debug: Turn off both backgrounds", 40 bytes
    DEBUG_MENU_BUTTON_5 = 0xfd8100, // button 5, "Debug: Show background 1 only", 40 bytes
    DEBUG_MENU_BUTTON_6 = 0xfd8140, // button 6, "Debug: Show background 2 only", 40 bytes
    DEBUG_MENU_BUTTON_7 = 0xfd8180, // button 7, "Debug: Show both backgrounds", 40 bytes
    DEBUG_MENU_BUTTON_8 = 0xfd81c0, // button 8, "Debug: Select map", 40 bytes
    DEBUG_MENU_BUTTON_9 = 0xfd8200, // button 9, "Debug: Mode 7 Flight", 40 bytes
    DEBUG_MENU_BUTTON_10 = 0xfd8240, // button 10, "Alchemist", 40 bytes
    DEBUG_MENU_BUTTON_11 = 0xfd8280, // button 11, "ROM Creation Date", 40 bytes

    HOTKEY_START = 0xfd82c0, // hotkey start, 40 bytes
    HOTKEY_START_L = 0xfd8300, // hotkey start+L, 40 bytes
    HOTKEY_START_R = 0xfd8340 // hotkey start+R, 40 bytes
}

enum ATTACK_PROC {
    NORMAL = 0x00,
    
    VORE = 0x0c, // flowers
    NO_KNOCKBACK = 0x0e, // mosquito
    
    POISON = 0x12, // pyramid guard
    POISON = 0x14, // spiders
    PLAGUE = 0x16, // rat
    POISON = 0x18, // snake statue
    PLAGUE_CONFOUND = 0x1c, // monk

    BOY = 0x08, // unknown
    DOG = 0x0a, // unknown

    // weird
    ONLY_1 = 0x02,
    ONLY_1 = 0x04,
    ONLY_1 = 0x06,
    NO_KNOCKBACK = 0x10,
    ONLY_1 = 0x1a,

    // crash: 1e, 20, â€¦
}

enum ADDRESS_ID {
    // talk scripts

    TALK_STRONGHEART = 0x1863,

    // death scripts

    DEATH_GRAVEYARD_LIZARD_2 = 0x17d6,
    DEATH_GRAVEYARD_LIZARD_3 = 0x17d9,
    DEATH_GRAVEYARD_LIZARD_4 = 0x17dc,

    // dialogue helper

    NPC_DIALOGUE_START = 0x32,
    NPC_DIALOGUE_STOP = 0x33,

    OPEN_TEXTBOX_DEFAULT = 0x02, // x=0x0a y=0x02 w=0x14 h=0x07
    OPEN_TEXTBOX_1 = 0x04, // x=0x0a y=0x02 w=0x14 h=0x06
    OPEN_TEXTBOX_2 = 0x05, // x=0x0a y=0x02 w=0x14 h=0x04
    OPEN_TEXTBOX_3 = 0x06, // x=0x0a y=0x02 w=0x14 h=0x03
    OPEN_TEXTBOX_4 = 0x07, // x=0x02 y=0x02 w=0x14 h=0x07
    OPEN_TEXTBOX_5 = 0x09, // x=0x02 y=0x02 w=0x14 h=0x06
    OPEN_TEXTBOX_6 = 0x0a, // x=0x02 y=0x02 w=0x14 h=0x04
    OPEN_TEXTBOX_7 = 0x0b, // x=0x02 y=0x02 w=0x14 h=0x03
    OPEN_TEXTBOX_8 = 0x0d, // x=0x03 y=0x14 w=0x1a h=0x02 (unbordered?)
    OPEN_TEXTBOX_9 = 0x0e, // x=0x0a y=0x02 w=0x14 h=0x08
    OPEN_TEXTBOX_10 = 0x13, // x=0x02 y=0x02 w=0x14 h=0x08
    OPEN_TEXTBOX_11 = 0x18, // x=0x0c y=0x13 w=0x12 h=0x05

    DIALOGUE_BUY_INGREDIENT = 0x54,
    DIALOGUE_SAVE = 0x4d,

    // music

    MUSIC_FADE_IN = 0x01,
    MUSIC_FADE_OUT = 0x00,

    // scripts

    LOOT = 0x3a,

    LIGHTNING = 0x36,

    BOMB_EXPLOSION = 0x1b66,

    OUTRO = 0x59 // starts in nobilia, but the boy
}

enum MEMORY {
    TALONS = <0x0ac6>,
    JEWELS = <0x0ac9>,
    GOLD = <0x0acc>,
    CREDITS = <0x0acf>,

    MAP = <0xadb>,
    PACIFIED = <0x23bf>,
    FAKE_HOUSE_ID = <0x234b>,

    DOG = <0x2443>,
    GAIN_WEAPON = <0x2441>,
    QUESTION_ANSWER = <0x289d>,
    STRING_PARAMETER_1 = <0x2537>,
    STRING_PARAMETER_2 = <0x2539>,
    STRING_PARAMETER_3 = <0x253b>,
    
    ENTITY_1 = <0x2835>,
    ENTITY_2 = <0x2837>,
    ENTITY_3 = <0x2839>,
    ENTITY_4 = <0x283b>,
    ENTITY_5 = <0x283d>,
    LAST_ENTITY = <0x0341>,

    BOY_LEVEL = <0x0A50>,
    BOY_CURRENT_HP = <0x4EB3>,
    BOY_XP_REQUIRED = <0x4F1D>,

    DOG_LEVEL = <0x0A9A>,
    DOG_XP_REQUIRED = <0x4FCB>,

    ENEMY_SPAWNER_QUANTITY = <0x2433>,

    WINDWALKER_TYPE = <0x2355>,

    // map

    CHANGE_MUSIC = <0x238d>,

    MAP_PALETTE = <0x2437>,

    // NPCs

    SHOP_RING_MENU_AND_POSITION_ID = <0x2459>,

    // ingredients

    WAX = <0x22ff>,
    WATER = <0x2300>,
    VINEGAR = <0x2301>,
    ROOT = <0x2302>,
    OIL = <0x2303>,
    MUSHROOM = <0x2304>,
    MUD_PEPPER = <0x2305>,
    METEORITE = <0x2306>,
    LIMESTONE = <0x2307>,
    IRON = <0x2308>,
    GUNPOWDER = <0x2309>,
    GREASE = <0x230a>,
    FEATHER = <0x230b>,
    ETHANOL = <0x230c>,
    DRY_ICE = <0x230d>,
    CRYSTAL = <0x230e>,
    CLAY = <0x230f>,
    BRIMSONE = <0x2310>,
    BONE = <0x2311>,
    ATLAS_AMULET = <0x2312>,
    ASH = <0x2313>,
    ACORN = <0x2314>,

    // consumables
    PETAL = <0x2315>,
    NECTAR = <0x2316>,
    HONEY = <0x2317>,
    DOG_BISCUIT = <0x2318>,
    WINGS = <0x2319>,
    ESSENCE = <0x231a>,
    PIXIE_DUST = <0x231b>,
    CALL_BEADS = <0x231c>,

    // armor
    ARMOR_1_1 = <0x231d>,
    ARMOR_1_2 = <0x231e>,
    ARMOR_1_3 = <0x231f>,
    ARMOR_2_1 = <0x2320>,
    ARMOR_2_2 = <0x2321>,
    ARMOR_2_3 = <0x2322>,
    ARMOR_3_1 = <0x2323>,
    ARMOR_3_2 = <0x2324>,
    ARMOR_3_3 = <0x2325>,
    ARMOR_4_1 = <0x2326>,
    ARMOR_4_2 = <0x2327>,
    ARMOR_4_3 = <0x2328>,
    HELM_1_1 = <0x2329>,
    HELM_1_2 = <0x232a>,
    HELM_1_3 = <0x232b>,
    HELM_2_1 = <0x232c>,
    HELM_2_2 = <0x232d>,
    HELM_2_3 = <0x232e>,
    HELM_3_1 = <0x232f>,
    HELM_3_2 = <0x2330>,
    HELM_3_3 = <0x2331>,
    HELM_4_1 = <0x2332>,
    HELM_4_2 = <0x2333>,
    HELM_4_3 = <0x2334>,
    ARMBAND_1_1 = <0x2335>,
    ARMBAND_1_2 = <0x2336>,
    ARMBAND_1_3 = <0x2337>,
    ARMBAND_2_1 = <0x2338>,
    ARMBAND_2_2 = <0x2339>,
    ARMBAND_2_3 = <0x233a>,
    ARMBAND_3_1 = <0x233b>,
    ARMBAND_3_2 = <0x233c>,
    ARMBAND_3_3 = <0x233d>,
    ARMBAND_4_1 = <0x233e>,
    ARMBAND_4_2 = <0x233f>,
    ARMBAND_4_3 = <0x2340>,
    COLLAR_1 = <0x2341>,
    COLLAR_2 = <0x2342>,
    COLLAR_3 = <0x2343>,
    COLLAR_4 = <0x2344>,

    // ammo
    AMMO_1 = <0x2345>,
    AMMO_2 = <0x2346>,
    AMMO_3 = <0x2347>,

    ANNIHILATION_AMULET = <0x2517>,
    BEAD = <0x2519>,
    CERAMIC_POT = <0x251b>,
    CHICKEN = <0x251d>,
    GOLDEN_JACKAL = <0x251f>,
    JEWELED_SCARAB = <0x2521>,
    LIMESTONE_TABLET = <0x2523>,
    PERFUME = <0x2525>,
    RICE = <0x2527>,
    SPICE = <0x2529>,
    SPOON = <0x252b>,
    TAPESTRY = <0x252d>,
    TICKET_FOR_EXHIBITION = <0x252f>,

    // weapon level
    LEVEL_FIST = <0x0ADD>, // unused
    LEVEL_BAZOOKA = <0x0AF7>,
    LEVEL_DOG = <0x0B07>,
    LEVEL_1_SWORD = <0x0ADF>, // bone crusher
    LEVEL_1_AXE = <0x0AE7>,
    LEVEL_1_SPEAR = <0x0AEF>,
    LEVEL_2_SWORD = <0x0AE1>,
    LEVEL_2_AXE = <0x0AE9>,
    LEVEL_2_SPEAR = <0x0AF1>,
    LEVEL_3_SWORD = <0x0AE3>,
    LEVEL_3_AXE = <0x0AEB>,
    LEVEL_3_SPEAR = <0x0AF3>,
    LEVEL_4_SWORD = <0x0AE5>,
    LEVEL_4_AXE = <0x0AED>,
    LEVEL_4_SPEAR = <0x0AF5>,

    // rooms
    DARK_FOREST_XY = <0x2835>,
    DARK_FOREST_LAYOUT = <0x2839>,

    // unknown
    // ??? = <0x23d9>, // used for eternal dust drops
}

enum MAP {
    FLOWERS = 0x38,
    STRONGHEART = 0x34,
    RAPTORS = 0x5c,
    FE_VILLAGE = 0x25,

    START = 0x00,
    THRAXX = 0x18,
    MAGMAR = 0x3f,
    SALABOG = 0x01,
    
    BRIAN = 0x15,
}

enum DOG {
    WOLF = 0x2,
    WOLF2 = 0x4,
    GREYHOUND = 0x6,
    POODLE = 0x8,
    PUPPER = 0xa,
    TOASTER = 0xc
}

enum CHARACTER {
    BOY = 0x50,
    DOG = 0x51,
    ACTIVE = 0x52,
    INACTIVE = 0x53,

    BOTH = 0x00,
    NONE = 0x01,

    LAST_ENTITY = 0x2d,
    SCRIPT_OWNER = 0x2e,

    RANDOM = 0x2a
}
enum MUSIC {
    // ambient
    JUNGLE_AMBIENT_BIRDS = 0x7a,
    BUGMUCK_AMBIENT_MELODY = 0x14,

    // theme

    // effect
    FANFARE = 0x36,
}
enum SOUND {
    MENU_WHEEL_TURN_1 = 0x00,
    MENU_WHEEL_TURN_2 = 0x02,
    MENU_WHEEL_OPEN = 0x04,
    MENU_WHEEL_CLOSE = 0x06,

    GORE_FLOWER = 0x08,
    HEAVY_IMPACT = 0x0a,

    SWORD_ATTACK = 0x10,
    SPIDER_ATTACK = 0x1a,

    SPEAR_ATTACK = 0x20,
    DOG_ATTACK = 0x22,

    AXE_ATTACK = 0x20, // ?
    MECHANICAL_MOVEMENT = 0x2c,
    HEAL_START = 0x2e,

    HEAL_END = 0x30,
    GORE_EXPLOSION = 0x32,
    TESLA = 0x34,
    TELEPORTER = 0x36,
    CLICK_1 = 0x38,
    CLICK_2 = 0x3a,

    IMPACT = 0x3c,
    GORE_MOSQUITO = 0x3e,

    PURCHASE = 0x40,
    UNKNOWN_ALCHEMY = 0x4c,
    UNKNOWN_ALCHEMY = 0x4e,

    BRIDGE_COLLAPSING = 0x58,
    SWITCH_TRIGGERD = 0x5c, // also rock bridge
    SANDPIT_SWALLOW = 0x5e,
}

enum DIRECTION {
    NORTH = 0x26,
    EAST = 0x1d,
    SOUTH = 0x21,
    WEST = 0x19,
    
    NONE = 0x00,
    UNKNOWN = 0x01
}

enum FACE_DIRECTION {
    NORTH = 0x00,
    NORTH_EAST = 0x02,
    EAST = 0x04,
    SOUTH_EAST = 0x06,
    SOUTH = 0x08,
    SOUTH_WEST = 0x0a,
    WEST = 0x0c,
    NORTH_WEST = 0x0e,
}

enum FLAG {
    DEBUG = <0x22eb, 0x08>,

    START_PRESSED = <0x22eb, 0x02>,
    FLOWERS_CUTSCENE_WATCHED = <0x22ab, 0x40>,

    IN_ANIMATION = <0x22eb, 0x20>,

    DOG_UNAVAILABLE = <0x2261, 0x01>,
    BOY_UNAVAILABLE = <0x2261, 0x02>,

    WINDWALKER_UNLOCKED = <0x22dc, 0x08>,

    // items

    JAGUAR_RING = <0x2262, 0x02>,

    ENERGY_CORE = <0x2264, 0x20>,

    // progress

    BLIMP_BRIDGE = <0x225f, 0x01>,

    // bosses

    RAPTORS = <0x225f, 0x40>,
    THRAXX = <0x2260, 0x10>,
    MAGMAR = <0x2260, 0x40>,
    SALABOG = <0x22f3, 0x20>,

    // loot

    GOURD_1 = <0x2268, 0x40>
}


enum ATTRIBUTE {
    // See data crystals: 7E3DE5 to 7E4E88 = Monster/NPC data for the current room. Each Monster/NPC gets x8E bytes of data.

    // used in the scripts
    MAX_HP = 0x0f, // <0x23e5>[0x0f] = boy max hp, <0x23e7>[0x0f] = dog max hp
    Z = 0x18,
    X = 0x1a,
    Y = 0x1c,
    FALLING_HEIGHT = 0x1e, // used for boss rush intro
    JUMP_HEIGHT = 0x20, // used for wings (0xe0 signed), magmar, megataur, act2 intro, puppets, sterling flight
    FACE_DIRECTION = 0x22, // enum FACE_DIRECTION
    X_TILE = 0x26,
    Y_TILE = 0x28,
    HP = 0x2a,
    UNKNOWN = 0x30, // TODO: used for secret boss bombs (set to 0 for exploded bombs) and speakers (indexed from 2^0 to 2^8)
    UNKNOWN = 0x32, // TODO: used for secret boss and boss rush fans
    WEAPON_HIT = 0x36, // used for vigor (on weapon damage 0x4e89, on magic damage and default 0x0000)
    UNKNOWN = 0x3c, // TODO: used in ebon keep sewers (seems to be based on the tile the character stands on)

    // weird
    PALETTE_BLACK_GREEN = 0x00,
    INVISIBLE = 0x05,
    TILE_GLITCH_1 = 0x06,
    INVISIBLE_OR_TILE_GLITCH = 0x07,
    TILE_GLITCH_3 = 0x0a,
    PALETTE = 0x0b,
    PALETTE_BLACK_OR_TILE_GLITCH = 0x0c,
    TILE_GLITCH_4 = 0x0d,
    BEHAVIOUR = 0x10,
    WEIRD_KNOCKBACK = 0x12,
    TURN_NORTH = 0x22
}

enum ATTRIBUTE_BITS {
    // used by the game

    VINCIBLE = 0x10,
    INVINCIBLE = 0x12, // used for: outro, boss kills (doubles, drake, verminator)

    INVINCIBLE_2 = 0x14,
    VINCIBLE_2 = 0x16,

    UNLOCK = 0x18,
    LOCK_IN_PLACE = 0x1a,

    UNKNOWN_1_1 = 0x1c,
    UNKNOWN_1_2 = 0x1e, // used for: dog enter/exit the upper level of act4

    NO_CLIP = 0x20,
    CLIP = 0x22,

    UNKNOWN_2_1 = 0x024, // used for: thraxx knockback
    UNKNOWN_2_2 = 0x026,

    INVISIBLE = 0x28,
    VISIBLE = 0x2a,

    UNMUTE = 0x2c,
    MUTE = 0x2e, // used for: boy during bazooka cutscene
    
    AI_RUN = 0x34,
    AI_WALK = 0x36,

    // unknown/weird

    TURN_NORTH = 0x00,
    TURN_EAST_1 = 0x02,
    TURN_EAST_2 = 0x04,
    TURN_EAST_3 = 0x06,
    TURN_SOUTH = 0x08,
    TURN_WEST_1 = 0x0a,
    TURN_WEST_2 = 0x0c,
    TURN_WEST_3 = 0x0e

    // CRASH: 38, 3a, â€¦
}

enum ENEMY {
    // npc - act 1
    FIRE_EYES = 0x15, // "Fire Eyes"
    EVIL_FIRE_EYES = 0x16, // "Evil Fire Eyes"
    BLIMP = 0x17,
    HARRY = 0x34, // "Harry"
    
    VILLAGER_1_1 = 0x04,
    VILLAGER_1_2 = 0x05,
    VILLAGER_1_3 = 0x06,
    VILLAGER_1_4 = 0x07,
    VILLAGER_1_5 = 0x08,
    VILLAGER_1_6 = 0x09,
    VILLAGER_1_7 = 0x12,
    VILLAGER_1_8 = 0x7e,

    BEE = 0x02, // "Child's Pet"
    CHAMELEON = 0x03, // "Child's Pet"

    // npc - act 2
    HORACE = 0x45, // "Horace"
    HORACE_EVIL = 0x62, // "Horace's Twin"
    TINY = 0x46, // "Tiny"

    VILLAGER_2_1 = 0x18, // boy, dark hair
    VILLAGER_2_2 = 0x19, // girl, red hair
    VILLAGER_2_3 = 0x1a, // man, dark hair, beard
    VILLAGER_2_4 = 0x1b,
    VILLAGER_2_5 = 0x1c,
    VILLAGER_2_6 = 0x1d,
    VILLAGER_2_7 = 0x31,
    VILLAGER_2_8 = 0x32,
    VILLAGER_2_9 = 0x33,

    BOXER_1 = 0x2d, // "Mad Monk"
    BOXER_2 = 0x2e, // "Mad Monk"
    DRUNK_1 = 0x2f,
    DRUNK_2 = 0x30,

    // npc - act 3
    QUEEN = 0x4c,
    QUEEN_JUMP = 0x4b,
    KING = 0x54, // "Legendary King"
    TINKER = 0x58, // "Tinker Tinderbox"
    TINKER_TWIN = 0x81, // "Gomi"
    NARIS_YOUNG = 0x51, // "Legendary boy"

    VILLAGER_3_1 = 0x48,
    VILLAGER_3_2 = 0x52,
    VILLAGER_3_3 = 0x53,
    VILLAGER_3_4 = 0x55, // naris old
    VILLAGER_3_5 = 0x56,

    // npc - act 4
    PROFESSOR = 0x57, // "Professor Ruffleberg"
    CARLTRON = 0x5f, // "Carltron"

    // enemy - act 1
    MOSQUITO = 0x0f, // "Mosquito"
    FLOWER_PURPLE = 0x0b, // "Wimpy Flower"

    SKELESNAIL = 0x26, // "Skelesnail"

    MAGGOT = 0x0e, // "Maggot"
    BONE_SNAKE = 0x0a, // "Tar Skull"

    FLOWER_ORANGE = 0x0c, // "Carniflower"

    SPIDER = 0x22, // "Widowmaker"
    LIZARD = 0x29, // "Viper"

    RAPTOR_GREEN = 0x2b, // "Raptor"
    
    FRIPPO = 0x21, // "Frippo"

    LANTERN_LIGHT = 0x37, // "Will o' the Wisp"

    // enemy - act 2
    MONK = 0x28, // "Mad Monk"
    PIRATE_ANCHOR = 0x27, // "Rogue"

    SPIDER_YELLOW = 0x23, // "Sand Spider"
    TUMBLING_WEED = 0x73, // "Tumble Weed"
    BUZZARD_1 = 0x74, // "Bone Buzzard"

    DANCING_DEVIL_1 = 0x76, // "Dancin' Fool"
    SLIME_GREEN = 0x70, // "Lime Slime"
    RAT_RED = 0x7c, // "Rat"

    PYRAMID_GUARDIAN_1 = 0x39, // "Son of Anhur"
    MUMMY = 0x72, // "Mummy Cat"
    SNAKE_STATUE_1 = 0x59, // "Stone Cobra"
    SNAKE_STATUE_2 = 0x5a, // "Stone Cobra"

    BUZZARD_BLACK = 0x63, // "Skullclaw"
    DOG_1_BLACK = 0x61, // "Bad Dawg"
    LANTERN_LIGHT_RED = 0x64, // "Will o' the Wisp"

    OGLIN = 0x6e, // "Oglin"

    TENTACLE_WHIP = 0x3f, // "Tentacle"
    TENTACLE_SPIKE = 0x4a,
    SPARK = 0x40,

    // enemy - act 3
    HEDGEHOG = 0x50, // "Hedgadillo"

    RAT = 0x42, // "Rat", storage room
    
    RAPTOR_BLACK = 0x6b, // "Raptor"
    SPIDER_GREEN = 0x24, // "Wood Mite"
    GUARD_BOT = 0x4e, // "Guardbot"

    BUZZARD_2 = 0x82, // "Skullclaw"

    DRAKE = 0x6d, // "Gargon"

    DRAKE_GREEN = 0x89, // "Dragoil"
    SLIME = 0x71, // "Blue Goo"
    MAGGOT_RED = 0x77, // "Gore Grub"
    
    DANCING_DEVIL_2 = 0x75, // hall fight

    // enemy - act 4
    TENTACLE_WHIP_2 = 0x8c, // "Tentacle"
    TENTACLE_SPIKE_2 = 0x8d, // "Tiny Tentacle"

    OWL_GREEN = 0x78, // "Neo Greeble"
    SLIME_PINK = 0x6f, // "Red Jelly Ball"
    
    RIMSALA = 0x7b, // "Rimsala"
    GATE_BOT = 0x66, // "Sphere Bot"

    FLOWER_BLACK = 0x6a, // "Flowering Death"
    MOSQUITO_BLACK = 0x7a, // "Mosquito"
    FAN_BOT = 0x69, // "Floating Fan"

    RAPTOR_TEAL = 0x79, // "Raptor"
    RIMSALA_2 = 0x83, // "Eye of Rimsala"
    DUSTER_BOT = 0x4d, // "Mechaduster
    DUSTER_BOT_2 = 0x8b,
    SPIDER_BLACK = 0x25, // "Death Spider"

    // boss - act 0
    GUARD_BOT_INTRO = 0x80, // "Guardbot"

    // boss - act 1
    RAPTOR_PURPLE = 0x0d, // "Raptor"

    THRAXX_HEART = 0x14, // "Thraxx's heart"
    THRAXX_LEFT_ARM = 0x10, // "Left Claw"
    THRAXX_RIGHT_ARM = 0x11, // "Right Claw"

    LIZARD_BLACK = 0x2a, // "Viper Commander"

    SALABOG = 0x2c, // "Salabog"

    MAGMAR = 0x35, // "Magmar"

    // boss - act 2
    VIGOR = 0x3d, // "Vigor"

    MINITAUR = 0x38, // "Mini-Taur"

    MEGATAUR = 0x36, // "Megataur"

    PYRAMID_GUARDIAN_2 = 0x3a, // "Son of Set"

    RIMSALA_STATUTE_ENTITY = 0x5b, // "Statue"
    RIMSALA_BOSS_1 = 0x3b,
    RIMSALA_BOSS_2 = 0x3c,

    AEGIS_ENTITY = 0x47, // "Aegis"

    AQUAGOTH_ENTITY = 0x3e, // "Aquagoth"

    // boss - act 3
    FOOTKNIGHT = 0x49, // "FootKnight"

    // BOY_BLACK
    OWL_BLACK = 0x4f, // "Greeble"

    FORESTDRAKE = 0x43, // "Timberdrake"

    VERMINATOR = 0x41, // "Verminator"

    STERLING = 0x44, // "Sterling"

    MUNGOLA_ENTITY = 0x6c, // "Mungola"
    PUPPET_1 = 0x67, // "Old Nick"
    PUPPET_2 = 0x68, // "Mephista"

    THRAXX2_HEART = 0x84, // "Coleoptera's heart"
    THRAXX2_LEFT_ARM = 0x85, // "Left Claw"
    THRAXX2_RIGHT_ARM = 0x86, // "Right Claw"

    // boss - act 4
    FACE_ENTITY = 0x7d, // "Face"

    FAN_ENTITY = 0x5c, // "Fan"
    SPEAKER_ENTITY = 0x5d, // "Speaker"
    BOY_BLACK = 0x60, // "Bad Boy"
    DOG_4_BLACK = 0x8e, // "Dark Toaster"
    MAGMAR_METAL = 0x7f, // "Magmar"
    CARLTRON_ROBOT = 0x87, // "Carltron's Robot"

    // special
    PLACEHOLDER = 0x20, // used for explosions, windwalker, etc.

    REVEALER_TARGET_ENTITY = 0x5e, // "Bridge"
    STONE = 0x1e, // "Rock"
    STONE_ROUND = 0x1f, // "Rock"

    BOMB = 0x65, // "Bomb"

    // misc
    BOY_DERPY = 0x00, // "<Boy Name>"
    DOG_DERPY = 0x01, // "<Dog Name>"

    UNKNOWN_1 = 0x13, // unused?
    UNKNOWN_2 = 0x88, // used for: palace grounds 3x, related to the dog fountain cutscene
    UNKNOWN_3 = 0x8f, // unused?

    RAT_RED_2 = 0x8a, // "Rat"
}

enum FLAG_ENEMY {
    NORMAL = 0x0000,
    INACTIVE_INVISIBLE = 0x0001,
    INVINCIBLE = 0x0002,
    INACTIVE = 0x0020,
    MOSQUITO = 0x0040,
    PHASING = 0x0400,
    INVISBLE_INVINCIBLE_INACTIVE = 0x1000,

    INACTIVE_IMORTAL = 0x0022,

    STONE_LEVITATE = 0x0002,
    STONE_LEVITATE_INVISIBLE = 0x0005
}

enum LOOT_REWARD {
    // currency
    MONEY = 0x0001,

    // ingredients
    WAX = 0x0200,
    WATER = 0x0201,
    VINEGAR = 0x0202,
    ROOTS = 0x0203,
    OIL = 0x0204,
    MUD_PEPPER = 0x0205,
    MUSHROOM = 0x0206,
    METEORITE = 0x0207,
    LIMESTONE = 0x0208,
    IRON = 0x0209,
    GUNPOWDER = 0x020A,
    GREASE = 0x020B,
    FEATHER = 0x020C,
    ETHANOL = 0x020D,
    DRY_ICE = 0x020E,
    CRYSTAL = 0x020F,
    CLAY = 0x0210,
    BRIMSTONE = 0x0211,
    BONE = 0x0212,
    ATLAS_MEDALLION = 0x0213,
    ASH = 0x0214,
    ACORNS = 0x0215,

    // armor
    ARMOR_1_1 = 0x0401,
    ARMOR_1_2 = 0x0402,
    ARMOR_1_3 = 0x0403,
    ARMOR_2_1 = 0x0404,
    ARMOR_2_2 = 0x0405,
    ARMOR_2_3 = 0x0406,
    ARMOR_3_1 = 0x0407,
    ARMOR_3_2 = 0x0408,
    ARMOR_3_3 = 0x0409,
    ARMOR_4_1 = 0x040a,
    ARMOR_4_2 = 0x040B,
    ARMOR_4_3 = 0x040c,

    HELM_1_1 = 0x040d,
    HELM_1_2 = 0x040e,
    HELM_1_3 = 0x040f,
    HELM_2_1 = 0x0410,
    HELM_2_2 = 0x0411,
    HELM_2_3 = 0x0412,
    HELM_3_1 = 0x0413,
    HELM_3_2 = 0x0414,
    HELM_3_3 = 0x0415,
    HELM_4_1 = 0x0416,
    HELM_4_2 = 0x0417,
    HELM_4_3 = 0x0418,

    ARMBAND_1_1 = 0x0419,
    ARMBAND_1_2 = 0x041a,
    ARMBAND_1_3 = 0x041b,
    ARMBAND_2_1 = 0x041c,
    ARMBAND_2_2 = 0x041d,
    ARMBAND_2_3 = 0x041e,
    ARMBAND_3_1 = 0x041f,
    ARMBAND_3_2 = 0x0420,
    ARMBAND_3_3 = 0x0421,
    ARMBAND_4_1 = 0x0422,
    ARMBAND_4_2 = 0x0423,
    ARMBAND_4_3 = 0x0424,
    
    COLLAR_1 = 0x0425,
    COLLAR_2 = 0x0426,
    COLLAR_3 = 0x0427,
    COLLAR_4 = 0x0428,

    // consumables
    PETAL = 0x0800,
    NECTAR = 0x0801,
    HONEY = 0x0802,
    BISCUIT = 0x0803,
    WINGS = 0x0804,
    HERBAL_ESSENCE = 0x0805,
    PIXIE_DUST = 0x0806,
    CALL_BEADS = 0x0807,
}

enum ITEM {
    // special/groups
    ALL = 0x0000,
    INGREDIENTS = 0x0001,
    MONEY = 0x0002,
    TRADING_GOODS = 0x0003,
    WEAPON_LEVEL_2 = 0x0004,
    WEAPON_LEVEL_3 = 0x0005,
    DOG_LEVEL_2 = 0x0005,
    DOG_LEVEL_3 = 0x0006,
    BASICS = 0x0007,
    CONSUMABLES = 0x0008,
    ALCHEMY = 0x0009,
    WEAPONS = 0x000a,
    ARMOR = 0x000b,
    CHARMS = 0x000c,

    // charms
    JAGUAR_RING = 0x0100,

    // weapon
    SPEAR_1 = 0x0200,
    SPEAR_2 = 0x0201,
    SPEAR_3 = 0x0202,
    AXE_1 = 0x0210,
    AXE_2 = 0x0211,
    
    // alchemy
    ACID_RAIN = 0x0300,
    ATLAS = 0x0301,
    BARRIER = 0x0302,
    CALL_UP = 0x0303,
    CORROSION = 0x0304,
    CRUSH = 0x0305,
    CURE = 0x0306,
    DEFEND = 0x0307,

    DOUBLE_DRAIN = 0x0310,
    DRAIN = 0x0311,
    ENERGIZE = 0x0312,
    ESCAPE = 0x0313,
    EXPLOSION = 0x0314,
    FIREBALL = 0x0315,
    FIRE_POWER = 0x0316,
    FLASH = 0x0317,

    FORCE_FIELD = 0x0320,
    HARD_BALL = 0x0321,
    HEAL = 0x0322,
    LANCE = 0x0323,
    LASER = 0x0324,
    LEVITATE = 0x0325,
    LIGHTNING_STORM = 0x0326,
    MIRACLE_CURE = 0x0327,

    NITRO = 0x0330,
    ONE_UP = 0x0331,
    REFLECT = 0x0332,
    REGROWTH = 0x0333,
    REVEALER = 0x0334,
    REVIVE = 0x0335,
    SLOW_BURN = 0x0336,
    SPEED = 0x0337,

    SRING = 0x0340,
    STOP = 0x0341,
    SUPER_HEAL = 0x0342,

    // consumables
    WINGS = 0x0400,
    PETAL = 0x0401,
    NECTAR = 0x0402,

    // ingredients
    WAX = 0x0500,
    WATER = 0x501,
    VINEGAR = 0x502,
    ROOT = 0x503,
    OIL = 0x504,
    MUSHROOM = 0x505,
    MUD_PEPPER = 0x506,
    METEORITE = 0x507,
    LIMESTONE = 0x508,
    IRON = 0x509,
    GUNPOWDER = 0x50a,
    GREASE = 0x50b,
    FEATHER = 0x50c,
    ETHANOL = 0x50d,
    DRY_ICE = 0x50e,
    CRYSTAL = 0x50f,
    CLAY = 0x510,
    BRIMSONE = 0x511,
    BONE = 0x512,
    ATLAS_AMULET = 0x513,
    ASH = 0x514,
    ACORN = 0x515,

    // rare items
    ENERGY_CORE = 0x600
}

enum ALCHEMY_INDEX {
    ACID_RAIN = 0x00,
    FLASH = 0x17,
    CRUSH = 0x05,

    ATLAS = 0x01,
    BARRIER = 0x02,
    CALL_UP = 0x03,
    CORROSION = 0x04,
    CURE = 0x06,
    DEFEND = 0x07,

    DOUBLE_DRAIN = 0x10,
    DRAIN = 0x11,
    ENERGIZE = 0x12,
    ESCAPE = 0x13,
    EXPLOSION = 0x14,
    FIREBALL = 0x15,
    FIRE_POWER = 0x16,

    FORCE_FIELD = 0x20,
    HARD_BALL = 0x21,
    HEAL = 0x22,
    LANCE = 0x23,
    LASER = 0x24,
    LEVITATE = 0x25,
    LIGHTNING_STORM = 0x26,
    MIRACLE_CURE = 0x27,

    NITRO = 0x30,
    ONE_UP = 0x31,
    REFLECT = 0x32,
    REGROWTH = 0x33,
    REVEALER = 0x34,
    REVIVE = 0x35,
    SLOW_BURN = 0x36,
    SPEED = 0x37,

    SRING = 0x40,
    STOP = 0x41,
    SUPER_HEAL = 0x42
}

enum CAST {
    // projectile
    FLASH = 0x02,
    FIREBALL = 0x16,

    // animation
    ACID_RAIN = 0x00,
    CRUSH = 0x04,
    DRAIN = 0x06,
    DOUBLE_DRAIN = 0x08,
    STING = 0x0a,
    LIGHTNING_STORM = 0x0c,
    EXPLOSION = 0x0e,
    COROSION = 0x10,
    NITRO = 0x12,
    SLOW_BURN = 0x22,
    HEAT_WAVE = 0x26,
    STORM = 0x28,
    PLAGUE = 0x2c,

    // debuff
    CONFOUND = 0x18,
    DISRUPT = 0x2a,
    STOP = 0x14,

    // heal/buff
    HEAL = 0x1c,
    ONE_UP = 0x20,
    CURE = 0x1a,
    MIRACLE_CURE = 0x1e,
    FORCEFIELD = 0x24,

    // derpy
    WATER = 0x30
    // CRASH: 2e, 32, 34, 36, â€¦
}

enum THROWABLE {
    BEACH_BALL = 0x00,
    SPOON = 0x02,
    SPEAR = 0x04,
    MISSILE_2 = 0x06,
    LIGHTNING_BALL = 0x08, // salabog
    BIDENT = 0x0a, // vigor
    BOOMERANG = 0x0c, // vigor

    ONION = 0x0e,
    ONION = 0x10,
    BOTTLE = 0x12,
    BOTTLE_BROKEN = 0x14,
    CITRON = 0x16,
    ROCK = 0x18,

    LIGHTNING = 0x1a, // no damage
    BOMB_EXPLOSION = 0x1c, // piercing
    MISSILE = 0x1e, // carltron
    // CRASH: 20, 22, â€¦
}

enum ANIMATION_MODE {
    ONCE = 0x00,
    ONCE_FREEZE = 0x02,
    LOOP = 0x04,
    FREEZE = 0x06
}

enum ANIMATION_ALL {
    INVISIBLE = 0x0010,

    DEFAULT = 0x8000,
    
    WALK_FORWARD = 0x8002,
    RUN_FORWARD = 0x8004,
    
    SLASH_1 = 0x8006,
    SLASH_2 = 0x8008,
    SLASH_3 = 0x800a,
    SLASH_1_3 = 0x800c,

    KNOCKBACK = 0x800e,

    CAST = 0x8014,
    BLOCK = 0x8016

    // ENEMIES ONLY: 8010, 8012
    // CRASH: 8018, 801a, 801c, 801e
}

enum ANIMATION_BOY {
    SLEEP_UP = 0x001a,
    DRAGGED = 0x001c,
    SWIRL_ENTER = 0x0020,
    SWIRL_EXIT = 0x0022,
    FALL_1 = 0x0024,
    FALL_2 = 0x0026,
    SLEEP_DOWN = 0x0028,
    KNEEL = 0x002a,
    SLEEP_WATER = 0x002C,
    TELEPORT_IN = 0x002e,

    BOY_STICK_THROWING = 0x0014,
    BOY_STICK_HOLDING = 0x0016,
    LOOT = 0x0018
}

enum ANIMATION_DOG {
    // act0
    ACT0_RUN = 0x0068,
    ACT0_STAND = 0x006a,
    ACT0_WALK = 0x006c,

    // act1
    ACT1_STICK_RUNNING = 0x0030,
    ACT1_STICK_DROPPING = 0x0032,
    ACT1_SWIRL_ENTER = 0x0038,
    
    ACT1_TINY = 0x0036,

    ACT1_DRAGGING = 0x0034,
    ACT1_SLEEP = 0x003a,
    ACT1_SIT = 0x003e,
    ACT1_FALL1 = 0x003c,
    ACT1_FALL2 = 0x0040,
    ACT1_FALL3 = 0x0042,
    ACT1_ANGRY = 0x0044,

    // act2
    ACT2_FALL = 0x0052,
    ACT2_LEAP = 0x0046,
    ACT2_SLEEP = 0x0048,
    ACT2_SIT = 0x004a,
    ACT2_DUCK = 0x004c,
    ACT2_FALL_1 = 0x004e,
    ACT2_FALL_2 = 0x0050,
    ACT2_FALL_3 = 0x0052,
    ACT2_FALL_4 = 0x0054,
    ACT2_SNIFF = 0x0056,
    ACT2_TELEPORT = 0x0058,
    
    // act3
    ACT3_SLEEP = 0x005a,
    ACT3_SIT = 0x005c,
    ACT3_STAND_1 = 0x005e,
    ACT3_STAND_2 = 0x0060,
    ACT3_STAND_3 = 0x0062,
    ACT3_FALL_1 = 0x0064,
    ACT3_FALL_2 = 0x0066
}

enum ANIMATION_ENEMY {
    // special
    GORE = 0x8010,
    DUST = 0x01a6,

    // bosses
    MAGMAR_ROLL = 0x800c,
    MAGMAR_ENTER = 0x00ae,
    MAGMAR_EXIT = 0x00b0,

    SALABOG_DUCK = 0x0072,

    VERMINATOR_CAST_1 = 0x8014,
    VERMINATOR_CAST_2 = 0x010a,
    VERMINATOR_SERCHING = 0x010c, // doesn't exist?
    VERMINATOR_DAMAGE = 0x010e,

    MINITAUR_STOMP = 0x00b2,

    RIMSALA_1 = 0x00b6,
    RIMSALA_2 = 0x00b8,

    VIGOR_FLEX = 0x00ba,

    TINY_FLEX = 0x00cc,
    TINY_JUGGLE = 0x00ce,
    TINY_THROW_1 = 0x00d0,
    TINY_THROW_2 = 0x00d2,

    STERLING_ATTACK = 0x011e,
    STERLING_FLY_1 = 0x0120,
    STERLING_FLY_2 = 0x0122,
    STERLING_IDLE_1 = 0x0124,
    STERLING_IDLE_2 = 0x0126,

    MEGATAUR_STOMP = 0x0150,
    MEGATAUR_IDLE = 0x0152,
    MEGATAUR_DAMAGE = 0x0154,
    MEGATAUR_STILL = 0x0156,
    MEGATAUR_ENTER = 0x0158,
    MEGATAUR_EXIT = 0x015a,
    MEGATAUR_BREATH = 0x015c,
    MEGATAUR_DUCK = 0x015e,

    // enemies
    LIZARD_TALK = 0x0076,
    LIZARD_DUCK_1 = 0x0078,
    LIZARD_DUCK_2 = 0x007c,
    LIZARD_ROLL = 0x007a,

    TENTACLE_WHIP_ATTACK = 0x00e0,
    TENTACLE_ATTACK = 0x00e2,

    BLACK_OWL_ACTIVATE = 0x8006,
    BLACK_OWL_JUMP = 0x800c,
    BLACK_OWL_FUSION = 0x800a,

    PUPPET_1_JUMP_1 = 0x00e6,
    PUPPET_1_JUMP_2 = 0x00e8,
    PUPPET_1_ENTER = 0x00ea,
    PUPPET_1_DANGLING = 0x00ec,
    PUPPET_1_ATTACK = 0x00ee,
    PUPPET_1_DANCE = 0x00ee,

    PUPPET_2_JUMP = 0x00f2,
    PUPPET_2_ENTER = 0x00f4,
    PUPPET_2_DANGLING = 0x00f6,
    PUPPET_2_ATTACK_1 = 0x00f8,
    PUPPET_2_ATTACK_2 = 0x00fa,
    PUPPET_2_DANCE = 0x00fc,

    GATE_BOT_DEAD = 0x8012, 

    // npcs
    DAVID_SEARCHING = 0x0000,

    KING_ROCKING = 0x00fe,

    LANCE = 0x0110,

    VILLAGER_FREAKSHOW_1 = 0x0112,

    TINKER_1 = 0x0136,
    TINKER_2 = 0x0138,

    CARLTRON_TALK = 0x013a,
    CARLTRON_LYING = 0x013c,
    CARLTRON_CLEANING = 0x013e,
    CARLTRON_DROPPING = 0x0140,
    CARLTRON_SMUG = 0x0142,

    PIRATE_VILLAGER_1 = 0x0080, // boxer right
    PIRATE_VILLAGER_2 = 0x0082, // boxer left
    PIRATE_VILLAGER_3 = 0x0084, // drinking left
    PIRATE_VILLAGER_4 = 0x0086, // drinking up 1
    PIRATE_VILLAGER_5 = 0x008a, // drinking up 2
    PIRATE_VILLAGER_6 = 0x008c, // barkeeper
    PIRATE_VILLAGER_7 = 0x008e, // tiny/pirate lifting?
}

enum ANIMATION_PLACEHOLDER {
    // effects
    EXPLOSION_1 = 0x0002,
    EXPLOSION_2 = 0x0004,
    EXPLOSION_3 = 0x0006,

    EXPLOSION_GREEN_1 = 0x0104,
    EXPLOSION_GREEN_2 = 0x0106,
    EXPLOSION_GREEN_3 = 0x0108,

    GORE_GREEN = 0x0090,
    GORE_RED = 0x0092,
    GORE_EXPLODE = 0x0094,

    TELEPORT_OUT = 0x00c8,
    TELEPORT_IN = 0x00ca,

    LEAVES_FALLING_1 = 0x0008,
    LEAVES_FALLING_2 = 0x000a,

    // objects
    ENERGY_CORE_CLOSED = 0x00bc,
    ENERGY_CORE_OPENING = 0x00be,
    ENERGY_CORE_OPEN = 0x00c0,

    LIFT_MOVING = 0x006e,

    LIFT_CORD_VERTICAL = 0x00aa,

    ELEVATOR = 0x00b4,

    BUCKET = 0x00e4,

    WINDWALKER_IDLE = 0x014e,

    SPACESHIP_IDLE = 0x0144,
    SPACESHIP_BACK = 0x0146,
    SPACESHIP_TOP = 0x0148,
    SPACESHIP_FIRE_PARTS_1 = 0x014a,
    SPACESHIP_FIRE_PARTS_2 = 0x014c,

    ROCKET_IDLE = 0x0198,

    SHELL_BOAT = 0x006e,

    PILLAR_VIGOR = 0x009a,

    SKELETON_SHIP_1 = 0x009c,
    SKELETON_SHIP_2 = 0x009e,
    SKELETON_SHIP_3 = 0x00a0,
    SKELETON_SHIP_ROW_1 = 0x00a2,
    SKELETON_SHIP_ROW_2 = 0x00a4,

    AEGIS_MASK_1 = 0x00c6,
    AEGIS_MASK_2 = 0x00c2,
    AEGIS_MASK_3 = 0x00c4,

    SZEPTER = 0x0102,

    // npcs
    EVIL_HORACE_BACK_1 = 0x00a6,
    EVIL_HORACE_BACK_2 = 0x00a8,

    EVIL_FIRE_EYES_TURNING = 0x00ac,

    FIRE_EYES_CAST = 0x0096,

    COLLOSEUM_VILLAGER_1 = 0x0098,

    MARKET_2_VILLAGER_1 = 0x011a,
    MARKET_2_VILLAGER_2 = 0x011c,

    COOK_RUNNING = 0x0116,
    COOK_COOKING = 0x0118,

    PIG_RUNNING = 0x00dc,
    PIG_STAND = 0x00de,

    PIGOODLE_RUNNING_SOUTH = 0x00d4,
    PIGOODLE_RUNNING_EAST = 0x00d6,
    PIGOODLE_RUNNING_WEST = 0x00d8,
    PIGOODLE_STAND = 0x00da,

    // environment
    SANDPIT_OUT = 0x000e,

    // podunk old
    PODUNK_VILLAGER_1 = 0x0128,
    PODUNK_VILLAGER_2 = 0x0190,
    PODUNK_VILLAGER_3 = 0x0192,

    CAT_CLEANING_1 = 0x012c,
    CAT_CLEANING_2 = 0x012e,
    CAT_LOOKING = 0x0130,
    CAT_RUNNING = 0x0132,

    DOVES_1 = 0x018c,
    DOVES_2 = 0x018e,

    // podunk new
    PODUNK_VILLAGER_4 = 0x0134,
    PODUNK_VILLAGER_5 = 0x0194,

    // intro
    SPARK_LEFT = 0x0184,
    LOGO = 0x0186

    // UNIDENTIFIED: 1e, 7e, 100 (bread? apparently located near the mad monk vendor), 114 (half the cooks face?)
    // INVISIBLE: 0e, 12, 12a
    // CRASH: 72, 74
}

enum SCRIPT_TRIGGER {
    DEATH = 0x0200,
    DAMAGE = 0x0300,

    LOOT = 0x0040,

    TALK = 0xffff // fake id
}

enum SPECIAL_SCRIPTS {
    LOOTING = 0xb1,
    REVEALER = 0xb2,
    LEVITATE = 0xb3,
    SELECT_PRESSED = 0xb4,
    WINGS = 0xb5,
    UNKNOWN = 0xb6 // used inside and outside of the pyramids
}

enum CURRENCY {
    TALONS = 0x00,
    JEWELES = 0x03,
    GOLD_COINS = 0x06,
    CREDITS = 0x09
}

enum WALK_TYPE {
    TILE_ABSOLUTE = 0x6c,
    TILE_ABSOLUTE_DIRECT = 0x6e,

    COORDINATE_ABSOLUTE = 0x73,
    COORDINATE_RELATIVE = 0x6d,
    COORDINATE_RELATIVE_DIRECT = 0x6f,
}

enum SFX_EFFECT {
    // permanent effects
    RAIN = 0x0001,
    NIGHT = 0x0002,
    SHAKING = 0x003,
    SEPIA = 0x0004,

    // one time effects
    LIGHTNING = 0x1000
}

// BASICS

fun address(address) {
    if(address >= 0x960000) {
        code(address - 0x960000);
    } else if(address >= 0x958000) {
        code(address - 0x958000);
    } else if(address >= 0x950000) {
        code(address - 0x950000);
    } else if(address >= 0x948000) {
        code(address - 0x948000);
    } else if(address >= 0x940000) {
        code(address - 0x940000);
    } else if(address >= 0x938000) {
        code(address - 0x938000);
    } else if(address >= 0x930000) {
        code(address - 0x930000);
    } else if(address >= 0x928000) {
        code(address - 0x928000);
    } else if(address >= 0x2834) {
        code(address - 0x2834);
    } else if(address >= 0x2258) {
        code(address - 0x2258);
    }
}
fun arg(index) {
    code(0x00 + index);
}
fun arg_signed(index) {
    code(0x92, arg(index));
}
fun param(value) {
    // writes arg0â€¦arg20

    if(value < 0x00) {
        code(0xd0 + value);
    } else if(value <= 0x0f) {
        code(0xb0 + value);
    } else if(value <= 0x1e) {
        code(0xd0 + value);
    } else if(value <= 0xff) {
        code(0x82, 0x00 + value);
    } else if(value <= 0xffff) {
        code(0x84, 0x0000 + value);
    }
}
fun entity(character) {
    // sometimes writes arg0â€¦arg20

    if(character == CHARACTER.BOY) {
        code(character);
    } else if(character == CHARACTER.DOG) {
        code(character);
    } else if(character == CHARACTER.ACTIVE) {
        code(character);
    } else if(character == CHARACTER.LAST_ENTITY) {
        code(character);
    } else if(character == CHARACTER.SCRIPT_OWNER) {
        code(character);
    } else if(character >= 0x2834) {
        code(0x0d, character - 0x2834);
    } else if(character >= 0x2258) {
        code(0x08, character - 0x2258);
    }
}
fun entity_t(character) {
    // sometimes writes arg0â€¦arg20

    if(character == CHARACTER.BOY) {
        code(0x80 + character);
    } else if(character == CHARACTER.DOG) {
        code(0x80 + character);
    } else if(character == CHARACTER.ACTIVE) {
        code(0x80 + character);
    } else if(character == CHARACTER.LAST_ENTITY) {
        code(0x80 + character);
    } else if(character == CHARACTER.SCRIPT_OWNER) {
        code(0x80 + character);
    } else if(character >= 0x2834) {
        code(0x80 + 0x0d, character - 0x2834);
    } else if(character >= 0x2258) {
        code(0x80 + 0x08, character - 0x2258);
    }
}

fun end() {
    code(0x00, "// (00) END (return)");
}

fun nop() {
    code(0x4d, "// NOP");
}

fun yield() {
    code(0x3a, "// (3a) YIELD (break out of script loop, continue later)");
}

fun sleep(ticks) {
    code(0xa7, ticks, "// (a7) SLEEP 59 TICKS");
}

fun call_id(script_id) {
    code(0xa3, script_id, "// (a3) CALL 'Unnamed Global script 0x3d' (0x3d)");
}

fun call_async(script_address) {
    code(0x07, address(script_address), "// (07) CALL 0x92a3e7");
}

// MUSIC

fun sound(sound_effect) {
    code(0x30, sound_effect, "// (30) PLAY SOUND EFFECT 0x58 ??");
}
fun music(music) {
    code(0x33, music, "// PLAY MUSIC 0x12");
}
fun volume(volume) {
    code(0x86, param(volume), "// (86) SET AUDIO volume to 0x64");
}
fun music_volume(music, volume) {
    music(music);
    volume(volume);
}
fun music_fade(on) {
    if(on == True) {
        call_id(ADDRESS_ID.MUSIC_FADE_IN);
    } else {
        call_id(ADDRESS_ID.MUSIC_FADE_OUT);
    }
}
fun music_enter(music, volume) {
    if(MEMORY.CHANGE_MUSIC != 0x00) {
        music_fade(False);
        music_volume(music, volume);
        
        if(volume == 0xff) {
            music_fade(True);
        } else {
            volume(volume);
        }
    }
}

// character manipulation

fun wait(character) {
    code(0x2e, entity_t(character), "// (2e) Wait for boy (d0) to reach destination");
}

fun walk(character, walk_type, x, y, waiting) {
    if(waiting == True) {
        code(walk_type, entity_t(character), x, y, "// (6e) Make $2841 walk to x=0x01,y=0x1c");
        wait(character);
    } else {
        code(walk_type, entity_t(character), x, y, "// (6e) Make $2841 walk to x=0x01,y=0x1c");
    }
}
fun _walk(character, walk_type, x, y, wait_for) {
    code(walk_type, entity_t(character), calculate(x), calculate(y), "// (6e) Make $2841 walk to x=0x01,y=0x1c");
    
    if(wait_for == CHARACTER.BOY) {
        wait(wait_for);
    } else if(wait_for == CHARACTER.DOG) {
        wait(wait_for);
    } else if(wait_for == CHARACTER.BOTH) {
        wait(CHARACTER.BOY);
        wait(CHARACTER.DOG);
    }
}

fun walk_relative(character, walk_type, x, y, waiting) {
    code(walk_type, entity_t(character), param(x), param(y), "// (6e) Make $2841 walk to x=0x01,y=0x1c");
    
    if(waiting == True) {
        code(walk_type, entity_t(character), param(x), param(y), "// (6e) Make $2841 walk to x=0x01,y=0x1c");
        wait(character);
    }
}

fun entity_script_controlled(character) {
    code(0x2a, entity_t(character), "// (2a) Make $283b script controlled");
}

// MAP INITIALIZATION

fun fade_out() {
    code(0x27, "// (27) Fade-out screen (WRITE $0b83=0x8000)");
}
fun fade_out_black() {
    code(0x82, "// (82) Also change visible layers?");
}
fun load_map(map, x, y) {
    code(0x22, x, y, map, 0x00, "// (22) CHANGE MAP = 0x34 @ [ 0x0090 | 0x0118 ]: ...");
}
fun prepare_transition(direction_in, direction_out) {
    set(FLAG.IN_ANIMATION);
    <0x238f> = 0x03;
    fade_out();
    code(0xa3, direction_out, "// (a3) CALL 'Prepare room change? North exit/south entrance outdoor-indoor?' (0x26)"); // TODO: 4x4 combinations, not 4
    sleep(0x10);
}

fun transition(map, x, y, direction_in, direction_out, change_music) {
    if(change_music) {
        music_fade(False);

        MEMORY.CHANGE_MUSIC = 0x01;
    }

    if(direction_in == direction_out) {
        if(direction_out != DIRECTION.NONE) {
            code(0xa3, direction_out, "// (a3) CALL 'Prepare room change? North exit/south entrance outdoor-indoor?' (0x26)"); // TODO: 4x4 combinations, not 4
        }
    } else {
        if(direction_out != DIRECTION.NONE) {
            if(direction_out == DIRECTION.NORTH) {
                <0x238f> = 0x04;
            } else if(direction_out == DIRECTION.EAST) {
                <0x238f> = 0x01;
            } else if(direction_out == DIRECTION.SOUTH) {
                <0x238f> = 0x03;
            } else if(direction_out == DIRECTION.WEST) {
                <0x238f> = 0x02;
            }
        }

        if(direction_out != DIRECTION.NONE) {
            if(direction_in == DIRECTION.NORTH) {
                walk_relative(CHARACTER.SCRIPT_OWNER, WALK_TYPE.COORDINATE_RELATIVE, 0x00, -0x02, False);
            } else if(direction_in == DIRECTION.EAST) {
                walk_relative(CHARACTER.SCRIPT_OWNER, WALK_TYPE.COORDINATE_RELATIVE, 0x02, 0x00, False);
            } else if(direction_in == DIRECTION.SOUTH) {
                walk_relative(CHARACTER.SCRIPT_OWNER, WALK_TYPE.COORDINATE_RELATIVE, 0x00, 0x02, False);
            } else if(direction_in == DIRECTION.WEST) {
                walk_relative(CHARACTER.SCRIPT_OWNER, WALK_TYPE.COORDINATE_RELATIVE, -0x02, 0x00, False);
            }
            sleep(0x15);
        }
    }
    if(direction_out == DIRECTION.NONE) {
        unset(FLAG.IN_ANIMATION);
    } else {
        set(FLAG.IN_ANIMATION);
    }

    load_map(map, x, y);
}

fun teleport(character, x, y) {
    if(character == CHARACTER.BOTH) {
        code(0x20, x, y, "// (20) Teleport both to 43 93");
    } else {
        code(0x42, entity_t(character), x, y, "// (42) Teleport $2835 to a7, b9");
    }
}
fun _teleport(character, x, y) {
    if(character == CHARACTER.BOTH) {
        code(0x20, calculate(x), calculate(y), "// (20) Teleport both to 43 93");
    } else {
        code(0x43, entity_t(character), calculate(x), calculate(y), "// (42) Teleport $2835 to a7, b9");
    }
}
// fun teleport_relative(character, x, y) {
//     <character>[0x1a] = <character>[0x26];
//     <character>[0x1c] = <character>[0x28];
// }

fun init_map(x_start, y_start, x_end, y_end) {
    code(0x1b, address(0x23e9), address(0x23eb), x_start, y_start, "// (1b) WRITE MAP X start ($23e9) = 0x0000  (1b) WRITE MAP Y start ($23eb) = 0x0010");
    code(0x1b, address(0x23ed), address(0x23ef), x_end, y_end, "// (1b) WRITE MAP X end   ($23ed) = 0x0400  (1b) WRITE MAP Y end   ($23ef) = 0x04b0");
}

fun price(index, rate, drop, quantity) {
    if(index == 0x1) {
        <0x239b> = rate;
        <0x23a1> = drop;
        <0x23a7> = quantity;
    } else if(index == 0x2) {
        <0x239d> = rate;
        <0x23a3> = drop;
        <0x23a9> = quantity;
    } else if(index == 0x3) {
        <0x239f> = rate;
        <0x23a5> = drop;
        <0x23ab> = quantity;
    }
}

// CURRENCY

fun currency_get(type, amount) {
    code(0x7c, param(type), 0x000000 + amount, "// (7c) Give 50 Talons (moniez)");
}
fun currency_take(type, amount) {
    code(0x7c, param(type), 0x000000 + amount, "// (7d) Take 10 Talons (moniez)");
}
fun currency_convert(from_amount, from_type, to_amount, to_type) {
    code(0x7e, param(from_amount), param(from_type), param(to_amount), param(to_type), "// (7e) Exchange 1 Gold Coins to 8 Credits (moniez)");
}
fun show_currency(show) {
    if(show == True) {
        code(0x55, "// (55) CLEAR TEXT"); // TODO: workaround, in case a subtext is being shown and would cause a crash
        yield();

        code(0x9f, "// (9f) PREPARE CURRENCY DISPLAY");
        code(0xa0, "// (a0) SHOW CURRENCY AMOUNT");
    } else {
        code(0xa1, "// (a1) HIDE CURRENCY DISPLAY");
    }
}

// MISC.

fun animate(character, mode, id) {
    code(0x78, entity_t(character), 0x0000 + id, param(mode), "// (78) UNTRACED INSTR for $2846, 0x0010 2 changes sprite/animation/...?");
}

fun add_enemy(enemy, x, y) {
    code(0xba, enemy, x, y, "// (ba) LOAD NPC 0b at 49 79");
}

fun add_placeholder(animation, x, y) {
    add_enemy(ENEMY.PLACEHOLDER, x, y);
    animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.LOOP, animation);
}

fun add_enemy_with_flags(enemy, x, y, flags) {
    code(0x3c, 0x0000 + enemy * 0x02, 0x0000 + flags, x, y, "// (ba) LOAD NPC 0b at 49 79");
}

fun add_dynamic_enemy_with_flags(enemy, x, y, flags) {
    code(0xa2, 0x0000 + enemy * 0x02, 0x0000 + flags, calculate(x), calculate(y), "// (a2) SPAWN NPC 0x00ca>>1, flags 0x20, x:$23b9, y:$23bb");
}

fun add_enemy_spawner(enemy, x, y, quantity) {
    MEMORY.ENEMY_SPAWNER_QUANTITY = quantity;

    code(0xc2, enemy, x, y, "// (c2) Add NPC 0x71 spawner at 0x13,0x09");
}

fun control(character) {
    if(character == CHARACTER.NONE) {
        code(0xc0, "// (c0) BOY+DOG = STOPPED");
    } else if(character == CHARACTER.BOTH) {
        code(0xc1, "// (c1) BOY+DOG = Player controlled");
    }
}
fun control_enemy(character, control) {
    if(control == True) {
        code(0x2a, entity_t(character), "// (2a) Make $2841 script controlled");
    } else {
        code(0x2b, entity_t(character), "// (2b) Make $2835 player/AI controlled");
    }
}
fun _control_enemy(character, control) {
    if(control == True) {
        code(0x2a, calculate(character), "// (2a) Make $2841 script controlled");
    } else {
        code(0x2b, calculate(character), "// (2b) Make $2835 player/AI controlled");
    }
}

fun available(character) {
    // TODO: parameter bug
    
    if(character == CHARACTER.BOY) {
        // teleport(CHARACTER.DOG, 0x00, 0x00);
        
        unset(FLAG.BOY_UNAVAILABLE);
        set(FLAG.DOG_UNAVAILABLE);

        code(0xbd, "// (bd) BOY = Player controlled");
        code(0x98, entity_t(character), "// (98) SWITCH CHAR TO boy");
        code(0xbe, "// (be) Stop/disable doggo (and SELECT button)");
    } else if(character == CHARACTER.DOG) {
        // teleport(CHARACTER.BOY, 0x00, 0x00);
        
        set(FLAG.BOY_UNAVAILABLE);
        unset(FLAG.DOG_UNAVAILABLE);

        code(0xbf, "// (bf) DOG = Player controlled");
        code(0x98, entity_t(character), "// (98) SWITCH CHAR TO dog");
        code(0xbc, "// (bc) Stop/disable boy (and SELECT button)");
    } else if(character == CHARACTER.BOTH) {
        unset(FLAG.BOY_UNAVAILABLE);
        unset(FLAG.DOG_UNAVAILABLE);

        code(0xc1, "// (c1) BOY+DOG = Player controlled");
    } else if(character == CHARACTER.NONE) {
        set(FLAG.BOY_UNAVAILABLE);
        set(FLAG.DOG_UNAVAILABLE);

        // code(0xbe, "// (be) Stop/disable doggo (and SELECT button)");
        // code(0xbc, "// (bc) Stop/disable boy (and SELECT button)");
    }
}

fun text_start() {
    control(CHARACTER.NONE);
    call_id(ADDRESS_ID.OPEN_TEXTBOX_DEFAULT);
}
fun text(id) {
    code(0x51, id, "// (51) SHOW TEXT 10bf FROM 0x91e0bf compressed WINDOWED c14dd8> '[0x97][0x8b]Goat[LF]' '[0x8b]Chicken[LF]' '[0x8b]Basket'");
}
fun text_end() {
    code(0x55, "// (55) CLEAR TEXT");
    
    control(CHARACTER.BOTH);
}

fun subtext(id) {
    code(0x52, id, "// (52) SHOW TEXT 066f FROM 0x91d66f compressed UNWINDOWED c03ad9> 'Received Jaguar Ring'");
}

fun question(id) {
    text_start();

    text(id);
    
    eval("1d 69 00 30 ac // (1d) WRITE $289d = Dialog response (preselect 0)");
    
    text_end();
}

fun open_message_box(x, y, w, h) {
    // eval("44 00 0a 02 14 10 // (44) UNTRACED INSTR, Open messagebox? slot=0x00 x=0x0a y=0x02 w=0x14 h=0x0c");

    code(0x44, 0x00, x, y, w, h, "// (44) UNTRACED INSTR, Open messagebox? slot=0x00 x=0x0a y=0x02 w=0x14 h=0x0c");
}

fun question_max(id, h) {
    control(CHARACTER.NONE);
    
    open_message_box(0x0a, 0x02, 0x14, h);

    text(id);
    
    eval("1d 69 00 30 ac // (1d) WRITE $289d = Dialog response (preselect 0)");
    
    text_end();
}

fun dialog(id) {
    text_start();

    text(id);

    text_end();
}

fun fanfare() {
    music_fade(True);
    music(MUSIC.FANFARE);
    music_fade(False);
}
fun fanfare_item() {
    fanfare();
}
fun fanfare_weapon() {
    control(CHARACTER.NONE);
    call(0x92bf33); // (29) CALL 0x92bf33 Hold up weapon

    sleep(0x08);
    fanfare();
        
    sleep(0xc8);
    control(CHARACTER.BOTH);
}

fun unlock_armor(unlocked) {
    if(unlocked == True) {
        MEMORY.ARMOR_1_1 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_1_2 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_1_3 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_2_1 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_2_2 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_2_3 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_3_1 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_3_2 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_3_3 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_4_1 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_4_2 = SYSTEM.ITEM_MAX;
        MEMORY.ARMOR_4_3 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_1_1 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_1_2 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_1_3 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_2_1 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_2_2 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_2_3 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_3_1 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_3_2 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_3_3 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_4_1 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_4_2 = SYSTEM.ITEM_MAX;
        MEMORY.HELM_4_3 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_1_1 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_1_2 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_1_3 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_2_1 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_2_2 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_2_3 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_3_1 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_3_2 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_3_3 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_4_1 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_4_2 = SYSTEM.ITEM_MAX;
        MEMORY.ARMBAND_4_3 = SYSTEM.ITEM_MAX;
        MEMORY.COLLAR_1 = SYSTEM.ITEM_MAX;
        MEMORY.COLLAR_2 = SYSTEM.ITEM_MAX;
        MEMORY.COLLAR_3 = SYSTEM.ITEM_MAX;
        MEMORY.COLLAR_4 = SYSTEM.ITEM_MAX;
    } else {
        MEMORY.ARMOR_1_1 = 0x00;
        MEMORY.ARMOR_1_2 = 0x00;
        MEMORY.ARMOR_1_3 = 0x00;
        MEMORY.ARMOR_2_1 = 0x00;
        MEMORY.ARMOR_2_2 = 0x00;
        MEMORY.ARMOR_2_3 = 0x00;
        MEMORY.ARMOR_3_1 = 0x00;
        MEMORY.ARMOR_3_2 = 0x00;
        MEMORY.ARMOR_3_3 = 0x00;
        MEMORY.ARMOR_4_1 = 0x00;
        MEMORY.ARMOR_4_2 = 0x00;
        MEMORY.ARMOR_4_3 = 0x00;
        MEMORY.HELM_1_1 = 0x00;
        MEMORY.HELM_1_2 = 0x00;
        MEMORY.HELM_1_3 = 0x00;
        MEMORY.HELM_2_1 = 0x00;
        MEMORY.HELM_2_2 = 0x00;
        MEMORY.HELM_2_3 = 0x00;
        MEMORY.HELM_3_1 = 0x00;
        MEMORY.HELM_3_2 = 0x00;
        MEMORY.HELM_3_3 = 0x00;
        MEMORY.HELM_4_1 = 0x00;
        MEMORY.HELM_4_2 = 0x00;
        MEMORY.HELM_4_3 = 0x00;
        MEMORY.ARMBAND_1_1 = 0x00;
        MEMORY.ARMBAND_1_2 = 0x00;
        MEMORY.ARMBAND_1_3 = 0x00;
        MEMORY.ARMBAND_2_1 = 0x00;
        MEMORY.ARMBAND_2_2 = 0x00;
        MEMORY.ARMBAND_2_3 = 0x00;
        MEMORY.ARMBAND_3_1 = 0x00;
        MEMORY.ARMBAND_3_2 = 0x00;
        MEMORY.ARMBAND_3_3 = 0x00;
        MEMORY.ARMBAND_4_1 = 0x00;
        MEMORY.ARMBAND_4_2 = 0x00;
        MEMORY.ARMBAND_4_3 = 0x00;
        MEMORY.COLLAR_1 = 0x00;
        MEMORY.COLLAR_2 = 0x00;
        MEMORY.COLLAR_3 = 0x00;
        MEMORY.COLLAR_4 = 0x00;
    }
}
fun unlock_weapons(unlocked) {
    if(unlocked == True) {
        <0x22DA> = 0xff;
        <0x22DB> = 0xff;

        MEMORY.AMMO_1 = 0xff;
        MEMORY.AMMO_2 = 0xff;
        MEMORY.AMMO_3 = 0xff;
    } else {
        <0x22DA> = 0x00;
        <0x22DB> = 0x00;

        MEMORY.AMMO_1 = 0x00;
        MEMORY.AMMO_2 = 0x00;
        MEMORY.AMMO_3 = 0x00;
    }
}
fun unlock_alchemy(unlocked) {
    if(unlocked == True) {
        <0x2258> = 0xff;
        <0x2259> = 0xff;
        <0x225A> = 0xff;
        <0x225B> = 0xff;
        <0x225C> = 0xff;
        <0x225D> = 0xff;
    } else {
        <0x2258> = 0x00;
        <0x2259> = 0x00;
        <0x225A> = 0x00;
        <0x225B> = 0x00;
        <0x225C> = 0x00;
        <0x225D> = 0x00;
    }
}
fun unlock_charms(unlocked) {
    if(unlocked == True) {
        <0x2261> = 0xf4;
        <0x2262> = 0xff;
        <0x2263> = 0xff;
        <0x2264> = 0xff;
    } else {
        <0x2261> = 0x00;
        <0x2262> = 0x00;
        <0x2263> = 0x00;
        <0x2264> = 0x00;
    }
}
fun unlock_consumables(amount) {
    MEMORY.PETAL = amount;
    MEMORY.NECTAR = amount;
    MEMORY.HONEY = amount;
    MEMORY.DOG_BISCUIT = amount;
    MEMORY.WINGS = amount;
    MEMORY.ESSENCE = amount;
    MEMORY.PIXIE_DUST = amount;
    MEMORY.CALL_BEADS = amount;
}
fun unlock_ingredients(amount) {
    MEMORY.WAX = amount;
    MEMORY.WATER = amount;
    MEMORY.VINEGAR = amount;
    MEMORY.ROOT = amount;
    MEMORY.OIL = amount;
    MEMORY.MUSHROOM = amount;
    MEMORY.MUD_PEPPER = amount;
    MEMORY.METEORITE = amount;
    MEMORY.LIMESTONE = amount;
    MEMORY.IRON = amount;
    MEMORY.GUNPOWDER = amount;
    MEMORY.GREASE = amount;
    MEMORY.FEATHER = amount;
    MEMORY.ETHANOL = amount;
    MEMORY.DRY_ICE = amount;
    MEMORY.CRYSTAL = amount;
    MEMORY.CLAY = amount;
    MEMORY.BRIMSONE = amount;
    MEMORY.BONE = amount;
    MEMORY.ATLAS_AMULET = amount;
    MEMORY.ASH = amount;
    MEMORY.ACORN = amount;
}
fun unlock_money(amount) {
    currency_get(CURRENCY.TALONS, amount);
    currency_get(CURRENCY.JEWELES, amount);
    currency_get(CURRENCY.GOLD_COINS, amount);
    currency_get(CURRENCY.CREDITS, amount);
}
// ui breaks with 0xff and 0xffff
fun unlock_trading_goods(amount) {
    MEMORY.ANNIHILATION_AMULET = amount;
    MEMORY.BEAD = amount;
    MEMORY.CERAMIC_POT = amount;
    MEMORY.CHICKEN = amount;
    MEMORY.GOLDEN_JACKAL = amount;
    MEMORY.JEWELED_SCARAB = amount;
    MEMORY.LIMESTONE_TABLET = amount;
    MEMORY.PERFUME = amount;
    MEMORY.RICE = amount;
    MEMORY.SPICE = amount;
    MEMORY.SPOON = amount;
    MEMORY.TAPESTRY = amount;
}
fun unlock_weapon_level(level) {
    MEMORY.LEVEL_FIST = level;
    MEMORY.LEVEL_BAZOOKA = level;
    MEMORY.LEVEL_1_SWORD = level;
    MEMORY.LEVEL_1_AXE = level;
    MEMORY.LEVEL_1_SPEAR = level;
    MEMORY.LEVEL_2_SWORD = level;
    MEMORY.LEVEL_2_AXE = level;
    MEMORY.LEVEL_2_SPEAR = level;
    MEMORY.LEVEL_3_SWORD = level;
    MEMORY.LEVEL_3_AXE = level;
    MEMORY.LEVEL_3_SPEAR = level;
    MEMORY.LEVEL_4_SWORD = level;
    MEMORY.LEVEL_4_AXE = level;
    MEMORY.LEVEL_4_SPEAR = level;
}

fun unlock(item) {
    if(item == ITEM.HARD_BALL) {
        set(<0x225a, 0x02>);
    } else if(item == ITEM.FLASH) {
        set(<0x2259, 0x80>);
    } else if(item == ITEM.ACID_RAIN) {
        set(<0x2258, 0x01>);
    } else if(item == ITEM.DRAIN) {
        set(<0x2259, 0x02>);
    } else if(item == ITEM.REVEALER) {
        set(<0x225b, 0x10>);
    } else if(item == ITEM.LEVITATE) {
        set(<0x225a, 0x20>);
    } else if(item == ITEM.INGREDIENTS) {
        unlock_ingredients(SYSTEM.ITEM_MAX);
    } else if(item == ITEM.ALL) {
        unlock_money(0x65B9AA);
        unlock_alchemy(True);
        unlock_charms(True);
        unlock_trading_goods(0x0063);
        unlock_ingredients(SYSTEM.ITEM_MAX);
        unlock_consumables(SYSTEM.ITEM_MAX);
        unlock_armor(True);
        unlock_weapons(True);
    } else if(item == ITEM.MONEY) {
        unlock_money(0x65B9AA);
    } else if(item == ITEM.TRADING_GOODS) {
        unlock_trading_goods(0x0063);
    } else if(item == ITEM.WEAPON_LEVEL_2) {
        unlock_weapon_level(0x0200);
    } else if(item == ITEM.WEAPON_LEVEL_3) {
        unlock_weapon_level(0x0300);
    } else if(item == ITEM.DOG_LEVEL_2) {
        MEMORY.LEVEL_DOG = 0x0200;
    } else if(item == ITEM.DOG_LEVEL_3) {
        MEMORY.LEVEL_DOG = 0x0300;
    } else if(item == ITEM.BASICS) {
        set(FLAG.JAGUAR_RING);
        MEMORY.GAIN_WEAPON = 0x14;
    } else if(item == ITEM.CONSUMABLES) {
        unlock_consumables(SYSTEM.ITEM_MAX);
    } else if(item == ITEM.ALCHEMY) {
        unlock_alchemy(True);
    } else if(item == ITEM.WEAPONS) {
        unlock_weapons(True);
    } else if(item == ITEM.ARMOR) {
        unlock_armor(True);
    } else if(item == ITEM.CHARMS) {
        unlock_charms(True);
    } else if(item == ITEM.JAGUAR_RING) {
         set(<0x2262, 0x02>);
    } else if(item == ITEM.SPEAR_1) {
       MEMORY.GAIN_WEAPON = 0x14;
    } else if(item == ITEM.SPEAR_3) {
        MEMORY.GAIN_WEAPON = 0x18;
    } else if(item == ITEM.AXE_2) {
        MEMORY.GAIN_WEAPON = 0x0c;
    } else if(item == ITEM.ENERGY_CORE) {
        set(FLAG.ENERGY_CORE);
    }
}

fun reward(item) {
    if(item == ITEM.JAGUAR_RING) {
        fanfare_item();

        unlock(item);

        sleep(0x20);
        subtext(0x066f);
        
        fanfare_weapon();
    } else if(item == ITEM.AXE_1) {
        <0x2441> = 0x0a;
        
        subtext(0x05b8);
        fanfare_weapon();
    } else if(item == ITEM.SPEAR_3) {
        unlock(item);
        
        subtext(0x2247);
        fanfare_weapon();
    } else if(item == ITEM.HARD_BALL) {
        set(<0x225a, 0x02>);
        
        dialog(0x0651);
        fanfare_weapon();
    } else if(item == ITEM.FLASH) {
        set(<0x2259, 0x80>);
        
        dialog(0x0963);
        fanfare_weapon();
    } else if(item == ITEM.ACID_RAIN) {
        set(<0x2258, 0x01>);
        
        dialog(0x059d);
        fanfare_weapon();
    } else if(item == ITEM.WINGS) {
        <0x2391> = 0x0804;
        <0x2395> = 0x0014;
        call_id(ADDRESS_ID.LOOT);
        
        fanfare_weapon();
    } else if(item == ITEM.PETAL) {
        <0x2391> = 0x0800;
        <0x2395> = 0x0002;
        call_id(ADDRESS_ID.LOOT);
        
        fanfare_weapon();
    } else if(item == ITEM.NECTAR) {
        <0x2391> = 0x0801;
        <0x2395> = 0x0012;
        call_id(ADDRESS_ID.LOOT);
        
        fanfare_weapon();
    }
}

fun color_filter(color, saturation) {
    code(0xb4, 0x05, param(0x00), param(0x00), param(0x00), param(color), param(saturation), address(0x92d93e), "// (b4) CALL Absolute (24bit) script 0x92d93e ('Unnamed ABS script 0x92d93e')  WITH 5 ARGS 0, 0, 0, 0x84, 0x90");
}

fun clear_status_effects() {
    code(0xaa, "// (aa) Clear boy and dog statuses");
}

fun brightness(brightness) {
    code(0x91, brightness, "// (91) Sets brightness to 0");
}

fun sfx_effect(effect, on) {
    if(effect == SFX_EFFECT.RAIN) {
        if(on) {
            call(ADDRESS.RAIN);
        } else {
            nop();
        }
    } else if(effect == SFX_EFFECT.NIGHT) {
        if(on == True) {
            color_filter(0x2000, 0x90);
        } else {
            color_filter(0x00, 0x00);
        }
    } else if(effect == SFX_EFFECT.SHAKING) {
        if(on == True) {
            code(0x8d, 0x01, "// (8d) 01 Start screen shaking");
            <0x2409> = 0x0001; // (18) WRITE SCREEN SHAKING MAGNITUDE X
            <0x240b> = 0x0001; // (18) WRITE SCREEN SHAKING MAGNITUDE Y
        } else {
            code(0x8d, 0x00, "// (8d) 01 Start screen shaking");
        }
    } else if(effect == SFX_EFFECT.SEPIA) {
        if(on == True) {
            color_filter(0x84, 0x90);
        } else {
            color_filter(0x00, 0x00);
        }
    } else if(effect == SFX_EFFECT.LIGHTNING) {
        if(on == True) {
            call_id(0x36);
        } else {
            nop();
        }
    }
}

fun heal(character, amount, animation) {
    if(animation == False) {
        if(character == CHARACTER.BOTH) {
            code(0x95, entity_t(CHARACTER.BOY), param(amount), "// (95) HEAL dog FOR 0x03e7 = 999");
            code(0x95, entity_t(CHARACTER.DOG), param(amount), "// (95) HEAL dog FOR 0x03e7 = 999");
        } else {
            code(0x95, entity_t(character), param(amount), "// (95) HEAL dog FOR 0x03e7 = 999");
        }
    } else {
        if(character == CHARACTER.BOTH) {
            code(0x94, entity_t(CHARACTER.BOY), 0x08, 0x8d, 0x01, 0x29, 0x3f, 0x1a, 0xd5, "// (94) HEAL boy FOR *($23e5 + 15) WITH ANIMATION = health");
            code(0x94, entity_t(CHARACTER.DOG), 0x08, 0x8f, 0x01, 0x29, 0x3f, 0x1a, 0xd5, "// (94) HEAL dog FOR *($23e7 + 15) WITH ANIMATION = health");
        } else {
            code(0x94, entity_t(character), 0x08, 0x8f, 0x01, 0x29, 0x3f, 0x1a, 0xd5, "// (94) HEAL dog FOR *($23e7 + 15) WITH ANIMATION = health");
        }
    }
}
fun full_heal(character, animation) {
    if(animation == False) {
        heal(character, 0x03e7, animation);
    } else {
        heal(character, 0x00, animation);
    }
}

fun fade_in() {
    call(ADDRESS.FADE_IN);
}

fun object(index, value) {
    code(0x5c, param(index), param(value), "// (5c) SET OBJ 5 STATE = val:1 (load/unload)");
}

fun select_alchemy() {
    code(0x63, "// (63) SHOW ALCHEMY SELECTION SCREEN");
}
fun select_alchemy_with_preselection(alchemy_index) {
    code(0x18, 0xed, 0x01, param(alchemy_index), "// (18) WRITE PRESELECT ALCHEMY ($2445) = Flash (0x1e)");
    select_alchemy();
}

fun cast(character, target, spell, level) {
    // spell = CAST

    code(0xac, entity_t(character), param(spell), param(level), entity_t(target), 0xb0, "// (ac) $283d CASTS SPELL 22 POWER 0x64 ON boy if alive");
}

fun face(character, direction) {
    if(direction == DIRECTION.NORTH) {
        code(0x74, entity_t(character), "// (74) MAKE boy FACE NORTH");
    } else if(direction == DIRECTION.EAST) {
        code(0x77, entity_t(character), "// (77) MAKE boy FACE EAST");
    } else if(direction == DIRECTION.SOUTH) {
        code(0x75, entity_t(character), "// (75) MAKE boy FACE SOUTH");
    } else if(direction == DIRECTION.WEST) {
        code(0x76, entity_t(character), "// (76) MAKE boy FACE WEST");
    }
}

fun attach_to_script(character) {
    code(0x4e, entity_t(character), "// (4e) ATTACH entity last entity ($0341) TO SCRIPT");
}

fun attach_script(character, flag, id) {
    if(flag == SCRIPT_TRIGGER.TALK) {
        if(character == CHARACTER.BOTH) {
            code(0x3d, entity_t(CHARACTER.BOY), 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
            code(0x3d, entity_t(CHARACTER.DOG), 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        } else {
            code(0x3d, entity_t(character), 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        }
    } else {
        if(character == CHARACTER.BOTH) {
            code(0x3f, entity_t(CHARACTER.BOY), 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
            code(0x3f, entity_t(CHARACTER.DOG), 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        } else {
            code(0x3f, entity_t(character), 0x0000 + flag, 0x0000 + id, "// (3f) WRITE last entity ($0341)+x68=0x300, last entity ($0341)+x66=0x181e (set script): Magmar damage");
        }
    }
}

fun destroy(character) {
    code(0x9b, entity_t(character), "// (9b) DESTROY/DEALLOC ENTITY $283e");
}
fun _destroy(character) {
    code(0x9b, calculate(character), "// (9b) DESTROY/DEALLOC ENTITY $283e");
}

fun damage(character, value, animation) {
    if(animation) {
        if(character == CHARACTER.BOTH) {
            code(0x92, entity_t(CHARACTER.BOY), param(value), "// (92) DAMAGE boy FOR 5 WITH ANIMATION");
            code(0x92, entity_t(CHARACTER.DOG), param(value), "// (92) DAMAGE boy FOR 5 WITH ANIMATION");
        } else {
            code(0x92, entity_t(character), param(value), "// (92) DAMAGE boy FOR 5 WITH ANIMATION");
        }
    } else {
        if(character == CHARACTER.BOTH) {
            code(0x93, entity_t(CHARACTER.BOY), param(value), "// (93) DAMAGE $2843 FOR 0x03e8");
            code(0x93, entity_t(CHARACTER.DOG), param(value), "// (93) DAMAGE $2843 FOR 0x03e8");
        } else {
            code(0x93, entity_t(character), param(value), "// (93) DAMAGE $2843 FOR 0x03e8");
        }
    }
}

fun store_last_entity(character) {
    code(0x19, address(character), entity_t(CHARACTER.LAST_ENTITY), "// (19) WRITE $283b = last entity ($0341)");
}

fun attribute(character, attribute, value) {
    // value = 2 bytes

    // eval("7a (2d) 29 02 (2a) 9a 84 (01 00) // (7a) WRITE *(last entity ($0341) + 0x2a) = 0x03e8");
    // eval("7a (2d) 29 6e 9a 84 (80 0c) // (7a) WRITE *(last entity ($0341) + 30) = 0x0c80");

    // eval("7a (50) 29 6e 9a 84 (68 10) // (7a) WRITE *(boy + 30) = 0x1068");
    // eval("7a (50) 29 02 (20) 9a 81 (d8) // (7a) WRITE *(boy + 0x20) = 0xd8 signed");
    // eval("7a (50) 29 02 (20) 9a (bf) // (7a) WRITE *(boy + 0x20) = 15");

    // eval("7a (51) 29 6e 9a 84 (68 10) // (7a) WRITE *(dog + 30) = 0x1068");
    // eval("7a (51) 29 02 (20) 9a 81 (d8) // (7a) WRITE *(dog + 0x20) = 0xd8 signed");

    // eval("7a 08 (8d 01) 29 (3f) 9a 82 (70) // (7a) WRITE *($23e5 + 15) = 0x70");

    // eval("7a 50 29 02 2a 9a 84 01 00 // (7a) WRITE *(last entity ($0341) + 0x2a) = 0x03e8");

    if(character == CHARACTER.BOY) {
        code(0x7a, 0x50, 0x29, 0x02, attribute, 0x9a, 0x84, 0x0000 + value, "// (7a) WRITE *(boy + 0x20) = 15");
    } else if(character == CHARACTER.DOG) {
        code(0x7a, 0x51, 0x29, 0x02, attribute, 0x9a, 0x84, 0x0000 + value, "// (7a) WRITE *(dog + 30) = 0x1068");
    } else if(character == CHARACTER.LAST_ENTITY) {
        code(0x7a, 0x2d, 0x29, 0x02, attribute, 0x9a, 0x84, 0x0000 + value, "// (7a) WRITE *(last entity ($0341) + 0x2a) = 0x03e8");
    } else {
        code(0x7a, 0x0d, character - 0x2834, 0x29, 0x02, attribute, 0x9a, 0x84, 0x0000 + value, "// (7a) WRITE *($23e5 + 15) = 0x70");
    }

    // TODO: code(0x7a, entity(character), 0x29, 0x02, attribute, 0x9a, param(value), "// (7a) WRITE *($23e5 + 15) = 0x70");
}

fun attribute_bit(character, attribute) {
    code(0xa9, entity_t(character), param(attribute), "// (a9) UNTRACED INSTR modifies entity dog bits 0x20");
}

fun special_script(script, id) {
    if(script == SPECIAL_SCRIPTS.LOOTING) {
        code(0x3f, 0xb1, 0x40, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+0=0x40, $0eac+0=0x172b (unknown): Unknown 0eac+0 (set in lots of places)?");
    } else if(script == SPECIAL_SCRIPTS.REVEALER) {
        code(0x3f, 0xb2, 0x01, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+2=0x01, $0eac+2=0x1959 (unknown): Unnamed Short script 0x1959?");
    } else if(script == SPECIAL_SCRIPTS.LEVITATE) {
        code(0x3f, 0xb3, 0x01, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+4=0x01, $0eac+4=0x17b5 (unknown): Unnamed Short script 0x17b5?");
    } else if(script == SPECIAL_SCRIPTS.SELECT_PRESSED) {
        code(0x3f, 0xb4, 0x01, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+6=0x01, $0eac+6=0x1878 (unknown): Unnamed Short script 0x1878?");
    } else if(script == SPECIAL_SCRIPTS.WINGS) {
        code(0x3f, 0xb5, 0x01, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+8=0x01, $0eac+8=0x178e (unknown): BBM Wings?");
    } else if(script == SPECIAL_SCRIPTS.UNKNOWN) {
        code(0x3f, 0xb6, 0x01, 0x00, 0x0000 + id, "// (3f) WRITE $0ea2+6=0x01, $0eac+6=0x1878 (unknown): Unnamed Short script 0x1878?");
    }
}

fun show_status_bar(show) {
    if(show == True) {
        call(ADDRESS.STATUS_BAR_SHOW);
    } else {
        call(ADDRESS.STATUS_BAR_HIDE);
    }
}

fun show_shop(ingredient_id) {
    // call_id(ADDRESS_ID.NPC_DIALOGUE_START);
    call_id(ADDRESS_ID.OPEN_TEXTBOX_DEFAULT);
    <0x2459> = ingredient_id;
    call_id(ADDRESS_ID.DIALOGUE_BUY_INGREDIENT);
    // call_id(ADDRESS_ID.NPC_DIALOGUE_STOP);
}

fun save(slot, location) { // buggy
    <0x2449> = slot; // ?
    code(0xa3, location, "// (a3) CALL 'Actual save dialog' (0x4e)");
}

// complex scripts

fun loot(flag, object_id, reward, amount, next) {
    if!(flag) {
        <0x2391> = reward;

        <0x2395> = object_id;

        if(reward < 0x0100) { 
            if(amount > 0x00) {
                <0x2393> = amount;
            }
        } else {
            if(amount > 0x01) {
                <0x2461> = amount - 0x01;
            }    
        }

        call_id(0x39);
        
        if(next > 0x00) {
            <0x2461> = next - 0x01;
        }

        if(<0x22ea, 0x01>) {
            set(flag);
        }
    }
}

fun axe2_wall(flag, object) {
    if(<CHARACTER.ACTIVE> == <CHARACTER.BOY>) {
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_ALL.SLASH_2);

        if(<0x235f>&0xff >= 0x0c) {
            if(<0x2360>&0xff == 0x02) {
                add_dynamic_enemy_with_flags(ENEMY.PLACEHOLDER, <CHARACTER.BOY>[ATTRIBUTE.X] - 0x10, <CHARACTER.BOY>[ATTRIBUTE.Y] - 0x10, 0x00);
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);

                add_dynamic_enemy_with_flags(ENEMY.PLACEHOLDER, <CHARACTER.BOY>[ATTRIBUTE.X] + 0x20, <CHARACTER.BOY>[ATTRIBUTE.Y] - 0x20, 0x00);
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);

                sleep(0x04);

                sound(0x58);

                object = 0x01;
                set(flag);
            }
        }
    }
}

fun throw(throwable, source, source_x, source_y, x, y, arc) {
    // (b5) REVEAL ENTITY?? args 26 $2869 $24ab + 20 $24af - 0x30 0 signed arg0 signed arg2 0x3c // thraxx eye
    // (b5) REVEAL ENTITY?? args 26 boy $2890 $2894 0 $2898 $289a 30 // aegis
    // (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20 // vigor mob
    // (b5) REVEAL ENTITY?? args 26 boy $2839 $283b 0 $283d - 8 $283f 1 // professor
    // (b5) REVEAL ENTITY?? args 26 boy $24ab $24af - 0x28 0 $2861 $2863 - 16 0x78 // boss rush

    // (b5) REVEAL ENTITY?? args 28 boy signed arg0 signed arg2 0 0x32 0x32 0 // bomb 1
    // (b5) REVEAL ENTITY?? args 28 entity attached to script? signed arg0 signed arg2 0 0x32 0x28 0 // bomb 2

    // (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20 // vigor mob
    // (b5) REVEAL ENTITY?? args 30 entity attached to script? signed arg0 signed arg2 0x0140 signed arg0 signed arg2 + 0x20 0 // carltron missile
    // (b5) REVEAL ENTITY?? args 28 entity attached to script? signed arg10 signed arg12 0 0x46 0x32 0 // carltron stomp

    code(0xb5, entity_t(throwable), entity_t(source), entity_t(source_x), entity_t(source_y), param(0x0a), x, y, param(arc), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
}

// DEBUG

@install()
fun debug_boy() {
    MEMORY.STRING_PARAMETER_1 = <CHARACTER.BOY>[ATTRIBUTE.X] / 0x08;
    MEMORY.STRING_PARAMETER_2 = <CHARACTER.BOY>[ATTRIBUTE.Y] / 0x08;

    subtext(string("boy = [0xa1]/[0xa2][END]"));
}

fun debug_memory(x, y) {
    MEMORY.STRING_PARAMETER_1 = x;
    MEMORY.STRING_PARAMETER_2 = y;

    subtext(string("memory = [0xa1] / [0xa2][END]"));
}

// CINEMATICS

@install()
fun pit_act2_between(height) {
    if(False) { // [0x05] Antiqua - Between 'mids and halls
        call(0x98b4b5);
    } else {
        control(CHARACTER.NONE);

        <0x24ab> = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
        <0x24af> = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];

        <0x249d> = 0x0128;
        <0x249f> = height;

        animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.FALL_2);
        animate(CHARACTER.DOG, ANIMATION_MODE.LOOP, ANIMATION_DOG.ACT2_FALL_4);

        yield();

        <0x23db> = 0x0020;
        _teleport(CHARACTER.BOY, <0x24ab> + 0x08, <0x24af>);
        yield();
        <0x23db> = 0x0020;
        _teleport(CHARACTER.DOG, <0x24ab> - 0x08, <0x24af>);
        yield();

        while(<0x24af> < <0x249f>) {
            <0x23db> = 0x0020;
            _teleport(CHARACTER.BOY, <0x24ab> + 0x08, <0x24af>);
            yield();
            <0x23db> = 0x0020;
            _teleport(CHARACTER.DOG, <0x24ab> - 0x08, <0x24af>);
            yield();

            <0x24af> = <0x24af> + 0x02;
        }

        // animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_ALL.INVISIBLE);
        // animate(CHARACTER.DOG, ANIMATION_MODE.LOOP, ANIMATION_ALL.INVISIBLE);
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.INVISIBLE);
        attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.INVISIBLE);
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
        attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.LOCK_IN_PLACE);
        yield();

        set(<0x22ed, 0x80>);
    }
}

@install()
fun pit_act3_sewers() {
    if(True) { // [0x7a] Gothica - Ivor Tower Sewers Exterior (landing spot)
        call(0x98b4b5);
    } else { // buggy
        control(CHARACTER.NONE);
        
        <0x24ab> = <0x2421> lshift 0x04;
        <0x24af> = <0x2423> lshift 0x04;

        if(<CHARACTER.ACTIVE> == CHARACTER.BOY) {
            animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.FALL_2);
        } else {
            animate(CHARACTER.DOG, ANIMATION_MODE.LOOP, ANIMATION_DOG.ACT3_FALL_2);
        }

        <0x24a7> = 0xfffe;

        while(<0x24a7> < 0x22) {
            <0x24af> = <0x24af> + <0x24a7>;
            <0x24ab> = <0x24ab> + 0x10;

            _teleport(CHARACTER.ACTIVE, <0x24ab> rshift 0x04, <0x24af> rshift 0x04);
            yield();

            <0x24a7> = <0x24a7> + 0x01;
        }

        if(<CHARACTER.ACTIVE> == CHARACTER.BOY) {
            animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.FALL_1);
        } else {
            animate(CHARACTER.DOG, ANIMATION_MODE.LOOP, ANIMATION_DOG.ACT3_SIT);
        }

        <0x24a7> = 0xfffe;

        while(<0x24a7> < 0x22) {
            <0x24af> = <0x24af> + <0x24a7>;
            <0x24ab> = <0x24ab> + 0x10;

            _teleport(CHARACTER.ACTIVE, <0x24ab> rshift 0x04, <0x24af> rshift 0x04);
            yield();

            <0x24a7> = <0x24a7> + 0x01;
        }

        if(<CHARACTER.ACTIVE> == CHARACTER.BOY) {
            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.FALL_1);
        } else {
            animate(CHARACTER.DOG, ANIMATION_MODE.ONCE, ANIMATION_DOG.ACT3_SIT);
        }
    }
}

fun door_act4_airlock(x, y, door) {
    walk(CHARACTER.ACTIVE, WALK_TYPE.TILE_ABSOLUTE_DIRECT, x, y, True);

    face(CHARACTER.ACTIVE, DIRECTION.SOUTH);
    door = 0x7e;
    sleep(0x14);

    <0x24a1> = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
    <0x24a3> = <CHARACTER.ACTIVE>[ATTRIBUTE.Y] + 0x30;
    while(<CHARACTER.ACTIVE>[ATTRIBUTE.Y] < <0x24a3>) {
        <CHARACTER.ACTIVE>[ATTRIBUTE.Y] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y] + 0x02;
        yield();
    }

    door = 0x00;
    sleep(0x10);
}

fun scene_raptors_death_escape() {
    control(CHARACTER.NONE);

    // boy collapses
    animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.SLEEP_UP);

    eval("18 1f 02 50 29 6a 1a d5 // (18) WRITE $2477 = *(boy + 26)");
    eval("18 21 02 50 29 6c 1a d5 // (18) WRITE $2479 = *(boy + 28)");

    eval("18 1f 02 08 1f 02 29 02 20 9a // (18) WRITE $2477 = $2477 + 0x20");

    eval("73 d1 88 1f 02 88 21 02 // (73) Make dog walk to $2477,$2479 directly");

    // dog walks to boy and looks west
    wait(CHARACTER.DOG);
    face(CHARACTER.DOG, DIRECTION.WEST);
    sleep(0x3c);

    // dog drags boy east
    animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.DRAGGED);
    animate(CHARACTER.DOG, ANIMATION_MODE.LOOP, ANIMATION_DOG.ACT1_DRAGGING);

    eval("43 d0 08 1f 02 29 02 20 9b 88 21 02 // (43) Teleport boy to x:$2477 - 0x20, y:$2479");
    eval("43 d1 88 1f 02 88 21 02 // (43) Teleport dog to x:$2477, y:$2479");
    sleep(0x0f);

    eval("18 1f 02 08 1f 02 29 32 9a // (18) WRITE $2477 = $2477 + 2");

    // repeat 19 times
    eval("1a 00 12 00 29 31 9a // (1a) WRITE SCRIPT arg0 = signed arg0 + 1");
    eval("09 12 00 29 62 9f 07 00 // (09) IF (signed arg0 > 18) == FALSE THEN SKIP 7 (to 0x939069)");

    // fade out
    call(0x93907e);
    eval("04 02 00 // (04) SKIP 2 (to 0x93906b)");
    eval("05 cb // (05) SKIP -53 (to 0x939034)");

    fade_out();
}

fun explode_boss(x, y, radius) {
    <0x23bb> = x;
    <0x23b9> = y;
    
    code(0xb4, 0x03, entity_t(0x23bb), entity_t(0x23b9), 0xb0 + radius, address(0x92df1c), "// (b4) CALL Absolute (24bit) script 0x92df1c ('Unnamed ABS script 0x92df1c') WITH 3 ARGS $23b9, $23bb, 5");

    sleep(0xf0);
    call(ADDRESS.FADE_TO_WHITE);

    call(ADDRESS.EXPLODE_BOSS_STOP);
    call(0x92d752);
}
fun explode_last_entity(radius) {
    store_last_entity(0x2834);

    eval("18 45 02 0d 00 00 29 6a 1a d5 // (18) WRITE $249d = *($2834 + 26)");
    eval("18 47 02 0d 00 00 29 6c 1a d5 // (18) WRITE $249f = *($2834 + 28)");
    
    code(0xb4, 0x03, entity_t(0x249d), entity_t(0x249f), param(radius), address(0x92df1c), "// (b4) CALL Absolute (24bit) script 0x92df1c ('Unnamed ABS script 0x92df1c') WITH 3 ARGS $23b9, $23bb, 5");

    sleep(0xf0);
    call(ADDRESS.FADE_TO_WHITE);

    call(ADDRESS.EXPLODE_BOSS_STOP);
    call(0x92d752);
}

fun dog_fountain() {
    call(0x96d5d7);
}

// EXPERIMENTAL

fun attach_sterling_script_to_last_entity() {
    store_last_entity(0x283d);
    
    call(0x9997a7); // (07) CALL 0x9997a7 Sterling battle over, Gomi introduction
}

fun crash_land(character) {
    if(character == CHARACTER.BOY) {
        <CHARACTER.BOY>[0x1e] = 0x1068;
        animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.FALL_2);
        sleep(0x60);
        <CHARACTER.BOY>[0x20] = 0x10;
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
        sleep(0x10);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
        sleep(0x10);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.KNEEL);
    } else if(character == CHARACTER.DOG) {
        <CHARACTER.DOG>[0x1e] = 0x1068;
        animate(CHARACTER.DOG, ANIMATION_MODE.LOOP, ANIMATION_DOG.ACT1_FALL1);
        sleep(0x60);
        <CHARACTER.DOG>[0x20] = 0x10;
        animate(CHARACTER.DOG, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);
        sleep(0x10);
        animate(CHARACTER.DOG, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_DOG.ACT1_FALL1);
        sleep(0x10);
        animate(CHARACTER.DOG, ANIMATION_MODE.ONCE, ANIMATION_DOG.ACT1_SIT);
    } else if(character == CHARACTER.BOTH) {
        <CHARACTER.BOY>[0x1e] = 0x1068;
        animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.FALL_2);
        <CHARACTER.DOG>[0x1e] = 0x1068;
        animate(CHARACTER.DOG, ANIMATION_MODE.LOOP, ANIMATION_DOG.ACT1_FALL1);
        sleep(0x60);
        <CHARACTER.BOY>[0x20] = 0x10;
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
        <CHARACTER.DOG>[0x20] = 0x10;
        animate(CHARACTER.DOG, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);
        sleep(0x10);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
        animate(CHARACTER.DOG, ANIMATION_MODE.ONCE, ANIMATION_DOG.ACT1_FALL1);
        sleep(0x10);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.KNEEL);
    }
}

fun sand_tunnel() {
    // TODO: extract script, add parameters
    call(0x939fd2);
}

fun bonfire_activate(x, y, id) {
    // add_enemy_with_flags(ENEMY.LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE_IMORTAL);
    // attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, 0x181e);
    // entity_script_controlled(CHARACTER.LAST_ENTITY);

    add_enemy_with_flags(ENEMY.LANTERN_LIGHT_RED, 0x00, 0x00, FLAG_ENEMY.INACTIVE);
    <CHARACTER.LAST_ENTITY>[0x1a] = x;
    <CHARACTER.LAST_ENTITY>[0x1c] = y;
    attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, id);
}

fun bonfire_dialog() {
    control(CHARACTER.NONE);
    color_filter(0x84, 0x90);
    sleep(0x10);
    animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.SLEEP_DOWN);
    color_filter(0x84, 0x66);
    sleep(0x10);
    color_filter(0x55, 0x55);
    animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.SLEEP_UP);
    yield();

    // question(string("[0x96][0x8b]test[LF][0x8b]test[LF][0x8b]test[END]"));

    color_filter(0x84, 0x90);
    sleep(0x10);
    color_filter(0x84, 0x66);
    sleep(0x10);
    color_filter(0x00, 0x00);
}

fun cannonball() {
    add_enemy_with_flags(0x6a, 0x1e, 0x21, 0x0000); // ENEMY.MAGMAR
    store_last_entity(0x2846);
    animate(0x2846, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.MAGMAR_ROLL);
    
    while(0x01) {
        sleep(0x70);

        teleport(0x2846, 0x1e, 0x21);
    }
}

fun homing_cannonball() {
    add_enemy_with_flags(0x6a, 0x1e, 0x21, 0x0000); // ENEMY.MAGMAR
    store_last_entity(0x2846);
    animate(0x2846, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.MAGMAR_ROLL);
    
    while(0x01) {
        eval("18 21 02 50 29 6c 1a d5 // (18) WRITE $2479 = *(boy + 28)");
        eval("18 21 02 08 21 02 29 3f 9b // (18) WRITE $2477 = $2477 + 2");

        eval("18 1f 02 08 1f 02 29 32 9a // (18) WRITE $2477 = $2477 + 2");

        // teleport(0x2846, 0x1e, 0x21);
        code(0x43, entity_t(0x2846), entity_t(0x2477), entity_t(0x2479), "// (42) Teleport $2835 to a7, b9");

        sleep(0x02);
    }
}

fun drag(enemy, x, y) {
    <0x23b9> = x;
    <0x23bb> = y;

    // eval("af 04 8d 02 00 88 61 01 88 63 01 e0 1e cc 03 // (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");

    code(0xaf, 0x04, entity_t(enemy), entity_t(0x23b9), entity_t(0x23bb), 0xd0 + 0x14, address(0x99cc1e), "// (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");
}

fun heel(character) {
    eval("18 61 01 50 29 6a 1a d5 // (18) WRITE $23b9 = boy.x");
    eval("18 63 01 50 29 6c 1a d5 // $23bb = boy.y");

    code(0xaf, 0x04, entity_t(character), entity_t(0x23b9), entity_t(0x23bb), 0xd0 + 0x14, address(0x99cc1e), "// (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");
}
fun _heel(character, x, y) {
    code(0xaf, 0x04, entity_t(character), calculate(x), calculate(y), 0xd0 + 0x14, address(0x99cc1e), "// (af) CALL Absolute (24bit) script 0x99cc1e ('Unnamed ABS script 0x99cc1e') WITH 4 ARGS $2836, $23b9, $23bb, 20");
}

fun test_stuff() {
    unlock(ITEM.INGREDIENTS);

    unlock(ITEM.REVEALER);
    unlock(ITEM.LEVITATE);

    select_alchemy();
}

fun drop_bomb(costs_ingredients) {
    if(costs_ingredients) {
        if(MEMORY.IRON  & 0xff < 0x04) {
            if(False) {
                MEMORY.STRING_PARAMETER_1 = MEMORY.IRON & 0xff;
                MEMORY.STRING_PARAMETER_2 = 0x04;

                subtext(string("not enought iron([0xa1]<[0xa2])[END]"));
            }

            end();
        }
        if(MEMORY.GREASE  & 0xff < 0x02) {
            if(False) {
                MEMORY.STRING_PARAMETER_1 = MEMORY.GUNPOWDER & 0xff;
                MEMORY.STRING_PARAMETER_2 = 0x02;

                subtext(string("not enought gunpowder([0xa1]<[0xa2])[END]"));
            }
            end();
        }

        MEMORY.IRON & 0xff = MEMORY.IRON & 0xff - 0x04;
        MEMORY.GUNPOWDER & 0xff = MEMORY.GUNPOWDER & 0xff - 0x02;
    }

    animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.LOOT);

    add_dynamic_enemy_with_flags(ENEMY.BOMB, <CHARACTER.BOY>[0x1a], <CHARACTER.BOY>[0x1c], 0x0000);
    attach_to_script(CHARACTER.LAST_ENTITY);
    attach_script(CHARACTER.SCRIPT_OWNER, SCRIPT_TRIGGER.DEATH, ADDRESS_ID.BOMB_EXPLOSION);

    sleep(0x80);

    damage(CHARACTER.SCRIPT_OWNER, 0x270f);

    sleep(0x40);
    
    destroy(CHARACTER.SCRIPT_OWNER);
}

fun isaac_tear(costs_ingredients) {
    if(costs_ingredients) {
        if(MEMORY.WATER  & 0xff < 0x04) {
            if(False) {
                MEMORY.STRING_PARAMETER_1 = MEMORY.WATER & 0xff;
                MEMORY.STRING_PARAMETER_2 = 0x04;

                subtext(string("not enought water([0xa1]<[0xa2])[END]"));
            }

            end();
        }

        MEMORY.WATER & 0xff = MEMORY.WATER & 0xff - 0x04;
    }
    
    if(<CHARACTER.BOY>[ATTRIBUTE.FACE_DIRECTION] == 0x00) {
        code(0xb5, param(THROWABLE.ONION), entity_t(CHARACTER.BOY), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] - 0x15), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] - 0x60), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
    } else if(<CHARACTER.BOY>[ATTRIBUTE.FACE_DIRECTION] == 0x04) {
        code(0xb5, param(THROWABLE.ONION), entity_t(CHARACTER.BOY), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] - 0x15), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + 0x60), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
    } else if(<CHARACTER.BOY>[ATTRIBUTE.FACE_DIRECTION] == 0x08) {
        code(0xb5, param(THROWABLE.ONION), entity_t(CHARACTER.BOY), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] - 0x15), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + 0x60), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
    } else {
        code(0xb5, param(THROWABLE.ONION), entity_t(CHARACTER.BOY), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] - 0x15), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] - 0x60), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
    }
}

@install()
fun mario_yump() {
    <0x2838> = <CHARACTER.BOY>[ATTRIBUTE.X];
    <0x283a> = <CHARACTER.BOY>[ATTRIBUTE.Y];
    <CHARACTER.BOY>[ATTRIBUTE.JUMP_HEIGHT] = 0x20;
    attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.NO_CLIP);
    set(FLAG.IN_ANIMATION);

    sleep(0x35);
    // animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.FALL_2);
    control(CHARACTER.NONE);
    sleep(0x05);

    code(0xb5, param(THROWABLE.BOMB_EXPLOSION), entity_t(CHARACTER.BOY), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x00), param(0x20), param(0x20), param(0x00), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
    // subtext(string("bang[END]"));
    sound(SOUND.HEAVY_IMPACT);
    // debug_memory(<CHARACTER.BOY>[ATTRIBUTE.FACE_DIRECTION], <CHARACTER.BOY>[ATTRIBUTE.FACE_DIRECTION]);
    
    <0x2834> = <CHARACTER.BOY>[ATTRIBUTE.X];
    <0x2836> = <CHARACTER.BOY>[ATTRIBUTE.Y];

    if(<CHARACTER.BOY>[ATTRIBUTE.FACE_DIRECTION] == 0x00) {
        walk_relative(CHARACTER.BOY, WALK_TYPE.COORDINATE_RELATIVE, 0x00, -0x01, False);
        face(CHARACTER.BOY, DIRECTION.NORTH);
    } else if(<CHARACTER.BOY>[ATTRIBUTE.FACE_DIRECTION] == 0x04) {
        walk_relative(CHARACTER.BOY, WALK_TYPE.COORDINATE_RELATIVE, 0x01, 0x00, False);
        face(CHARACTER.BOY, DIRECTION.EAST);
    } else if(<CHARACTER.BOY>[ATTRIBUTE.FACE_DIRECTION] == 0x08) {
        walk_relative(CHARACTER.BOY, WALK_TYPE.COORDINATE_RELATIVE, 0x00, 0x01, False);
        face(CHARACTER.BOY, DIRECTION.SOUTH);
    } else {
        walk_relative(CHARACTER.BOY, WALK_TYPE.COORDINATE_RELATIVE, -0x01, 0x00, False);
        face(CHARACTER.BOY, DIRECTION.WEST);
    }
    sleep(0x03);

    if((<0x2834> == <CHARACTER.BOY>[ATTRIBUTE.X]) && (<0x2836> == <CHARACTER.BOY>[ATTRIBUTE.Y])) {
        <CHARACTER.BOY>[ATTRIBUTE.X] = <0x2838>;
        <CHARACTER.BOY>[ATTRIBUTE.Y] = <0x283a>;

        damage(CHARACTER.BOY, 0x01, True);
    }

    // animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_ALL.DEFAULT);
    attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.CLIP);
    control(CHARACTER.BOTH);
    // walk_relative(CHARACTER.BOY, WALK_TYPE.COORDINATE_RELATIVE, 0x00, 0x00, False);
    // debug_memory(<0x2834>, <CHARACTER.BOY>[ATTRIBUTE.X]);
    // sleep(0x30);
    // debug_memory(<0x2836>, <CHARACTER.BOY>[ATTRIBUTE.Y]);
}

fun windwalker_rocket() {
    // code(0xb5, param(THROWABLE.BEACH_BALL), entity_t(CHARACTER.BOY), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + 0x10), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + 0xff), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
    code(0xb5, param(THROWABLE.ONION), entity_t(CHARACTER.BOY), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + 0x10), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + 0xff), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
    // code(0xb5, param(THROWABLE.MISSILE), entity_t(CHARACTER.BOY), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + 0x10), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + 0xff), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
}

fun test_map_palettes() {
    <0x2437> = 0x0000;
    sleep(0x30);
    <0x2437> = 0x0001;
    sleep(0x30);
    <0x2437> = 0x0002;
    sleep(0x30);
    <0x2437> = 0x0003;
    sleep(0x30);
    <0x2437> = 0x0004;
    sleep(0x30);
    <0x2437> = 0x0005;
    sleep(0x30);
    <0x2437> = 0x0006;
    sleep(0x30);
    <0x2437> = 0x0007;
    sleep(0x30);
    <0x2437> = 0x0008;
    sleep(0x30);
    <0x2437> = 0x0009;
    sleep(0x30);
    <0x2437> = 0x000a;
    sleep(0x30);
    <0x2437> = 0x000b;
    sleep(0x30);
    <0x2437> = 0x000c;
    sleep(0x30);
    <0x2437> = 0x000d;
    sleep(0x30);
    <0x2437> = 0x000e;
    sleep(0x30);
    <0x2437> = 0x000f;
    sleep(0x30);
}
