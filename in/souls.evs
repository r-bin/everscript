#memory(
    string_key(0x0546)..string_key(0x232b), // last half of string keys
    function_key(0x0000)..function_key(0x232b), // TODO: all function keys?

    0x300000..0x3fffff, // extension

    // reserved: <0x23b9>
    <0x2272>..<0x2558>,

    <0x2834>..<0x28ff>
)
#include("in/core.evs")

#patch(
    // "skip_intro",
    // "save_file_growth",
    "no_alchemy_xp",

    // asm
    "debug_menu__generic", // uses 0x3f0000…???
    "_hook_input", // 0x3f0000…0x310000
        "hotkeys", // uses 0x3f00000…???
        // "room_timer", // uses 0x300000…???
    // "_hook_trigger",
)

group non_maps() {
    group strings() {
        @install(0x4713f)
        fun string_revealer_entity_name() {
            'SECRET[END]'; // Bridge
        }

        @install(0x46852)
        fun string_enemy_spell_name_fireball() {
            '[END]'; // Fireball
        }
        @install(0x46866)
        fun string_enemy_spell_name_flash() {
            '[END]'; // Flash
        }
    };

    group enemy_properties() {
        @install(0x8eb6a8)
        fun boy_proc() {
            code(ATTACK_PROC.DEFAULT, "// boy proc"); // disables weapon xp
        }
        @install(0x8eb6f2)
        fun dog_proc() {
            code(ATTACK_PROC.DEFAULT, "// dog proc"); // disables weapon xp
        }

        @install(0x8ed62a)
        fun flower_purple_proc() {
            code(ATTACK_PROC.VORE, "// flower purple proc");
        }

        // @install(0x8ec7b6)
        // fun tumblingweed_proc() {
        //     code(0x0c, "// flower purple proc value");
        // }
    };

    // group alchemy_ingredients() {
    //     @install(0x04601f + 0x04 * (ALCHEMY_INDEX.BARRIER / 0x02))
    //     fun barrier() {
    //         code(INGREDIENT.DRY_ICE, INGREDIENT.DRY_ICE, 0x01, 0x01, "// barrier ingredients");
    //     }
    // };

    // group armor() {
    //     @install(0x043B02 + 0x0a * (ARMOR_INDEX.ARMOR_1_1 - 0x01))
    //     fun barrier() {
    //         code(0x0005, 0x0005, "// grass vest armor");
    //     }
    // };

    // group weapon() {
    //     @install(0x0438E6 + 0x24 * (WEAPON_INDEX.SWORD_1 / 0x02 - 0x01))
    //     fun barrier() {
    //         code(0x0a, "// bone crusher damage (second byte is being reused by the following word)");
    //     }
    // };

    group helper() {
        fun fake_loot() {
            animate(BOY, ONCE, ANIMATION_BOY.LOOT);
            sleep(0d15);
            sound(CLICK_3);
            sleep(0d15);
        }

        fun fake_loot_gourd() {
            sound(CLICK_3);
        }

        fun fake_b() {
            animate(ACTIVE, ONCE, ANIMATION_ALL.SLASH_1);
        }

        @install()
        @async()
        fun crash_both() {
            <DOG>[X] -= 0x20;
            <DOG>[Y] -= 0x20;

            crash_land(BOTH);
        }

        fun character_selection(character:CHARACTER) {
            if(character == CHARACTER.BOY) {
                available(BOY);
                teleport(DOG, 0x00, 0x00);
            } else if(character == CHARACTER.DOG) {
                available(DOG);
                teleport(BOY, 0x00, 0x00);

                attach_script(DOG, DEATH, reference(boy_death));
            }
        }

        fun branch_lady(x, y, id) {
            add_enemy(VILLAGER_2_4, x, y);
            entity_script_controlled(LAST_ENTITY);
            face(LAST_ENTITY, WEST);
            attach_script(LAST_ENTITY, TALK, id);
            <LAST_ENTITY>[PALETTE] = 0x50;
        }

        @install()
        fun bomb_wall_triggered() {
            heal(SCRIPT_OWNER, 0x00, False);

            animate(SCRIPT_OWNER, ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);
            object[<SCRIPT_OWNER>[GENERAL_PURPOSE] rshift 0x08] = <SCRIPT_OWNER>[GENERAL_PURPOSE] & 0xff;

            sleep(0x50);

            destroy(SCRIPT_OWNER);
        }
        fun bomb_wall_trigger(object, value, x, y) {
            // add_enemy_with_flags(THRAXX_HEART, x, y, 0x0000);
            add_enemy_with_flags(FACE_ENTITY, x, y, 0x0004);
            // attribute(LAST_ENTITY, NO_CLIP, True);
            // <LAST_ENTITY>[HP] = object;
            // <LAST_ENTITY>[0x15] = 0x01;
            
            attach_script(LAST_ENTITY, DAMAGE, reference(bomb_wall_triggered));
            <LAST_ENTITY>[GENERAL_PURPOSE] = 0x0000 + ((object lshift 0x8) + value);
            // <0x2834> = <LAST_ENTITY>;
        }

        
        fun error_walk_back(exit_direction:DIRECTION) {
            if(exit_direction == DIRECTION.NORTH) {
                walk(ACTIVE, COORDINATE_RELATIVE, 0x00, -0x02, ACTIVE);
            } else if(exit_direction == DIRECTION.EAST) {
                walk(ACTIVE, COORDINATE_RELATIVE, 0x02, 0x00, ACTIVE);
            } else if(exit_direction == DIRECTION.SOUTH) {
                walk(ACTIVE, COORDINATE_RELATIVE, 0x00, 0x02, ACTIVE);
            } else if(exit_direction == DIRECTION.WEST) {
                walk(ACTIVE, COORDINATE_RELATIVE, -0x02, 0x00, ACTIVE);
            }
        }
        fun error_contraption(exit_direction:DIRECTION) {
            subtext("Locked by some contraption.");

            error_walk_back(exit_direction);
        }
        fun error_wrong_side(exit_direction:DIRECTION) {
            subtext("Does not open from this side.");

            error_walk_back(exit_direction);
        }
    };

    group souls_helper() {
        enum BUTTON_MAP {
            NORMAL = 0x00,

            BOMBS = 0x01,
            AIRSHIP = 0x02,
            ISAAC = 0x03,
            MARIO = 0x04,
            PUPPER = 0x05,
        }
        enum DEBUG_MENU_ENTRY {
            BOMBS = 0x01,
            ISAAC = 0x02,
            MARIO = 0x03,
            PUPPER = 0x04,
        }

        enum SOULS_MEMORY {
            INIT = flag(),
            INTRO_WATCHED = flag(),

            DEMO_MODE = False,
            WITH_DEBUG_ENTITIES = True,
            WITH_INTRO = False,
            WITH_STARTING_CLASS = False,
            WITH_WEATHER = True,
            WITH_TRASH_ENEMIES = True,
            WITH_SOULS_ON_DEATH = True,

            MAP_VARIANT = <0x23b9>, // TODO: hardcoded

            // boy dust
            DUST_ENTITY = memory(),
            DUST_DROP_X = memory(),
            DUST_DROP_Y = memory(),
            DUST_DROP_MAP = memory(),
            DUST_DROP_VARIANT = memory(),
            DUST_UNREACHABLE = flag(),

            // wings
            WINGS_BLOCKED = flag(),
            
            // items
            ESTUS_CHARGES = memory(),
            ESTUS_SHARDS = memory(),
            ESTUS_CHARGES_INIT = 0x01,

            RING_CAT = flag(),

            ORB_SWORD =  memory(),
            ORB_AXE =  memory(),
            ORB_SPEAR =  memory(),
            
            // button map
            BUTTON_MAP = memory(), // TODO: should be memory_tmp()
            MENU_CHOICE = memory(),
            BOMB_ENABLED = flag(),
            MARIO_YUMP_ENABLED = flag(),
            PUPPER_ENABLED = flag(),
            ISAAC_TEARS_ENABLED = flag(),
            DEBUG_MENU_BUTTON_1 = memory(),
            DEBUG_MENU_BUTTON_2 = memory(),
            DEBUG_MENU_BUTTON_3 = memory(),
            DEBUG_MENU_BUTTON_4 = memory(),

            ///////////////////////////////////////////////////////
            // bonfire
            ///////////////////////////////////////////////////////

            BONFIRE_FIRST_TRIGGER = flag(),
            BONFIRE_X = memory(),
            BONFIRE_Y = memory(),
            BONFIRE_MAP = memory(),
            BONFIRE_VARIANT = memory(),
            BONFIRE_TELEPORT_REQUIRED = flag(),

            // center
            BONFIRE_INBETWIXX = flag(),

            ///////////////////////////////////////////////////////
            // bosses
            ///////////////////////////////////////////////////////

            PROGRESS_COUNTER = memory(),
            BOSSES_DEFEATED_COUNTER = memory(),
            COLLECTIBLE_COUNTER = memory(),

            // west
            DEAD_MONSTRO = flag(),
            DEAD_DARK_ONE = flag(),

            // east
            DEAD_PIT_EGG = flag(),

            DEAD_VOLCANO_HYDRA = flag(),
            DEAD_ARENA_RADAHN = flag(),
            DEAD_STOMPY_RADAHN = flag(),
            
            DEAD_ARENA_MOSQUITO = flag(),

            DEAD_TEMPLE_MINITAUR = flag(),
            DEAD_TAVERN_BOXERS = flag(),

            DEAD_NARIS = flag(),
        }

        fun asign_debug_button_function(flag, feature) {
            if(flag) {
                arg[0x00] += 0x01;

                if(
                    (SOULS_MEMORY.DEBUG_MENU_BUTTON_1 != feature)
                    && (SOULS_MEMORY.DEBUG_MENU_BUTTON_2 != feature)
                    && (SOULS_MEMORY.DEBUG_MENU_BUTTON_3 != feature)
                    && (SOULS_MEMORY.DEBUG_MENU_BUTTON_4 != feature)
                ) {
                    if(SOULS_MEMORY.DEBUG_MENU_BUTTON_1 == 0x0000) {
                        SOULS_MEMORY.DEBUG_MENU_BUTTON_1 = feature;
                    } else if(SOULS_MEMORY.DEBUG_MENU_BUTTON_2 == 0x0000) {
                        SOULS_MEMORY.DEBUG_MENU_BUTTON_2 = feature;
                    } else if(SOULS_MEMORY.DEBUG_MENU_BUTTON_3 == 0x0000) {
                        SOULS_MEMORY.DEBUG_MENU_BUTTON_3 = feature;
                    } else if(SOULS_MEMORY.DEBUG_MENU_BUTTON_4 == 0x0000) {
                        SOULS_MEMORY.DEBUG_MENU_BUTTON_4 = feature;
                    }
                }
            }
        }

        @install()
        fun update_debug_menu() {
            if(False) {
                SOULS_MEMORY.DEBUG_MENU_BUTTON_1 = 0x0000;
                SOULS_MEMORY.DEBUG_MENU_BUTTON_2 = 0x0000;
                SOULS_MEMORY.DEBUG_MENU_BUTTON_3 = 0x0000;
                SOULS_MEMORY.DEBUG_MENU_BUTTON_4 = 0x0000;
            }

            asign_debug_button_function(SOULS_MEMORY.BOMB_ENABLED, DEBUG_MENU_ENTRY.BOMBS);
            asign_debug_button_function(SOULS_MEMORY.ISAAC_TEARS_ENABLED, DEBUG_MENU_ENTRY.ISAAC);
            asign_debug_button_function(SOULS_MEMORY.MARIO_YUMP_ENABLED, DEBUG_MENU_ENTRY.MARIO);
            asign_debug_button_function(SOULS_MEMORY.PUPPER_ENABLED, DEBUG_MENU_ENTRY.PUPPER);

            MEMORY.DEBUG_MENU_COUNT = arg[0x00];
        }
        @install()
        fun debug_menu_select(index) {
            nop();
        }

        @install()
        fun souls_boss_defeated() {
            SOULS_MEMORY.BOSSES_DEFEATED_COUNTER += 0x01;
            SOULS_MEMORY.PROGRESS_COUNTER += 0x01;

            fanfare_boss();

            // sleep(0x50);
            subtext("Enemy Felled");
            // TODO: overwritten by "received xxx talons" subtext

            if!(FLAG.JAGUAR_RING) {
                subtext("Jaguar Ring");
                reward(JAGUAR_RING);
            }
        }

        @install()
        fun upgrade_estus() { // TODO: test
            dialog("hi");
            
            if(SOULS_MEMORY.ESTUS_SHARDS > 0x00) {
                dialog("estus upgrade?[CHOICE]yes[CHOICE]no");

                if(MEMORY.QUESTION_ANSWER == 0x00) {
                    SOULS_MEMORY.ESTUS_SHARDS -= 0x01;

                    SOULS_MEMORY.ESTUS_CHARGES += 0x01;
                }
            }
        }

        fun dust_unreachable(x, y) {
            set(SOULS_MEMORY.DUST_UNREACHABLE);

            SOULS_MEMORY.DUST_DROP_X = x * 0x0008;
            SOULS_MEMORY.DUST_DROP_Y = y * 0x0008;
        }

        @install()
        fun dust_loot() {
            unset(SOULS_MEMORY.DUST_UNREACHABLE);

            SOULS_MEMORY.DUST_DROP_MAP = 0xffff;
            SOULS_MEMORY.DUST_DROP_VARIANT = 0xffff;

            // attach_script(SCRIPT_OWNER, LOOT, 0x172b);

            // subtext("Reclaimed souls");

            currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.TALONS);

            // <0x2391> = 0x0000;
            // <0x2395> = 0x0000;
            // call_id(0x3d);
            animate(BOY, ONCE, ANIMATION_BOY.LOOT);

            destroy(SOULS_MEMORY.DUST_ENTITY);

            // sleep(0x80);

            show_currency(True);
            sleep(0x40);
            show_currency(False);
        }

        @install()
        fun dust_drop() {
            unset(SOULS_MEMORY.DUST_UNREACHABLE);

            // subtext("Souls in reach...");

            attach_script(SCRIPT_OWNER, LOOT, reference(dust_loot));

            <0x23d9> = 0x0001;
            animate(SCRIPT_OWNER, ONCE, ANIMATION_ENEMY.DUST);
            sleep(0x3c);
            <0x23d9> = 0x0001;
            animate(SCRIPT_OWNER, FREEZE, ANIMATION_ENEMY.DUST);
        }

        @install()
        fun return_to_bonfire() {
            if(SOULS_MEMORY.BONFIRE_MAP == 0x26) {
                set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
                map_transition(inbetwixx, start, NONE); // TODO
            } else if(SOULS_MEMORY.BONFIRE_MAP == 0x1a) {
                set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
                map_transition(east_crossing, crash, NONE); // TODO
            } else if(SOULS_MEMORY.BONFIRE_MAP == 0xa8) {
                set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
                map_transition(well, crash, NONE); // TODO
            } else if(SOULS_MEMORY.BONFIRE_MAP == 0x18) {
                set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
                map_transition(pipe_entrance, pipe_east, NONE); // TODO
            } else if(SOULS_MEMORY.BONFIRE_MAP == 0x0b) {
                set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
                map_transition(town_arena_entry, crash, NONE); // TODO
            } else if(SOULS_MEMORY.BONFIRE_MAP == 0d55) {
                set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
                map_transition(volcano_tower, bonfire, NONE); // TODO
            } else if(SOULS_MEMORY.BONFIRE_MAP != 0x00){
                fade_in();
                sleep(0x20);
                
                MEMORY.STRING_PARAMETER_1 = SOULS_MEMORY.BONFIRE_MAP;

                subtext("Game could not find bonfire #[MEM1]");
                
                sleep(0xa0);
            }

            map_transition(inbetwixx, start, NONE);
        }

        @install()
        fun wings_used() {
            return_to_bonfire();
        }

        fun heal_both(with_animation) {
            // TODO: set confound timer to 30s to avaid perma confound
            if((Byte) <0x4ECF> == 0x60) {
                <0x4ED1> = 0x0708;
            } else if((Byte) <0x4ED5> == 0x60) {
                <0x4ED7> = 0x0708;
            } else if((Byte) <0x4EDB> == 0x60) {
                <0x4EDD> = 0x0708;
            } else if((Byte) <0x4EE1> == 0x60) {
                <0x4Ee3> = 0x0708;
            }

            yield();

            cure();
            full_heal(BOTH, with_animation);
        }

        @install()
        fun boy_death() {
            control(NONE);
            attribute(BOY, INVINCIBLE_TEMP, True);
            attribute(DOG, INVINCIBLE_TEMP, True);

            yield();
            
            if(SOULS_MEMORY.WITH_SOULS_ON_DEATH) {
                currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.GOLD_COINS);
                currency_convert(0x01, CURRENCY.TALONS, 0x01, CURRENCY.JEWELES);

                if((SOULS_MEMORY.DUST_DROP_MAP == MEMORY.MAP) && (SOULS_MEMORY.DUST_DROP_VARIANT == SOULS_MEMORY.MAP_VARIANT)) {
                    destroy(SOULS_MEMORY.DUST_ENTITY);
                }

                if!(SOULS_MEMORY.DUST_UNREACHABLE) {
                    SOULS_MEMORY.DUST_DROP_X = <SCRIPT_OWNER>[X];
                    SOULS_MEMORY.DUST_DROP_Y = <SCRIPT_OWNER>[Y];
                }
                unset(SOULS_MEMORY.DUST_UNREACHABLE);

                // <0x2503> = MEMORY.MAP;
                SOULS_MEMORY.DUST_DROP_MAP = MEMORY.MAP;
                SOULS_MEMORY.DUST_DROP_VARIANT = SOULS_MEMORY.MAP_VARIANT;
            }

            // sleep(0x20);

            // currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.GOLD_COINS);

            animate(BOY, ONCE, ANIMATION_ENEMY.DUST);
            animate(DOG, ONCE, ANIMATION_ENEMY.DUST);

            if(SOULS_MEMORY.WITH_SOULS_ON_DEATH) {
                // subtext("Souls lost");

                sleep(0x20);

                currency_get(CURRENCY.CREDITS, 0x01);

                show_currency(True);
                yield();
            }

            sleep(0xa0);

            fade_out();

            show_currency(False);
            yield();

            sleep(0x50);

            heal_both(False);

            return_to_bonfire();

            control(BOTH);
        }

        @install()
        fun bonfire_triggered() {
            if(<SCRIPT_OWNER>[DAMAGE_TYPE] == DAMAGE_TYPE.DOG_ATTACK) {
                end();
            }

            if(SOULS_MEMORY.WINGS_BLOCKED) {
                unset(SOULS_MEMORY.WINGS_BLOCKED);
                special_script(WINGS, reference(wings_used));
            }
            
            MEMORY.PETAL = SOULS_MEMORY.ESTUS_CHARGES;
            heal_both(True);

            question("[SLOW]Bonfire:[CHOICE]Return to shrine.");

            if(MEMORY.QUESTION_ANSWER == 0x00) {
                map_transition(shrine, crash, NONE);
            }
        }

        @install()
        fun bonfire_lit() {
            if(<SCRIPT_OWNER>[DAMAGE_TYPE] == DAMAGE_TYPE.DOG_ATTACK) {
                end();
            }

            if(MEMORY.MAP == 0x26) { // map inbetwixx
                set(SOULS_MEMORY.BONFIRE_INBETWIXX);
            }

            add_enemy_with_flags(LANTERN_LIGHT_RED, 0x00, 0x00, INACTIVE);
            attach_script(LAST_ENTITY, DAMAGE, reference(bonfire_triggered));
            <LAST_ENTITY>[X] = <SCRIPT_OWNER>[X];
            <LAST_ENTITY>[Y] = <SCRIPT_OWNER>[Y];

            destroy(SCRIPT_OWNER);

            SOULS_MEMORY.BONFIRE_X = <ACTIVE>[X];
            SOULS_MEMORY.BONFIRE_Y = <ACTIVE>[Y];
            SOULS_MEMORY.BONFIRE_MAP = MEMORY.MAP;
            SOULS_MEMORY.BONFIRE_VARIANT = SOULS_MEMORY.MAP_VARIANT;

            subtext("Bonfire Lit");

            if!(SOULS_MEMORY.BONFIRE_FIRST_TRIGGER) {
                set(SOULS_MEMORY.BONFIRE_FIRST_TRIGGER);

                map_transition(shrine, crash, NONE);
            }
        }

        fun bonfire(x, y) {
            // add_enemy_with_flags(LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE_IMORTAL);
            // attach_script(LAST_ENTITY, TALK, 0x181e);
            // entity_script_controlled(LAST_ENTITY);

            if((SOULS_MEMORY.BONFIRE_MAP == MEMORY.MAP) && (SOULS_MEMORY.BONFIRE_VARIANT == SOULS_MEMORY.MAP_VARIANT)) {
                add_enemy_with_flags(LANTERN_LIGHT_RED, x, y, INACTIVE);
                attach_script(LAST_ENTITY, DAMAGE, reference(bonfire_triggered));
            } else {
                add_enemy_with_flags(LANTERN_LIGHT, x, y, INACTIVE);
                attach_script(LAST_ENTITY, DAMAGE, reference(bonfire_lit));
            }
            
            attribute(LAST_ENTITY, ROOT, True);
            <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
        }

        fun choose_starting_class() {
            question_max("Starting Class:[CHOICE]Warrior[CHOICE]Explorer[CHOICE]Alchemist[CHOICE]Cleric", 0x05 + 0x03);

            if(MEMORY.QUESTION_ANSWER == 0x00) { // warrior
                subtext("todo");
            } else if(MEMORY.QUESTION_ANSWER == 0x01) { // explorer
                subtext("todo");
            } else if(MEMORY.QUESTION_ANSWER == 0x02) { // alchemist
                subtext("todo");
            } else if(MEMORY.QUESTION_ANSWER == 0x03) { // cleric
                subtext("todo");
            }
        }
        fun choose_starting_item() {
            question_max("Starting Item:[CHOICE]Chocobo Egg[CHOICE]Nectar[CHOICE]Wings[CHOICE]Queen's Key", 0x05 + 0x03);

            if(MEMORY.QUESTION_ANSWER == 0x00) { // chocobo egg
                set(FLAG.CHOCOBO_EGG);
            } else if(MEMORY.QUESTION_ANSWER == 0x01) { // nectar
                MEMORY.NECTAR += 0x01;
            } else if(MEMORY.QUESTION_ANSWER == 0x02) { // wings
                MEMORY.WINGS += 0x01;
            } else if(MEMORY.QUESTION_ANSWER == 0x03) {// queens key
                set(FLAG.QUEENS_KEY);
            }
        }

        @install()
        fun init_souls() {
            if!(SOULS_MEMORY.INIT) {
                set(SOULS_MEMORY.INIT);

                SOULS_MEMORY.ESTUS_CHARGES = SOULS_MEMORY.ESTUS_CHARGES_INIT;
                MEMORY.PETAL = SOULS_MEMORY.ESTUS_CHARGES;

                MEMORY.ALCHEMY_LEVEL_ATLAS = 0d10;
                MEMORY.ALCHEMY_LEVEL_DEFEND = 0d3;

                SOULS_MEMORY.MENU_CHOICE = 0xffff;

                // SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.BOMBS;

                if(FLAG.DEBUG) {
                    SOULS_MEMORY.MENU_CHOICE = 0x01;
                    
                    set(SOULS_MEMORY.MARIO_YUMP_ENABLED);

                    update_debug_menu();
                }
            }

            if((SOULS_MEMORY.DUST_DROP_MAP == MEMORY.MAP) && (SOULS_MEMORY.DUST_DROP_VARIANT == SOULS_MEMORY.MAP_VARIANT)) {
                add_dynamic_enemy_with_flags(ENEMY.BEE, SOULS_MEMORY.DUST_DROP_X, SOULS_MEMORY.DUST_DROP_Y, 0x00);
                SOULS_MEMORY.DUST_ENTITY = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DEATH, reference(dust_drop));
                
                attribute(LAST_ENTITY, MUTE, True);
                damage(LAST_ENTITY, 0x03e8, False);
            }

            if(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED) {
                // if(SOULS_MEMORY.BONFIRE_MAP == MEMORY.MAP) {
                //     if(SOULS_MEMORY.BONFIRE_VARIANT == SOULS_MEMORY.MAP_VARIANT) {
                //         if(SOULS_MEMORY.BONFIRE_X != 0x00) {
                //             if(SOULS_MEMORY.BONFIRE_Y != 0x00) { // TODO
                                <BOY>[X] = SOULS_MEMORY.BONFIRE_X;
                                <BOY>[Y] = SOULS_MEMORY.BONFIRE_Y;

                                <DOG>[X] = SOULS_MEMORY.BONFIRE_X;
                                <DOG>[Y] = SOULS_MEMORY.BONFIRE_Y;
                //             }
                //         }
                //     }
                // }
                unset(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
            }

            // cure();
            // cast(BOY, BOTH, CURE, 0x01);

            attach_script(BOY, DEATH, reference(boy_death));

            if!(SOULS_MEMORY.WINGS_BLOCKED) {
                special_script(WINGS, reference(wings_used));
            }

            MEMORY.BOY_XP_REQUIRED = SYSTEM.HP_MAX;
            MEMORY.DOG_XP_REQUIRED = SYSTEM.HP_MAX;
        }

        fun collectible_collected() {
            fake_loot();

            SOULS_MEMORY.PROGRESS_COUNTER += 0x01;
            SOULS_MEMORY.COLLECTIBLE_COUNTER += 0x01;

            destroy(SCRIPT_OWNER);

            MEMORY.STRING_PARAMETER_1 = SOULS_MEMORY.COLLECTIBLE_COUNTER;
            subtext("Collectibles: [MEM1]");
        }
        fun add_collectible(type, x, y, collected_trigger) {
            if(type == 0x00) {
                add_placeholder(SCEPTER, x, y);
            } else if(type == 0x01) {
                add_placeholder(0x100, x, y);
            }
            attach_script(LAST_ENTITY, TALK, collected_trigger);
        }

        fun player_message(x, y, trigger) {
            add_enemy(PLACEHOLDER, x, y);
            animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_PLACEHOLDER.LEAVES_FALLING_2);

            attach_script(LAST_ENTITY, TALK, trigger);
        }

        fun player_message_triggered() {
            fake_loot();

            // destroy(SCRIPT_OWNER);
        }

        group player_messages() {
            @install()
            fun message_try_rolling() {
                player_message_triggered();

                subtext("try rolling");
            }
        };

        fun add_debug_entity(x, y, debug_triggered) {
            if(SOULS_MEMORY.WITH_DEBUG_ENTITIES) {
                add_placeholder(DOVES_1, x, y);
                attach_script(LAST_ENTITY, TALK, debug_triggered);
            }
        }

        fun init_hack() {
            init_souls();
        }

        fun init_weather(night, rain) {
            if(SOULS_MEMORY.WITH_WEATHER) {
                if(night) {
                    sfx_effect(NIGHT, True);
                }
                if(rain) {
                    sfx_effect(RAIN, True);
                }
            }
        }

        fun default_init_room(night, rain) {
            init_hack();
            
            MEMORY.DOG = DOG.WOLF;
            available(BOTH);
            init_weather(night, rain);

            SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.NORMAL;
            MEMORY.PACIFIED = 0x00;

            fade_in();
        }

        fun isaac_mode() {
            SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.ISAAC;
            MEMORY.PACIFIED = 0x01;
        }

        fun isaac_init(night, rain) {
            init_hack();

            available(BOY);
            teleport(DOG, 0xff, 0xff);
            init_weather(night, rain);

            isaac_mode();

            fade_in();
        }

        fun mario_mode() {
            SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.MARIO;
            MEMORY.PACIFIED = 0x01;
        }

        fun mario_init(night, rain) {
            init_hack();

            available(BOY);
            teleport(DOG, 0xff, 0xff);
            init_weather(night, rain);

            mario_mode();

            fade_in();
        }

        @install()
        fun start_feature_selected(index) {
            if((index == 0x01) && (FLAG.ENERGY_CORE)) {
                drop_bomb(True);
            } else if(index == 0x02) {
                isaac_tear(True);
            } else if(index == 0x03) {
                mario_yump();
            } else if(index == 0x04) {
                MEMORY.DOG = DOG.PUPPER; // TODO
            }
        }

        fun exit_boss_progress_check(flag) {
            if(flag) {
                // subtext("Boss in progress");
                end();
            }
        }
    };

    group hotkeys() {
        @install(ADDRESS.INTRO_FIRST_CODE_EXECUTED)
        fun jump_to_inbetwixx() {
            set(FLAG.DEBUG);
            init_souls();
            map_transition(inbetwixx, start, NONE);
        }

        @install()
        @inject(ADDRESS.HOTKEY_START)
        @count_limit(0x20)
        fun hotkey_start() {
            // if(FLAG.DEBUG) {
            //     subtext("Start");
            // }

            if(SOULS_MEMORY.BUTTON_MAP == BUTTON_MAP.AIRSHIP) {
                windwalker_rocket();
            } else if(SOULS_MEMORY.BUTTON_MAP == BUTTON_MAP.ISAAC) {
                isaac_tear(False);
            } else if(SOULS_MEMORY.BUTTON_MAP == BUTTON_MAP.BOMBS) {
                drop_bomb(False);
            } else if(SOULS_MEMORY.BUTTON_MAP == BUTTON_MAP.MARIO) {
                mario_yump();
            } else if(SOULS_MEMORY.BUTTON_MAP == BUTTON_MAP.PUPPER) {
                MEMORY.DOG = DOG.PUPPER; // TODO
            } else {
                // debug_memory(SOULS_MEMORY.MENU_CHOICE, SOULS_MEMORY.DEBUG_MENU_BUTTON_1);

                if(SOULS_MEMORY.MENU_CHOICE == 0x01) {
                    start_feature_selected(SOULS_MEMORY.DEBUG_MENU_BUTTON_1);
                } else if(SOULS_MEMORY.MENU_CHOICE == 0x02) {
                    start_feature_selected(SOULS_MEMORY.DEBUG_MENU_BUTTON_2);
                } else if(SOULS_MEMORY.MENU_CHOICE == 0x03) {
                    start_feature_selected(SOULS_MEMORY.DEBUG_MENU_BUTTON_3);
                } else if(SOULS_MEMORY.MENU_CHOICE == 0x04) {
                    start_feature_selected(SOULS_MEMORY.DEBUG_MENU_BUTTON_4);
                }
            }
        }
        @install()
        @inject(ADDRESS.HOTKEY_START_L)
        @count_limit(0x20)
        fun hotkey_start_l() {
            if(FLAG.DEBUG) {
                subtext("Start+L");

                // return_to_bonfire();
                
                map_transition(lab_cutscene, north, NONE);
                // map_transition(town_room, south, NONE);

                // MEMORY.MAP_PALETTE -= 0x01;
            }
        }
        @install()
        @inject(ADDRESS.HOTKEY_START_R)
        @count_limit(0x20)
        fun hotkey_start_r() {
            if(FLAG.DEBUG) {
                subtext("Start+R");
                
                attribute(BOY, NO_CLIP, True);
                // attribute(BOY, INVINCIBLE_TEMP, True);
                <BOY>[HP] = SYSTEM.HP_MAX;
                
                debug_boy();

                // MEMORY.MAP_PALETTE += 0x01;

                if(False) {
                    <0x2834> += 0x01;
                }
            }
        }

        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_1)
        fun menu_presets() {
            if(FLAG.DEBUG) {
                subtext("m=1");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x01;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_2)
        fun menu_dog() {
            if(FLAG.DEBUG) {
                subtext("m=2");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x02;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_3)
        fun menu_atlas() {
            if(FLAG.DEBUG) {
                subtext("m=3");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x03;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_4)
        fun menu_noclip() {
            if(FLAG.DEBUG) {
                subtext("m=4");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x04;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_5)
        fun menu_available() {
            if(FLAG.DEBUG) {
                subtext("m=5");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x05;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_6)
        fun menu_memory_flags() {
            if(FLAG.DEBUG) {
                subtext("m=6");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x06;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_7)
        fun menu_enemy() {
            if(FLAG.DEBUG) {
                subtext("m=7");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x07;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_8)
        fun menu_unlock() {
            if(FLAG.DEBUG) {
                subtext("m=8");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x08;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_9)
        fun menu_windwalker() {
            if(FLAG.DEBUG) {
                subtext("m=9");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x09;
        }
        @install(ADDRESS.DEBUG_MENU_BUTTON_10)
        fun debug_menu_10_alchemy() {
            if(FLAG.DEBUG) {
                subtext("m=10");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x0a;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_11)
        fun menu_brians_room() {
            if(FLAG.DEBUG) {
                subtext("m=11");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x0b;
        }
    };

    group souls_npcs() {
        enum NPC_SHRINE_MAIDEN {
            PROGRESS = memory(),
            SUB_PROGRESS = memory(),

            ID = memory(),
            BODY = ENEMY.FIRE_EYES,
        }

        enum NPC_MARIO {
            PROGRESS = memory(),
            SUB_PROGRESS = memory(),

            ID = memory(),
            BODY = ENEMY.VILLAGER_2_1,
        }
        @install()
        fun npc_mario_dialog_0() {
            if(NPC_MARIO.PROGRESS == 0x00) {
                if(NPC_MARIO.SUB_PROGRESS == 0x00) {
                    NPC_MARIO.SUB_PROGRESS += 0x01;

                    add_enemy_with_flags(NPC_MARIO.BODY, 0xe5, 0x27, INACTIVE);
                    face(LAST_ENTITY, WEST);
                    init_map(0xb4, 0x04, 0xfc, 0x36); // room_alchemist

                    subtext("is there somebody?");
                } else if(NPC_MARIO.SUB_PROGRESS == 0x01) {
                    NPC_MARIO.SUB_PROGRESS += 0x01;

                    dialog("[SLOW]test1[B]");
                } else if(NPC_MARIO.SUB_PROGRESS == 0x02) {
                    NPC_MARIO.PROGRESS += 0x01;
                    NPC_MARIO.SUB_PROGRESS = 0x00;

                    dialog("[SLOW]test2[B]");
                }
            } else {
                dialog("[SLOW]Please go now[B]");
            }
        }
        @install()
        fun npc_mario_dialog_1() {
            control_enemy(NPC_MARIO.ID, True);
            face_each(BOY, NPC_MARIO.ID);

            if(NPC_MARIO.PROGRESS == 0x01) {
                // NPC_MARIO.PROGRESS += 0x01;
                // NPC_MARIO.SUB_PROGRESS = 0x00;

                if(NPC_MARIO.SUB_PROGRESS == 0x00) {
                    NPC_MARIO.SUB_PROGRESS += 0x01;

                    dialog("[SLOW]test1[B]");
                } else if(NPC_MARIO.SUB_PROGRESS == 0x01) {
                    NPC_MARIO.SUB_PROGRESS += 0x01;

                    dialog("[SLOW]test2[B]");
                } else if(NPC_MARIO.SUB_PROGRESS == 0x02) {
                    NPC_MARIO.PROGRESS += 0x01;
                    NPC_MARIO.SUB_PROGRESS += 0x00;

                    dialog("[SLOW]test3[B]");
                }
            } else {
                dialog("[SLOW]Please go now[B]");
            }

            control_enemy(NPC_MARIO.ID, False);
        }

        enum NPC_ISAAC {
            PROGRESS = memory(),
        }

        group npc_cat() {
            enum NPC_CAT {
                PRICE_RING_CAT = 0d100,
            }

            group cat_ai() {
                fun response_positive() {
                    if(randrange(0x02) == 0x00) {
                        dialog("[SLOW]Satisfied?[B]");
                    } else {
                        dialog("[SLOW]I'll be around if you ever come back.[B]");
                    }
                }
                fun response_negative() {
                    if(randrange(0x02) == 0x00) {
                        dialog("[SLOW]Nothing suited you, I presume?[B]");
                    } else {
                        dialog("[SLOW]Well, that's dismaying. Hee hee hee_[B]");
                    }
                }
                fun response_cancel() {
                    dialog("[SLOW]Oh my, haste makes waste. Hee hee hee_[B]");
                }

                fun story_radahn_arena() {
                    dialog("[SLOW]You've seen that gaping hole here?[B]Well, there's nasty little vermin down there.[B]Although who you seek is even further below.[B]And has been down there for a very, very long time.[B]He's plumb Rotten by now, I'm sure! Hee hee hee…[B]");
                }

                fun purchase_ring(price) {
                    MEMORY.STRING_PARAMETER_1 = price;

                    show_currency(True);
                    question("[SLOW]Silvercat Ring?[B]`Silver ring depicting a leaping feline. Reduces damage from falling. Legend has it that when cats grow old, a force brews within them, and they are reborn as something new.´[B]Are you interested?[CHOICE][MEM1] Souls[CHOICE]no.");

                    sleep(0x10);
                    
                    if(MEMORY.QUESTION_ANSWER == 0x00) { // yes
                        if_currency(MEMORY.CURRENCY_CURRENT < price) {
                            dialog("[SLOW]…[B]");
                        } else {
                            sound(PURCHASE);
                            currency_take(TALONS, price);
                            show_currency(True);

                            set(SOULS_MEMORY.RING_CAT);

                            response_positive();
                        }
                    } else { // no
                        response_negative();
                    }

                    show_currency(False);
                }

                @install()
                fun cat_triggered() {
                    dialog("[SLOW]Oh, yes. You can call me Shalquoir. Enchante.[B]");

                    if!(SOULS_MEMORY.RING_CAT) {
                        question("[SLOW]How can I help you?[CHOICE]talk…[CHOICE]buy…");
                    } else {
                        question("[SLOW]How can I help you?[CHOICE]talk…");
                    }

                    if(MEMORY.QUESTION_ANSWER == 0x00) { // talk
                        story_radahn_arena();
                    } else if(MEMORY.QUESTION_ANSWER == 0x01) { // purchase
                        purchase_ring(NPC_CAT.PRICE_RING_CAT);
                    } else {
                        response_negative();
                    }
                }
            };

            enum CAT_VARIANT {
                LOOKING = 0x00,
                CLEANING = 0x01,
            }

            fun add_souls_npc_cat(variant:CAT_VARIANT, x, y) {
                if(variant == CAT_VARIANT.LOOKING) {
                    add_placeholder(CAT_LOOKING, x, y);
                } else {
                    add_placeholder(CAT_CLEANING_1, x, y);
                }

                attach_script(LAST_ENTITY, TALK, reference(cat_triggered));
            }
        };

        group npc_smith() {
            group smith_ai() {
                fun response_greeting() {
                    arg[0x00] = randrange(0x04);

                    if(arg[0x00] == 0x00) {
                        dialog("[SLOW]What? You again?[B]");
                    } else if(arg[0x00] == 0x01) {
                        dialog("[SLOW]You again? Can't you see that I'm busy?[B]");
                    } else if(arg[0x00] == 0x02) {
                        dialog("[SLOW]Hmph, I'd given you up for dead. Almost had me worried, really…[B]");
                    } else {
                        dialog("[SLOW]I knew you'd be around soon. Go on, show me what you've got.[B]");
                    }
                }

                fun response_positive() {
                    arg[0x00] = randrange(0x03);

                    if(arg[0x00] == 0x00) {
                        dialog("[SLOW]I'll be around, if you make it back.[B]");
                    } else if(arg[0x00] == 0x01) {
                        dialog("[SLOW]How goes your journey?[B]");
                    } else {
                        dialog("[SLOW]Take these. They should help a bit.[B]");
                    }
                }
                fun response_negative() {
                    dialog("[SLOW]Hmph. Don't waste my time.[B]");
                }

                fun response_upgrade_weapon() {
                    if(
                        ((SOULS_MEMORY.ORB_SWORD > 0x00) && !(FLAG.SWORD_4)) ||
                        ((SOULS_MEMORY.ORB_AXE > 0x00) && !(FLAG.AXE_4)) ||
                        ((SOULS_MEMORY.ORB_SPEAR > 0x00) && !(FLAG.SPEAR_4))
                    ) {
                        if((SOULS_MEMORY.ORB_SWORD > 0x00) && !(FLAG.SWORD_4)) {
                            question("[SLOW]Do you want me to upgrade your sword?[CHOICE]Yes.[CHOICE]No.");

                            if(MEMORY.QUESTION_ANSWER == 0x00) {
                                if!(FLAG.SWORD_1) {
                                    unlock(SWORD_1);
                                } else if!(FLAG.SWORD_2) {
                                    unlock(SWORD_2);
                                } else if!(FLAG.SWORD_3) {
                                    unlock(SWORD_3);
                                } else if!(FLAG.SWORD_4) {
                                    unlock(SWORD_4);
                                }

                                response_positive();
                                end();
                            }
                        }

                        if((SOULS_MEMORY.ORB_AXE > 0x00) && !(FLAG.AXE_4)) {
                            question("[SLOW]Do you want me to upgrade your axe?[CHOICE]Yes.[CHOICE]No.");

                            if(MEMORY.QUESTION_ANSWER == 0x00) {
                                if!(FLAG.AXE_1) {
                                    unlock(AXE_1);
                                } else if!(FLAG.AXE_2) {
                                    unlock(AXE_2);
                                } else if!(FLAG.AXE_3) {
                                    unlock(AXE_3);
                                } else if!(FLAG.AXE_4) {
                                    unlock(AXE_4);
                                }
                                
                                response_positive();
                                end();
                            }
                        }

                        if((SOULS_MEMORY.ORB_SPEAR > 0x00) && !(FLAG.SPEAR_4)) {
                            question("[SLOW]Do you want me to upgrade your spear?[CHOICE]Yes.[CHOICE]No.");

                            if(MEMORY.QUESTION_ANSWER == 0x00) {
                                if!(FLAG.SPEAR_1) {
                                    unlock(SPEAR_1);
                                } else if!(FLAG.SPEAR_2) {
                                    unlock(SPEAR_2);
                                } else if!(FLAG.SPEAR_3) {
                                    unlock(SPEAR_3);
                                } else if!(FLAG.SPEAR_4) {
                                    unlock(SPEAR_4);
                                }
                                
                                response_positive();
                                end();
                            }
                        }

                        response_negative();
                    } else {
                        dialog("[SLOW]Bring me a weapon orb, and I'll forge you a better weapon.[B]");
                    }
                }

                @install()
                fun smith_triggered() {
                    response_greeting();

                    question("[SLOW]How can I help you?[CHOICE]talk…[CHOICE]upgrade…");

                    if(MEMORY.QUESTION_ANSWER == 0x00) { // talk
                        subtext("todo");
                    } else if(MEMORY.QUESTION_ANSWER == 0x01) { // purchase
                        response_upgrade_weapon();
                    } else {
                        response_negative();
                    }
                }
            };
            
            fun add_souls_npc_smith(x, y) {
                add_enemy_with_flags(TINY, x, y, INACTIVE);
                attach_script(LAST_ENTITY, TALK, reference(smith_triggered));
            }
        };
    };
};

// MAPS

area shrine_area() {
    map shrine(0x25) {
        enum entrance {
            north = entrance(0x59, 0x0d, SOUTH),
            east = entrance(0x7d, 0x65, WEST),
            south = entrance(0x59, 0x73, NORTH),
            west = entrance(0x01, 0x2f, EAST),

            hut_1 = entrance(0x0f, 0x1b, SOUTH),
            hut_2 = entrance(0x33, 0x2d, SOUTH),
            hut_3 = entrance(0x53, 0x2f, SOUTH),
            hut_4 = entrance(0x65, 0x36, SOUTH),
            hut_5 = entrance(0x6f, 0x49, SOUTH),
            hut_6 = entrance(0x45, 0x53, SOUTH),
            hut_7 = entrance(0x25, 0x5b, SOUTH),
            hut_8 = entrance(0x21, 0x3b, SOUTH),

            crash = entrance(0d75, 0d95, NONE), // entrance(0d67, 0d72, NONE),
        }

        enum soundtrack {
            default = soundtrack(0x4a, 0xff)
        }

        enum ROOM {
            SHRINE_BONFIRE_LIT = flag(),
        }

        @install()
        fun bonfire_triggered_first_bonfire() {
            fake_b();

            question("[SLOW]Return to the beginning?[CHOICE]Yes.[CHOICE]No.");

            if(MEMORY.QUESTION_ANSWER == 0x00) {
                map_transition(inbetwixx, start, NONE);
            }
        }

        @install()
        fun bonfire_triggered_inbetwixx() {
            if(<SCRIPT_OWNER>[DAMAGE_TYPE] != DAMAGE_TYPE.DOG_ATTACK) {
                question("[SLOW]Return to Inbetwixx?[CHOICE]Yes.[CHOICE]No.");

                if(MEMORY.QUESTION_ANSWER == 0x00) {
                    map_transition(inbetwixx, start, NONE);
                }
            }
        }

        fun bonfire_portal(x, y, flag, trigger) {
            if(flag) {
                add_enemy_with_flags(LANTERN_LIGHT, x, y, INACTIVE);
                attach_script(LAST_ENTITY, DAMAGE, trigger);
                attribute(LAST_ENTITY, ROOT, True);
                // <LAST_ENTITY>[PALETTE] = 0x0000;
            }
        }

        @install()
        fun add_bonfire() {
            bonfire_portal(0d77, 0d92, SOULS_MEMORY.BONFIRE_INBETWIXX, reference(bonfire_triggered_inbetwixx)); // inbetwixx

            // bonfire_portal(0d77, 0d100, …); // east inbetwixx

            // bonfire_portal(0d69, 0d104, …); // town?

            // bonfire_portal(0d60, 0d104, …); // west inbetwixx

            // bonfire_portal(0d52, 0d100, …); // altus plateau

            // bonfire_portal(0d51, 0d92, …); // southern jungle

            // bonfire_portal(0d59, 0d88, …); // omnitopia
        }

        @install()
        fun locked_door() {
            subtext("Locked.");
        }

        enum stepon_trigger {
            exit_hut_1 = @install() {
                locked_door();
            },
            exit_hut_2 = @install() {
                locked_door();
            },
            exit_hut_3 = @install() {
                locked_door();
            },
            exit_hut_4 = @install() {
                locked_door();
            },
            exit_hut_5 = @install() {
                locked_door();
            },
            exit_hut_6 = @install() {
                locked_door();
            },
            exit_hut_7 = @install() {
                // locked_door();
                map_transition(hut_smith, door, NORTH);
            },
            exit_hut8 = @install() {
                map_transition(hut_cat, door, NORTH);
            },
            guard_east = @install() {
                subtext("S=8");
            },
            exit_north = @install() {
                map_transition(shrine, south, NORTH);
            },

            exit_south = @install() {
                map_transition(shrine, north, SOUTH);
            },
            exit_east = @install() {
                map_transition(shrine, west, EAST);
            },
            exit_west = @install() {
                map_transition(shrine, east, WEST);
            },
        }

        @install()
        fun first_bonfire_triggered() {
            if(
                (NPC_SHRINE_MAIDEN.PROGRESS == 0x00) && (NPC_SHRINE_MAIDEN.SUB_PROGRESS == 0x03) &&
                !(ROOM.SHRINE_BONFIRE_LIT)
            ) {
                NPC_SHRINE_MAIDEN.PROGRESS += 0x01;
                NPC_SHRINE_MAIDEN.SUB_PROGRESS = 0x00;

                set(ROOM.SHRINE_BONFIRE_LIT);
                object[0x11] = 0x1; // ignite fire

                add_bonfire();
            } else if(ROOM.SHRINE_BONFIRE_LIT) {
                bonfire_triggered_first_bonfire();
            }
        }

        enum b_trigger {
            b_trigger_0 = first_bonfire_triggered(),
            b_trigger_1 = first_bonfire_triggered(),
            b_trigger_2 = first_bonfire_triggered(),
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
            b_trigger_17 = @install() {
                subtext("B=17");
            },
            b_trigger_18 = @install() {
                subtext("B=18");
            },
            b_trigger_19 = @install() {
                subtext("B=19");
            },
        }

        @install()
        fun shrine_maiden_triggered() {
            if(NPC_SHRINE_MAIDEN.PROGRESS == 0x00) {
                if(NPC_SHRINE_MAIDEN.SUB_PROGRESS == 0x00) {
                    NPC_SHRINE_MAIDEN.SUB_PROGRESS += 0x01;
                
                    dialog("[SLOW]test 1.[B]");
                } else if(NPC_SHRINE_MAIDEN.SUB_PROGRESS == 0x01) {
                    NPC_SHRINE_MAIDEN.SUB_PROGRESS += 0x01;
                
                    dialog("[SLOW]test 2.[B]");
                } else if(NPC_SHRINE_MAIDEN.SUB_PROGRESS == 0x02) {
                    NPC_SHRINE_MAIDEN.SUB_PROGRESS += 0x01;
                
                    dialog("[SLOW]test 3.[B]");
                } else {
                    dialog("[SLOW]Ignite the first bonfire.[B]");
                }
            } else if(NPC_SHRINE_MAIDEN.PROGRESS == 0x01) {
                dialog("[SLOW]test 4.[B]");
            }
        }
        fun add_shrine_maiden(x, y) {
            add_enemy_with_flags(NPC_SHRINE_MAIDEN.BODY, x, y, INACTIVE);
            attach_script(LAST_ENTITY, TALK, reference(shrine_maiden_triggered));
        }

        @install()
        fun debug_triggered() {
            SOULS_MEMORY.ORB_SWORD = 0d99;
            SOULS_MEMORY.ORB_AXE = 0d99;
            SOULS_MEMORY.ORB_SPEAR = 0d99;

            destroy(SCRIPT_OWNER);
        }

        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            add_debug_entity(0d54, 0d84, reference(debug_triggered));

            if(ROOM.SHRINE_BONFIRE_LIT) {
                object[0x11] = 0x01; // ignite fire

                add_bonfire();
            }

            add_shrine_maiden(0d71, 0d88);
            add_souls_npc_smith(0d42, 0d93);

            // object[0x00] = 0x01; // open gourd
            // … sniff spots?
            // object[0x11] = 0x01; // ignite fire

            fade_in();
        }
    };

    map hut_cat(0x51) {
        enum entrance {
            door = entrance(0x54, 0x6f, NORTH),
        }

        enum soundtrack {
            default = soundtrack(0x42, 0xff)
        }

        enum stepon_trigger {
            exit_door = @install() {
                map_transition(shrine, hut_8, SOUTH);
            },
            exit_door_3_2 = nop(),
            exit_door_3_1 = nop(),
            exit_door_2_3 = nop(),
            exit_door_2_2 = nop(),
            exit_door_2_1 = nop(),
            exit_door_1_3 = nop(),
            exit_door_1_2 = nop(),
            exit_door_1_1 = nop(),
        }

        @install()
        @async()
        fun gourd_trap(object_id, entity, x, y) {
            object[object_id] = 0x01;

            // add_placeholder(SANDPIT_OUT, 0d96, 0d95);
            // add_placeholder(0x7e, 0d96, 0d95);

            x = x * 0x08;
            y = y * 0x08;

            sleep(0x10);

            while(True) {
                arg[0x10] = entity[X];
                arg[0x12] = entity[Y];
                arg[0x14] = x;
                arg[0x16] = y;

                if(arg[0x10] < arg[0x14]) {
                    arg[0x18] = arg[0x14] - arg[0x10];
                } else {
                    arg[0x18] = arg[0x10] - arg[0x14];
                }

                if(arg[0x12] < arg[0x16]) {
                    arg[0x1a] = arg[0x16] - arg[0x12];
                } else {
                    arg[0x1a] = arg[0x12] - arg[0x16];
                }

                if(arg[0x18] < arg[0x1a]) {
                    arg[0x1c] = arg[0x1a] - arg[0x18];
                } else {
                    arg[0x1c] = arg[0x18] - arg[0x1a];
                }

                if((arg[0x18] > 0d70) || (arg[0x1a] > 0d70)) {
                    object[object_id] = 0x00;
                    end();
                } else if((arg[0x18] < 0d5) && (arg[0x1a] < 0d5)) {
                    control(NONE);
                    unset(SOULS_MEMORY.WINGS_BLOCKED);

                    if(entity == <BOY>) {
                        animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SWIRL_ENTER);
                    } else {
                        animate(DOG, ONCE_FREEZE, ANIMATION_DOG.ACT1_SWIRL_ENTER);
                    }

                    subtext("todo");
                    end();
                }

                if(arg[0x1c] <= 0d5) {
                    if((arg[0x18] > 0x02) && (entity[X] > x)) {
                        entity[X] -= 0x02;
                    } else if((arg[0x18] > 0x02) && (entity[X] < x)) {
                        entity[X] += 0x02;
                    }

                    if((arg[0x1a] > 0x02) && (entity[Y] < y)) {
                        entity[Y] += 0x02;
                    } else if((arg[0x1a] > 0x02) && (entity[Y] > y)) {
                        entity[Y] -= 0x02;
                    }
                } else if(arg[0x18] > arg[0x1a]) {
                    if((arg[0x18] > 0x02) && (entity[X] > x)) {
                        entity[X] -= 0x02;
                    } else if((arg[0x18] > 0x02) && (entity[X] < x)) {
                        entity[X] += 0x02;
                    }
                } else {
                    if((arg[0x1a] > 0x02) && (entity[Y] < y)) {
                        entity[Y] += 0x02;
                    } else if((arg[0x1a] > 0x02) && (entity[Y] > y)) {
                        entity[Y] -= 0x02;
                    }
                }

                yield();
            }
        }

        enum b_trigger {
            gourd_3 = @install() {
                gourd_trap(0x18, <ACTIVE>, 0d96, 0d95);
                // _loot_chest(0x18, WATER, 0x03);
            },
            gourd_2 = @install() {
                _loot_chest(0x17, WATER, 0x02);
            },
            gourd_1 = @install() {
                _loot_chest(0x16, WATER, 0x01);
            },
            gourd_3_2_4 = nop(),
            gourd_3_2_3 = nop(),
            gourd_3_2_1 = nop(),
            gourd_3_2_2 = nop(),
            gourd_3_1_2 = nop(),
            gourd_3_1_1 = nop(),
            gourd_2_3_2 = nop(),

            gourd_2_3_1 = nop(),
            gourd_2_2_3 = nop(),
            gourd_2_2_2 = nop(),
            gourd_2_2_1 = nop(),
            gourd_2_1_3 = nop(),
            gourd_2_1_2 = nop(),
            gourd_2_1_1 = nop(),
            gourd_1_3_3 = nop(),
            gourd_1_3_2 = nop(),
            gourd_1_3_1 = nop(),

            gourd_1_2_3 = nop(),
            gourd_1_2_2 = nop(),
            gourd_1_2_1 = nop(),
            gourd_1_1_2 = nop(),
            gourd_1_1_1 = nop(),
        }

        fun init_map(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x20, 0x24); // hut_1_1
            } else if(index == 0x02) {
                init_map(0x22, 0x00, 0x42, 0x24); // hut_1_2
            } else if(index == 0x03) {
                init_map(0x44, 0x00, 0x64, 0x24); // hut_1_3
            } else if(index == 0x04) {
                init_map(0x00, 0x26, 0x20, 0x4a); // hut_2_1
            } else if(index == 0x05) {
                init_map(0x22, 0x26, 0x42, 0x4a); // hut_2_2
            } else if(index == 0x06) {
                init_map(0x44, 0x26, 0x64, 0x4a); // hut_2_3
            } else if(index == 0x07) {
                init_map(0x00, 0x4c, 0x20, 0x70); // hut_3_1
            } else if(index == 0x08) {
                init_map(0x22, 0x4c, 0x42, 0x70); // hut_3_2
            } else if(index == 0x09) {
                init_map(0x44, 0x4c, 0x64, 0x70); // hut_3_3
            }
        }

        fun trigger_enter() {
            init_map(0x09);

            // object[0x16] = 0x01; // open gourd_3_3_1
            // object[0x17] = 0x01; // open gourd_3_3_2
            // object[0x18] = 0x01; // open gourd_3_3_3

            arg[0x00] = randrange(0x05);

            if(arg[0x00] == 0x00) {
                add_souls_npc_cat(CLEANING, 0d89, 0d103); // fish cleaning
            } else if(arg[0x00] == 0x01) {
                add_souls_npc_cat(LOOKING, 0d78, 0d100); // desk looking
            } else if(arg[0x00] == 0x02) {
                add_souls_npc_cat(CLEANING, 0d76, 0d92); // food cleaning
            } else {
                add_souls_npc_cat(CLEANING, 0d78, 0d100); // desk cleaning
            }

            fade_in();
        }
    };

    map hut_smith(0x51) {
        enum entrance {
            door = entrance(0x32, 0x23, NORTH),
        }

        enum stepon_trigger {
            exit_door_3_3 = nop(),
            exit_door_3_2 = nop(),
            exit_door_3_1 = nop(),
            exit_door_2_3 = nop(),
            exit_door_2_2 = nop(),
            exit_door_2_1 = nop(),
            exit_door_1_3 = nop(),
            exit_door = @install() {
                map_transition(shrine, hut_7, SOUTH);
            },
            exit_door_1_1 = nop(),
        }

        enum b_trigger {
            gourd_3_3_3 = nop(),
            gourd_3_3_2 = nop(),
            gourd_3_3_1 = nop(),
            gourd_3_2_4 = nop(),
            gourd_3_2_3 = nop(),
            gourd_3_2_1 = nop(),
            gourd_3_2_2 = nop(),
            gourd_3_1_2 = nop(),
            gourd_3_1_1 = nop(),
            gourd_2_3_2 = nop(),

            gourd_2_3_1 = nop(),
            gourd_2_2_3 = nop(),
            gourd_2_2_2 = nop(),
            gourd_2_2_1 = nop(),
            gourd_2_1_3 = nop(),
            gourd_2_1_2 = nop(),
            gourd_2_1_1 = nop(),
            gourd_1_3_3 = nop(),
            gourd_1_3_2 = nop(),
            gourd_1_3_1 = nop(),

            gourd_3 = @install() {
                subtext("B=20");
            },
            gourd_2 = @install() {
                subtext("B=21");
            },
            gourd_1 = @install() {
                subtext("B=22");
            },
            gourd_1_1_2 = nop(),
            gourd_1_1_1 = nop(),
        }

        fun init_map(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x20, 0x24); // hut_1_1
            } else if(index == 0x02) {
                init_map(0x22, 0x00, 0x42, 0x24); // hut_1_2
            } else if(index == 0x03) {
                init_map(0x44, 0x00, 0x64, 0x24); // hut_1_3
            } else if(index == 0x04) {
                init_map(0x00, 0x26, 0x20, 0x4a); // hut_2_1
            } else if(index == 0x05) {
                init_map(0x22, 0x26, 0x42, 0x4a); // hut_2_2
            } else if(index == 0x06) {
                init_map(0x44, 0x26, 0x64, 0x4a); // hut_2_3
            } else if(index == 0x07) {
                init_map(0x00, 0x4c, 0x20, 0x70); // hut_3_1
            } else if(index == 0x08) {
                init_map(0x22, 0x4c, 0x42, 0x70); // hut_3_2 ?
            } else if(index == 0x09) {
                init_map(0x44, 0x4c, 0x64, 0x70); // hut_3_3
            }
        }

        fun trigger_enter() {
            init_map(0x02);

            // object[0x02] = 0x01; // open gourd_1_2_1
            // object[0x03] = 0x01; // open gourd_1_2_2
            // object[0x04] = 0x01; // open gourd_1_2_3

            fade_in();
        }
    };

};

area inbetwixx_center() {
    map inbetwixx(0x05) {
        enum entrance {
            north = entrance(0x2d, 0x01, SOUTH),
            east = entrance(0x5f, 0x4d, WEST),
            west_1 = entrance(0x04, 0x71, EAST),
            west_2 = entrance(0x04, 0x2f, EAST),

            start = entrance(0x0f, 0x47, NONE)
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            DEBUG = False,
            
            BRIDGE_REVEALED = flag(),
            BRIDGE_REVEALER_ENTITY = memory_tmp(),

            FLOWER_GATE = memory_tmp(),
        }

        @install()
        fun ravine_triggered() {
            generic_fall(0d80);

            dust_unreachable(0d45, 0d35);
            damage(BOTH, 0d999, True);
        }

        enum stepon_trigger {
            stepon_0 = @install() {
                subtext("S=0");
            },
            stepon_1 = ravine_triggered(),
            stepon_2 = ravine_triggered(),
            stepon_3 = ravine_triggered(),
            stepon_4 = ravine_triggered(),
            stepon_5 = ravine_triggered(),
            stepon_6 = ravine_triggered(),
            diamon_eyes = @install() {
                face(ROOM.FLOWER_GATE, SOUTH);
                animate(ROOM.FLOWER_GATE, ONCE, ANIMATION_ALL.SLASH_1);
            },
            exit_east = @install() {
                map_transition(east_inbetwixx, west_2, EAST);
            },
            exit_north = @install() {
                map_transition(north_inbetwixx, south, NORTH);
            },
            exit_west_2_east = @install() {
                map_transition(northwest_inbetwixx, east, WEST);
            },
            exit_west_1_exit = @install() {
                map_transition(west_inbetwixx, east_2, WEST);
            },
            stepon_12 = @install() {
                subtext("S=12");
            },
            stepon_13 = @install() {
                subtext("S=13");
            },
            stepon_14 = @install() {
                subtext("S=14");
            },
            stepon_15 = @install() {
                subtext("S=15");
            },

            stepon_16 = @install() {
                subtext("S=16");
            },
            stepon_17 = @install() {
                subtext("S=17");
            },
            stepon_18 = @install() {
                subtext("S=18");
            },
            stepon_19 = @install() {
                subtext("S=19");
            }
        }

        enum b_trigger {
            wall_2 = @install() {
                _axe2_wall(0x00);
            },
            wall_1 = @install() {
                _axe2_wall(0x01);
            },
            gourd_2_1 = {
                _loot_chest(0x06, OIL, 0x01);
            },
            gourd_1_1 = {
                _loot_chest(0x05, WATER, 0x01);
            },
            gourd_1_2 = {
                _loot_chest(0x07, WATER, 0x02);
            },
            gourd_1_3 = {
                _loot_chest(0x08, WATER, 0x03);
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");

                // _loot(0x0a, LOOT_REWARD.MUSHROOM, 0x01, 0x00);
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
            b_trigger_17 = @install() {
                subtext("B=17");
            },
            b_trigger_18 = @install() {
                subtext("B=18");
            },
            b_trigger_19 = @install() {
                subtext("B=19");
            }
        }

        fun init_room() {
            default_init_room(True, True);

            subtext("Inbetwixx");
        }

        fun intro() {
            teleport(DOG, 0x13, 0x49);

            if(SOULS_MEMORY.WITH_INTRO) {
                animate(DOG, ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);

                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

                sleep(0x50);
            }

            if(SOULS_MEMORY.WITH_STARTING_CLASS) {
                choose_starting_class();

                animate(DOG, ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);

                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

                choose_starting_item();
            }

            if(SOULS_MEMORY.WITH_INTRO) {
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
                sleep(0x30);
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
                sleep(0x40);
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
                sleep(0x15);
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

                animate(BOY, ONCE, ANIMATION_BOY.KNEEL);

                sleep(0x20);
                animate(DOG, ONCE, ANIMATION_ALL.DEFAULT);
            }
        }

        @install()
        fun energy_core_triggered() {
            if(<ACTIVE> == <BOY>) {
                animate(BOY, ONCE, ANIMATION_BOY.LOOT);
                sleep(0x10);

                unlock(ENERGY_CORE);

                destroy(SCRIPT_OWNER);
            }
        }

        @install()
        fun test_room_portal() {
            attach_to_script(BOY);

            question_max("[SLOW]Dog Test Rooms:[CHOICE]Gate Bots (90%)[CHOICE]Rats (80%)[LF]Boy Test Rooms:[CHOICE]Bomb (50%)[CHOICE]Mosquito (80%)[CHOICE]Invisible (100%)[CHOICE]Abomination (80%)[CHOICE]Radahn (90%)[CHOICE]Drone (80%)", 0x09 + 0x07);

            if(MEMORY.QUESTION_ANSWER == 0x00) { // toaster arena
                map_transition(toaster_arena, center, NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x01) { // rats arena
                map_transition(rats_arena, right, NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x02) { // bomb arena
                map_transition(bomb_arena, right, NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x03) { // mosquito arena
                map_transition(mosquito_arena, right, NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x04) { // invisible arena
                map_transition(invisible_arena, right, NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x05) { // abomination arena
                // map_transition(abomination_arena, right, NONE);
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x06) { // radahn arena
                map_transition(radahn_arena, right, NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x07) { // drone arena
                map_transition(drone_arena, right, NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x08) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x09) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x0a) { // nop
                nop();
            }
        }
        @install()
        fun cheat_selection() {
            attach_to_script(BOY);

            question_max("[SLOW]Cheats:[CHOICE]Basics[CHOICE]All[CHOICE]Alchemy[CHOICE]Money", 0x08);

            if(MEMORY.QUESTION_ANSWER == 0x00) { // basics
                unlock(WEAPONS);
                unlock(JAGUAR_RING);
                unlock(CONSUMABLES);
                unlock(INGREDIENTS);
                unlock(MONEY);
                
                // unlock(SPEAR_1);
                unlock(AXE_2);

                set(FLAG.REVEALER);
                MEMORY.SELECTED_ALCHEMY_0 = ALCHEMY_INDEX.REVEALER;
                set(FLAG.LEVITATE);
                MEMORY.SELECTED_ALCHEMY_1 = ALCHEMY_INDEX.LEVITATE;
                set(FLAG.HARD_BALL);
                MEMORY.SELECTED_ALCHEMY_2 = ALCHEMY_INDEX.HARD_BALL;

                set(SOULS_MEMORY.BOMB_ENABLED);
            } else if(MEMORY.QUESTION_ANSWER == 0x01) { // all
                unlock(ALL);
            } else if(MEMORY.QUESTION_ANSWER == 0x02) { // alchemy
                unlock(ALCHEMY);
                unlock(INGREDIENTS);

                select_alchemy();
            } else if(MEMORY.QUESTION_ANSWER == 0x03) { // money
                currency_get(CURRENCY.TALONS, 0x29a);
            } else if(MEMORY.QUESTION_ANSWER == 0x04) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x05) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x06) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x07) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x08) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x09) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x0a) { // nop
                nop();
            }
        }

        @install()
        @async()
        fun revealer_approached() {
            attach_to_script(ROOM.BRIDGE_REVEALER_ENTITY);

            while!(dead(<SCRIPT_OWNER>)) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = <SCRIPT_OWNER>[X];
                arg[0x06] = <SCRIPT_OWNER>[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    ravine_triggered();
                    end();
                }

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }

                yield();
            }
        }

        @install()
        fun revealer_triggered() {
            set(ROOM.BRIDGE_REVEALED);
            object[0x02] = 0x7e;
            sleep(0x29);
            destroy(ROOM.BRIDGE_REVEALER_ENTITY);
        }

        @install()
        fun debug_triggered() {
            if(False) {
                unlock(ALL);
            } else {
                unlock(WEAPONS);
                unlock(JAGUAR_RING);
                unlock(CHARMS);
                unlock(CONSUMABLES);
                unlock(INGREDIENTS);
                unlock(MONEY);
                
                // unlock(SPEAR_1);
                unlock(AXE_2);

                set(FLAG.REVEALER);
                MEMORY.SELECTED_ALCHEMY_0 = ALCHEMY_INDEX.REVEALER;
                set(FLAG.LEVITATE);
                MEMORY.SELECTED_ALCHEMY_1 = ALCHEMY_INDEX.LEVITATE;
                set(FLAG.HARD_BALL);
                MEMORY.SELECTED_ALCHEMY_2 = ALCHEMY_INDEX.HARD_BALL;

                set(FLAG.ATLAS);
                MEMORY.SELECTED_ALCHEMY_3 = ALCHEMY_INDEX.ATLAS;
                set(FLAG.DEFEND);
                MEMORY.SELECTED_ALCHEMY_4 = ALCHEMY_INDEX.DEFEND;

                set(SOULS_MEMORY.BOMB_ENABLED);
                set(SOULS_MEMORY.MARIO_YUMP_ENABLED);
                set(SOULS_MEMORY.ISAAC_TEARS_ENABLED);
                set(SOULS_MEMORY.PUPPER_ENABLED);
            }

            if(False) {
                unlock(ALCHEMY);
                select_alchemy();
            }

            update_debug_menu();
            
            destroy(SCRIPT_OWNER);
        }

        @install()
        fun message_triggered() {
            player_message_triggered();

            subtext("try rolling");
        }
        
        @install()
        fun trigger_enter() {
            if(SOULS_MEMORY.DEMO_MODE) {
                if!(FLAG.ENERGY_CORE) {
                    add_placeholder(ANIMATION_PLACEHOLDER.ENERGY_CORE_OPEN, 0x1f, 0x47);
                    attach_script(LAST_ENTITY, TALK, reference(energy_core_triggered));
                }

                add_enemy_with_flags(TINKER, 0x0c, 0x42, INACTIVE);
                <LAST_ENTITY>[HP] = 0x32;
                attribute(LAST_ENTITY, INVINCIBLE, False);
                attribute(LAST_ENTITY, INVINCIBLE_TEMP, False);
                attach_script(LAST_ENTITY, TALK, reference(cheat_selection));

                add_enemy_with_flags(FIRE_EYES, 0x11, 0x42, INACTIVE);
                <LAST_ENTITY>[HP] = 0x32;
                attach_script(LAST_ENTITY, TALK, reference(test_room_portal));
                attribute(LAST_ENTITY, INVINCIBLE, False);
                attribute(LAST_ENTITY, INVINCIBLE_TEMP, False);
            }

            add_debug_entity(0d16, 0d63, reference(debug_triggered));

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // center
                add_enemy(FLOWER_PURPLE, 0d52, 0d79);

                // north
                add_enemy(BUZZARD_1, 0d29, 0d35);

                // east
                // add_enemy(FLOWER_PURPLE, 0x59, 0x4f);
                add_enemy(FLOWER_PURPLE, 0x4d, 0x4a);
                ROOM.FLOWER_GATE = <LAST_ENTITY>;

                // south
                add_enemy(FLOWER_PURPLE, 0d28, 0d109);

                add_enemy(FLOWER_PURPLE, 0d36, 0d96);

                add_enemy(FLOWER_PURPLE, 0x2a, 0x56);
            }

            if!(ROOM.BRIDGE_REVEALED) {
                add_enemy(REVEALER_TARGET_ENTITY, 0x24, 0x1a);
                ROOM.BRIDGE_REVEALER_ENTITY = <LAST_ENTITY>;

                special_script(REVEALER, reference(revealer_triggered));
                revealer_approached();
            } else {
                revealer_triggered();
            }

            init_room();

            if!(FLAG.IN_ANIMATION) {
                if!(SOULS_MEMORY.INTRO_WATCHED) {
                    set(SOULS_MEMORY.INTRO_WATCHED);

                    intro();

                    subtext("v0.4.0 - debug - by r.bin");
                }
                
                // code(0xa3, 0x18, "// (a3) CALL 'Prepare room change? North exit/south entrance outdoor-indoor?' (0x26)"); // TODO: 4x4 combinations, not 4
                // 19=ww, 1a=Ww, 1b=wn, 1c=ws, 1d=ee, 1e=Ee, 1f=EN
                // 20=ES, 21=SS, 22=Ss, 23=sW, 24=SW, 25=SE, 26=NN, 27=NN, 28=NE, 29=NW, 2a=NS, 2b=Ns, 2c=ns, 2d=ss

                // load_map(0x05, 0x0f, 0x47);
            }

            bonfire(0x31, 0x35, SOULS_MEMORY.BONFIRE_INBETWIXX);
            bomb_wall_trigger(0x01, 0x01, 0x3f, 0x3c);
            bomb_wall_trigger(0x00, 0x10, 0x43, 0x60);

            // object[0x02] = 0x01; // show bridge
            // object[0x01] = 0x01; // open wall_1
            // object[0x00] = 0x01; // open wall_2
            // object[0x04] = 0x01; // block exit_east_left
            // object[0x03] = 0x01; // block exit_east_right
            // object[0x05] = 0x01; // block gourd_1_1
            // object[0x07] = 0x01; // block gourd_1_2
            // object[0x08] = 0x01; // block gourd_1_3
            // object[0x06] = 0x01; // block gourd_2_1
            // sniff spots

            player_message(0d30, 0d75, reference(message_triggered));
        }
    };
};

area north_inbetwixx() {
    map north_inbetwixx(0x2b) {
        enum entrance {
            north = entrance(0x41, 0x03, SOUTH),
            south = entrance(0x45, 0x41, NORTH),
        }

        enum stepon_trigger {
            exit_south = @install() {
                map_transition(inbetwixx, north, SOUTH);
            },
            exit_north = @install() {
                subtext("S=1");
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
        }

        fun place_masks(position) {
            if(position == 0x01) {
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x3d, 0x04);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_2, 0x46, 0x04);

                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_3, 0x42, 0x0b);
            } else if(position == 0x02) {
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x38, 0x04);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_2, 0x4c, 0x04);
            } else if(position == 0x03) {
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x32, 0x14);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_2, 0x32, 0x24);

                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_3, 0x52, 0x14);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x52, 0x24);
            }
        }

        enum BOSS_STOMPY {
            DEBUG = False,
            IN_PROGRESS = memory_tmp(),

            RIDER_ID = memory_tmp(),
            MOUNT_ID = memory_tmp(),

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            HP = 0x03e8, // 1000

            COUNTDOWN = 0x03,

            STOMP_ENTITY = memory_tmp(),
            STOMP_DISTANCE = 0x20,
            STOMP_COOL_DOWN_TIMER = memory_tmp(),
            STOMP_COOL_DOWN = 0x100,
            STOMP_DAMAGE_CLOSE = 0x50,
            STOMP_DAMAGE = 0x10,
            STOMP_EXPLOSION_DISTANCE = 0x30,

            // p1

            P1_THRESHOLD = 0x320, // 800
            P1_TIME_BEFORE_SALVAGE = 0x500,

            // p2

            P2_THRESHOLD = 0x1f4, // 500
            P2_TIME_BEFORE_SALVAGE = 0x300,

            RANDOM_SPELL = memory_tmp(),
            TIME_BEFORE_RANDOM_SPELL = 0x300,
        }

        fun boss_killed() {
            set(SOULS_MEMORY.DEAD_STOMPY_RADAHN);
        }

        @install()
        @async()
        fun stomp() {
            BOSS_STOMPY.MOUNT_ID[JUMP_HEIGHT] = 0x30;

            // attribute(BOSS_STOMPY.MOUNT_ID, ROOT, True);
            // animate(BOSS_STOMPY.MOUNT_ID, LOOP, ANIMATION_ENEMY.STERLING_FLY_1);

            sleep(0x60);

            add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_GREEN_3, 0x00, 0x00);
            BOSS_STOMPY.STOMP_ENTITY = <LAST_ENTITY>;
            <LAST_ENTITY>[X] = BOSS_STOMPY.MOUNT_ID[X];
            <LAST_ENTITY>[Y] = BOSS_STOMPY.MOUNT_ID[Y] + 0x10;

            arg[0x00] = BOSS_STOMPY.STOMP_ENTITY[X];
            arg[0x02] = BOSS_STOMPY.STOMP_ENTITY[Y];
            arg[0x04] = <BOY>[X];
            arg[0x06] = <BOY>[Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= BOSS_STOMPY.STOMP_DISTANCE) && (arg[0x0a] <= BOSS_STOMPY.STOMP_DISTANCE)) {
                damage(BOY, BOSS_STOMPY.STOMP_DAMAGE_CLOSE, True);
            } else if((arg[0x08] <= BOSS_STOMPY.STOMP_EXPLOSION_DISTANCE) && (arg[0x0a] <= BOSS_STOMPY.STOMP_EXPLOSION_DISTANCE)) {
                damage(BOY, BOSS_STOMPY.STOMP_DAMAGE, True);
            }

            if(BOSS_STOMPY.DEBUG) {
                debug_memory(arg[0x08], arg[0x0a]);
                sleep(0x20);
            }

            sleep(0x30);
            destroy(BOSS_STOMPY.STOMP_ENTITY);
            // attribute(BOSS_STOMPY.MOUNT_ID, ROOT, True);
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(BOSS_STOMPY.MOUNT_ID)) {
                if(BOSS_STOMPY.STOMP_COOL_DOWN_TIMER == 0x0000) {
                    arg[0x00] = BOSS_STOMPY.MOUNT_ID[X];
                    arg[0x02] = BOSS_STOMPY.MOUNT_ID[Y];
                    arg[0x04] = <ACTIVE>[X];
                    arg[0x06] = <ACTIVE>[Y];

                    if(arg[0x00] < arg[0x04]) {
                        arg[0x08] = arg[0x04] - arg[0x00];
                    } else {
                        arg[0x08] = arg[0x00] - arg[0x04];
                    }

                    if(arg[0x02] < arg[0x06]) {
                        arg[0x0a] = arg[0x06] - arg[0x02];
                    } else {
                        arg[0x0a] = arg[0x02] - arg[0x06];
                    }

                    if((arg[0x08] <= BOSS_STOMPY.STOMP_DISTANCE) && (arg[0x0a] <= BOSS_STOMPY.STOMP_DISTANCE)) {
                        BOSS_STOMPY.STOMP_COOL_DOWN_TIMER = BOSS_STOMPY.STOMP_COOL_DOWN;

                        stomp();
                        call_async(ADDRESS.STERLING_ROAR);
                    }

                    // if(BOSS_STOMPY.DEBUG) {
                    //     debug_memory(arg[0x08], arg[0x0a]);
                    //     sleep(0x20);
                    // }
                } else {
                    BOSS_STOMPY.STOMP_COOL_DOWN_TIMER -= 0x01;
                }

                // yield();
                sleep(0x02);
            }
        }

        fun trigger_enter() {
            // place_masks(0x01);

            add_enemy(VERMINATOR, 0x42, 0x07);
            attribute(LAST_ENTITY, ROOT, True);

            add_enemy(FORESTDRAKE, 0x38, 0x1d);
            BOSS_STOMPY.MOUNT_ID = <LAST_ENTITY>;
            stack_t01_offset();

            add_enemy(STERLING, 0x4b, 0x1d);
            // add_enemy(STERLING, 0x4b, 0x1d);
            // attribute(LAST_ENTITY, NO_CLIP, True);

            fade_in();
        }
    };
};

area west_inbetwixx() {
    map west_inbetwixx(0x5b) {
        enum entrance {
            north = entrance(0x12, 0x09, SOUTH),
            east_1 = entrance(0x6d, 0x11, WEST),
            east_2 = entrance(0x6d, 0x23, WEST),
            east_3 = entrance(0x6d, 0x35, WEST),
            west = entrance(0x01, 0x37, EAST),
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            BRANCH_USED = flag(),

            FAKE_SLASH_GRASS_X = memory_tmp(),
            FAKE_SLASH_GRASS_Y = memory_tmp(),
        }

        enum BOSS {
            DEBUG = False,

            ID_OWL_1 = memory_tmp(),
            ID_OWL_2 = memory_tmp(),

            TRANSFORM_DISTANCE = 0x10
        }

        enum stepon_trigger {
            exit_east_1 = @install() {
                map_transition(west_inbetwixx, east_3, EAST);
            },
            exit_east_3 = @install() {
                map_transition(west_inbetwixx, east_1, EAST);
            },
            exit_east_2 = @install() {
                map_transition(inbetwixx, west_1, EAST);
            },
            exit_west = @install() {
                map_transition(west_hut_outside, east, WEST);
            },
            exit_north = @install() {
                map_transition(volcano, south, NORTH);
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
        }
        
        @install()
        fun fake_slash_grass() { // unused
            if(<0x22DA> == 0x02) {
                // fade_out();
                // sleep(0x20);

                ROOM.FAKE_SLASH_GRASS_X = <BOY>[X];
                ROOM.FAKE_SLASH_GRASS_Y = <BOY>[Y];

                <BOY>[X] = 0x010B;
                <BOY>[Y] = 0x0187;
                face(BOY, EAST);

                MEMORY.GAIN_WEAPON = 0x18;
                yield();
                // <0x0ABA> = 0x0000;
                if(False) {
                    attribute(BOY, INVINCIBLE_TEMP, True);

                    add_enemy(BOY_DERPY, 0x21, 0x30);
                    // animate(LAST_ENTITY, LOOP, ANIMATION_ALL.SLASH_1);
                    attribute(LAST_ENTITY, ROOT, True);
                    // attribute(LAST_ENTITY, INVISIBLE, True);
                    attribute(LAST_ENTITY, MUTE, True);
                    face(LAST_ENTITY, EAST);
                    sleep(0x05);

                    attribute(BOY, INVINCIBLE_TEMP, False);
                } else {
                    attribute(BOY, INVISIBLE, True);
                    // attribute(BOY, MUTE, True);
                    animate(BOY, ONCE, ANIMATION_ALL.SLASH_1);
                    yield();
                    sound(0x01);
                    // sound(0x0c);
                    // sleep(0x05);
                    animate(BOY, ONCE, ANIMATION_ALL.DEFAULT);
                    sleep(0x10);
                    // attribute(BOY, MUTE, False);
                    attribute(BOY, INVISIBLE, False);
                }
                MEMORY.GAIN_WEAPON = 0x02;
                unset(<0x22DB, 0x10>);

                <BOY>[X] = ROOM.FAKE_SLASH_GRASS_X;
                <BOY>[Y] = ROOM.FAKE_SLASH_GRASS_Y;

                // sound(0x01);

                // sleep(0x20);
                // fade_in();
            }
        }

        fun init_room() {
            init_map(0x00, 0x06, 0x6e, 0x52);
            default_init_room(True, True);

            subtext("West Inbetwixx");
        }

        @install()
        fun branch_triggered() {
            if(MEMORY.SPOON > 0x00) {
                question("[SLOW]Use Spoon[CHOICE]Yes[CHOICE]No");

                if(MEMORY.QUESTION_ANSWER == 0x00) {
                    MEMORY.SPOON -= 0x01;
                    set(ROOM.BRANCH_USED);

                    <SCRIPT_OWNER>[PALETTE] = 0x0800;
                    control_enemy(SCRIPT_OWNER, False);
                }
            } else {
                dialog("...[0x80][0x19][0x81]");
            }
        }

        @install()
        fun transform() {
            control_enemy(BOSS.ID_OWL_1, True);
            control_enemy(BOSS.ID_OWL_2, True);

            destroy(BOSS.ID_OWL_1);

            attribute(BOSS.ID_OWL_2, INVINCIBLE, True);

            animate(BOSS.ID_OWL_2, ONCE_FREEZE, ANIMATION_ENEMY.BLACK_OWL_FUSION);

            sleep(0x30);

            add_enemy(BOY_BLACK, 0x00, 0x00);
            <LAST_ENTITY>[X] = BOSS.ID_OWL_2[X];
            <LAST_ENTITY>[Y] = BOSS.ID_OWL_2[Y];
            destroy(BOSS.ID_OWL_2);
        }

        @install()
        @async()
        fun grabby_owls() {
            while(True) {
                arg[0x00] = BOSS.ID_OWL_1[X];
                arg[0x02] = BOSS.ID_OWL_1[Y];
                arg[0x04] = BOSS.ID_OWL_2[X];
                arg[0x06] = BOSS.ID_OWL_2[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= BOSS.TRANSFORM_DISTANCE) && (arg[0x0a] <= BOSS.TRANSFORM_DISTANCE)) {
                    transform();
                    end();
                }
                yield();

                if(BOSS.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }
            }
        }
        
        @install()
        fun owl_triggered() {
            heal(SCRIPT_OWNER, 0x00, False);
            yield();
            damage(SCRIPT_OWNER, 0x00, True);
            // <SCRIPT_OWNER>[WEIRD_KNOCKBACK] = 0x1ff;
            // animate(SCRIPT_OWNER, ONCE, ANIMATION_ALL.KNOCKBACK);

            if(<SCRIPT_OWNER>[GENERAL_PURPOSE] > 0x00) {
                sleep(0x30);
                animate(SCRIPT_OWNER, ONCE_FREEZE, ANIMATION_ALL.SLASH_2);
            }
        }

        @install()
        fun quest() { // unused
            question("[SLOW]Cut grass?[CHOICE]Yes[CHOICE]No");

            if(MEMORY.QUESTION_ANSWER == 0x00) {
                // fake_slash_grass();

                sleep(0x30);
                <0x2834> = BOSS.ID_OWL_1;
                _heel(<0x2834>, 0x00, 0x00);
            }
        }

        fun fake_slash_grass_npc() { // unused
            add_enemy_with_flags(VILLAGER_1_1, 0x36, 0x49, INACTIVE);
            face(LAST_ENTITY, WEST);
            attach_script(LAST_ENTITY, TALK, reference(quest));
        }

        @install()
        fun message_triggered() {
            player_message_triggered();

            subtext("prisoner ahead and then bonfire!");
        }

        fun trigger_enter() {
            // fake_slash_grass();
            // fake_slash_grass_npc();
            
            if!(ROOM.BRANCH_USED) {
                branch_lady(0x58, 0x0f, reference(branch_triggered));
            }

            add_enemy(OWL_BLACK, 0x2d, 0x21);
            // <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
            attach_script(LAST_ENTITY, DAMAGE, reference(owl_triggered));
            BOSS.ID_OWL_1 = <LAST_ENTITY>;

            add_enemy_with_flags(OWL_BLACK, 0x47, 0x42, INACTIVE);
            // <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
            attach_script(LAST_ENTITY, DAMAGE, reference(owl_triggered));
            <LAST_ENTITY>[GENERAL_PURPOSE] = 0x01;
            BOSS.ID_OWL_2 = <LAST_ENTITY>;
            animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ALL.SLASH_2);
            face(LAST_ENTITY, SOUTH);

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // inside
                add_enemy(FLOWER_PURPLE, 0x1e, 0x2c);

                // add_enemy(RAT, 0d51, 0d43); // backup

                // east
                add_enemy(TUMBLING_WEED, 0d77, 0d36);

                // west
                add_enemy(FLOWER_PURPLE, 0d13, 0d52);

                // cliff
                // add_enemy_with_flags(OWL_BLACK, 0d97, 0d55, INACTIVE);
            }

            init_room();
            
            grabby_owls();

            player_message(0d23, 0d66, reference(message_triggered));
        }
    };

    map west_hut_outside(0x33) {
        enum entrance {
            hut = entrance(0x13, 0x13, SOUTH), // TODO: 13/15
            east = entrance(0x25, 0x12, WEST),

            backdoor = entrance(0x0f, 0x0f, WEST),
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum stepon_trigger {
            stepon_0 = @install() {
                map_transition(west_hut_inside, door, NORTH);
            },
            stepon_1 = @install() {
                map_transition(west_inbetwixx, west, EAST);
            }
        }

        @install()
        fun secret_room_triggered() {
            map_transition(potato_room, stairs, WEST);
        }

        fun trigger_enter() {

            default_init_room(True, True);

            // add_enemy(PLACEHOLDER, 0x0d, 0x0e);
            add_enemy(PLACEHOLDER, 0x0d, 0x12);
            attach_script(LAST_ENTITY, TALK, reference(secret_room_triggered));
        }
    };

    map potato_room(0x60) {
        enum entrance {
            stairs = entrance(0x29, 0x0d, WEST)
        }

        enum stepon_trigger {
            exit_stairs = @install() {
                map_transition(west_hut_outside, backdoor, EAST);
            },
        }

        enum b_trigger {
            gourd_1 = @install() {
                _loot_chest(0x00, WATER, 0x01);
            },
            gourd_2 = @install() {
                _loot_chest(0x01, WATER, 0x02);
            },
            gourd_3 = @install() {
                _loot_chest(0x02, WATER, 0x03);
            },
        }

        fun trigger_enter() {
            default_init_room(True, False);
        }
    };

    map west_hut_inside(0x34) {
        enum entrance {
            door = entrance(0x12, 0x23, NORTH)
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            CLUE_1 = flag(),
            CLUE_2 = flag(),
        }

        enum stepon_trigger {
            stepon_0 = @install() {
                map_transition(west_hut_outside, hut, SOUTH);
            }
        }

        enum b_trigger {
            gourd_1  = @install() {
                nop();
            },
            gourd_2 = @install() {
                fake_loot_gourd();

                object[0x02] = 0x01; // unload gourd_2
                subtext("Locked away childrens toys.");
                set(ROOM.CLUE_1);
            },
            gourd_3 = @install() {
                fake_loot_gourd();

                object[0x01] = 0x01; // unload gourd_3
                subtext("Cheap religious artifacts.");
                set(ROOM.CLUE_2);
            },
        }

        @install()
        fun trap_door() {
            if!(ROOM.CLUE_1) {
                fake_b();
                end();
            }
            if!(ROOM.CLUE_2) {
                fake_b();
                end();
            }
            
            question("[SLOW]A trap door. Do you want to enter it?[CHOICE]Yes[CHOICE]No");

            if(MEMORY.QUESTION_ANSWER == 0x00) {
                map_transition(basement_0_start, center, NONE);
            }
        }

        fun trigger_enter() {
            object[0x00] = 0x01; // unload gourd_1
            if(ROOM.CLUE_1) {
                object[0x02] = 0x01; // unload gourd_2
            }
            if(ROOM.CLUE_2) {
                object[0x01] = 0x01; // unload gourd_3
            }

            add_enemy(PLACEHOLDER, 0x0f, 0x12);
            attach_script(LAST_ENTITY, TALK, reference(trap_door));

            default_init_room(True, False);
        }
    };
};

area altus_plateau_entry() {
    enum AREA_ALTUS_PLATEAU {
        ENTRANCE_UNLOCKED = flag(),
    }

    map volcano(0x69) {
        enum entrance {
            cutscene_north_1 = entrance(0x4a, 0x38, NONE),
            cutscene_north_2 = entrance(0x5f, 0x1b, NONE),
            east = entrance(0x6d, 0x83, WEST), // 0x6b, 0x83
            south = entrance(0x1b, 0x9d, NORTH),

            cave_west = entrance(0x0b, 0x70, SOUTH),
            cave_center = entrance(0x3f, 0x4a, SOUTH),
            cave_east = entrance(0x4d, 0x6a, SOUTH),

            cave_gauge = entrance(0x5f, 0x16, SOUTH),
        }

        enum soundtrack {
            default = soundtrack(JUNGLE_AMBIENT_BIRDS, 0xff)
        }

        enum ROOM {
            STONE_MOVED = flag(),
        }

        enum stepon_trigger {
            tunnel_gauge = @install() {
                map_transition(cave_gauge, south, NORTH);
            },
            stepon_1 = @install() {
                subtext("S=1");
            },
            stepon_2 = @install() {
                subtext("S=2");
            },
            stepon_3 = @install() {
                subtext("S=3");
            },
            stepon_4 = @install() {
                subtext("S=4");
            },
            stepon_5 = @install() {
                subtext("S=5");
            },
            stepon_6 = @install() {
                subtext("S=6");
            },
            stepon_7 = @install() {
                subtext("S=7");
            },
            stepon_8 = @install() {
                subtext("S=8");
            },
            stepon_9 = @install() {
                subtext("S=9");
            },

            stepon_10 = @install() {
                subtext("S=10");
            },
            exit_south = @install() {
                map_transition(west_inbetwixx, north, SOUTH);
            },
            cave_east = @install() {
                map_transition(cave_shop, south, NORTH);
            },
            cave_west = @install() {
                if(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED) {
                    map_transition(stairs, stairs_west_bottom, NORTH);
                } else {
                    subtext("Does not open from this side.");
                }
            },
            cave_center = @install() {
                map_transition(volcano_tower, south, NORTH);
            },
            exit_east = @install() {
                map_transition(northwest_inbetwixx, west, EAST);
            },
            stepon_16 = @install() {
                subtext("S=16");
            },
            stepon_17 = @install() {
                subtext("S=17");
            },
            stepon_18 = @install() {
                subtext("S=18");
            },
            stepon_19 = @install() {
                subtext("S=19");
            },

            stepon_20 = @install() {
                subtext("S=20");
            },
            plate_0_2_1 = @install() {
                if(ROOM.STONE_MOVED) {
                    subtext("S=21");
                }
            },
            plate_0_2_2 = @install() {
                if(ROOM.STONE_MOVED) {
                    subtext("S=22");
                }
            },
            stepon_23 = @install() {
                subtext("S=23");
            },
            stepon_24 = @install() {
                subtext("S=24");
            },
            stepon_25 = @install() {
                subtext("S=25");
            },
            stepon_26 = @install() {
                subtext("S=26");
            },
            stepon_27 = @install() {
                subtext("S=27");
            },
            stepon_28 = @install() {
                subtext("S=28");
            },
            stepon_29 = @install() {
                subtext("S=29");
            },

            stepon_30 = @install() {
                subtext("S=30");
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
            b_trigger_17 = @install() {
                subtext("B=17");
            },
            b_trigger_18 = @install() {
                subtext("B=18");
            },
            b_trigger_19 = @install() {
                subtext("B=19");
            },

            b_trigger_20 = @install() {
                subtext("B=20");
            },
            b_trigger_21 = @install() {
                subtext("B=21");
            },
            b_trigger_22 = @install() {
                subtext("B=22");
            },
            b_trigger_23 = @install() {
                subtext("B=23");
            },
            b_trigger_24 = @install() {
                subtext("B=24");
            },
            b_trigger_25 = @install() {
                subtext("B=25");
            },
            b_trigger_26 = @install() {
                subtext("B=26");
            },
            b_trigger_27 = @install() {
                subtext("B=27");
            },
            b_trigger_28 = @install() {
                subtext("B=28");
            },
            b_trigger_29 = @install() {
                subtext("B=29");
            },

            b_trigger_30 = @install() {
                subtext("B=30");
            },
            b_trigger_31 = @install() {
                subtext("B=31");
            },
            plate_0_1 = @install() {
                subtext("B=32");
            },
        }

        @install()
        fun debug_triggered() {
            set(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED);

            destroy(SCRIPT_OWNER);
        }

        fun trigger_enter() {
            if(FLAG.DEBUG) {
                if!(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED) {
                    add_debug_entity(0x06, 0x78, reference(debug_triggered));
                }
            }

            add_enemy(STONE, 0d68, 0d65);

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // path
                add_enemy(FLOWER_PURPLE, 0d31, 0d103);

                add_enemy(MONK, 0d79, 0d84);

                add_enemy(HEDGEHOG, 0d58, 0d67);

                // east
                add_enemy(FLOWER_PURPLE, 0d85, 0d115);

                // west
                add_enemy(HEDGEHOG, 0d19, 0d125);
                add_enemy(FLOWER_PURPLE, 0d17, 0d126);
            }

            default_init_room(True, True);
        }
    };

    area behind_volcano() {
        map volcano_tower(0x37) {
            enum entrance {
                south = entrance(0x55, 0xf9, NORTH),
                platform = entrance(0x51, 0x2f, NORTH),

                bonfire = entrance(0d67, 0d159, NONE),
            }

            enum soundtrack {
                default = soundtrack(0x68, 0xff),
            }

            enum stepon_trigger {
                elevator_bottom = @install() {
                    subtext("S=0");
                },
                elevator_top = @install() {
                    subtext("S=1");
                },
                spawn_boss = @install() {
                    subtext("S=2");
                },
                trapdoor_4 = @install() {
                    subtext("S=3");
                },
                exit_south = @install() {
                    map_transition(volcano, cave_center, SOUTH);
                },
                trapdoor_1 = nop(),
                stepon_6 = @install() {
                    subtext("S=6");
                },
                stepon_7 = @install() {
                    subtext("S=7");
                },
                trapdoor_2 = @install() {
                    object[0x06] = 0x03; // activate trapdoor_2
                },
                stepon_9 = @install() {
                    subtext("S=9");
                },

                trapdoor_3 = @install() {
                    subtext("S=10");
                },
                stepon_11 = @install() {
                    subtext("S=11");
                }
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                b_trigger_2 = @install() {
                    subtext("B=2");
                },
                b_trigger_3 = @install() {
                    subtext("B=3");
                },
                b_trigger_4 = @install() {
                    subtext("B=4");
                },
                b_trigger_5 = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                b_trigger_7 = @install() {
                    subtext("B=7");
                },
                b_trigger_8 = @install() {
                    subtext("B=8");
                },
                b_trigger_9 = @install() {
                    subtext("B=9");
                },

                b_trigger_10 = @install() {
                    subtext("B=10");
                },
                b_trigger_11 = @install() {
                    subtext("B=11");
                },
                b_trigger_12 = @install() {
                    subtext("B=12");
                },
                b_trigger_13 = @install() {
                    subtext("B=13");
                },
                b_trigger_14 = @install() {
                    subtext("B=14");
                },
                b_trigger_15 = @install() {
                    subtext("B=15");
                },
                b_trigger_16 = @install() {
                    subtext("B=16");
                },
                b_trigger_17 = @install() {
                    subtext("B=17");
                },
                b_trigger_18 = @install() {
                    subtext("B=18");
                },
                b_trigger_19 = @install() {
                    subtext("B=19");
                },

                b_trigger_20 = @install() {
                    _loot_chest(0x02, LOOT_REWARD.SPOON, 0x01, 0x00);
                },
                b_trigger_21 = @install() {
                    subtext("B=21");
                }
            }

            @install()
            fun lift_off() {
                <0x2834> = <SCRIPT_OWNER>[X];
                <0x2836> = <SCRIPT_OWNER>[Y];
                // walk_relative(BOY, TILE_ABSOLUTE_DIRECT, <SCRIPT_OWNER>[X], <SCRIPT_OWNER>[Y], False);
                // walk_relative(BOY, TILE_ABSOLUTE_DIRECT, <0x2834>, <0x2836>, False);
                control(NONE);
                _walk(DOG, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X] + 0x30, <SCRIPT_OWNER>[Y] - 0x05, NONE);
                _walk(BOY, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X] + 0x30, <SCRIPT_OWNER>[Y] - 0x05, BOTH);
                _walk(DOG, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X] - 0x20, <SCRIPT_OWNER>[Y] - 0x05, NONE);
                _walk(BOY, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X] - 0x10, <SCRIPT_OWNER>[Y] - 0x05, BOTH);
                
                face(BOY, EAST);
                face(DOG, EAST);
                sleep(0x20);

                while(arg[0x00] < 0xa0) {
                    arg[0x00] += 0x01;
                    control(NONE);
                    face(BOY, EAST);
                    face(DOG, EAST);
                    <SCRIPT_OWNER>[Y] -= 0x01;
                    <BOY>[Y] -= 0x01;
                    <DOG>[Y] -= 0x01;

                    yield();
                }

                map_transition(windwalker_sidescroller, west, NONE);
            }

            enum ROOM {
                COLLECTIBLE_LOOTED = flag(),
            }

            @install()
            fun collectible_triggered() {
                collectible_collected();

                set(ROOM.COLLECTIBLE_LOOTED);
                destroy(SCRIPT_OWNER);
            }

            fun trigger_enter() {
                // object[0x00] = 0x01; // open chest_2
                // object[0x01] = 0x01; // open elevator_bottom
                // object[0x02] = 0x01; // open chest_3
                object[0x03] = 0x01; // activate trapdoor_4
                // object[0x04] = 0x01; // open elevator_top
                object[0x05] = 0x03; // activate trapdoor_3
                // object[0x06] = 0x03; // activate trapdoor_2
                // object[0x07] = 0x03; // activate trapdoor_1
                // object[0x08] = 0x01; // open chest_1
                // object[0x09] = 0x01; // open chest_4
                // object[0x0a] = 0x01; // block elevator_top

                if!(ROOM.COLLECTIBLE_LOOTED) {
                    add_collectible(0x00, 0d43, 0d10, reference(collectible_triggered));
                }

                add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0d24, 0d109);
                attach_script(LAST_ENTITY, TALK, reference(lift_off));

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // level 0
                    add_enemy(FLOWER_PURPLE, 0d81, 0d239);

                    // level 1
                    add_enemy(MONK, 0d93, 0d209);
                    add_enemy(HEDGEHOG, 0d54, 0d186);

                    // level 2
                    add_enemy(MONK, 0d25, 0d175);

                    // level 3
                    add_enemy(HEDGEHOG, 0d41, 0d160);

                    // level 5
                    // add_enemy(BUZZARD_1, 0d29, 0d123);
                    add_enemy(RAT, 0d29, 0d123);
                    add_enemy(RAT, 0d29, 0d123);
                }

                bonfire(0d67, 0d159);

                default_init_room(True, True);
            }
        };

        map windwalker_sidescroller(0x50) {
            enum entrance {
                west = entrance(0x06, 0x0f, NONE),
                south = entrance(0x10, 0x19, NONE),
            }

            enum soundtrack {
                default = soundtrack(0x84, 0xff)
            }

            enum ROOM {
                SHIP_ID = memory_tmp(),

                START_HEIGHT = 0x1fff,

                LANE_1 = 0x05,
                LANE_2 = 0x0c,
                LANE_3 = 0x15,
            }

            enum BOSS {
                DEBUG = False,
                
                ID = memory_tmp(),
                PHASE = memory_tmp(),

                HP = 0x05,

                TURN_TIME = 0x30,

                P1_THRESHOLD = 0x04,

                RING_TIMER = memory_tmp(),
                RING_X = memory_tmp(),
                RING_Y = memory_tmp(),
                RING_PROJECTILE = THROWABLE.CITRON,
                RING_SLEEP = 0x05,
                RING_STEP = 0x40,
                RING_RADIUS = 0x100,

                RING_DOUBLE = False,
            }

            fun shoot_boss(x, y) {
                sound(PROJECTILE_SHOOTING);
                shoot_entity_relative(BOSS.ID, BOSS.RING_PROJECTILE, x, y, 0x14, 0x0a);
            }

            @install()
            @async()
            fun ring() {
                BOSS.RING_X = 0x0100;
                BOSS.RING_Y = 0x0000;

                while(BOSS.RING_TIMER > 0x00) {
                    face(BOSS.ID, EAST);

                    while(BOSS.RING_Y < BOSS.RING_RADIUS) {
                        shoot_boss(BOSS.RING_X, BOSS.RING_Y);
                        if(BOSS.RING_DOUBLE) {
                            shoot_boss(-(BOSS.RING_X), -(BOSS.RING_Y));
                        }
                        sleep(BOSS.RING_SLEEP);
                        BOSS.RING_Y += BOSS.RING_STEP;
                    }
                    while(BOSS.RING_X > 0x00) {
                        shoot_boss(BOSS.RING_X, BOSS.RING_Y);
                        if(BOSS.RING_DOUBLE) {
                            shoot_boss(-(BOSS.RING_X), -(BOSS.RING_Y));
                        }
                        sleep(BOSS.RING_SLEEP);
                        BOSS.RING_X -= BOSS.RING_STEP;
                    }

                    face(BOSS.ID, SOUTH);
                    while(BOSS.RING_X < BOSS.RING_RADIUS) {
                        shoot_boss(-(BOSS.RING_X), BOSS.RING_Y);
                        if(BOSS.RING_DOUBLE) {
                            shoot_boss(BOSS.RING_X, -(BOSS.RING_Y));
                        }
                        sleep(BOSS.RING_SLEEP);
                        BOSS.RING_X += BOSS.RING_STEP;
                    }
                    while(BOSS.RING_Y > 0x00) {
                        shoot_boss(-(BOSS.RING_X), BOSS.RING_Y);
                        if(BOSS.RING_DOUBLE) {
                            shoot_boss(BOSS.RING_X, -(BOSS.RING_Y));
                        }
                        sleep(BOSS.RING_SLEEP);
                        BOSS.RING_Y -= BOSS.RING_STEP;
                    }

                    face(BOSS.ID, WEST);
                    while(BOSS.RING_Y < BOSS.RING_RADIUS) {
                        shoot_boss(-(BOSS.RING_X), -(BOSS.RING_Y));
                        if(BOSS.RING_DOUBLE) {
                            shoot_boss(BOSS.RING_X, BOSS.RING_Y);
                        }
                        sleep(BOSS.RING_SLEEP);
                        BOSS.RING_Y += BOSS.RING_STEP;
                    }
                    while(BOSS.RING_X > 0x00) {
                        shoot_boss(-(BOSS.RING_X), -(BOSS.RING_Y));
                        if(BOSS.RING_DOUBLE) {
                            shoot_boss(BOSS.RING_X, BOSS.RING_Y);
                        }
                        sleep(BOSS.RING_SLEEP);
                        BOSS.RING_X -= BOSS.RING_STEP;
                    }

                    face(BOSS.ID, NORTH);
                    while(BOSS.RING_X < BOSS.RING_RADIUS) {
                        shoot_boss(BOSS.RING_X, -(BOSS.RING_Y));
                        if(BOSS.RING_DOUBLE) {
                            shoot_boss(-(BOSS.RING_X), BOSS.RING_Y);
                        }
                        sleep(BOSS.RING_SLEEP);
                        BOSS.RING_X += BOSS.RING_STEP;
                    }
                    while(BOSS.RING_Y > 0x00) {
                        shoot_boss(BOSS.RING_X, -(BOSS.RING_Y));
                        if(BOSS.RING_DOUBLE) {
                            shoot_boss(-(BOSS.RING_X), BOSS.RING_Y);
                        }
                        sleep(BOSS.RING_SLEEP);
                        BOSS.RING_Y -= BOSS.RING_STEP;
                    }
                }
            }

            @install()
            @async()
            fun stack_t01_offset() {
                while!(dead(<BOY>)) {
                    ROOM.SHIP_ID[X] = <BOY>[X];
                    ROOM.SHIP_ID[Y] = <BOY>[Y] + 0x05;
                    yield();

                    // <DOG>[X] = <BOY>[X] - 0x05;
                    // <DOG>[Y] = <BOY>[Y];
                    // yield();
                }
            }

            fun enemy(enemy, y) {
                add_enemy(enemy, 0x20, y);
                <LAST_ENTITY>[HP] = 0x01;
                face(LAST_ENTITY, WEST);
                
                // attach_to_script(LAST_ENTITY);
                // walk(LAST_ENTITY, TILE_ABSOLUTE_DIRECT, 0x00, y, LAST_ENTITY);
                // destroy(SCRIPT_OWNER);
            }

            fun shooting_mosquito(enemy, y) {
                add_enemy(enemy, 0x20, y);
                <LAST_ENTITY>[HP] = 0x01;
                face(LAST_ENTITY, WEST);
                
                attach_to_script(LAST_ENTITY);
                walk(LAST_ENTITY, TILE_ABSOLUTE_DIRECT, 0x00, y, NONE);

                while!(dead(<SCRIPT_OWNER>)) {
                    if(<SCRIPT_OWNER>[X] <= 0x00) {
                        destroy(SCRIPT_OWNER);
                        end();
                    }
                    sound(PROJECTILE_SHOOTING);
                    shoot_entity_entity(SCRIPT_OWNER, CITRON, BOY, 0x10, 0xff);
                    sleep(0x80);
                }
            }

            @install()
            @async()
            fun shooting_mosquito_1() {
                shooting_mosquito(ENEMY.MOSQUITO, ROOM.LANE_1);
            }
            @install()
            @async()
            fun shooting_mosquito_2() {
                shooting_mosquito(ENEMY.MOSQUITO, ROOM.LANE_2);
            }
            @install()
            @async()
            fun shooting_mosquito_3() {
                shooting_mosquito(ENEMY.MOSQUITO, ROOM.LANE_3);
            }

            @install()
            @async()
            fun shooting_fan_2() {
                attach_to_script(BOSS.ID);

                while!(dead(<SCRIPT_OWNER>)) {
                    if(BOSS.RING_TIMER == 0x00) {
                        sound(PROJECTILE_SHOOTING);
                        shoot_entity_entity(SCRIPT_OWNER, CITRON, BOY, 0x10, 0xff);
                    }
                    sleep(0x40);
                    BOSS.ID[JUMP_HEIGHT] = 0x05;
                    sleep(0x40);
                    BOSS.ID[JUMP_HEIGHT] = 0x05;
                }
            }

            @install()
            fun fan_damage() {
                if(BOSS.PHASE == 0x00) {
                    if(BOSS.ID[HP] <= BOSS.P1_THRESHOLD) {
                        BOSS.PHASE = 0x01;
                        BOSS.RING_TIMER = 0x200;
                    }
                }
            }

            @install()
            @async()
            fun shooting_fan() {
                add_enemy(FAN_BOT, 0x20, ROOM.LANE_2);
                control_enemy(LAST_ENTITY, True);
                BOSS.ID = <LAST_ENTITY>;
                <LAST_ENTITY>[HP] = BOSS.HP;
                face(LAST_ENTITY, WEST);
                // attribute(LAST_ENTITY, ROOT, True);
                attach_script(LAST_ENTITY, DAMAGE, reference(fan_damage));
                
                attach_to_script(LAST_ENTITY);

                attribute(LAST_ENTITY, INVINCIBLE, True);
                walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, 0x17, ROOM.LANE_2, SCRIPT_OWNER);
                attribute(LAST_ENTITY, INVINCIBLE, False);
                shooting_fan_2();

                while!(dead(<SCRIPT_OWNER>)) {
                    if(BOSS.RING_TIMER == 0x00) {
                        walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, 0x17, ROOM.LANE_1, SCRIPT_OWNER);
                    }
                    if(BOSS.RING_TIMER == 0x00) {
                        sleep(BOSS.TURN_TIME);
                    }

                    if(BOSS.RING_TIMER == 0x00) {
                        walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, 0x17, ROOM.LANE_3, SCRIPT_OWNER);
                    }
                    if(BOSS.RING_TIMER == 0x00) {
                        sleep(BOSS.TURN_TIME);
                    } else {
                        attribute(BOSS.ID, INVINCIBLE, True);
                        BOSS.ID[JUMP_HEIGHT] = 0x30;
                        walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, 0x10, 0x10, SCRIPT_OWNER);

                        attribute(BOSS.ID, INVINCIBLE, False);
                        attribute(BOSS.ID, ROOT, True);
                        ring();
                        while(BOSS.RING_TIMER > 0x00) {
                            BOSS.RING_TIMER -= 0x01;

                            yield();
                        }
                        attribute(BOSS.ID, ROOT, False);
                    }
                }
            }

            fun exit_map() {
                attribute(BOY, INVINCIBLE_TEMP, True);

                <BOY>[JUMP_HEIGHT] = 0x20;
                ROOM.SHIP_ID[JUMP_HEIGHT] = 0x20;
                sleep(0x30);

                <BOY>[JUMP_HEIGHT] = 0xff;
                ROOM.SHIP_ID[JUMP_HEIGHT] = 0xff;
                sleep(0x50);

                map_transition(well, crash, NONE);
            }

            @install()
            fun debug_triggered() {
                destroy(SCRIPT_OWNER);

                exit_map();
            }

            fun trigger_enter() {
                add_debug_entity(0d3, 0d3, reference(debug_triggered));

                available(BOY);
                teleport(DOG, 0xff, 0xff);
                face(BOY, EAST);

                <BOY>[FALLING_HEIGHT] = ROOM.START_HEIGHT;
                <0x0A47> = 0x0001;
                <0x4F2F> = 0x0020;

                default_init_room(False, False);
                SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.AIRSHIP;

                add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0x10, 0x10);
                ROOM.SHIP_ID = <LAST_ENTITY>;
                <LAST_ENTITY>[FALLING_HEIGHT] = ROOM.START_HEIGHT;

                stack_t01_offset();

                subtext("go!");

                sleep(0xff);

                if(True) {
                    enemy(ENEMY.MOSQUITO, 0x10);

                    sleep(0xff);

                    enemy(ENEMY.MOSQUITO, 0x05);
                    enemy(ENEMY.MOSQUITO, 0x15);

                    sleep(0xff);

                    enemy(ENEMY.MOSQUITO, 0x05);
                    enemy(ENEMY.MOSQUITO, 0x15);

                    sleep(0xff);

                    enemy(ENEMY.BUZZARD_1, 0x10);

                    sleep(0xff);
                }

                if(True) {
                    shooting_mosquito_2();

                    sleep(0xff);

                    shooting_mosquito_1();
                    shooting_mosquito_3();

                    sleep(0xff);

                    shooting_mosquito_1();
                    shooting_mosquito_2();
                    shooting_mosquito_3();

                    sleep(0xff);
                }

                if(True) {
                    shooting_fan();
                    sleep(0x60);

                    if(BOSS.DEBUG) {
                        subtext("boss start");
                    }
                    while!(dead(BOSS.ID)) {
                        yield();
                    }
                    if(BOSS.DEBUG) {
                        subtext("boss end");
                    }


                    sleep(0xff);
                }

                if(True) {
                    exit_map();
                }
            }
        };
    };

    map cave_gauge(0x64) {
        enum entrance {
            south = entrance(0x15, 0x23, NORTH)
        }

        enum stepon_trigger {
            exit_south = @install() {
                map_transition(volcano, cave_gauge, SOUTH);
            },
            exit_teleporter = @install() {
                subtext("S=1");
            },
        }

        fun trigger_enter() {
            fade_in();
        }
    };

    map cave_shop(0x35) {
        enum entrance {
            south = entrance(0x40, 0x2d, NORTH),
        }

        enum stepon_trigger {
            exit_south_drain = nop(),
            exit_south = @install() {
                map_transition(volcano, cave_east, SOUTH);
            },
            exit_south_jaguar_ring = nop(),
            exit_south_hard_ball = nop(),
            exit_south_inn = nop(),
        }

        enum b_trigger {
            gourd_drain_2 = nop(),
            gourd_drain_1 = nop(),
            gourd_inn_2 = nop(),
            gourd_inn_1 = nop(),
            gourd_jaguar_ring_1 = nop(),
            gourd_jaguar_ring_2 = nop(),
            gourd_jaguar_ring_3 = nop(),
            gourd_hard_ball_1 = nop(),
            gourd_hard_ball_2 = nop(),
            gourd_hard_ball_3 = nop(),
        }

        fun show_furniture(show) {
            if(show) {
                object[0x08] = 0x00; // hide raptors_stoble
                object[0x09] = 0x00; // hide raptors_fire
                object[0x0a] = 0x00; // hide raptors_rug
            } else {
                object[0x08] = 0x01; // hide raptors_stoble
                object[0x09] = 0x01; // hide raptors_fire
                object[0x0a] = 0x01; // hide raptors_rug
            }
        }

        enum ROOM {
            FURNITURE_REVEALED = flag(),
        }

        @install()
        fun alchemist_triggered() {
            dialog("[SLOW]Huh, how did you find me?[B]");
        }

        fun reveal_furniture() {
            show_furniture(True);

            sfx_effect(NIGHT, False);

            add_enemy(VILLAGER_1_6, 0d70, 0d18);
            attach_script(LAST_ENTITY, TALK, reference(alchemist_triggered));
        }

        @install()
        fun revealer_triggered() {
            set(ROOM.FURNITURE_REVEALED);

            reveal_furniture();
        }

        fun trigger_enter() {
            if!(ROOM.FURNITURE_REVEALED) { // TODO: soft lock while standing in fire
                show_furniture(False);

                add_enemy(REVEALER_TARGET_ENTITY, 0d70, 0d23);
                special_script(REVEALER, reference(revealer_triggered));

                default_init_room(True, False);
            } else {
                reveal_furniture(True);

                default_init_room(False, False);
            }
        }
    };
    
    area altus_plateau_entry() {
        enum ALTUS {
            MUSIC = 0x60
        }

        area chessboard_caves() {
            map stairs(0x1a) {
                enum entrance {
                    stairs_east_top = entrance(0x43, 0x03, SOUTH),
                    stairs_west_top = entrance(0x15, 0x05, SOUTH),
                    stairs_west_bottom = entrance(0x5f, 0xa1, NORTH),
                }

                enum soundtrack {
                    default = soundtrack(0x26, 0xff)
                }

                enum stepon_trigger {
                    cutscene_energy_core = @install() {
                        subtext("S=0");
                    },
                    exit_stairs_west_bottom = @install() {
                        map_transition(volcano, cave_west, SOUTH);
                    },
                    exit_stairs_west_top = @install() {
                        map_transition(chessboard, stairs_east, NORTH);
                    },
                    exit_stairs_east_top = @install() {
                        map_transition(hidden_castle_entry, stairs, NORTH);
                    },
                }

                enum b_trigger {
                    pickup_energy_core = @install() {
                        subtext("B=0");
                    },
                }

                fun trigger_enter() {
                    object[0x00] = 0x7e; // remove energy_core_hitbox

                    fade_in();
                }
            };

            map chessboard(0x19) {
                enum entrance {
                    east = entrance(0x93, 0x42, WEST),
                    west = entrance(0x01, 0x42, EAST),
                    stairs_east = entrance(0x53, 0x4c, WEST),
                    stairs_west = entrance(0x40, 0x40, EAST), // 0x4c, 0x40

                    crash = entrance(0x54, 0x39, NONE),
                }

                enum soundtrack {
                    default = soundtrack(ALTUS.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    stairs_east = @install() {
                        map_transition(stairs, stairs_west_top, EAST);
                    },
                    spawn_boss = @install() {
                        subtext("S=1");
                    },
                    exit_west = @install() {
                        map_transition(gate, east, WEST);
                    },
                    exit_east = @install() {
                        map_transition(well, west, EAST);
                    },
                    stairs_west = @install() {
                        map_transition(hidden_stairs, stairs, WEST);
                    }
                }

                enum b_trigger {
                    b_trigger_0 = @install() {
                        subtext("B=0");
                    },
                    b_trigger_1 = @install() {
                        subtext("B=1");
                    },
                    b_trigger_2 = @install() {
                        subtext("B=2");
                    },
                    b_trigger_3 = @install() {
                        subtext("B=3");
                    },
                    b_trigger_4 = @install() {
                        subtext("B=4");
                    },
                    b_trigger_5 = @install() {
                        subtext("B=5");
                    },
                    b_trigger_6 = @install() {
                        subtext("B=6");
                    },
                    b_trigger_7 = @install() {
                        subtext("B=7");
                    },
                    b_trigger_8 = @install() {
                        subtext("B=8");
                    },
                    b_trigger_9 = @install() {
                        subtext("B=9");
                    },

                    b_trigger_10 = @install() {
                        subtext("B=10");
                    },
                    b_trigger_11 = @install() {
                        subtext("B=11");
                    },
                    b_trigger_12 = @install() {
                        subtext("B=12");
                    },
                    b_trigger_13 = @install() {
                        subtext("B=13");
                    },
                    b_trigger_14 = @install() {
                        subtext("B=14");
                    },
                    b_trigger_15 = @install() {
                        subtext("B=15");
                    },
                    b_trigger_16 = @install() {
                        subtext("B=16");
                    },
                    b_trigger_17 = @install() {
                        subtext("B=17");
                    },
                    b_trigger_18 = @install() {
                        subtext("B=18");
                    }
                }

                enum ROOM {
                    STAIRS_WEST_REVEALED = flag(),

                    BLACK_SQUARE_PALETTE = 0x0000, // PALETTE.DOG_TOASTER,
                }

                @install()
                fun revealer_triggered() {
                    destroy(SCRIPT_OWNER);

                    set(ROOM.STAIRS_WEST_REVEALED);

                    object[0x00] = 0x02;
                    sleep(0x10);
                    object[0x00] = 0x01;
                    sleep(0x10);
                    object[0x00] = 0x00;
                }

                fun place_detectors(show) {
                    add_enemy_with_flags(PLACEHOLDER, 0x4a, 0x39, STONE_LEVITATE);
                    if(show) {
                        animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_PLACEHOLDER.ENERGY_CORE_CLOSED);
                    }
                }

                enum BOSS {
                    ID = memory_tmp(),
                }

                fun square_white(character) {
                    _attribute_bit(character, INVISIBLE);
                }
                fun square_black(character) {
                    _attribute_bit(character, VISIBLE);
                }

                fun parity_check_character(char, character:CHARACTER) { // buggy
                    // arg[0x00] = (character[X] - 0x1e0) / 0x50;
                    // arg[0x02] = (character[Y] - 0x1ae) / 0x32;
                    arg[0x00] = (char[X]) / 0x50;
                    arg[0x02] = (char[Y] - 0x1e) / 0x32;

                    // debug_memory(arg[0x00], arg[0x02]);
                    // sleep(0x30);

                    arg[0x04] = arg[0x00] & 0x01;
                    arg[0x06] = arg[0x02] & 0x01;

                    // debug_memory(arg[0x04], arg[0x06]);
                    // sleep(0x30);

                    arg[0x08] = arg[0x04] ^ arg[0x06];

                    // debug_memory(arg[0x08], arg[0x08]);
                    if(arg[0x08] == 0x00) {
                        // square_black(character);
                        attribute(character, INVISIBLE, False);
                    } else {
                        // square_white(character);
                        attribute(character, INVISIBLE, True);
                    }

                    // arg[0x00] = (((<BOY>[X]) / 0x50) & 0x01);
                    // arg[0x02] = (((<BOY>[Y] - 0x1e) / 0x32) & 0x01);
                }

                @install()
                @async()
                fun parity_check() {
                    sleep(0x50);

                    arg[0x00] = BOSS.ID[PALETTE];
                    arg[0x02] = <BOY>[PALETTE];
                    arg[0x04] = <DOG>[PALETTE];
                    // arg[0x06] = 0x08cd;

                    // debug_memory(arg[0x00], arg[0x02]);


                    while(True) {
                        // parity_check_character(<BOY>, DOG);
                        if((((<BOY>[X]) / 0x50) & 0x01) ^ (((<BOY>[Y] - 0x1e) / 0x32) & 0x01)) {
                            // attribute(BOY, INVISIBLE, False);
                            <BOY>[PALETTE] = ROOM.BLACK_SQUARE_PALETTE;
                            <BOY>[GENERAL_PURPOSE] = 0x01;
                            nop();
                        } else {
                            // attribute(BOY, INVISIBLE, True);
                            <BOY>[PALETTE] = arg[0x02];
                            <BOY>[GENERAL_PURPOSE] = 0x00;
                            nop();
                        }
                        sleep(0x05);

                        // parity_check_character(<DOG>, DOG);
                        if((((<DOG>[X]) / 0x50) & 0x01) ^ (((<DOG>[Y] - 0x1e) / 0x32) & 0x01)) {
                            // attribute(DOG, INVISIBLE, False);
                            <DOG>[GENERAL_PURPOSE] = 0x01;
                            <DOG>[PALETTE] = ROOM.BLACK_SQUARE_PALETTE;
                            nop();
                        } else {
                            // attribute(DOG, INVISIBLE, True);
                            <DOG>[GENERAL_PURPOSE] = 0x00;
                            <DOG>[PALETTE] = arg[0x04];
                            nop();
                        }
                        sleep(0x05);

                        // parity_check_character(BOSS.ID);
                        if((((BOSS.ID[X]) / 0x50) & 0x01) ^ (((BOSS.ID[Y] - 0x1e) / 0x32) & 0x01)) {
                            // attribute(BOSS.ID, INVISIBLE, False);
                            BOSS.ID[PALETTE] = ROOM.BLACK_SQUARE_PALETTE;
                            BOSS.ID[GENERAL_PURPOSE] = 0x01;
                            nop();

                        } else {
                            // attribute(BOSS.ID, INVISIBLE, True);
                            BOSS.ID[PALETTE] = arg[0x00];
                            BOSS.ID[GENERAL_PURPOSE] = 0x00;
                            nop();
                        }
                        sleep(0x05);
                    }
                }

                @install()
                fun boss_triggered() {
                    // debug_memory(BOSS.ID[HP], BOSS.ID[DAMAGE_TYPE]);

                    // if(<SCRIPT_OWNER>[GENERAL_PURPOSE] > 0x00) {
                    //     heal(SCRIPT_OWNER, 0x30, True);
                    //     end();
                    // }
                    
                    if((<SCRIPT_OWNER>[DAMAGE_TYPE] == DAMAGE_TYPE.DOG_ATTACK) && (<DOG>[GENERAL_PURPOSE] ^ <SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x00)){
                        heal(SCRIPT_OWNER, 0x30, True);
                        end();
                    } else if(<BOY>[GENERAL_PURPOSE] ^ <SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x00){
                        heal(SCRIPT_OWNER, 0x30, True);
                        end();
                    }
                }

                @install()
                fun debug_triggered() {
                    set(ROOM.STAIRS_WEST_REVEALED);

                    object[0x00] = 0x00; // close stairs_west
                    object[0x01] = 0x00; // close stairs_east

                    destroy(SCRIPT_OWNER);
                }

                @install()
                @async()
                fun oglin_parity_check(entity) {
                    _attach_to_script(arg[0x00]);

                    arg[0x02] = <SCRIPT_OWNER>[PALETTE];
                    
                    while!(dead(<SCRIPT_OWNER>)) {
                        // parity_check_character(<BOY>, DOG);
                        if((((<SCRIPT_OWNER>[X]) / 0x50) & 0x01) ^ (((<SCRIPT_OWNER>[Y] - 0x1e) / 0x32) & 0x01)) {
                            // attribute(BOY, INVISIBLE, False);
                            <SCRIPT_OWNER>[PALETTE] = ROOM.BLACK_SQUARE_PALETTE;
                            <SCRIPT_OWNER>[GENERAL_PURPOSE] = 0x01;
                            nop();
                        } else {
                            // attribute(BOY, INVISIBLE, True);
                            <SCRIPT_OWNER>[PALETTE] = arg[0x02];
                            <SCRIPT_OWNER>[GENERAL_PURPOSE] = 0x00;
                            nop();
                        }
                        sleep(0x05);
                    }
                }

                fun add_chess_enemy(x, y) {
                    add_enemy(OGLIN, x, y);
                    <LAST_ENTITY>[HP] = 0x01;
                    attach_script(LAST_ENTITY, DAMAGE, reference(boss_triggered));

                    oglin_parity_check(<LAST_ENTITY>);
                }

                fun trigger_enter() {
                    if(FLAG.DEBUG) {
                        add_debug_entity(0x59, 0x49, reference(debug_triggered));
                    }

                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // east
                        add_chess_enemy(0d113, 0d71);

                        // south
                        add_chess_enemy(0d55, 0d93);

                        // west
                        add_chess_enemy(0d68, 0d44);
                    }

                    object[0x00] = 0x7e; // close stairs_west
                    object[0x01] = 0x7e; // close stairs_east
                    // object[0x02] = 0x01; // close wall_2
                    // object[0x03] = 0x01; // close wall_1
                    // object[0x04] = 0x01; // remove bridge_east
                    // object[0x05] = 0x01; // remove bridge_west

                    if!(ROOM.STAIRS_WEST_REVEALED) {
                        add_enemy(REVEALER_TARGET_ENTITY, 0x3e, 0x40);
                        special_script(REVEALER, reference(revealer_triggered));
                    } else {
                        object[0x00] = 0x00;
                    }

                    default_init_room(True, True);

                    add_enemy(MAGMAR, 0x54, 0x39);
                    attach_script(LAST_ENTITY, DAMAGE, reference(boss_triggered));
                    BOSS.ID = <LAST_ENTITY>;

                    attribute(BOY, INVINCIBLE, True);
                    attribute(DOG, INVINCIBLE, True);

                    parity_check();
                }
            };

            map hidden_stairs(0x60) {
                enum entrance {
                    stairs = entrance(0x29, 0x0d, WEST)
                }

                enum stepon_trigger {
                    stepon_0 = @install() {
                        map_transition(chessboard, stairs_west, EAST);
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() {
                        subtext("B=0");
                    },
                    b_trigger_1 = @install() {
                        subtext("B=1");
                    },
                    b_trigger_2 = @install() {
                        subtext("B=2");
                    },
                }

                fun trigger_enter() {
                    default_init_room(True, False);
                }
            };

            map hidden_castle_entry(0x5e) {
                enum entrance {
                    north = entrance(0x16, 0x09, SOUTH),
                    east = entrance(0x29, 0x38, WEST),
                    south = entrance(0x16, 0x65, NORTH),
                    west = entrance(0x03, 0x38, EAST),
                    stairs = entrance(0x19, 0x4d, EAST)
                }

                enum stepon_trigger {
                    exit_north = @install() {
                        subtext("S=0");
                    },
                    stepon_1 = @install() {
                        subtext("S=1");
                    },
                    stepon_2 = @install() {
                        subtext("S=2");
                    },
                    stepon_3 = @install() {
                        subtext("S=3");
                    },
                    stepon_4 = @install() {
                        subtext("S=4");
                    },
                    spawn_boss = @install() {
                        subtext("S=5");
                    },
                    exit_stairs = @install() {
                        map_transition(stairs, stairs_east_top, WEST);
                    },
                    exit_south = @install() {
                        subtext("S=7");
                    },
                    exit_west = @install() {
                        subtext("S=8");
                    },
                    exit_east = @install() {
                        subtext("S=9");
                    }
                }

                fun trigger_enter() {
                    fade_in();
                }
            };

        };

        map well(0x6c) {
            enum entrance {
                west = entrance(0x01, 0x1c, EAST),

                crash = entrance(0x38, 0x18, NONE),
            }

            enum soundtrack {
                default = soundtrack(ALTUS.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_west = @install() {
                    map_transition(chessboard, east, WEST);
                },
            }

            enum b_trigger {
                barrier = @install() {
                    subtext("B=0");
                },
            }

            @install()
            @async()
            fun crash_windwalker() {
                // add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0x5b, 0x39);
                add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0x2a, 0x0c);
                attach_to_script(LAST_ENTITY);
                <SCRIPT_OWNER>[FALLING_HEIGHT] = 0x1fff;
                sleep(0x80);
                <SCRIPT_OWNER>[JUMP_HEIGHT] = 0x20;
                
                add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_3, 0x00, 0x00);
                arg[0x00] = <LAST_ENTITY>;

                arg[0x00][X] = <SCRIPT_OWNER>[X] + 0x10;
                arg[0x00][Y] = <SCRIPT_OWNER>[Y] + 0x10;

                add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_3, 0x00, 0x00);
                arg[0x02] = <LAST_ENTITY>;

                arg[0x02][X] = <SCRIPT_OWNER>[X] - 0x10;
                arg[0x02][Y] = <SCRIPT_OWNER>[Y] - 0x10;

                sleep(0x50);
                _destroy(arg[0x02]);
                sleep(0x10);
                destroy(SCRIPT_OWNER);
                sleep(0x60);
                _destroy(arg[0x00]);
            }

            fun trigger_enter() {
                if!(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED) {
                    set(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED);

                    if!(FLAG.IN_ANIMATION) {
                        crash_both();
                        crash_windwalker();
                    }
                }

                bonfire(0x1e, 0x14);
                
                default_init_room(True, True);
            }
        };

        map gate(0x76) {
            enum entrance {
                north = entrance(0x2c, 0x09, SOUTH),
                east = entrance(0x67, 0x71, WEST),
            }

            enum soundtrack {
                default = soundtrack(ALTUS.MUSIC, 0xff)
            }

            enum stepon_trigger {
                east_north = @install() {
                    map_transition(castle_center, south_2, NORTH);
                },
                exit_east = @install() {
                    map_transition(chessboard, west, EAST);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                b_trigger_2 = @install() {
                    subtext("B=2");
                },
                b_trigger_3 = @install() {
                    subtext("B=3");
                },
                b_trigger_4 = @install() {
                    subtext("B=4");
                },
                b_trigger_5 = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                b_trigger_7 = @install() {
                    subtext("B=7");
                },
                b_trigger_8 = @install() {
                    subtext("B=8");
                },
                b_trigger_9 = @install() {
                    subtext("B=9");
                },

                b_trigger_10 = @install() {
                    subtext("B=10");
                },
                b_trigger_11 = @install() {
                    subtext("B=11");
                },
                b_trigger_12 = @install() {
                    subtext("B=12");
                },
                b_trigger_13 = @install() {
                    subtext("B=13");
                },
                b_trigger_14 = @install() {
                    subtext("B=14");
                },
                b_trigger_15 = @install() {
                    subtext("B=15");
                },
                b_trigger_16 = @install() {
                    subtext("B=16");
                },
                b_trigger_17 = @install() {
                    subtext("B=17");
                },
                b_trigger_18 = @install() {
                    subtext("B=18");
                },
                b_trigger_19 = @install() {
                    subtext("B=19");
                },
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // north
                    add_enemy(DRAKE, 0d58, 0d28);

                    add_enemy(SLIME, 0d36, 0d27);

                    // center
                    add_enemy(DRAKE, 0d59, 0d71);

                    add_enemy(SLIME, 0d40, 0d63);

                    // south
                    add_enemy(SLIME, 0d79, 0d116);
                }

                default_init_room(True, True);
            }
        };

        area castle() {
            enum CASTLE {
                MUSIC = 0x62,
            }

            map castle_center(0x1c) {
                enum entrance {
                    north = entrance(0x40, 0x04, SOUTH),
                    south_1 = entrance(0x72, 0x38, NORTH),
                    south_2 = entrance(0x4c, 0x38, NORTH),
                    south_3 = entrance(0x08, 0x38, NORTH),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_north = @install() {
                        map_transition(castle_throne_room, south, NORTH);
                    },
                    exit_south_3 = @install() {
                        map_transition(market_west, north, SOUTH);
                    },
                    exit_south_2 = @install() {
                        map_transition(gate, north, SOUTH);
                    },
                    exit_south_1 = @install() {
                        map_transition(castle_bridges, west, SOUTH);
                    },
                    guard_right = @install() {
                        subtext("S=4");
                    },
                    guard_left = @install() {
                        subtext("S=5");
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() {
                        subtext("B=0");
                    },
                    b_trigger_1 = @install() {
                        subtext("B=1");
                    },
                    b_trigger_2 = @install() {
                        subtext("B=2");
                    },
                    b_trigger_3 = @install() {
                        subtext("B=3");
                    },
                    guard = @install() {
                        subtext("B=4");
                    },
                    b_trigger_5 = @install() {
                        subtext("B=5");
                    },
                    b_trigger_6 = @install() {
                        subtext("B=6");
                    },
                    b_trigger_7 = @install() {
                        subtext("B=7");
                    },
                    b_trigger_8 = @install() {
                        subtext("B=8");
                    },
                    b_trigger_9 = @install() {
                        subtext("B=9");
                    },

                    b_trigger_10 = @install() {
                        subtext("B=10");
                    },
                    b_trigger_11 = @install() {
                        subtext("B=11");
                    },
                    b_trigger_12 = @install() {
                        subtext("B=12");
                    },
                    b_trigger_13 = @install() {
                        subtext("B=13");
                    },
                    b_trigger_14 = @install() {
                        subtext("B=14");
                    },
                    b_trigger_15 = @install() {
                        subtext("B=15");
                    },
                    b_trigger_16 = @install() {
                        subtext("B=16");
                    },
                    b_trigger_17 = @install() {
                        subtext("B=17");
                    },
                    b_trigger_18 = @install() {
                        subtext("B=18");
                    },
                    b_trigger_19 = @install() {
                        subtext("B=19");
                    },
                }
                
                fun trigger_enter() {
                    fade_in();
                }
            };

            map market_west(0x4e) {
                enum entrance {
                    north = entrance(0x2a, 0x01, SOUTH),
                    east = entrance(0x39, 0xc3, WEST),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_north = @install() {
                        map_transition(castle_center, south_3, NORTH);
                    },
                    exit_east = @install() {
                        map_transition(castle_fire_pit, west, EAST);
                    },
                }

                fun trigger_enter() {
                    fade_in();
                }
            };

            map castle_throne_room(0x4d) {
                enum entrance {
                    south = entrance(0x31, 0x21, NORTH),

                    cinematic_enter = entrance(0x37, 0x01, NORTH),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum ROOM {
                    FAKE_EXIT_ID = memory_tmp(),
                }

                fun fake_exit() {
                    map_transition(castle_center, north, SOUTH);
                }

                @install()
                @async()
                fun fake_exit_scanner() {
                    attach_to_script(ROOM.FAKE_EXIT_ID);

                    while(True) {
                        arg[0x00] = <ACTIVE>[X];
                        arg[0x02] = <ACTIVE>[Y];
                        arg[0x04] = <SCRIPT_OWNER>[X];
                        arg[0x06] = <SCRIPT_OWNER>[Y];

                        if(arg[0x00] < arg[0x04]) {
                            arg[0x08] = arg[0x04] - arg[0x00];
                        } else {
                            arg[0x08] = arg[0x00] - arg[0x04];
                        }

                        if(arg[0x02] < arg[0x06]) {
                            arg[0x0a] = arg[0x06] - arg[0x02];
                        } else {
                            arg[0x0a] = arg[0x02] - arg[0x06];
                        }

                        if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                            fake_exit();
                            end();
                        }

                        yield();
                    }
                }

                @install()
                fun debug_triggered() {
                    set(FLAG.REVEALER);
                    subtext("Revealer learned.");
                    sleep(0x20);
                    select_alchemy_with_preselection(REVEALER);

                    destroy(SCRIPT_OWNER);
                }                

                fun trigger_enter() {
                    if(FLAG.DEBUG) {
                        if!(FLAG.REVEALER) {
                            add_debug_entity(0x27, 0x15, reference(debug_triggered));
                        }
                    }

                    fade_in();

                    add_enemy(PLACEHOLDER, 0x31, 0x21);
                    ROOM.FAKE_EXIT_ID = <LAST_ENTITY>;
                    sleep(0x10);
                    fake_exit_scanner();
                }
            };

            map castle_fire_pit(0x3a) {
                enum entrance {
                    west = entrance(0x05, 0x1b, EAST),

                    cutscene_landing = entrance(0x0b, 0x1b, NONE),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    b_trigger_0 = @install() {
                        subtext("S=0");
                    },
                    exit_west = @install() {
                        map_transition(market_west, east, WEST);
                    },
                }

                fun trigger_enter() {
                    fade_in();
                }
            };

            map castle_bridges(0x70) {
                enum entrance {
                    east = entrance(0x8b, 0x28, WEST),
                    west = entrance(0x01, 0x29, EAST),

                    door_east = entrance(0x5f, 0x28, EAST),
                    door_west = entrance(0x2d, 0x29, WEST),

                    balcony_east_1 = entrance(0x4f, 0x0f, EAST),
                    balcony_east_2 = entrance(0x4f, 0x19, EAST),
                    balcony_east_3 = entrance(0x4f, 0x23, EAST),

                    balcony_west_1 = entrance(0x3f, 0x23, WEST),
                    balcony_west_2 = entrance(0x3f, 0x19, WEST),
                    balcony_west_3 = entrance(0x3f, 0x0f, WEST),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_door_east = @install() {
                        subtext("S=0");
                    },
                    exit_door_west = @install() {
                        map_transition(castle_balconies, stairs_west, EAST);
                    },
                    exit_east = @install() {
                        subtext("S=2");
                    },
                    balcony_east_3 = @install() {
                        subtext("S=3");
                    },
                    balcony_east_2 = @install() {
                        subtext("S=4");
                    },
                    balcony_east_1 = @install() {
                        subtext("S=5");
                    },
                    exit_west = @install() {
                        map_transition(castle_center, south_1, WEST);
                    },
                    balcony_west_1 = @install() {
                        map_transition(castle_balconies, balcony_west_1, EAST);
                    },
                    balcony_west_2 = @install() {
                        map_transition(castle_balconies, balcony_west_2, EAST);
                    },
                    balcony_west_3 = @install() {
                        map_transition(castle_balconies, balcony_west_3, EAST);
                    },
                }

                fun trigger_enter() {
                    init_map(0x00, 0x00, 0x3c, 0x74);
                    
                    fade_in();
                }
            };

            map castle_balconies(0x72) {
                enum entrance {
                    balcony_east_1 = entrance(0x75, 0x1a, WEST),
                    balcony_east_2 = entrance(0x75, 0x3c, WEST),
                    balcony_east_3 = entrance(0x75, 0x5e, WEST),

                    balcony_west_1 = entrance(0x05, 0x5e, EAST),
                    balcony_west_2 = entrance(0x05, 0x3c, EAST),
                    balcony_west_3 = entrance(0x05, 0x1a, EAST),

                    stairs_east = entrance(0x45, 0x39, EAST),
                    stairs_west = entrance(0x35, 0x39, WEST),

                    vent_east_1 = entrance(0x67, 0x23, NONE),
                    vent_east_2 = entrance(0x67, 0x67, NONE),

                    vent_west_1 = entrance(0x13, 0x67, NONE),
                    vent_west_2 = entrance(0x13, 0x45, NONE),
                    vent_west_3 = entrance(0x13, 0x23, NONE),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    door_west_3 = @install() {
                        subtext("S=0");
                    },
                    door_west_2 = @install() {
                        subtext("S=1");
                    },
                    door_west_1 = @install() {
                        subtext("S=2");
                    },
                    door_east_3 = @install() {
                        subtext("S=3");
                    },
                    door_east_2 = @install() {
                        subtext("S=4");
                    },
                    door_east_1 = @install() {
                        subtext("S=5");
                    },
                    vent_west_2 = @install() {
                        subtext("S=6");
                    },
                    vent_west_1 = @install() {
                        subtext("S=7");
                    },
                    vent_west_1 = @install() {
                        subtext("S=8");
                    },
                    vent_west_2 = @install() {
                        subtext("S=9");
                    },

                    vent_west_3 = @install() {
                        subtext("S=10");
                    },
                    stairs_east = @install() {
                        subtext("S=11");
                    },
                    stairs_west = @install() {
                        map_transition(castle_bridges, door_west, EAST);
                    },
                    balcony_east_3 = @install() {
                        subtext("S=13");
                    },
                    balcony_east_2 = @install() {
                        subtext("S=14");
                    },
                    balcony_east_1 = @install() {
                        subtext("S=15");
                    },
                    balcony_west_1 = @install() {
                        map_transition(castle_bridges, balcony_west_1, WEST);
                    },
                    balcony_west_2 = @install() {
                        map_transition(castle_bridges, balcony_west_2, WEST);
                    },
                    balcony_west_3 = @install() {
                        map_transition(castle_bridges, balcony_west_3, WEST);
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() {
                        subtext("B=0");
                    },
                    b_trigger_1 = @install() {
                        subtext("B=1");
                    },
                    b_trigger_2 = @install() {
                        subtext("B=2");
                    },
                    b_trigger_3 = @install() {
                        subtext("B=3");
                    },
                    b_trigger_4 = @install() {
                        subtext("B=4");
                    },
                    b_trigger_5 = @install() {
                        subtext("B=5");
                    },
                    b_trigger_6 = @install() {
                        subtext("B=6");
                    },
                    b_trigger_7 = @install() {
                        subtext("B=7");
                    },
                    b_trigger_8 = @install() {
                        subtext("B=8");
                    },
                    b_trigger_9 = @install() {
                        subtext("B=9");
                    },

                    b_trigger_10 = @install() {
                        subtext("B=10");
                    },
                    b_trigger_11 = @install() {
                        subtext("B=11");
                    },
                    b_trigger_12 = @install() {
                        subtext("B=12");
                    },
                    b_trigger_13 = @install() {
                        subtext("B=13");
                    },
                    b_trigger_14 = @install() {
                        subtext("B=14");
                    },
                    b_trigger_15 = @install() {
                        subtext("B=15");
                    },
                    b_trigger_16 = @install() {
                        subtext("B=16");
                    },
                    b_trigger_17 = @install() {
                        subtext("B=17");
                    },
                }

                fun trigger_enter() {
                    object[0x00] = 0x7e;
                    object[0x01] = 0x7e;
                    object[0x02] = 0x7e;

                    fade_in();
                }
            };
        };
    };
};

area northwest_inbetwixx() {
    map northwest_inbetwixx(0x07) {
        enum entrance {
            east = entrance(0x44, 0x44, WEST),
            west = entrance(0x01, 0x3d, EAST),
            cave = entrance(0x41, 0x0b, SOUTH)
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum stepon_trigger {
            lift_west = @install() {
                subtext("S=0");
            },
            lift_east = @install() {
                subtext("S=1");
            },
            exit_west = @install() {
                map_transition(volcano, east, WEST);
            },
            bridge_east = @install() {
                // pit_act2_between(0x0250);

                subtext("S=3");
            },
            bridge_west = @install() {
                subtext("S=4");
            },
            stepon_5 = @install() {
                subtext("S=5");
            },
            stepon_6 = @install() {
                map_transition(northern_waterfall, south, NORTH);
            },
            stepon_7 = @install() {
                subtext("S=7");
            },
            stepon_8 = @install() {
                subtext("S=8");
            },
            exit_west = @install() {
                map_transition(inbetwixx, west_2, EAST);
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                _axe2_wall(0x00);
            }
        }

        enum ROOM {
            DEBUG = False,

            SECRET_PASSAGE_TRIGGER = memory_tmp(),
            SECRET_PASSAGE_DISTANCE = 0x10,
        }

        @install()
        @async()
        fun hidden_exit_check() {
            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = ROOM.SECRET_PASSAGE_TRIGGER[X];
                arg[0x06] = ROOM.SECRET_PASSAGE_TRIGGER[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= ROOM.SECRET_PASSAGE_DISTANCE) && (arg[0x0a] <= ROOM.SECRET_PASSAGE_DISTANCE)) {
                    map_transition(river, right, NORTH);
                    end();
                }
                yield();

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }
            }
        }
        
        fun trigger_enter() {
            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // east
                add_enemy(BUZZARD_1, 0d50, 0d26);

                // west
                add_enemy(BUZZARD_1, 0d15, 0d14);
                add_enemy(FLOWER_PURPLE, 0d12, 0d38);
            }

            default_init_room(True, True);

            subtext("North West Inbetwixx");

            add_enemy(PLACEHOLDER, 0x17, 0x00);
            ROOM.SECRET_PASSAGE_TRIGGER = <LAST_ENTITY>;

            hidden_exit_check();

            bomb_wall_trigger(0x00, 0x01, 0d64, 0d14);
        }
    };

    map northern_waterfall(0x6b) {
        enum entrance {
            south = entrance(0x11, 0x3f, NORTH)
        }

        enum soundtrack {
            default = soundtrack(0x46, 0xff)
        }

        @install()
        fun yeet() {
            control(NONE);

            animate(BOY, LOOP, ANIMATION_BOY.FALL_1);
            sleep(0x05);

            animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
            <BOY>[JUMP_HEIGHT] = 0x20;

            arg[0x00] = <BOY>[X] + 0x30;
            while(<BOY>[X] < arg[0x00]) {
                <BOY>[X] += 0x01;

                yield();
            }

            arg[0x02] = <BOY>[Y] + 0x40;
            while(<BOY>[Y] < arg[0x02]) {
                <BOY>[Y] += 0x02;

                yield();
            }

            map_transition(junkyard, crash_north, NONE);
        }

        enum stepon_trigger {
            stepon_0 = yeet(),
            stepon_1 = yeet(),
            stepon_2 = yeet(),
            stepon_3 = yeet(),
            stepon_4 = yeet(),
            stepon_5 = yeet(),
            stepon_6 = @install() {
                map_transition(northwest_inbetwixx, cave, SOUTH);
            }
        }

        fun trigger_enter() {
            default_init_room(True, True);
        }
    };
};

area east_inbetwixx() {
    map east_inbetwixx(0x59) {
        enum entrance {
            east = entrance(0x73, 0x22, WEST),
            cave = entrance(0x42, 0x1a, SOUTH),
            south_1 = entrance(0x44, 0x9e, NORTH),
            south_2 = entrance(0x33, 0x9e, NORTH),
            west_1 = entrance(0x01, 0x2a, EAST),
            west_2 = entrance(0x01, 0x22, EAST),
            west_3 = entrance(0x01, 0x15, EAST)
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            BRANCH_USED = flag(),
        }

        enum BOSS {
            DEBUG = False,
            PROGRESS = flag_tmp(),

            ID = memory_tmp(),

            PIT_THRESHOLD = 0d03,

            PIT_1_TIMER = memory_tmp(),
            PIT_2_TIMER = memory_tmp(),
            PIT_3_TIMER = memory_tmp(),
            PIT_4_TIMER = memory_tmp(),
        }

        fun exit_triggered() {
            exit_boss_progress_check(BOSS.PROGRESS);
        }

        enum stepon_trigger {
            center_bottleneck = nop(),
            stepon_1 = @install() {
                subtext("S=1");
            },
            sandpit_5_2_west = nop(),
            sandpit_5_2_north = nop(),
            sandpit_4_1_east = nop(),
            sandpit_4_1_south = nop(),
            sandpit_4_1 = nop(),
            sandpit_2_north = nop(),
            sandpit_2 = nop(),
            sandpit_8_east = nop(),

            sandpit_6_north = nop(),
            sandpit_6_west = nop(),
            sandpit_6 = nop(),
            sandpit_9 = nop(),
            sandpit_10_3 = nop(),
            sandpit_10_2 = nop(),
            sandpit_10_1 = nop(),
            sandpit_8 = nop(),
            sandpit_7 = nop(),
            sandpit_5_1 = nop(),

            sandpit_4_2 = nop(),
            sandpit_3_2 = nop(),
            stepon_22 = @install() {
                subtext("S=22");
            },
            stepon_23 = @install() {
                subtext("S=23");
            },
            exit_west_1 = @install() {
                exit_triggered();
                map_transition(east_inbetwixx, west_3, WEST);
            },
            exit_cave = @install() {
                exit_triggered();
                map_transition(jaguar_cave, south, NORTH);
            },
            exit_south_1 = @install() {
                exit_triggered();
                map_transition(east_crossing, crash, SOUTH);
            },
            exit_south_2 = @install() {
                exit_triggered();
                map_transition(east_crossing, north, SOUTH);
            },
            exit_west_2 = @install() {
                exit_triggered();
                map_transition(inbetwixx, east, WEST);
            },
            exit_west_3 = @install() {
                exit_triggered();
                map_transition(east_inbetwixx, west_1, WEST);
            },

            sandpit_1_1 = nop(),
            sandpit_1_1_west = nop(),
            sandpit_3_2_west = nop(),
            sandpit_4_2_south = nop(),
            sandpit_5_1_south = nop(),
            sandpit_7_north = nop(),
            sandpit_9_north = nop(),
            sandpit_10_2_north = nop(),
            sandpit_10_3_north = nop(),
            sandpit_cave_north = nop(),

            sandpit_cave = nop(),
            sandpit_5_1_north = nop(),
            sandpit_1_2_west = nop(),
            sandpit_1_2_east = nop(),
            sandpit_3_1_north = nop(),
            sandpit_2_east = nop(),
            sandpit_3_1_south = nop(),
            sandpit_4_3_west = nop(),
            sandpit_4_3_north = nop(),
            sandpit_4_3 = nop(),

            sandpit_5_2 = nop(),
            sandpit_1_2 = nop(),
            sandpit_3_1 = nop(),
            sandpit_4_1 = nop(),
            sandpit_8_west = nop(),
            sandpit_8_north = nop(),
            sandpit_10_3_east = nop(),
            sanpit_7_south = nop(),
            sanpit_7_east = nop(),
            sandpit_3_2_east = nop(),

            sandpit_4_2_north = nop(),
            sandpit_4_2_east = nop(),
            sandpit_10_1_north = nop(),
            sandpit_10_1_west = nop(),
            exit_east = @install() {
                map_transition(eastern_barrier, west, EAST);
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            gourd_south = @install() {
                _loot_chest(0x02, WATER, 0x01);
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
            b_trigger_17 = @install() {
                subtext("B=17");
            },
            b_trigger_18 = @install() {
                subtext("B=18");
            },
            b_trigger_19 = @install() {
                subtext("B=19");
            },
            b_trigger_20 = @install() {
                subtext("B=20");
            },
            b_trigger_21 = @install() {
                subtext("B=21");
            },
            gourd_hidden_west = @install() {
                _loot_chest(0x29, OIL, 0x01);
            },
            gourd_hidden_north_3 = @install() {
                _loot_chest(0x2a, WATER, 0x03);
            },
            gourd_hidden_north_2 = @install() {
                _loot_chest(0x28, WATER, 0x02);
            },
            gourd_hidden_north_1 = @install() {
                _loot_chest(0x27, WATER, 0x01);
            },
            gourd_east = @install() {
                _loot_chest(0x00, CRYSTAL, 0x01);
            },
            gourd_north = @install() {
                _loot_chest(0x01, OIL, 0x02);
            }
        }

        @install()
        fun branch_triggered() {
            if(MEMORY.SPOON > 0x00) {
                question("[SLOW]Use Spoon[CHOICE]Yes[CHOICE]No");

                if(MEMORY.QUESTION_ANSWER == 0x00) {
                    MEMORY.SPOON -= 0x01;
                    set(ROOM.BRANCH_USED);

                    <SCRIPT_OWNER>[PALETTE] = 0x0800;
                    control_enemy(SCRIPT_OWNER, False);
                }
            } else {
                dialog("...[0x80][0x19][0x81]");
            }
        }

        fun open_sandpits(open) {
            if(open) {
                object[0x03] = 0x04; // open sandpit_2
                object[0x04] = 0x04; // open sandpit_1
                object[0x05] = 0x04; // open sandpit_4
                object[0x06] = 0x04; // open sandpit_5
                object[0x07] = 0x04; // open sandpit_6
                object[0x08] = 0x04; // open sandpit_7
                object[0x09] = 0x04; // open sandpit_8
                object[0x0a] = 0x04; // open sandpit_9
                object[0x0b] = 0x04; // open sandpit_10
                object[0x0c] = 0x04; // open sandpit_12_1
                object[0x0d] = 0x04; // open sandpit_12_2
                object[0x0e] = 0x04; // open sandpit_12_3
                object[0x0f] = 0x04; // open sandpit_cave
                object[0x10] = 0x04; // open sandpit_5
                object[0x11] = 0x04; // open sandpit_6
                object[0x12] = 0x04; // open sandpit_2
                object[0x13] = 0x04; // open sandpit_3
                object[0x14] = 0x04; // open sandpit_4
            }
        }

        fun init_room() {
            default_init_room(True, True);
        }

        fun pit_triggered(entity, index) {
            if(entity[GENERAL_PURPOSE] != index) {
                entity[GENERAL_PURPOSE] = index;
            } else {
                damage(entity, 0x100, True);
            }
        }
        fun pit_triggered_boy(index) {
            if(<BOY>[GENERAL_PURPOSE] != index) {
                <BOY>[GENERAL_PURPOSE] = index;
            } else {
                damage(BOY, 0x10, True);
            }
        }

        @install()
        @async()
        fun pit_scanner() {
            // 0d127, 0d303
            // 0d239, 0d448
            // 0d368, 0d528-9
            // 0d383, 0d592-3

            // BOSS.ID = <BOY>;

            while(True) {
                // if((BOSS.ID[X] == 0d127) && ((BOSS.ID[Y] == 0d303) || (BOSS.ID[Y] == 0d303))) {
                if((BOSS.ID[X] >= 0d112) && (BOSS.ID[X] <= 0d127)) {
                    if((BOSS.ID[Y] >= 0d302) && (BOSS.ID[Y] <= 0d305)) {
                        pit_triggered(BOSS.ID, 0x01);
                    }
                } else if((BOSS.ID[X] >= 0d224) && (BOSS.ID[X] <= 0d239)) {
                    if((BOSS.ID[Y] >= 0d446) && (BOSS.ID[Y] <= 0d449)) {
                        pit_triggered(BOSS.ID, 0x02);
                    }
                } else if((BOSS.ID[X] >= 0d368) && (BOSS.ID[X] <= 0d383)) {
                    if((BOSS.ID[Y] >= 0d526) && (BOSS.ID[Y] <= 0d529)) {
                        pit_triggered(BOSS.ID, 0x03);
                    }
                // } else if((BOSS.ID[X] >= 0d368) && (BOSS.ID[X] <= 0d383)) {
                    if((BOSS.ID[Y] >= 0d590) && (BOSS.ID[Y] <= 0d593)) {
                        pit_triggered(BOSS.ID, 0x04);
                    }
                } else {
                    BOSS.ID[GENERAL_PURPOSE] = 0x00;
                }

                sleep(0x0a);
            }
        }
        @install()
        @async()
        fun pit_scanner_boy() { // TODO: remove
            while(True) {
                // if((<BOY>[X] == 0d127) && ((<BOY>[Y] == 0d303) || (<BOY>[Y] == 0d303))) {
                if((<BOY>[X] >= 0d112) && (<BOY>[X] <= 0d127)) {
                    if((<BOY>[Y] >= 0d302) && (<BOY>[Y] <= 0d305)) {
                        pit_triggered_boy(0x01);
                    }
                } else if((<BOY>[X] >= 0d224) && (<BOY>[X] <= 0d239)) {
                    if((<BOY>[Y] >= 0d446) && (<BOY>[Y] <= 0d449)) {
                        pit_triggered_boy(0x02);
                    }
                } else if((<BOY>[X] >= 0d368) && (<BOY>[X] <= 0d383)) {
                    if((<BOY>[Y] >= 0d526) && (<BOY>[Y] <= 0d529)) {
                        pit_triggered_boy(0x03);
                    }
                // } else if((<BOY>[X] >= 0d368) && (<BOY>[X] <= 0d383)) {
                    if((<BOY>[Y] >= 0d590) && (<BOY>[Y] <= 0d593)) {
                        pit_triggered_boy(0x04);
                    }
                } else {
                    <BOY>[GENERAL_PURPOSE] = 0x00;
                }

                sleep(0x0a);
            }
        }

        @install()
        fun boss_triggered() {
            if(BOSS.DEBUG) {
                subtext("boss triggered");
            }

            set(BOSS.PROGRESS);

            fade_to_music(BOSS);

            attach_script(BOSS.ID, DEATH, reference(boss_defeated));

            control_enemy(BOSS.ID, False);
        }
        @install()
        fun boss_defeated() {
            if(BOSS.DEBUG) {
                subtext("boss defeated");
            }
            
            unset(BOSS.PROGRESS);
            set(SOULS_MEMORY.DEAD_PIT_EGG);

            souls_boss_defeated();

            music(BUGMUCK_AMBIENT_MELODY, 0xff); // TODO
        }

        fun trigger_enter() {
            open_sandpits(True);

            if!(SOULS_MEMORY.DEAD_PIT_EGG) {
                add_enemy_with_flags(MEGATAUR, 0x38, 0x44, INACTIVE);
                animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_ENTER);
                attach_script(LAST_ENTITY, DAMAGE, reference(boss_triggered));
                <LAST_ENTITY>[HP] = 0d600;
                BOSS.ID = <LAST_ENTITY>;

                pit_scanner();
            }

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // north
                add_enemy(TUMBLING_WEED, 0d42, 0d42);

                // center
                add_enemy(TUMBLING_WEED, 0d18, 0d90);

                // center
                add_enemy(BUZZARD_1, 0d68, 0d147);

                // upstairs east
                add_enemy(SLIME, 0d11, 0d109);
                
                add_enemy(SLIME, 0d11, 0d65);

                // upstairs north
                add_enemy(SLIME, 0d57, 0d34);

                // upstairs east
                add_enemy(BUZZARD_1, 0d57, 0d89);
                add_enemy(SLIME, 0d76, 0d114);
            }

            init_room();

            if!(ROOM.BRANCH_USED) {
                branch_lady(0x4e, 0x2c, reference(branch_triggered));
            }

            pit_scanner_boy();
        }
    };

    map jaguar_cave(0x64) {
        enum entrance {
            south = entrance(0x15, 0x23, NORTH),
        }

        enum stepon_trigger {
            exit_south = @install() {
                map_transition(east_inbetwixx, cave, SOUTH);
            },
            exit_teleporter = @install() {
                subtext("S=1");
            },
        }

        fun trigger_enter() {
            fade_in();
        }
    };

    map east_crossing(0x4f) {
        enum entrance {
            north = entrance(0x27, 0x01, SOUTH),
            cave = entrance(0x15, 0x1a, SOUTH),
            east = entrance(0x3f, 0x4b, WEST),
            west = entrance(0x01, 0x4b, EAST),

            crash = entrance(0x32, 0x1e, NONE),

            elevator_top = entrance(0x0d, 0x2b, SOUTH),
            elevator_bottom = entrance(0x1b, 0x47, SOUTH),
        }

        enum soundtrack {
            default = soundtrack(0x72, 0xff)
        }

        enum ROOM {
            DEBUG = False,

            STONE_TRIGGERED = flag(),
            STONE_DOOR_TRIGGERED = flag(),

            ID_STONE = memory_tmp(),
            ID_STONE_BOMB = memory_tmp(),
            ID_STONE_HOLE = memory_tmp(),
        }

        @install()
        fun ravine_triggered() {
            generic_fall(0d100);

            if(SOULS_MEMORY.RING_CAT) {
                damage(BOTH, 0d20, True);
            } else {
                damage(BOTH, 0d80, True);
            }

            yield();

            if(<BOY>[HP] > 0x00) {
                sleep(0d60);

                map_transition(radahn_arena, center, NONE);
            } else {
                dust_unreachable(0d47, 0d6);
            }
        }

        enum stepon_trigger {
            ravine_1 = ravine_triggered(),
            ravine_2 = ravine_triggered(),
            ravine_3 = ravine_triggered(),
            ravine_4 = ravine_triggered(),
            ravine_5 = ravine_triggered(),
            ravine_6 = ravine_triggered(),
            ravine_7 = ravine_triggered(),
            ravine_8 = ravine_triggered(),
            ravine_9 = ravine_triggered(),
            ravine_10 = ravine_triggered(),

            ravine_11 = ravine_triggered(),
            ravine_12 = ravine_triggered(),
            ravine_13 = ravine_triggered(),
            ravine_14 = ravine_triggered(),
            ravine_15 = ravine_triggered(),
            ravine_16 = ravine_triggered(),
            ravine_17 = ravine_triggered(),
            ravine_18 = ravine_triggered(),
            ravine_19 = ravine_triggered(),
            exit_east = @install() {
                map_transition(ship, west, EAST);
            },

            exit_cave = @install() {
                if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                    subtext("Does not open from this side.");
                } else {
                    map_transition(radahn_exit, room_nw_west, NORTH);
                }
            },
            exit_west = @install() {
                map_transition(eastern_river, east, WEST);
            },
            elevator_bottom = @install() {
                map_transition(dungeon_volcano, south_2, NORTH);
            },
            elevator_top = @install() {
                map_transition(dungeon_volcano, south_1, NORTH);
            },
            exit_north = @install() {
                map_transition(east_inbetwixx, south_2, NORTH);
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            }
        }

        @install()
        fun stone_triggered() {
            if(<ACTIVE> == <BOY>) {
                animate(BOY, ONCE, ANIMATION_ALL.SLASH_2);

                <SCRIPT_OWNER>[JUMP_HEIGHT] = 0x30;
                sleep(0x50);

                object[0x00] = 0x01;
                destroy(SCRIPT_OWNER);

                set(ROOM.STONE_TRIGGERED);
            }
        }

        @install()
        fun stone_door_triggered() {
            subtext("Does not open from this side.");
        }

        fun tiny_bridge(connected) {
            if(connected) {
                object[0x11] = 0x01;
            } else {
                object[0x11] = 0x00;
            }
        }

        @install()
        fun stone_hole_triggered() {
            set(ROOM.STONE_DOOR_TRIGGERED);

            destroy(ROOM.ID_STONE);
            destroy(ROOM.ID_STONE_BOMB);
            destroy(ROOM.ID_STONE_HOLE);

            tiny_bridge(True);
        }

        @install()
        @async()
        fun stack_stone_bomb() {
            while!(dead(ROOM.ID_STONE)) {
                ROOM.ID_STONE[X] = ROOM.ID_STONE_BOMB[X];
                ROOM.ID_STONE[Y] = ROOM.ID_STONE_BOMB[Y];
                yield();
            }
        }
        
        @install()
        @async()
        fun stone_hole_scanner() {
            while(True) {
                arg[0x00] = ROOM.ID_STONE[X];
                arg[0x02] = ROOM.ID_STONE[Y];
                arg[0x04] = ROOM.ID_STONE_HOLE[X];
                arg[0x06] = ROOM.ID_STONE_HOLE[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x0a) && (arg[0x0a] <= 0x0a)) {
                    stone_hole_triggered();
                    end();
                }

                yield();

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }
            }
        }
        
        fun init_room() {
            default_init_room(True, True);
        }

        @install()
        fun debug_triggered() {
            stone_triggered();

            destroy(SCRIPT_OWNER);
        }

        fun trigger_enter() {
            if(FLAG.DEBUG) {
                if!(ROOM.STONE_TRIGGERED) {
                    add_debug_entity(0x24, 0x06, reference(debug_triggered));
                }
            }

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // upstairs
                add_enemy(RAPTOR_GREEN, 0d26, 0d48);
                add_enemy(RAPTOR_PURPLE, 0d28, 0d25);

                // downstairs
                add_enemy(RAPTOR_GREEN, 0d39, 0d80);
                add_enemy(RAPTOR_PURPLE, 0d17, 0d71);
            }

            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            if!(ROOM.STONE_TRIGGERED) {
                add_enemy(STONE_ROUND, 0x24, 0x18);
                attach_script(LAST_ENTITY, TALK, reference(stone_triggered));
            } else {
                object[0x00] = 0x01;
            }

            bonfire(0x2d, 0x44, reference(bonfire_triggered));

            if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                add_enemy(STONE_ROUND, 0x15, 0x1b);
                attach_script(LAST_ENTITY, TALK, reference(stone_door_triggered));
            } else if!(ROOM.STONE_DOOR_TRIGGERED) {
                add_enemy(STONE_ROUND, 0x00, 0x00);
                ROOM.ID_STONE = <LAST_ENTITY>;

                add_enemy(BOMB, 0x15, 0x22);
                ROOM.ID_STONE_BOMB = <LAST_ENTITY>;
                attribute(LAST_ENTITY, INVISIBLE, True);

                stack_stone_bomb();

                add_enemy(PLACEHOLDER, 0x2f, 0x2e);
                ROOM.ID_STONE_HOLE = <LAST_ENTITY>;

                stone_hole_scanner();
            } else {
                tiny_bridge(True);
            }

            default_init_room(True, False);
        }
    };

    area arena_ravine() {
        map radahn_arena(0x5c) {
            enum entrance {
                north = entrance(0x1b, 0x03, SOUTH),
                south = entrance(0x1d, 0x33, NORTH),

                left = entrance(0x15, 0x1c, NONE),
                center = entrance(0x1e, 0x21, NONE),
                right = entrance(0x2a, 0x23, NONE)
            }

            enum soundtrack {
                default = soundtrack(0x32, 0xff)
            }

            enum stepon_trigger {
                exit_north = nop(),
                exit_south = @install() {
                    map_transition(radahn_exit, room_nw_north, SOUTH);
                },
                center = nop(),
            }

            fun close_exits(close) {
                if(close) {
                    object[0x04] = 0x04;
                } else {
                    object[0x05] = 0x04;
                }
            }

            enum BOSS {
                DEBUG = False,

                RIDER_ID = memory_tmp(),
                MOUNT_ID = memory_tmp(),

                PHASE = memory_tmp(),
                TIMER = memory_tmp(),

                HP = 0x03e8, // 1000

                COUNTDOWN = 0x03,

                // p1

                P1_THRESHOLD = 0x320, // 800
                P1_TIME_BEFORE_SALVAGE = 0x200,

                // p2

                P2_THRESHOLD = 0x1f4, // 500
                P2_TIME_BEFORE_SALVAGE = 0x300,

                RANDOM_SPELL = memory_tmp(),
                TIME_BEFORE_RANDOM_SPELL = 0x300,
            }

            fun boss_killed() {
                set(SOULS_MEMORY.DEAD_ARENA_RADAHN);
                SOULS_MEMORY.BOSSES_DEFEATED_COUNTER += 0x01;
                SOULS_MEMORY.PROGRESS_COUNTER += 0x01;

                fanfare_boss();

                object[0x04] = 0x00;
            }

            @install()
            @async()
            fun stack_t01_offset() {
                while!(dead(BOSS.MOUNT_ID)) {
                    BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                    BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y] - 0x15;
                    yield();
                }
            }

            fun cast_salvage(target:CHARACTER, level) {
                animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_CAST_1);
                cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
                cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
                cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
                cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
            }

            @install()
            fun boss_damage() {
                // animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_DAMAGE);

                if(BOSS.PHASE == 0x00) {
                    BOSS.TIMER = 0x00;

                    if(BOSS.RIDER_ID[HP] < BOSS.P1_THRESHOLD) {
                        BOSS.PHASE = 0x01;
                    }
                } else if(BOSS.PHASE == 0x01) {
                    if(BOSS.RIDER_ID[HP] < BOSS.P2_THRESHOLD) {
                        BOSS.PHASE = 0x02;
                    }
                } else if(BOSS.PHASE == 0x02) {
                    BOSS.TIMER -= 0x60;
                }

                if(BOSS.DEBUG) {
                    MEMORY.STRING_PARAMETER_1 = BOSS.RIDER_ID[HP];
                    MEMORY.STRING_PARAMETER_2 = BOSS.HP;

                    subtext("Rider = [MEM1]/[MEM2]");
                }
            }

            @install()
            @async()
            fun boss_watcher() {
                if(BOSS.DEBUG) {
                    subtext("phase 0");
                }

                while(BOSS.PHASE == 0x00) {
                    if(BOSS.TIMER > BOSS.P1_TIME_BEFORE_SALVAGE) {
                        cast_salvage(ACTIVE, 0x00);

                        BOSS.TIMER = 0x00;
                    }
                
                    if(BOSS.RIDER_ID[0x0b] == 0x0800) { // TODO: buggy, since menu resets paletts
                        BOSS.TIMER += 0x01;
                    }
                    yield();
                }

                if(BOSS.DEBUG) {
                    subtext("phase 1");
                }

                BOSS.TIMER = 0x0000;
                cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
                cast(BOSS.RIDER_ID, ACTIVE, CAST.CONFOUND, 0x05);

                while(BOSS.PHASE == 0x01) {
                    if(BOSS.TIMER > BOSS.P2_TIME_BEFORE_SALVAGE) {
                        cast_salvage(ACTIVE, 0x00);

                        BOSS.TIMER = 0x00;
                    }
                
                    if(BOSS.RIDER_ID[PALETTE] == 0x0800) { // TODO: buggy, since menu resets paletts
                        BOSS.TIMER += 0x01;
                    }
                    yield();
                }

                BOSS.TIMER = 0x0000;
                cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
                cast(BOSS.RIDER_ID, ACTIVE, CAST.CONFOUND, 0x05);

                while(BOSS.PHASE == 0x01) {
                    BOSS.TIMER += 0x01;

                    if(BOSS.TIMER > BOSS.TIME_BEFORE_RANDOM_SPELL) {
                        BOSS.TIMER = 0x0000;

                        BOSS.RANDOM_SPELL = randrange(0x03);

                        if(BOSS.RANDOM_SPELL == 0x00) {
                            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
                            cast(BOSS.RIDER_ID, ACTIVE, CAST.CONFOUND, 0x05);
                        } else if(BOSS.RANDOM_SPELL == 0x01) {
                            cast(BOSS.RIDER_ID, ACTIVE, CAST.DRAIN, 0x30);
                        } else if(BOSS.RANDOM_SPELL == 0x02) {
                            cast(BOSS.RIDER_ID, ACTIVE, CAST.PLAGUE, 0x01);
                        } 
                    }
                    yield();
                }

                if(BOSS.DEBUG) {
                    subtext("phase 2");
                }

                boss_killed();
            }

            fun spawn_boss(x, y) {
                add_enemy(VERMINATOR, x, y);
                <LAST_ENTITY>[HP] = BOSS.HP;
                BOSS.RIDER_ID = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DAMAGE, reference(boss_damage));
                attribute(LAST_ENTITY, ROOT, True);

                add_enemy(RAPTOR_BLACK, x, y);
                BOSS.MOUNT_ID = <LAST_ENTITY>;
                // attribute(LAST_ENTITY, ROOT, True);
            }

            fun trigger_enter() {
                if!(FLAG.IN_ANIMATION) {
                    crash_both();
                }

                default_init_room(True, False);
                character_selection(BOY);

                if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                    close_exits(True);

                    spawn_boss(0x10, 0x13);
                    stack_t01_offset();
                    boss_watcher();
                }
            }
        };

        map radahn_exit(0x3c) {
            enum entrance {
                main_north = entrance(0xd3, 0x3d, SOUTH),
                main_east = entrance(0xf7, 0x5b, WEST),
                main_south = entrance(0xd5, 0x95, NORTH),
                main_west = entrance(0xbb, 0x5d, EAST),

                cave_outside = entrance(0x54, 0xb1, NORTH),

                room_nw_north = entrance(0x20, 0x85, SOUTH),
                room_nw_west = entrance(0x01, 0xa3, EAST),

                room_es_east = entrance(0x67, 0x1c, WEST),
                room_es_south = entrance(0x4c, 0x39, NORTH),

                room_nss_north = entrance(0x9e, 0x05, SOUTH),
                room_nss_south_1 = entrance(0x9e, 0x37, NORTH),
                room_nss_south_2 = entrance(0x84, 0x37, NORTH),

                room_s_south = entrance(0x9e, 0x7b, NORTH),

                room_alchemist = entrance(0xd0, 0x05, SOUTH),

                room_ns_north = entrance(0x1c, 0x3d, SOUTH),
                room_ns_south = entrance(0x22, 0x7b, NORTH),

                room_nne_north_1 = entrance(0x4c, 0x36, SOUTH),
                room_nne_north_2 = entrance(0x60, 0x39, SOUTH),
                room_nne_east = entrance(0x7f, 0x60, WEST),

                room_sw_south = entrance(0x1c, 0x3b, NORTH),
                room_sw_west = entrance(0x01, 0x24, EAST),
            }

            enum stepon_trigger {
                exit_room_nw_north = @install() {
                    map_transition(radahn_arena, south, NORTH);
                },
                exit_room_nw_west = @install() {
                    map_transition(east_crossing, cave, WEST);
                },
                stepon_2 = @install() {
                    subtext("S=2");
                },
                stepon_3 = @install() {
                    subtext("S=3");
                },
                stepon_4 = @install() {
                    subtext("S=4");
                },
                stepon_5 = @install() {
                    subtext("S=5");
                },
                stepon_6 = @install() {
                    subtext("S=6");
                },
                stepon_7 = @install() {
                    subtext("S=7");
                },
                stepon_8 = @install() {
                    subtext("S=8");
                },
                stepon_9 = @install() {
                    subtext("S=9");
                },

                stepon_10 = @install() {
                    subtext("S=10");
                },
                stepon_11 = @install() {
                    subtext("S=11");
                },
                stepon_12 = @install() {
                    subtext("S=12");
                },
                stepon_13 = @install() {
                    subtext("S=13");
                },
                stepon_14 = @install() {
                    subtext("S=14");
                },
                stepon_15 = @install() {
                    subtext("S=15");
                },
                stepon_16 = @install() {
                    subtext("S=16");
                },
                stepon_17 = @install() {
                    subtext("S=17");
                },
                stepon_18 = @install() {
                    subtext("S=18");
                },
                stepon_19 = @install() {
                    subtext("S=19");
                },

                stepon_20 = @install() {
                    subtext("S=20");
                },
            }
            
            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                b_trigger_2 = @install() {
                    subtext("B=2");
                },
                b_trigger_3 = @install() {
                    subtext("B=3");
                },
                b_trigger_4 = @install() {
                    subtext("B=4");
                },
                b_trigger_5 = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                b_trigger_7 = @install() {
                    subtext("B=7");
                },
                b_trigger_8 = @install() {
                    subtext("B=8");
                },
                b_trigger_9 = @install() {
                    subtext("B=9");
                },

                b_trigger_10 = @install() {
                    subtext("B=10");
                },
                b_trigger_11 = @install() {
                    subtext("B=11");
                },
                b_trigger_12 = @install() {
                    subtext("B=12");
                },
                b_trigger_13 = @install() {
                    subtext("B=13");
                },
                b_trigger_14 = @install() {
                    subtext("B=14");
                },
                b_trigger_15 = @install() {
                    subtext("B=15");
                },
                b_trigger_16 = @install() {
                    subtext("B=16");
                },
                b_trigger_17 = @install() {
                    subtext("B=17");
                },
                b_trigger_18 = @install() {
                    subtext("B=18");
                },
                b_trigger_19 = @install() {
                    subtext("B=19");
                },

                b_trigger_20 = @install() {
                    subtext("B=20");
                },
                b_trigger_21 = @install() {
                    subtext("B=21");
                },
                b_trigger_22 = @install() {
                    subtext("B=22");
                },
                b_trigger_23 = @install() {
                    subtext("B=23");
                },
                b_trigger_24 = @install() {
                    subtext("B=24");
                },
            }

            fun trigger_enter() {
                default_init_room(False, False);
            }
        };
    };

    map eastern_barrier(0x13) {
        enum entrance {
            north = entrance(0x14, 0x05, SOUTH), // entrance(0x17, 0x01, SOUTH),
            east = entrance(0x2b, 0x11, WEST),
            west = entrance(0x06, 0x18, EAST),
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum stepon_trigger {
            exit_west = @install() {
                map_transition(east_inbetwixx, east, WEST);
            },
            stepon_1 = @install() {
                subtext("S=1");
            },
            exit_north = @install() {
                map_transition(graveyard, south, NORTH);
            },
            exit_east = @install() {
                map_transition(pipe_entrance, pipe_west, EAST);
            },
        }

        enum b_trigger {
            barrier = @install() {
                _axe2_wall(0x00);
            },
        }

        fun trigger_enter() {
            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // downstairs
                add_enemy(FLOWER_PURPLE, 0d18, 0d28);

                // upstairs
                add_enemy(FLOWER_PURPLE, 0d30, 0d11);
            }

            default_init_room(True, True);

            bomb_wall_trigger(0x00, 0x01, 0d20, 0x8); // TODO: has a hitbox that blocks the player
        }
    };

    map eastern_river(0x2f) {
        enum entrance {
            north = entrance(0x53, 0x04, SOUTH),
            east = entrance(0x81, 0x31, WEST),
            south = entrance(0x55, 0x6e, NORTH),
        }

        enum soundtrack {
            default = soundtrack(0x72, 0xff)
        }

        enum ROOM {
            WATER_REMOVED = flag()
        } 

        enum stepon_trigger {
            stepon_0 = @install() {
                subtext("S=0");
            },
            stepon_1 = @install() {
                subtext("S=1");
            },
            stepon_2 = @install() {
                subtext("S=2");
            },
            exit_north = @install() {
                map_transition(eastern_waterfall, south, NORTH);
            },
            exit_east = @install() {
                map_transition(east_crossing, west, EAST);
            },
            exit_south = @install() {
                map_transition(pyramid, north, SOUTH);
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
            b_trigger_17 = @install() {
                subtext("B=17");
            },
            b_trigger_18 = @install() {
                subtext("B=18");
            },
            b_trigger_19 = @install() {
                subtext("B=19");
            },
        }

        fun remove_water(remove) {
            if(remove) {
                object[0x00] = 0x01;
                object[0x01] = 0x01;
            } else {
                object[0x00] = 0x00;
                object[0x01] = 0x00;
            }
        }

        @install()
        fun revealer_triggered() {
            destroy(SCRIPT_OWNER);

            remove_water(True);

            set(ROOM.WATER_REMOVED);
        }

        @install()
        fun debug_triggered() {
            revealer_triggered();

            destroy(SCRIPT_OWNER);
        }

        fun trigger_enter() {
            // object[0x00] = 0x01;
            // object[0x01] = 0x01;

            if!(ROOM.WATER_REMOVED) {
                add_enemy(REVEALER_TARGET_ENTITY, 0x52, 0x26);
                special_script(REVEALER, reference(revealer_triggered));

                add_debug_entity(0x5b, 0x23, reference(debug_triggered));
            } else {
                remove_water(True);
            }

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // east
                add_enemy(RAPTOR_PURPLE, 0d95, 0d30);

                add_enemy(RAPTOR_PURPLE, 0d99, 0d63);

                add_enemy(FLOWER_PURPLE, 0d96, 0d60);

                // west
                add_enemy(RAPTOR_GREEN, 0d40, 0d47);

                add_enemy(RAPTOR_GREEN, 0d61, 0d81);

                // river
                if(ROOM.WATER_REMOVED) {
                    add_enemy(RAPTOR_PURPLE, 0d82, 0d38);
                }
            }

            default_init_room(True, True);
        }
    };

    map graveyard(0x27) {
        enum entrance {
            north = entrance(0x32, 0x0f, SOUTH),
            south = entrance(0x2f, 0x5f, NORTH)
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
            // default = soundtrack(0x24, 0xff)
        }

        enum BOSS {
            DEBUG = False,
            IN_PROGRESS = memory_tmp(),

            RIDER_ID = memory_tmp(),
            MOUNT_ID = memory_tmp(),

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            HP = 0x03e8, // 1000

            COUNTDOWN = 0x03,

            STOMP_ENTITY = memory_tmp(),
            STOMP_DISTANCE = 0x20,
            STOMP_COOL_DOWN_TIMER = memory_tmp(),
            STOMP_COOL_DOWN = 0x100,
            STOMP_DAMAGE_CLOSE = 0x50,
            STOMP_DAMAGE = 0x10,
            STOMP_EXPLOSION_DISTANCE = 0x30,

            // p1

            P1_THRESHOLD = 0x320, // 800
            P1_TIME_BEFORE_SALVAGE = 0x500,

            // p2

            P2_THRESHOLD = 0x1f4, // 500
            P2_TIME_BEFORE_SALVAGE = 0x300,

            RANDOM_SPELL = memory_tmp(),
            TIME_BEFORE_RANDOM_SPELL = 0x300,
        }

        fun boss_killed() {
            set(SOULS_MEMORY.DEAD_STOMPY_RADAHN);
        }

        @install()
        @async()
        fun stomp() {
            BOSS.RIDER_ID[JUMP_HEIGHT] = 0x38;
            BOSS.MOUNT_ID[JUMP_HEIGHT] = 0x30;

            // attribute(BOSS.MOUNT_ID, ROOT, True);
            // animate(BOSS.MOUNT_ID, LOOP, ANIMATION_ENEMY.STERLING_FLY_1);

            sleep(0x60);

            add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_GREEN_3, 0x00, 0x00);
            BOSS.STOMP_ENTITY = <LAST_ENTITY>;
            <LAST_ENTITY>[X] = BOSS.MOUNT_ID[X];
            <LAST_ENTITY>[Y] = BOSS.MOUNT_ID[Y] + 0x10;

            arg[0x00] = BOSS.STOMP_ENTITY[X];
            arg[0x02] = BOSS.STOMP_ENTITY[Y];
            arg[0x04] = <BOY>[X];
            arg[0x06] = <BOY>[Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= BOSS.STOMP_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_DISTANCE)) {
                damage(BOY, BOSS.STOMP_DAMAGE_CLOSE, True);
            } else if((arg[0x08] <= BOSS.STOMP_EXPLOSION_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_EXPLOSION_DISTANCE)) {
                damage(BOY, BOSS.STOMP_DAMAGE, True);
            }

            if(BOSS.DEBUG) {
                debug_memory(arg[0x08], arg[0x0a]);
                sleep(0x20);
            }

            sleep(0x30);
            destroy(BOSS.STOMP_ENTITY);
            // attribute(BOSS.MOUNT_ID, ROOT, False);
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(BOSS.MOUNT_ID)) {
                BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y] - 0x15;
                yield();

                if(BOSS.STOMP_COOL_DOWN_TIMER == 0x0000) {
                    arg[0x00] = BOSS.MOUNT_ID[X];
                    arg[0x02] = BOSS.MOUNT_ID[Y];
                    arg[0x04] = <ACTIVE>[X];
                    arg[0x06] = <ACTIVE>[Y];

                    if(arg[0x00] < arg[0x04]) {
                        arg[0x08] = arg[0x04] - arg[0x00];
                    } else {
                        arg[0x08] = arg[0x00] - arg[0x04];
                    }

                    if(arg[0x02] < arg[0x06]) {
                        arg[0x0a] = arg[0x06] - arg[0x02];
                    } else {
                        arg[0x0a] = arg[0x02] - arg[0x06];
                    }

                    if((arg[0x08] <= BOSS.STOMP_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_DISTANCE)) {
                        BOSS.STOMP_COOL_DOWN_TIMER = BOSS.STOMP_COOL_DOWN;

                        stomp();
                        call_async(ADDRESS.STERLING_ROAR);
                    }
                    yield();

                    // if(BOSS.DEBUG) {
                    //     debug_memory(arg[0x08], arg[0x0a]);
                    //     sleep(0x20);
                    // }
                } else {
                    BOSS.STOMP_COOL_DOWN_TIMER -= 0x01;
                }
            }
        }

        fun cast_salvage(target:CHARACTER, level) {
            animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_CAST_1);
            cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
            cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
            cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
            cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
        }

        @install()
        fun boss_damage() {
            // animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_DAMAGE);

            if(BOSS.PHASE == 0x00) {
                BOSS.TIMER = 0x00;

                if(BOSS.RIDER_ID[HP] < BOSS.P1_THRESHOLD) {
                    BOSS.PHASE = 0x01;
                }
            } else if(BOSS.PHASE == 0x01) {
                if(BOSS.RIDER_ID[HP] < BOSS.P2_THRESHOLD) {
                    BOSS.PHASE = 0x02;
                }
            } else if(BOSS.PHASE == 0x02) {
                BOSS.TIMER -= 0x60;
            }

            if(BOSS.DEBUG) {
                MEMORY.STRING_PARAMETER_1 = BOSS.RIDER_ID[HP];
                MEMORY.STRING_PARAMETER_2 = BOSS.HP;

                subtext("Rider = [MEM1]/[MEM2]");
            }
        }

        @install()
        @async()
        fun boss_watcher() {
            if(BOSS.DEBUG) {
                subtext("phase 0");
            }

            while(BOSS.PHASE == 0x00) {
                if(BOSS.TIMER > BOSS.P1_TIME_BEFORE_SALVAGE) {
                    cast_salvage(ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[0x0b] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER += 0x01;
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext("phase 1");
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
            cast(BOSS.RIDER_ID, ACTIVE, CAST.CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                if(BOSS.TIMER > BOSS.P2_TIME_BEFORE_SALVAGE) {
                    cast_salvage(ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[PALETTE] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER += 0x01;
                }
                yield();
            }

            BOSS.TIMER = 0x0000;
            BOSS.STOMP_COOL_DOWN_TIMER = BOSS.STOMP_COOL_DOWN;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
            cast(BOSS.RIDER_ID, ACTIVE, CAST.CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                BOSS.TIMER += 0x01;

                if(BOSS.TIMER > BOSS.TIME_BEFORE_RANDOM_SPELL) {
                    BOSS.TIMER = 0x0000;

                    BOSS.RANDOM_SPELL = randrange(0x03);

                    if(BOSS.RANDOM_SPELL == 0x00) {
                        cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
                        cast(BOSS.RIDER_ID, ACTIVE, CAST.CONFOUND, 0x05);
                    } else if(BOSS.RANDOM_SPELL == 0x01) {
                        cast(BOSS.RIDER_ID, ACTIVE, CAST.DRAIN, 0x30);
                    } else if(BOSS.RANDOM_SPELL == 0x02) {
                        cast(BOSS.RIDER_ID, ACTIVE, CAST.PLAGUE, 0x01);
                    } 
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext("phase 2");
            }

            boss_killed();
        }

        fun spawn_boss(x, y) {
            add_enemy(VERMINATOR, x, y);
            <LAST_ENTITY>[HP] = BOSS.HP;
            BOSS.RIDER_ID = <LAST_ENTITY>;
            attach_script(LAST_ENTITY, DAMAGE, reference(boss_damage));
            attribute(LAST_ENTITY, ROOT, True);
            // attribute(LAST_ENTITY, NO_CLIP, True);

            // add_enemy(STERLING, x, y);
            add_enemy(FORESTDRAKE, x, y);
            BOSS.MOUNT_ID = <LAST_ENTITY>;
            // attach_sterling_script_to_last_entity();
            // attribute(LAST_ENTITY, ROOT, True);
        }

        enum stepon_trigger {
            exit_north = @install() {
                subtext("S=0");
            },
            exit_south = @install() {
                map_transition(eastern_barrier, north, SOUTH);
            },
            spawn_boss = @install() {
                if!(SOULS_MEMORY.DEAD_STOMPY_RADAHN) {
                    if(BOSS.IN_PROGRESS == 0x00) {
                        fade_to_music(BOSS);

                        walk(BOY, TILE_ABSOLUTE, 0x2d, 0x25, NONE);
                        walk(DOG, TILE_ABSOLUTE, 0x36, 0x25, BOTH);

                        BOSS.IN_PROGRESS = 0x01;
                        object[0x1f] = 0x7e;
                        
                        spawn_boss(0x39, 0x23);
                        stack_t01_offset();
                        boss_watcher();
                    }
                }
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
            b_trigger_17 = @install() {
                subtext("B=17");
            },
            b_trigger_18 = @install() {
                subtext("B=18");
            },
            b_trigger_19 = @install() {
                subtext("B=19");
            },

            b_trigger_20 = @install() {
                subtext("B=20");
            },
            b_trigger_21 = @install() {
                subtext("B=21");
            },
            b_trigger_22 = @install() {
                subtext("B=22");
            },
            b_trigger_23 = @install() {
                subtext("B=23");
            },
            b_trigger_24 = @install() {
                subtext("B=24");
            },
            b_trigger_25 = @install() {
                subtext("B=25");
            },
            b_trigger_26 = @install() {
                subtext("B=26");
            },
            b_trigger_27 = @install() {
                subtext("B=27");
            },
            b_trigger_28 = @install() {
                subtext("B=28");
            },
            b_trigger_29 = @install() {
                subtext("B=29");
            }
        }

        fun trigger_enter() {
            default_init_room(True, True);
        }
    };

    area pipe_maze() {
        enum PIPE_MAZE {
            MARIO_BOSS_ROOM_OPEND = flag(),
            HIDDEN_ROOM_OPEND = flag(),

            ROOMS_CLEARED = memory(),

            BIG_MUSHROOM_UNLOCKED = flag(),

            MUSIC_ENTRANCE = 0x72,
            MUSIC_MAZE = 0x72,
        }

        map pipe_entrance(0x3e) {
            enum entrance {
                pipe_east = entrance(0x2d, 0x17, NONE),
                south = entrance(0x1a, 0x2f, NORTH),
                pipe_west = entrance(0x07, 0x17, NONE),
            }
            
            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff)
            }

            enum ROOM {
                DEBUG = False,

                SECRET_PASSAGE_TRIGGER = memory_tmp(),
                SECRET_PASSAGE_DISTANCE = 0x20,

                GOURD = flag(),
            }

            enum stepon_trigger {
                switch_triggered = nop(),
                exit_room_switch = nop(),
                exit_room_gate = nop(),
                exit_room_empty = nop(),
                exit_north_1 = @install() {
                    map_transition(pipe_entrance_left, pipe_switch, NORTH);
                },
                exit_north_2 = @install() {
                    map_transition(pipe_maze, pipe_east, NORTH);
                },
                jump_room_switch = nop(),
                jump_room_gate = nop(),
                exit_south = @install() {
                    map_transition(pipe_caves_1, north, SOUTH);
                },
                jump_empty_room = nop(),

                exit_gate = nop(),
                approach_gate = nop(),
            }

            fun gourd_looted() {
                bonfire(0x0e, 0x1f);
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                b_trigger_2 = @install() {
                    subtext("B=2");
                },
                b_trigger_3 = @install() {
                    subtext("B=3");
                },
                b_trigger_4 = @install() {
                    subtext("B=4");
                },
                b_trigger_5 = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                b_trigger_7 = @install() {
                    subtext("B=7");
                },
                b_trigger_8 = @install() {
                    subtext("B=8");
                },
                b_trigger_9 = @install() {
                    sound(WEIRD_SOUND);
                    set(ROOM.GOURD);
                    object[0x07] = 0x02; // loot gourd_entrance
                    gourd_looted();
                },

                b_trigger_10 = @install() {
                    subtext("B=10");
                },
                b_trigger_11 = @install() {
                    subtext("B=11");
                },
                b_trigger_12 = @install() {
                    subtext("B=12");
                },
                b_trigger_13 = @install() {
                    subtext("B=13");
                },
            }

            @install()
            @async()
            fun hidden_exit_check() {
                while(True) {
                    arg[0x00] = <ACTIVE>[X];
                    arg[0x02] = <ACTIVE>[Y];
                    arg[0x04] = ROOM.SECRET_PASSAGE_TRIGGER[X];
                    arg[0x06] = ROOM.SECRET_PASSAGE_TRIGGER[Y];

                    if(arg[0x00] < arg[0x04]) {
                        arg[0x08] = arg[0x04] - arg[0x00];
                    } else {
                        arg[0x08] = arg[0x00] - arg[0x04];
                    }

                    if(arg[0x02] < arg[0x06]) {
                        arg[0x0a] = arg[0x06] - arg[0x02];
                    } else {
                        arg[0x0a] = arg[0x02] - arg[0x06];
                    }

                    if((arg[0x08] <= ROOM.SECRET_PASSAGE_DISTANCE) && (arg[0x0a] <= ROOM.SECRET_PASSAGE_DISTANCE)) {
                        map_transition(eastern_barrier, east, WEST);
                        end();
                    }
                    yield();

                    if(ROOM.DEBUG) {
                        debug_memory(arg[0x08], arg[0x0a]);
                        sleep(0x20);
                    }
                }
            }

            @install()
            fun test_triggered() {
                if(PIPE_MAZE.HIDDEN_ROOM_OPEND) {
                    map_transition(pipe_caves_side, pipe, EAST);
                } else {
                    error_contraption(NONE);
                }
            }
            
            @install()
            fun debug_triggered() {
                set(PIPE_MAZE.HIDDEN_ROOM_OPEND);

                destroy(SCRIPT_OWNER);
            }

            fun trigger_enter() {
                if(FLAG.DEBUG) {
                    if!(PIPE_MAZE.HIDDEN_ROOM_OPEND) {
                        add_debug_entity(0x2F, 0x1b, reference(debug_triggered));
                    }
                }

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    add_enemy(RAT, 0d38, 0d33);
                }

                if(ROOM.GOURD) {
                    object[0x07] = 0x02; // loot gourd_entrance
                    gourd_looted();
                } else {
                    object[0x07] = 0x01; // loot gourd_entrance
                }
                // bonfire(0x1e, 0x22);

                default_init_room(True, False);

                if(PIPE_MAZE.BIG_MUSHROOM_UNLOCKED) {
                    SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.MARIO;
                }

                add_enemy(PLACEHOLDER, 0x2d, 0x16);
                attach_script(LAST_ENTITY, TALK, reference(test_triggered));
                
                add_enemy(PLACEHOLDER, 0x05, 0x16);
                ROOM.SECRET_PASSAGE_TRIGGER = <LAST_ENTITY>;

                sleep(0x10);
                hidden_exit_check();
            }
        };

        map pipe_entrance_left(0x3e) {
            enum entrance {
                pipe_switch = entrance(0xbf, 0x23, NONE),
                pipe_gate = entrance(0x87, 0x1f, NONE),
                gate = entrance(0x98, 0x10, SOUTH),
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff)
            }

            enum stepon_trigger {
                switch_triggered = @install() {
                    if!(PIPE_MAZE.HIDDEN_ROOM_OPEND) {
                        sound(MAGMA_HARDENING);

                        subtext("Somewhere a door has opened.");

                        set(PIPE_MAZE.HIDDEN_ROOM_OPEND);
                    }
                },
                exit_room_switch = @install() {
                    map_transition(mosquito_arena, right, NORTH);
                },
                exit_room_gate = @install() {
                    map_transition(pipe_maze, pipe_west, NONE);
                },
                exit_room_empty = nop(),
                exit_north_1 = nop(),
                exit_north_2 = nop(),
                jump_room_switch = @install() {
                    call(0x94af0d);
                },
                jump_room_gate = @install() {
                    call(0x94af34);
                },
                exit_south = nop(),
                jump_empty_room = nop(),

                exit_gate = @install() {
                    map_transition(mario_dungeon_boss, south, NORTH);
                },
                approach_gate = @install() {
                    if!(PIPE_MAZE.MARIO_BOSS_ROOM_OPEND) {
                        subtext("Locked by a mechanism.");
                    }
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                b_trigger_2 = @install() {
                    subtext("B=2");
                },
                b_trigger_3 = @install() {
                    subtext("B=3");
                },
                b_trigger_4 = @install() {
                    subtext("B=4");
                },
                b_trigger_5 = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                b_trigger_7 = @install() {
                    subtext("B=7");
                },
                b_trigger_8 = @install() {
                    subtext("B=8");
                },
                b_trigger_9 = @install() {
                    subtext("B=9");
                },

                b_trigger_10 = @install() {
                    subtext("B=10");
                },
                b_trigger_11 = @install() {
                    subtext("B=11");
                },
                b_trigger_12 = @install() {
                    subtext("B=12");
                },
                b_trigger_13 = @install() {
                    subtext("B=13");
                },
            }

            fun open_gate() {
                object[0x06] = 0x7e; // open gate
            }

            @install()
            fun debug_triggered() {
                set(PIPE_MAZE.MARIO_BOSS_ROOM_OPEND);
                open_gate();

                destroy(SCRIPT_OWNER);
            }

            fun trigger_enter() {
                if(PIPE_MAZE.MARIO_BOSS_ROOM_OPEND) {
                    open_gate();
                }

                if(FLAG.DEBUG) {
                    if!(PIPE_MAZE.MARIO_BOSS_ROOM_OPEND) {
                        add_debug_entity(0x9c, 0x17, reference(debug_triggered));
                    }
                }

                default_init_room(True, False);

                if(PIPE_MAZE.BIG_MUSHROOM_UNLOCKED) {
                    SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.MARIO;
                }
            }
        };

        map mosquito_arena(0x5c) {
            enum entrance {
                north = entrance(0x1b, 0x03, SOUTH),
                south = entrance(0x1d, 0x33, NORTH),

                left = entrance(0x15, 0x1c, NONE),
                center = entrance(0x1e, 0x21, NONE),
                right = entrance(0x2a, 0x23, NONE)
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff),
                boss = soundtrack(0x32, 0xff),
            }

            enum stepon_trigger {
                exit_north = @install() {
                    map_transition(pipe_caves_1, south_2, NORTH);
                },
                exit_south = nop(),
                center = nop(),
            }

            enum BOSS {
                BOSS_ID = memory_tmp(),

                BOSS_START_X = memory_tmp(),
                BOSS_START_Y = memory_tmp(),
                BOSS_START_TIMER = memory_tmp(),

                MOSQUITO_1_ID = memory_tmp(),
                MOSQUITO_1_X = 0x13,
                MOSQUITO_1_Y = 0x19,
                MOSQUITO_2_ID = memory_tmp(),
                MOSQUITO_2_X = 0x29,
                MOSQUITO_2_Y = 0x1b,
                MOSQUITO_3_ID = memory_tmp(),
                MOSQUITO_3_X = 0x13,
                MOSQUITO_3_Y = 0x29,
                MOSQUITO_4_ID = memory_tmp(),
                MOSQUITO_4_X = 0x29,
                MOSQUITO_4_Y = 0x2b,
            }

            fun close_exits(close) {
                if(close) {
                    object[0x04] = 0x04;
                } else {
                    object[0x05] = 0x04;
                }
            }

            @install()
            fun boss_defeated() {
                souls_boss_defeated();
                set(SOULS_MEMORY.DEAD_ARENA_MOSQUITO);

                close_exits(False);

                attach_script(BOSS.MOSQUITO_1_ID, DEATH, reference(nop));
                attach_script(BOSS.MOSQUITO_2_ID, DEATH, reference(nop));
                attach_script(BOSS.MOSQUITO_3_ID, DEATH, reference(nop));
                attach_script(BOSS.MOSQUITO_4_ID, DEATH, reference(nop));

                damage(BOSS.MOSQUITO_1_ID, 0xff, True);
                damage(BOSS.MOSQUITO_2_ID, 0xff, True);
                damage(BOSS.MOSQUITO_3_ID, 0xff, True);
                damage(BOSS.MOSQUITO_4_ID, 0xff, True);

                music(PIPE_MAZE.MUSIC_ENTRANCE, 0xff); // TODO
            }

            fun mosquito_dead(id, x, y) {
                // yield();
                animate(SCRIPT_OWNER, ONCE_FREEZE, ANIMATION_ENEMY.GORE);
                attribute(SCRIPT_OWNER, INVINCIBLE, True);

                cast(id, BOSS.BOSS_ID, CAST.FIREBALL, 0xff);

                sleep(0x20);
                animate(SCRIPT_OWNER, ONCE_FREEZE, ANIMATION_ALL.INVISIBLE);
                teleport(id, x, y);
                sleep(0x60);

                // full_heal(SCRIPT_OWNER, 0x10, False);
                animate(SCRIPT_OWNER, ONCE, ANIMATION_ALL.DEFAULT);
                <SCRIPT_OWNER>[PALETTE] = 0x0a00;
                attribute(SCRIPT_OWNER, INVINCIBLE, False);
            }

            @install()
            fun mosquito_1_dead() {
                mosquito_dead(BOSS.MOSQUITO_1_ID, BOSS.MOSQUITO_1_X, BOSS.MOSQUITO_1_Y);
            }
            @install()
            fun mosquito_2_dead() {
                mosquito_dead(BOSS.MOSQUITO_2_ID, BOSS.MOSQUITO_2_X, BOSS.MOSQUITO_2_Y);
            }
            @install()
            fun mosquito_3_dead() {
                mosquito_dead(BOSS.MOSQUITO_3_ID, BOSS.MOSQUITO_3_X, BOSS.MOSQUITO_3_Y);
            }
            @install()
            fun mosquito_4_dead() {
                mosquito_dead(BOSS.MOSQUITO_4_ID, BOSS.MOSQUITO_4_X, BOSS.MOSQUITO_4_Y);
            }

            fun spawn_mosquito(id, x, y, script_id) {
                add_enemy(MOSQUITO, x, y);
                id = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DAMAGE, script_id);
            }

            @install()
            @async()
            fun lock_temporary() {
                BOSS.BOSS_START_X = BOSS.BOSS_ID[X];
                BOSS.BOSS_START_Y = BOSS.BOSS_ID[Y];

                while(BOSS.BOSS_START_TIMER < 0x78) {
                    BOSS.BOSS_START_TIMER += 0x01;

                    BOSS.BOSS_ID[X] = BOSS.BOSS_START_X;
                    BOSS.BOSS_ID[Y] = BOSS.BOSS_START_Y;

                    yield();
                }
            }

            fun init_room() {
                default_init_room(True, False);
            }

            fun trigger_enter() {
                if!(FLAG.IN_ANIMATION) {
                    crash_both();
                }
                
                if!(SOULS_MEMORY.DEAD_ARENA_MOSQUITO) {
                    music(0x32, 0xff); // TODO

                    close_exits(True);

                    add_enemy(MAGMAR, 0x1e, 0x21);
                    animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
                    BOSS.BOSS_ID = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, DEATH, reference(boss_defeated));
                    lock_temporary();

                    init_room();
                    character_selection(BOY); // TODO

                    spawn_mosquito(BOSS.MOSQUITO_1_ID, BOSS.MOSQUITO_1_X, BOSS.MOSQUITO_1_Y, reference(mosquito_1_dead));
                    sleep(0x40);
                    spawn_mosquito(BOSS.MOSQUITO_2_ID, BOSS.MOSQUITO_2_X, BOSS.MOSQUITO_2_Y, reference(mosquito_2_dead));
                    sleep(0x20);
                    spawn_mosquito(BOSS.MOSQUITO_3_ID, BOSS.MOSQUITO_3_X, BOSS.MOSQUITO_3_Y, reference(mosquito_3_dead));
                    sleep(0x20);
                    spawn_mosquito(BOSS.MOSQUITO_4_ID, BOSS.MOSQUITO_4_X, BOSS.MOSQUITO_4_Y, reference(mosquito_4_dead));
                } else {
                    object[0x04] = 0x04;
                    object[0x05] = 0x04;

                    init_room();
                }
            }
        };

        map pipe_caves_1(0x3c) { // variant: room_nss
            enum entrance {
                north = entrance(0x9e, 0x05, SOUTH),
                south_1 = entrance(0x9e, 0x37, NORTH),
                south_2 = entrance(0x84, 0x37, NORTH),
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_room_ns_south = nop(),
                exit_room_sw_west = nop(),
                exit_room_ns_north = nop(),
                exit_room_sw_south = nop(),
                exit_room_nne_north_1 = nop(),

                exit_room_es_south = nop(),
                exit_room_es_east = nop(),
                exit_room_nne_north_2 = nop(),
                exit_south_2 = @install() {
                    if!(SOULS_MEMORY.DEAD_ARENA_MOSQUITO) {
                        error_wrong_side(NORTH);
                    } else {
                        map_transition(mosquito_arena, north, SOUTH);
                    }
                },
                exit_south_1 = @install() {
                    map_transition(pipe_caves_2, north, SOUTH);
                },
                exit_north = @install() {
                    map_transition(pipe_entrance, south, NORTH);
                },
                exit_room_alchemist_north = nop(),
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                b_trigger_2 = @install() {
                    subtext("B=2");
                },
                b_trigger_3 = @install() {
                    subtext("B=3");
                },
                b_trigger_4 = @install() {
                    subtext("B=4");
                },
                b_trigger_5 = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                b_trigger_7 = @install() {
                    subtext("B=7");
                },
                b_trigger_8 = @install() {
                    subtext("B=8");
                },
                b_trigger_9 = @install() {
                    subtext("B=9");
                },

                b_trigger_10 = @install() {
                    subtext("B=10");
                },
                b_trigger_11 = @install() {
                    subtext("B=11");
                },
                b_trigger_12 = @install() {
                    subtext("B=12");
                },
                b_trigger_13 = @install() {
                    subtext("B=13");
                },
                b_trigger_14 = @install() {
                    subtext("B=14");
                },
                b_trigger_15 = @install() {
                    subtext("B=15");
                },
                b_trigger_16 = @install() {
                    subtext("B=16");
                },
                b_trigger_17 = @install() {
                    subtext("B=17");
                },
                b_trigger_18 = @install() {
                    subtext("B=18");
                },
                b_trigger_19 = @install() {
                    subtext("B=19");
                },

                b_trigger_20 = @install() {
                    subtext("B=20");
                },
                b_trigger_21 = @install() {
                    subtext("B=21");
                },
                b_trigger_22 = @install() {
                    subtext("B=22");
                },
                b_trigger_23 = @install() {
                    subtext("B=23");
                },
                b_trigger_24 = @install() {
                    subtext("B=24");
                },
            }

            fun init_room(index) {
                if(index == 0x01) {
                    init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                } else if(index == 0x02) {
                    init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                } else if(index == 0x03) {
                    init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                } else if(index == 0x04) {
                    init_map(0xb4, 0x04, 0xfc, 0x36); // room_alchemist
                } else if(index == 0x05) {
                    init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                } else if(index == 0x06) {
                    init_map(0x40, 0x38, 0x80, 0x6c); // room_nne
                } else if(index == 0x07) {
                    init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                } else if(index == 0x08) {
                    init_map(0xb4, 0x3c, 0xf8, 0x96); // room_entrance
                } else if(index == 0x09) {
                    init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                } else if(index == 0x0a) {
                    init_map(0x3f, 0x89, 0x6c, 0xb2); // room_s
                } else if(index == 0x0b) {
                    init_map(0xba, 0x3c, 0xf8, 0x96); // room_shop
                }
            }

            fun trigger_enter() {
                init_room(0x03);

                default_init_room(True, False);

                if(PIPE_MAZE.BIG_MUSHROOM_UNLOCKED) {
                    SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.MARIO;
                }
            }
        };
        map pipe_caves_2(0x3c) { // variant: room_alchemist
            enum entrance {
                north = entrance(0xd0, 0x05, SOUTH),
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_room_ns_south = nop(),
                exit_room_sw_west = nop(),
                exit_room_ns_north = nop(),
                exit_room_sw_south = nop(),
                exit_room_nne_north_1 = nop(),

                exit_room_es_south = nop(),
                exit_room_es_east = nop(),
                exit_room_nne_north_2 = nop(),
                exit_room_nss_south_2 = nop(),
                exit_room_nss_south_1 = nop(),
                exit_room_nss_north = nop(),
                exit_north = @install() {
                    map_transition(pipe_caves_1, south_1, NORTH);
                },
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                b_trigger_2 = @install() {
                    subtext("B=2");
                },
                b_trigger_3 = @install() {
                    subtext("B=3");
                },
                b_trigger_4 = @install() {
                    subtext("B=4");
                },
                b_trigger_5 = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                b_trigger_7 = @install() {
                    subtext("B=7");
                },
                b_trigger_8 = @install() {
                    subtext("B=8");
                },
                b_trigger_9 = @install() {
                    subtext("B=9");
                },

                b_trigger_10 = @install() {
                    subtext("B=10");
                },
                b_trigger_11 = @install() {
                    subtext("B=11");
                },
                b_trigger_12 = @install() {
                    subtext("B=12");
                },
                b_trigger_13 = @install() {
                    subtext("B=13");
                },
                b_trigger_14 = @install() {
                    subtext("B=14");
                },
                b_trigger_15 = @install() {
                    subtext("B=15");
                },
                b_trigger_16 = @install() {
                    subtext("B=16");
                },
                b_trigger_17 = @install() {
                    subtext("B=17");
                },
                b_trigger_18 = @install() {
                    subtext("B=18");
                },
                b_trigger_19 = @install() {
                    subtext("B=19");
                },

                b_trigger_20 = @install() {
                    subtext("B=20");
                },
                b_trigger_21 = @install() {
                    subtext("B=21");
                },
                b_trigger_22 = @install() {
                    subtext("B=22");
                },
                b_trigger_23 = @install() {
                    subtext("B=23");
                },
                b_trigger_24 = @install() {
                    subtext("B=24");
                },
            }

            fun init_room(index) {
                if(index == 0x01) {
                    init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                } else if(index == 0x02) {
                    init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                } else if(index == 0x03) {
                    init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                } else if(index == 0x04) {
                    init_map(0xb4, 0x04, 0xfc, 0x36); // room_alchemist
                } else if(index == 0x05) {
                    init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                } else if(index == 0x06) {
                    init_map(0x40, 0x38, 0x80, 0x6c); // room_nne
                } else if(index == 0x07) {
                    init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                } else if(index == 0x08) {
                    init_map(0xb4, 0x3c, 0xf8, 0x96); // room_entrance
                } else if(index == 0x09) {
                    init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                } else if(index == 0x0a) {
                    init_map(0x3f, 0x89, 0x6c, 0xb2); // room_s
                } else if(index == 0x0b) {
                    init_map(0xba, 0x3c, 0xf8, 0x96); // room_shop
                }
            }

            fun trigger_enter() {
                if(NPC_MARIO.PROGRESS == 0x00) {
                    add_enemy(STONE_ROUND, 0xde, 0x27);
                    attach_script(LAST_ENTITY, TALK, reference(npc_mario_dialog_0));

                    if(NPC_MARIO.SUB_PROGRESS > 0x00) {
                        add_enemy_with_flags(NPC_MARIO.BODY, 0xe5, 0x27, INACTIVE);
                        face(LAST_ENTITY, WEST);

                        init_room(0x04);
                    } else {
                        init_map(0xb4, 0x04, 0xe0, 0x36); // room_alchemist
                    }

                } else {
                    add_enemy(STONE_ROUND, 0xde, 0x27);
                    // add_enemy(STONE_ROUND, 0xdc, 0x26);

                    init_room(0x04);
                }
                
                default_init_room(True, False);

                if(PIPE_MAZE.BIG_MUSHROOM_UNLOCKED) {
                    SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.MARIO;
                }
            }
        };

        map pipe_caves_side(0x7a) {
            enum entrance {
                west = entrance(0x05, 0x0b, EAST),
                pipe = entrance(0x05, 0x15, NONE),

                cinematic_east = entrance(0x2d, 0x7, NONE),
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff)
            }

            enum stepon_trigger {
                pipe = @install() {
                    pit_act3_sewers();
                },
                exit_west = @install() {
                    map_transition(pipe_caves_1, south_2, WEST);
                },
            }

            @install()
            fun debug_triggered() {
                set(PIPE_MAZE.BIG_MUSHROOM_UNLOCKED);
                SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.MARIO;

                destroy(SCRIPT_OWNER);
            }

            fun trigger_enter() {
                if(FLAG.DEBUG) {
                    if!(PIPE_MAZE.BIG_MUSHROOM_UNLOCKED) {
                        add_debug_entity(0x0c, 0x0e, reference(debug_triggered));
                    }
                }

                if(NPC_MARIO.PROGRESS == 0x01) {
                    add_enemy(NPC_MARIO.BODY, 0x0e, 0x20);
                    NPC_MARIO.ID = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, TALK, reference(npc_mario_dialog_1));
                }

                default_init_room(True, True);

                if(PIPE_MAZE.BIG_MUSHROOM_UNLOCKED) {
                    SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.MARIO;
                }
            }
        };

        map pipe_maze(0x3d) {
            enum entrance {
                pipe_east = entrance(0x67, 0x94, NONE),
                pipe_west = entrance(0x5b, 0x94, NONE),
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_MAZE, 0xff)
            }

            fun pit_west_1_triggered() {
                map_transition(mario_prison_2, crash, NONE);
            }
            fun pit_west_2_triggered() {
                map_transition(mario_prison_1, crash, NONE);
            }
            fun pit_west_3_triggered() {
                map_transition(mario_prison_4, pipe, NONE);
            }
            fun pit_west_4_triggered() {
                map_transition(mario_prison_5, pipe, NONE);
            }
            fun pit_west_5_triggered() {
                map_transition(mario_prison_3, crash, NONE);
            }


            fun pit_east_1_triggered() {
                map_transition(town_center, crash, NONE);
            }
            fun pit_east_2_triggered() {
                map_transition(town_market, crash, NONE);
            }
            fun pit_east_3_triggered() {
                map_transition(town_level_1, crash, NONE);
            }
            fun pit_east_4_triggered() {
                map_transition(town_level_2, crash, NONE);
            }
            fun pit_east_5_triggered() {
                map_transition(town_level_3, crash, NONE);
            }

            enum stepon_trigger {
                pit_west_3_west = @install() {
                    generic_yeet(DIRECTION.EAST);
                    pit_west_3_triggered();
                },
                exit_room_nw_west = @install() {
                    subtext("S=1");
                },
                crossing_pit_east_3_2 = @install() {
                    object[0x06] = 0x00;
                },
                crossing_pit_east_1_3 = @install() {
                    object[0x06] = 0x01;
                },
                crossing_pit_west_1_top = @install() {
                    subtext("S=4");
                },
                crossing_pit_west_4_2_top = @install() {
                    subtext("S=5");
                },
                crossing_pit_west_1_bottom = @install() {
                    subtext("S=6");
                },
                crossing_pit_west_4_2_bottom = @install() {
                    subtext("S=7");
                },
                crossing_pit_west_3_2_bottom = @install() {
                    subtext("S=8");
                },
                crossing_pit_west_3_2_top = @install() {
                    subtext("S=9");
                },

                crossing_pit_west_1_4_top_1 = @install() {
                    subtext("S=10");
                },
                crossing_pit_west_1_4_top_2 = @install() {
                    subtext("S=11");
                },
                crossing_pit_west_1_4_bottom_2 = @install() {
                    subtext("S=12");
                },
                crossing_pit_west_1_4_bottom_1 = @install() {
                    subtext("S=13");
                },
                crossing_pit_west_4_top = @install() {
                    subtext("S=14");
                },
                crossing_pit_west_4_bottom = @install() {
                    subtext("S=15");
                },
                crossing_pit_west_1_3_top = @install() {
                    subtext("S=16");
                },
                crossing_pit_west_1_3_bottom = @install() {
                    subtext("S=17");
                },
                crossing_pit_east_1_2 = @install() {
                    object[0x07] = 0x01;
                },
                pit_west_3_north = @install() {
                    generic_yeet(DIRECTION.SOUTH);
                    pit_west_3_triggered();
                },

                pit_west_3_east = @install() {
                    generic_yeet(DIRECTION.WEST);
                    pit_west_3_triggered();
                },
                pit_west_3_south = @install() {
                    generic_yeet(DIRECTION.NORTH);
                    pit_west_3_triggered();
                },
                pit_west_4_north = @install() {
                    generic_yeet(DIRECTION.SOUTH);
                    pit_west_4_triggered();
                },
                pit_west_4_east = @install() {
                    generic_yeet(DIRECTION.WEST);
                    pit_west_4_triggered();
                },
                pit_west_4_south = @install() {
                    generic_yeet(DIRECTION.NORTH);
                    pit_west_4_triggered();
                },
                pit_west_5_north = @install() {
                    generic_yeet(DIRECTION.SOUTH);
                    pit_west_5_triggered();
                },
                pit_west_5_west = @install() {
                    generic_yeet(DIRECTION.EAST);
                    pit_west_5_triggered();
                },
                pit_west_2_west = @install() {
                    generic_yeet(DIRECTION.EAST);
                    pit_west_2_triggered();
                },
                pit_west_2_north = @install() {
                    generic_yeet(DIRECTION.SOUTH);
                    pit_west_2_triggered();
                },
                pit_west_2_east = @install() {
                    generic_yeet(DIRECTION.WEST);
                    pit_west_2_triggered();
                },

                pit_west_1_west = @install() {
                    generic_yeet(DIRECTION.EAST);
                    pit_west_1_triggered();
                },
                pit_east_1_north = @install() {
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x002d;
                    // <0x24b7> = 0x0000;

                    // call(0x94ac56);

                    generic_yeet(DIRECTION.SOUTH);
                    pit_east_1_triggered();
                },
                pit_east_1_south = @install() {
                    // <0x24b3> = 0x002a;
                    // <0x24b5> = 0x0023;
                    // <0x24b7> = 0x0000;
                    
                    // call(0x94ac56);

                    generic_yeet(DIRECTION.NORTH);
                    pit_east_1_triggered();
                },
                pit_east_5_north = @install() {
                    // <0x24c3> = 0x0008;
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x002d;
                    // <0x24b7> = 0x0000;
                    // call(0x94ac56);

                    generic_yeet(DIRECTION.SOUTH);
                    pit_east_5_triggered();
                },
                pit_east_4_south = @install() {
                    // <0x24c3> = 0x0007;
                    // <0x24b3> = 0x002a;
                    // <0x24b5> = 0x0023;
                    // <0x24b7> = 0x0000;
                    // call(0x94ac56);

                    generic_yeet(DIRECTION.NORTH);
                    pit_east_4_triggered();
                },
                pit_east_3_north = @install() {
                    // <0x24c3> = 0x0009;
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x002d;
                    // <0x24b7> = 0x0000;
                    // call(0x94ac56);

                    generic_yeet(DIRECTION.SOUTH);
                    pit_east_3_triggered();
                },
                pit_east_3_west = @install() {
                    // <0x24c3> = 0x0009;
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x0022;
                    // <0x24b7> = 0x0016;
                    // call(0x94ac56);

                    generic_yeet(DIRECTION.EAST);
                    pit_east_3_triggered();
                },
                pit_east_2_north = @install() {
                    // <0x24c3> = 0x000a;
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x002d;
                    // <0x24b7> = 0x0000;
                    // call(0x94ac56);

                    generic_yeet(DIRECTION.SOUTH);
                    pit_east_2_triggered();
                },
                pit_east_2_east = @install() {
                    // <0x24c3> = 0x000a;
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x0022;
                    // <0x24b7> = -0x0011;
                    // call(0x94ac56);

                    generic_yeet(DIRECTION.WEST);
                    pit_east_2_triggered();
                },
            }

            fun trigger_enter() {
                default_init_room(True, False);

                if(PIPE_MAZE.BIG_MUSHROOM_UNLOCKED) {
                    SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.MARIO;
                }

                add_enemy(FRIPPO, 0x5b, 0x7d);
            }
        };

        area mario_dungeon() {
            enum MARIO {
                DEFAULT_MUSIC = 0x0c,

                ROOMS_CLEARED = memory(),
            }
            fun exit_mario_prison() {
                map_transition(pipe_entrance, pipe_east, NORTH);
            }
            fun room_cleared(flag) {
                if!(flag) {
                    set(flag);

                    MARIO.ROOMS_CLEARED += 0x01;
                }
            }

            map mario_prison_1(0x74) { // goombas
                enum entrance {
                    door = entrance(0x2e, 0x11, SOUTH),
                    cave_1 = entrance(0x18, 0x1d, SOUTH),
                    cave_2 = entrance(0x47, 0x11, SOUTH),
                    cave_3 = entrance(0x56, 0x39, SOUTH),
                    // ???
                    cave_5 = entrance(0x47, 0x3d, SOUTH),
                    cave_6 = entrance(0x21, 0x39, SOUTH),
                    cave_7 = entrance(0x0c, 0x2f, SOUTH),

                    crash = entrance(0x36, 0x35, NONE),
                }

                enum soundtrack {
                    default = soundtrack(MARIO.DEFAULT_MUSIC, 0xff)
                }

                enum ROOM {
                    DEBUG = True,

                    ROOM_CLEARED = flag(),

                    ENEMY_COUNT = memory_tmp(),
                    GATE_COUNT = memory_tmp(),

                    CELL_1_CLEARED = flag_tmp(),
                    CELL_2_CLEARED = flag_tmp(),
                    CELL_3_CLEARED = flag_tmp(),
                    CELL_4_CLEARED = flag_tmp(),
                    CELL_5_CLEARED = flag_tmp(),
                    CELL_6_CLEARED = flag_tmp(),
                    CELL_7_CLEARED = flag_tmp(),

                    ROOMS_TO_CLEAR = 0x07,
                }

                @install()
                fun mario_enemy_killed() {
                    ROOM.ENEMY_COUNT -= 0x01;

                    if((ROOM.ENEMY_COUNT <= 0x00) && (ROOM.GATE_COUNT == ROOM.ROOMS_TO_CLEAR)) {
                        if(ROOM.DEBUG) {
                            debug_memory(ROOM.GATE_COUNT, ROOM.ENEMY_COUNT);
                        }

                        room_cleared(ROOM.ROOM_CLEARED);
                    }
                }

                fun add_mario_frippo(x, y) {
                    add_enemy(FRIPPO, x, y);
                    attach_script(LAST_ENTITY, DEATH, reference(mario_enemy_killed));

                    ROOM.ENEMY_COUNT += 0x01;
                }

                fun door_triggered() {
                    if!(ROOM.ROOM_CLEARED) {
                        subtext("Blocked by a mechanism.");
                        end();
                    }

                    object[0x06] = 0x01; // opens door

                    exit_mario_prison();
                }

                fun init_gate(index, flag) {
                    if(flag) {
                        ROOM.GATE_COUNT += 0x01;

                        if(index == 0x01) {
                            object[0x00] = 0x01; // press switch_1
                            object[0x01] = 0x7e; // opens gate_1
                        } else if(index == 0x02) {
                            object[0x08] = 0x01; // press switch_2
                            object[0x07] = 0x7e; // opens gate_2
                        } else if(index == 0x03) {
                            object[0x0a] = 0x01; // press switch_3
                            object[0x09] = 0x7e; // opens gate_3
                        } else if(index == 0x04) {
                            object[0x0e] = 0x01; // press switch_4
                            object[0x0c] = 0x7e; // opens gate_4
                        } else if(index == 0x05) {
                            object[0x0d] = 0x01; // press switch_5
                            object[0x0b] = 0x7e; // opens gate_5
                        } else if(index == 0x06) {
                            object[0x05] = 0x01; // press switch_6
                            object[0x04] = 0x7e; // opens gate_6
                        } else if(index == 0x07) {
                            object[0x03] = 0x01; // press switch_7
                            object[0x02] = 0x7e; // opens gate_7
                        }
                    }
                }

                fun open_gate(index, flag) {
                    if(flag) {
                        end();
                    } else {
                        set(flag);

                        ROOM.GATE_COUNT += 0x01;

                        if(ROOM.DEBUG) {
                            debug_memory(ROOM.GATE_COUNT, ROOM.ENEMY_COUNT);
                        }
                    }

                    if(index == 0x01) {
                        object[0x00] = 0x01; // press switch_1

                        object[0x01] = 0x01; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x02; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x03; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x7e; // opens gate_1
                    } else if(index == 0x02) {
                        object[0x08] = 0x01; // press switch_2

                        object[0x07] = 0x01; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x02; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x03; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x7e; // opens gate_2
                    } else if(index == 0x03) {
                        object[0x0a] = 0x01; // press switch_3

                        object[0x09] = 0x01; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x02; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x03; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x7e; // opens gate_3
                    } else if(index == 0x04) {
                        object[0x0e] = 0x01; // press switch_4

                        object[0x0c] = 0x01; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x02; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x03; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x7e; // opens gate_4
                    } else if(index == 0x05) {
                        object[0x0d] = 0x01; // press switch_5

                        object[0x0b] = 0x01; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x02; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x03; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x7e; // opens gate_5
                    } else if(index == 0x06) {
                        object[0x05] = 0x01; // press switch_6

                        object[0x04] = 0x01; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x02; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x03; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x7e; // opens gate_6
                    } else if(index == 0x07) {
                        object[0x03] = 0x01; // press switch_7

                        object[0x02] = 0x01; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x02; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x03; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x7e; // opens gate_7
                    }
                }

                fun switch_triggered(index, flag, x, y) {
                        if!(ROOM.ROOM_CLEARED) {
                            open_gate(index, flag);

                            add_mario_frippo(x, y);
                        }
                }

                enum stepon_trigger {
                    switch_6 = @install() {
                        switch_triggered(0x06, ROOM.CELL_6_CLEARED, 0x20, 0x3b);
                    },
                    switch_5 = @install() {
                        switch_triggered(0x05, ROOM.CELL_5_CLEARED, 0x47, 0x3f);
                    },
                    switch_4 = @install() {
                        switch_triggered(0x04, ROOM.CELL_4_CLEARED, 0x54, 0x3b);
                    },
                    switch_3 = @install() {
                        switch_triggered(0x03, ROOM.CELL_3_CLEARED, 0x53, 0x1d);
                    },
                    switch_2 = @install() {
                        switch_triggered(0x02, ROOM.CELL_2_CLEARED, 0x47, 0x13);
                    },
                    switch_7 = @install() {
                        switch_triggered(0x07, ROOM.CELL_7_CLEARED, 0x0d, 0x31);
                    },
                    switch_1 = @install() {
                        switch_triggered(0x01, ROOM.CELL_1_CLEARED, 0x18, 0x1e);
                    },
                    exit_door = @install() {
                        door_triggered();
                    },
                    stepon_8 = @install() {
                        subtext("S=8");
                    },
                    stepon_9 = @install() {
                        subtext("S=9");
                    },

                    stepon_10 = @install() {
                        subtext("S=10");
                    },
                    stepon_11 = @install() {
                        subtext("S=11");
                    },
                    stepon_12 = @install() {
                        subtext("S=12");
                    },
                    stepon_13 = @install() {
                        subtext("S=13");
                    },
                    stepon_14 = @install() {
                        subtext("S=14");
                    },
                    pipe_3_1 = @install() {
                        subtext("S=15");
                    },
                    pipe_1_1 = @install() {
                        subtext("S=16");
                    },
                    pipe_2_1 = @install() {
                        subtext("S=17");
                    },
                    pipe_2_2 = @install() {
                        subtext("S=18");
                    },
                    pipe_2_3 = @install() {
                        subtext("S=19");
                    },

                    pipe_1_2 = @install() {
                        subtext("S=20");
                    },
                    pipe_1_3 = @install() {
                        subtext("S=21");
                    },
                    pipe_1_4 = @install() {
                        subtext("S=22");
                    },
                    pipe_3_2 = @install() {
                        subtext("S=23");
                    },
                    pipe_3_3 = @install() {
                        subtext("S=24");
                    },
                    pipe_3_4 = @install() {
                        subtext("S=25");
                    },
                    exit_cell_2 = @install() {
                        subtext("S=26");
                    },
                    exit_cell_3 = @install() {
                        subtext("S=27");
                    },
                    exit_cell_4 = @install() {
                        subtext("S=28");
                    },
                    exit_cell_5 = @install() {
                        subtext("S=29");
                    },

                    exit_cell_6 = @install() {
                        subtext("S=30");
                    },
                    exit_cell_7 = @install() {
                        subtext("S=31");
                    },
                }

                enum b_trigger {
                    cell_1_gourd = @install() {
                        subtext("B=0");
                    },
                }

                fun trigger_enter() {
                    if(ROOM.ROOM_CLEARED) {
                        set(ROOM.CELL_1_CLEARED);
                        object[0x00] = 0x01; // press switch_1
                        object[0x01] = 0x7e; // opens gate_1
                        set(ROOM.CELL_2_CLEARED);
                        object[0x08] = 0x01; // press switch_2
                        object[0x07] = 0x7e; // opens gate_2
                        set(ROOM.CELL_3_CLEARED);
                        object[0x0a] = 0x01; // press switch_3
                        object[0x09] = 0x7e; // opens gate_3
                        set(ROOM.CELL_4_CLEARED);
                        object[0x0e] = 0x01; // press switch_4
                        object[0x0c] = 0x7e; // opens gate_4
                        set(ROOM.CELL_5_CLEARED);
                        object[0x0d] = 0x01; // press switch_5
                        object[0x0b] = 0x7e; // opens gate_5
                        set(ROOM.CELL_6_CLEARED);
                        object[0x05] = 0x01; // press switch_6
                        object[0x04] = 0x7e; // opens gate_6
                        set(ROOM.CELL_7_CLEARED);
                        object[0x03] = 0x01; // press switch_7
                        object[0x02] = 0x7e; // opens gate_7
                    }

                    if!(FLAG.IN_ANIMATION) {
                        crash_both();
                    }

                    // add_mario_koopa(0x35, 0x30);
                    // add_mario_koopa(0x35, 0x30);

                    // object[0x06] = 0x01; // opens door
                    // object[0x01] = 0x7e; // opens gate_1
                    // object[0x07] = 0x7e; // opens gate_2
                    // object[0x09] = 0x7e; // opens gate_3
                    // object[0x0c] = 0x7e; // opens gate_4
                    // object[0x0b] = 0x7e; // opens gate_5
                    // object[0x04] = 0x7e; // opens gate_6
                    // object[0x02] = 0x7e; // opens gate_7

                    mario_init(False, False);
                }
            };

            map mario_prison_2(0x74) { // bowser gate
                enum entrance {
                    door = entrance(0x2e, 0x11, SOUTH),
                    cave_1 = entrance(0x18, 0x1d, SOUTH),
                    cave_2 = entrance(0x47, 0x11, SOUTH),
                    cave_3 = entrance(0x56, 0x39, SOUTH),
                    // ???
                    cave_5 = entrance(0x47, 0x3d, SOUTH),
                    cave_6 = entrance(0x21, 0x39, SOUTH),
                    cave_7 = entrance(0x0c, 0x2f, SOUTH),

                    crash = entrance(0x36, 0x35, NONE),
                }

                enum soundtrack {
                    default = soundtrack(0x5a, 0xff)
                }

                enum ROOM {
                    DEBUG = True,

                    ROOM_CLEARED = flag(),
                }

                fun door_triggered() {
                    object[0x06] = 0x01; // opens door
                    yield();

                    exit_mario_prison();
                }

                fun init_gate(index) {
                    if(index == 0x01) {
                        object[0x00] = 0x01; // press switch_1
                        object[0x01] = 0x01; // opens gate_1
                    } else if(index == 0x02) {
                        object[0x08] = 0x01; // press switch_2
                        object[0x07] = 0x02; // opens gate_2
                    } else if(index == 0x03) {
                        object[0x0a] = 0x01; // press switch_3
                        object[0x09] = 0x03; // opens gate_3
                    } else if(index == 0x04) {
                        object[0x0e] = 0x01; // press switch_4
                        object[0x0c] = 0x01; // opens gate_4
                    } else if(index == 0x05) {
                        object[0x0d] = 0x01; // press switch_5
                        object[0x0b] = 0x02; // opens gate_5
                    } else if(index == 0x06) {
                        object[0x05] = 0x01; // press switch_6
                        object[0x04] = 0x03; // opens gate_6
                    } else if(index == 0x07) {
                        object[0x03] = 0x01; // press switch_7
                        object[0x02] = 0x01; // opens gate_7
                    }
                }

                enum stepon_trigger {
                    switch_6 = nop(),
                    switch_5 = nop(),
                    switch_4 = nop(),
                    switch_3 = nop(),
                    switch_2 = nop(),
                    switch_7 = nop(),
                    switch_1 = nop(),
                    exit_door = @install() {
                        room_cleared(ROOM.ROOM_CLEARED);

                        door_triggered();
                    },
                    stepon_8 = @install() {
                        subtext("S=8");
                    },
                    stepon_9 = @install() {
                        subtext("S=9");
                    },

                    stepon_10 = @install() {
                        subtext("S=10");
                    },
                    stepon_11 = @install() {
                        subtext("S=11");
                    },
                    stepon_12 = @install() {
                        subtext("S=12");
                    },
                    stepon_13 = @install() {
                        subtext("S=13");
                    },
                    stepon_14 = @install() {
                        subtext("S=14");
                    },
                    pipe_3_1 = @install() {
                        subtext("S=15");
                    },
                    pipe_1_1 = @install() {
                        subtext("S=16");
                    },
                    pipe_2_1 = @install() {
                        subtext("S=17");
                    },
                    pipe_2_2 = @install() {
                        subtext("S=18");
                    },
                    pipe_2_3 = @install() {
                        subtext("S=19");
                    },

                    pipe_1_2 = @install() {
                        subtext("S=20");
                    },
                    pipe_1_3 = @install() {
                        subtext("S=21");
                    },
                    pipe_1_4 = @install() {
                        subtext("S=22");
                    },
                    pipe_3_2 = @install() {
                        subtext("S=23");
                    },
                    pipe_3_3 = @install() {
                        subtext("S=24");
                    },
                    pipe_3_4 = @install() {
                        subtext("S=25");
                    },
                    exit_cell_2 = @install() {
                        subtext("S=26");
                    },
                    exit_cell_3 = @install() {
                        subtext("S=27");
                    },
                    exit_cell_4 = @install() {
                        subtext("S=28");
                    },
                    exit_cell_5 = @install() {
                        subtext("S=29");
                    },

                    exit_cell_6 = @install() {
                        subtext("S=30");
                    },
                    exit_cell_7 = @install() {
                        subtext("S=31");
                    },
                }

                enum b_trigger {
                    cell_1_gourd = @install() {
                        subtext("B=0");
                    },
                }

                enum BOSS {
                    DEBUG = False,

                    ID = memory_tmp(),

                    RNG = memory_tmp(),
                }

                fun shoot_boss(x, y) {
                    shoot_entity_absolute(BOSS.ID, SPEAR, x, y, 0x30, 0x00);
                }

                @install()
                fun toss_hammers_1() {
                    animate(BOSS.ID, ONCE, ANIMATION_ENEMY.LIZARD_TALK);
                    face(BOSS.ID, SOUTH);

                    shoot_boss(<BOY>[X] + randrange(0x1a), <BOY>[Y] + randrange(0x1a));

                    animate(BOSS.ID, LOOP, ANIMATION_ALL.DEFAULT);
                }

                @install()
                fun toss_hammers_4() {
                    animate(BOSS.ID, ONCE, ANIMATION_ENEMY.LIZARD_TALK);
                    face(BOSS.ID, SOUTH);

                    shoot_boss(<BOY>[X] + randrange(0x1a), <BOY>[Y] + randrange(0x1a));
                    sleep(0x0a);
                    shoot_boss(<BOY>[X] + randrange(0x1a), <BOY>[Y] - randrange(0x1a));
                    sleep(0x01);
                    shoot_boss(<BOY>[X] - randrange(0x1a), <BOY>[Y] - randrange(0x1a));
                    sleep(0x0a);
                    shoot_boss(<BOY>[X] + randrange(0x1a), <BOY>[Y] + randrange(0x1a));

                    animate(BOSS.ID, LOOP, ANIMATION_ALL.DEFAULT);
                }

                @install()
                fun toss_hammers_8() {
                    animate(BOSS.ID, ONCE, ANIMATION_ENEMY.LIZARD_TALK);
                    face(BOSS.ID, SOUTH);

                    shoot_boss(<BOY>[X], <BOY>[Y]);
                    sleep(0x05);
                    shoot_boss(<BOY>[X] + randrange(0x05), <BOY>[Y] + randrange(0x05));
                    sleep(0x05);
                    shoot_boss(<BOY>[X] - randrange(0x0a), <BOY>[Y] + randrange(0x0a));
                    sleep(0x0a);
                    shoot_boss(<BOY>[X] + randrange(0x0a), <BOY>[Y] - randrange(0x0a));
                    sleep(0x05);
                    shoot_boss(<BOY>[X] + randrange(0x1a), <BOY>[Y] + randrange(0x1a));
                    sleep(0x0a);
                    shoot_boss(<BOY>[X] + randrange(0x1a), <BOY>[Y] - randrange(0x1a));
                    sleep(0x01);
                    shoot_boss(<BOY>[X] - randrange(0x1a), <BOY>[Y] - randrange(0x1a));
                    sleep(0x0a);
                    shoot_boss(<BOY>[X] + randrange(0x1a), <BOY>[Y] + randrange(0x1a));

                    animate(BOSS.ID, LOOP, ANIMATION_ALL.DEFAULT);
                }

                @install()
                @async()
                fun boss_ai_yump() {
                    while((BOSS.ID[Y] - 0x0a) < <BOY>[Y]) {
                        BOSS.RNG = randrange(0x04);
                        if(BOSS.RNG == 0x00) {
                            BOSS.ID[JUMP_HEIGHT] = 0x10;
                            sleep(0x10);
                        } else if(BOSS.RNG == 0x01) {
                            BOSS.ID[JUMP_HEIGHT] = 0x20;
                            sleep(0x20);
                        } else if(BOSS.RNG == 0x02) {
                            BOSS.ID[JUMP_HEIGHT] = 0x30;
                            sleep(0x30);
                        }

                        sleep(0x30);
                    }
                }

                @install()
                @async()
                fun boss_ai_hammer() {
                    sleep(0xa0);

                    while((BOSS.ID[Y] - 0x0a) < <BOY>[Y]) {
                        BOSS.RNG = randrange(0x06);
                        if(BOSS.DEBUG) {
                            subtext("rng");
                        }
                        
                        if(BOSS.RNG == 0x00) {
                            toss_hammers_1();
                        } else if(BOSS.RNG == 0x01) {
                            toss_hammers_4();
                        } else if(BOSS.RNG == 0x03) {
                            toss_hammers_4();
                        } else if(BOSS.RNG == 0x04) {
                            toss_hammers_8();
                        } else if(BOSS.RNG == 0x05) {
                            toss_hammers_8();
                        }

                        sleep(0x50);
                    }
                }

                @install()
                @async()
                fun anti_yump() {
                    while((BOSS.ID[Y] - 0x0a) < <BOY>[Y]) {
                        // if(BOSS.ID[Y] < (<BOY>[Y] - 0x0a)) {
                        if(True) {
                            if((BOSS.ID[JUMP_HEIGHT] > 0x00) && (<BOY>[JUMP_HEIGHT] > 0x00)) {
                                damage(BOY, 0x01, True);
                            }
                        }
                        yield();
                    }
                }

                fun add_bowser_blocker(x, y) {
                    add_enemy_with_flags(LIZARD, x, y, INACTIVE_IMORTAL);
                    animate(LAST_ENTITY, LOOP, ANIMATION_PLACEHOLDER.PILLAR_VIGOR);
                }

                fun add_bowser(x, y) {
                    add_enemy(LIZARD_BLACK, x, y);
                    attribute(LAST_ENTITY, ROOT, True);
                    attribute(LAST_ENTITY, INVINCIBLE, True);
                    BOSS.ID = <LAST_ENTITY>;

                    animate(LAST_ENTITY, LOOP, ANIMATION_ALL.DEFAULT);

                    // anti_yump();
                    boss_ai_yump();
                    boss_ai_hammer();
                }

                fun trigger_enter() {
                    init_gate(0x01);
                    init_gate(0x02);
                    init_gate(0x03);
                    init_gate(0x04);
                    init_gate(0x05);
                    init_gate(0x06);
                    init_gate(0x07);

                    if!(FLAG.IN_ANIMATION) {
                        crash_both();
                    }

                    if!(ROOM.ROOM_CLEARED) {
                        add_bowser(0x2e, 0x19);
                    }
                    add_bowser_blocker(0x2e + 0x03, 0x19 - 0x01);
                    add_bowser_blocker(0x2e - 0x03, 0x19 - 0x01);

                    mario_init(False, False);
                    if!(ROOM.ROOM_CLEARED) {
                        SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.NORMAL;
                    }

                    // attribute(BOY, INVINCIBLE, True);
                }
            };

            map mario_prison_3(0x74) { // yoshi (sorry)
                enum entrance {
                    door = entrance(0x2e, 0x11, SOUTH),
                    cave_1 = entrance(0x18, 0x1d, SOUTH),
                    cave_2 = entrance(0x47, 0x11, SOUTH),
                    cave_3 = entrance(0x56, 0x39, SOUTH),
                    // ???
                    cave_5 = entrance(0x47, 0x3d, SOUTH),
                    cave_6 = entrance(0x21, 0x39, SOUTH),
                    cave_7 = entrance(0x0c, 0x2f, SOUTH),

                    crash = entrance(0x36, 0x35, NONE),
                }

                enum soundtrack {
                    default = soundtrack(MARIO.DEFAULT_MUSIC, 0xff)
                }

                enum ROOM {
                    DEBUG = True,

                    ROOM_CLEARED = flag(),

                    ENEMY_COUNT = memory_tmp(),
                    GATE_COUNT = memory_tmp(),

                    CELL_1_CLEARED = flag_tmp(),
                    CELL_2_CLEARED = flag_tmp(),
                    CELL_3_CLEARED = flag_tmp(),
                    CELL_4_CLEARED = flag_tmp(),
                    CELL_5_CLEARED = flag_tmp(),
                    CELL_6_CLEARED = flag_tmp(),
                    CELL_7_CLEARED = flag_tmp(),

                    ROOMS_TO_CLEAR = 0x06, // 0x07,
                }

                fun add_mario_frippo(x, y) {
                    add_enemy(FRIPPO, x, y);

                    ROOM.ENEMY_COUNT += 0x01;
                }

                fun door_triggered() {
                    if!(ROOM.ROOM_CLEARED) {
                        subtext("Blocked by a mechanism.");
                        end();
                    }

                    object[0x06] = 0x01; // opens door

                    exit_mario_prison();
                }

                fun init_gate(index, flag) {
                    if(flag) {
                        ROOM.GATE_COUNT += 0x01;

                        if(index == 0x01) {
                            object[0x00] = 0x01; // press switch_1
                            object[0x01] = 0x7e; // opens gate_1
                        } else if(index == 0x02) {
                            object[0x08] = 0x01; // press switch_2
                            object[0x07] = 0x7e; // opens gate_2
                        } else if(index == 0x03) {
                            object[0x0a] = 0x01; // press switch_3
                            object[0x09] = 0x7e; // opens gate_3
                        } else if(index == 0x04) {
                            object[0x0e] = 0x01; // press switch_4
                            object[0x0c] = 0x7e; // opens gate_4
                        } else if(index == 0x05) {
                            object[0x0d] = 0x01; // press switch_5
                            object[0x0b] = 0x7e; // opens gate_5
                        } else if(index == 0x06) {
                            object[0x05] = 0x01; // press switch_6
                            object[0x04] = 0x7e; // opens gate_6
                        } else if(index == 0x07) {
                            object[0x03] = 0x01; // press switch_7
                            object[0x02] = 0x7e; // opens gate_7
                        }
                    }
                }

                fun open_gate(index, flag) {
                    if(flag) {
                        end();
                    } else {
                        set(flag);

                        ROOM.GATE_COUNT += 0x01;

                        if(ROOM.GATE_COUNT == ROOM.ROOMS_TO_CLEAR) {
                            set(ROOM.ROOM_CLEARED);
                        }

                        if(ROOM.DEBUG) {
                            debug_memory(ROOM.GATE_COUNT, ROOM.ENEMY_COUNT);
                        }
                    }

                    if(index == 0x01) {
                        object[0x00] = 0x01; // press switch_1

                        object[0x01] = 0x01; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x02; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x03; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x7e; // opens gate_1
                    } else if(index == 0x02) {
                        object[0x08] = 0x01; // press switch_2

                        object[0x07] = 0x01; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x02; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x03; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x7e; // opens gate_2
                    } else if(index == 0x03) {
                        object[0x0a] = 0x01; // press switch_3

                        object[0x09] = 0x01; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x02; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x03; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x7e; // opens gate_3
                    } else if(index == 0x04) {
                        object[0x0e] = 0x01; // press switch_4

                        object[0x0c] = 0x01; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x02; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x03; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x7e; // opens gate_4
                    } else if(index == 0x05) {
                        object[0x0d] = 0x01; // press switch_5

                        object[0x0b] = 0x01; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x02; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x03; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x7e; // opens gate_5
                    } else if(index == 0x06) {
                        object[0x05] = 0x01; // press switch_6

                        object[0x04] = 0x01; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x02; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x03; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x7e; // opens gate_6
                    } else if(index == 0x07) {
                        object[0x03] = 0x01; // press switch_7

                        object[0x02] = 0x01; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x02; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x03; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x7e; // opens gate_7
                    }
                }

                enum stepon_trigger {
                    switch_6 = @install() {
                        open_gate(0x06, ROOM.CELL_6_CLEARED);

                        add_mario_frippo(0x20, 0x3b);
                    },
                    switch_5 = @install() {
                        open_gate(0x05, ROOM.CELL_5_CLEARED);

                        add_mario_frippo(0x47, 0x3f);
                    },
                    switch_4 = @install() {
                        open_gate(0x04, ROOM.CELL_4_CLEARED);

                        add_mario_frippo(0x54, 0x3b);
                    },
                    switch_3 = @install() {
                        open_gate(0x03, ROOM.CELL_3_CLEARED);

                        add_mario_frippo(0x53, 0x1d);
                    },
                    switch_2 = @install() {
                        open_gate(0x02, ROOM.CELL_2_CLEARED);

                        add_mario_frippo(0x47, 0x13);
                    },
                    switch_7 = @install() {
                        open_gate(0x07, ROOM.CELL_7_CLEARED);

                        add_mario_frippo(0x0d, 0x31);
                    },
                    switch_1 = @install() {
                        open_gate(0x01, ROOM.CELL_1_CLEARED);

                        add_mario_frippo(0x18, 0x1e);
                    },
                    exit_door = @install() {
                        door_triggered();
                    },
                    stepon_8 = @install() {
                        subtext("S=8");
                    },
                    stepon_9 = @install() {
                        subtext("S=9");
                    },

                    stepon_10 = @install() {
                        subtext("S=10");
                    },
                    stepon_11 = @install() {
                        subtext("S=11");
                    },
                    stepon_12 = @install() {
                        subtext("S=12");
                    },
                    stepon_13 = @install() {
                        subtext("S=13");
                    },
                    stepon_14 = @install() {
                        subtext("S=14");
                    },
                    pipe_3_1 = @install() {
                        subtext("S=15");
                    },
                    pipe_1_1 = @install() {
                        subtext("S=16");
                    },
                    pipe_2_1 = @install() {
                        subtext("S=17");
                    },
                    pipe_2_2 = @install() {
                        subtext("S=18");
                    },
                    pipe_2_3 = @install() {
                        subtext("S=19");
                    },

                    pipe_1_2 = @install() {
                        subtext("S=20");
                    },
                    pipe_1_3 = @install() {
                        subtext("S=21");
                    },
                    pipe_1_4 = @install() {
                        subtext("S=22");
                    },
                    pipe_3_2 = @install() {
                        subtext("S=23");
                    },
                    pipe_3_3 = @install() {
                        subtext("S=24");
                    },
                    pipe_3_4 = @install() {
                        subtext("S=25");
                    },
                    exit_cell_2 = @install() {
                        subtext("S=26");
                    },
                    exit_cell_3 = @install() {
                        subtext("S=27");
                    },
                    exit_cell_4 = @install() {
                        subtext("S=28");
                    },
                    exit_cell_5 = @install() {
                        subtext("S=29");
                    },

                    exit_cell_6 = @install() {
                        subtext("S=30");
                    },
                    exit_cell_7 = @install() {
                        subtext("S=31");
                    },
                }

                enum b_trigger {
                    cell_1_gourd = @install() {
                        subtext("B=0");
                    },
                }

                enum MOUNT {
                    ID = memory_tmp(),

                    WALK_DISTANCE = 0x40,
                    WALK_TIME = 0x25,
                    WALK_REPEAT_TIMER = memory_tmp(),
                }

                @install()
                @async()
                fun stack_t01_offset() {
                    while!(dead(MOUNT.ID)) {
                        <BOY>[X] = MOUNT.ID[X];
                        <BOY>[Y] = MOUNT.ID[Y] - 0x0a;

                        if((<BOY>[FACE_DIRECTION] != arg[0x00]) || (MOUNT.WALK_REPEAT_TIMER > MOUNT.WALK_TIME)) {
                            MOUNT.WALK_REPEAT_TIMER = 0x00;

                            if(<BOY>[FACE_DIRECTION] == FACE_DIRECTION.NORTH) {
                                _face(MOUNT.ID, SOUTH);
                                _walk(MOUNT.ID, COORDINATE_ABSOLUTE, MOUNT.ID[X], MOUNT.ID[Y] - MOUNT.WALK_DISTANCE, NONE);
                            } else if(<BOY>[FACE_DIRECTION] == FACE_DIRECTION.EAST) {
                                _face(MOUNT.ID, WEST);
                                _walk(MOUNT.ID, COORDINATE_ABSOLUTE, MOUNT.ID[X] + MOUNT.WALK_DISTANCE, MOUNT.ID[Y], NONE);
                            } else if(<BOY>[FACE_DIRECTION] == FACE_DIRECTION.SOUTH) {
                                _face(MOUNT.ID, NORTH);
                                _walk(MOUNT.ID, COORDINATE_ABSOLUTE, MOUNT.ID[X], MOUNT.ID[Y] + MOUNT.WALK_DISTANCE, NONE);
                            } else if(<BOY>[FACE_DIRECTION] == FACE_DIRECTION.WEST) {
                                _face(MOUNT.ID, EAST);
                                _walk(MOUNT.ID, COORDINATE_ABSOLUTE, MOUNT.ID[X] - MOUNT.WALK_DISTANCE, MOUNT.ID[Y], NONE);
                            }

                            arg[0x00] = <BOY>[FACE_DIRECTION];
                        } else {
                            MOUNT.WALK_REPEAT_TIMER += 0x01;
                        }

                        sleep(0x01);
                    }
                }

                fun trigger_enter() {
                    if(ROOM.ROOM_CLEARED) {
                        set(ROOM.CELL_1_CLEARED);
                        object[0x00] = 0x01; // press switch_1
                        object[0x01] = 0x7e; // opens gate_1
                        set(ROOM.CELL_2_CLEARED);
                        object[0x08] = 0x01; // press switch_2
                        object[0x07] = 0x7e; // opens gate_2
                        set(ROOM.CELL_3_CLEARED);
                        object[0x0a] = 0x01; // press switch_3
                        object[0x09] = 0x7e; // opens gate_3
                        set(ROOM.CELL_4_CLEARED);
                        object[0x0e] = 0x01; // press switch_4
                        object[0x0c] = 0x7e; // opens gate_4
                        set(ROOM.CELL_5_CLEARED);
                        object[0x0d] = 0x01; // press switch_5
                        object[0x0b] = 0x7e; // opens gate_5
                        set(ROOM.CELL_6_CLEARED);
                        object[0x05] = 0x01; // press switch_6
                        object[0x04] = 0x7e; // opens gate_6
                        set(ROOM.CELL_7_CLEARED);
                        object[0x03] = 0x01; // press switch_7
                        object[0x02] = 0x7e; // opens gate_7
                    }

                    if!(FLAG.IN_ANIMATION) {
                        crash_both();
                    }

                    // add_mario_koopa(0x35, 0x30);
                    // add_mario_koopa(0x35, 0x30);

                    // object[0x06] = 0x01; // opens door
                    // object[0x01] = 0x7e; // opens gate_1
                    // object[0x07] = 0x7e; // opens gate_2
                    // object[0x09] = 0x7e; // opens gate_3
                    // object[0x0c] = 0x7e; // opens gate_4
                    // object[0x0b] = 0x7e; // opens gate_5
                    // object[0x04] = 0x7e; // opens gate_6
                    // object[0x02] = 0x7e; // opens gate_7

                    mario_init(False, False);

                    add_enemy(RAPTOR_GREEN, 0x36, 0x30);
                    // add_enemy_with_flags(RAPTOR_GREEN, 0x36, 0x30, INACTIVE);
                    control_enemy(LAST_ENTITY, True);
                    attribute(LAST_ENTITY, INVINCIBLE, True);
                    MOUNT.ID = <LAST_ENTITY>;


                    // sleep(0xa0);
                    // _walk(MOUNT.ID, COORDINATE_ABSOLUTE, MOUNT.ID[X], MOUNT.ID[Y] + 0x10, NONE);


                    stack_t01_offset();
                }
            };

            map mario_prison_4(0x12) {
                enum entrance {
                    door = entrance(0x7a, 0x0b, SOUTH),
                    pipe = entrance(0x97, 0x0b, SOUTH),
                }

                enum soundtrack {
                    default = soundtrack(MARIO.DEFAULT_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_door = @install() {
                        subtext("S=0");
                    },
                    exit_pipe = @install() {
                        subtext("S=1");
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() {
                        subtext("B=0");
                    },
                    b_trigger_1 = @install() {
                        subtext("B=1");
                    },
                    b_trigger_2 = @install() {
                        subtext("B=2");
                    },
                    b_trigger_3 = @install() {
                        subtext("B=3");
                    },
                    b_trigger_4 = @install() {
                        subtext("B=4");
                    },
                    b_trigger_5 = @install() {
                        subtext("B=5");
                    },
                    b_trigger_6 = @install() {
                        subtext("B=6");
                    },
                    b_trigger_7 = @install() {
                        subtext("B=7");
                    },
                    b_trigger_8 = @install() {
                        subtext("B=8");
                    },
                    b_trigger_9 = @install() {
                        subtext("B=9");
                    },

                    b_trigger_10 = @install() {
                        subtext("B=10");
                    },
                    b_trigger_11 = @install() {
                        subtext("B=11");
                    },
                    b_trigger_12 = @install() {
                        subtext("B=12");
                    },
                }

                fun trigger_enter() {
                    mario_init(False, False);

                    // object[0x00] = 0x01 // hide barrier_7
                    // object[0x01] = 0x01 // hide barrier_1
                    // object[0x02] = 0x01 // hide barrier_2
                    // object[0x03] = 0x01 // hide barrier_8
                    // object[0x04] = 0x01 // hide barrier_3
                    // object[0x05] = 0x01 // hide barrier_4
                    // object[0x06] = 0x01 // hide barrier_6
                    // object[0x07] = 0x01 // hide barrier_5
                    // object[0x08] = 0x01 // open door
                    // object[0x09] = 0x01 // open chest_1_1
                    // object[0x0a] = 0x01 // open chest_1_2
                    // object[0x0b] = 0x01 // open chest_1_3
                    // object[0x0c] = 0x01 // open chest_2_1
                    // object[0x0d] = 0x01 // open chest_2_2
                }
            };

            map mario_prison_5(0x79) {
                enum entrance {
                    door = entrance(0x66, 0x0d, SOUTH),
                    pipe = entrance(0x49, 0x0d, SOUTH),

                    east = entrance(0xdf, 0x66, WEST),
                }

                enum soundtrack {
                    default = soundtrack(MARIO.DEFAULT_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_pipe = @install() {
                        subtext("S=0");
                    },
                    exit_door = @install() {
                        subtext("S=1");
                    },
                    exit_east_2 = @install() {
                        subtext("S=2");
                    },
                    exit_east_1 = @install() {
                        subtext("S=3");
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() {
                        subtext("B=0");
                    },
                    b_trigger_1 = @install() {
                        subtext("B=1");
                    },
                    b_trigger_2 = @install() {
                        subtext("B=2");
                    },
                    b_trigger_3 = @install() {
                        subtext("B=3");
                    },
                    b_trigger_4 = @install() {
                        subtext("B=4");
                    },
                    b_trigger_5 = @install() {
                        subtext("B=5");
                    },
                    b_trigger_6 = @install() {
                        subtext("B=6");
                    },
                    b_trigger_7 = @install() {
                        subtext("B=7");
                    },
                }

                fun trigger_enter() {
                    mario_init(False, False);

                    // object[0x00] = 0x01; // open door
                    // object[0x01] = 0x01; // open chest_4_1
                    // object[0x02] = 0x01; // open chest_4_2
                    // object[0x03] = 0x01; // open chest_3_1
                    // object[0x04] = 0x01; // open chest_3_2
                    // object[0x05] = 0x01; // open chest_3_3
                    // object[0x06] = 0x01; // open chest_2
                    // object[0x07] = 0x01; // open chest_1_1
                    // object[0x08] = 0x01; // open chest_1_2
                }
            };

            map mario_dungeon_boss(0x3f) {
                enum entrance {
                    south = entrance(0x18, 0x47, NORTH)
                }

                enum stepon_trigger {
                    exit_south = @install() {
                        subtext("S=0");
                    }
                }

                enum BOSS {
                    DEBUG = False,

                    ID = memory_tmp(),

                    PHASE = memory_tmp(),
                    RNG = memory_tmp(),
                    ENEMY_COUNT = memory_tmp(),

                    SHELL_DAMAGE = 0x30,
                }

                @install()
                fun boss_hit() {
                    // subtext("bang");
                    damage(BOSS.ID, BOSS.SHELL_DAMAGE, True);
                }

                @install()
                @async()
                fun koopa_rolling(enemy) {
                    // sleep(0xa0);

                    // if(<BOY>[X] < arg[0x00][X]) {
                    //     arg[0x08] = arg[0x00][X] - <BOY>[X];
                    // } else {
                    //     arg[0x08] = <BOY>[X] - arg[0x00][X];
                    // }
                    if(<BOY>[Y] < arg[0x00][Y]) {
                        arg[0x0a] = arg[0x00][Y] - <BOY>[Y];
                    } else {
                        arg[0x0a] = <BOY>[Y] - arg[0x00][Y];
                    }

                    // debug_memory(arg[0x08], arg[0x0a]);
                    // sleep(0xa0);

                    if(arg[0x0a] <= 0x05) {
                        if(<BOY>[X] > enemy[X]) {
                            // subtext("roll west");
                            
                            _face(enemy, WEST);
                        } else if(<BOY>[X] < enemy[X]) {
                            // subtext("roll east");

                            _face(enemy, EAST);
                        }
                    } else {
                        if(<BOY>[Y] > enemy[Y]) {
                            // subtext("roll north");
                            
                            _face(enemy, NORTH);
                        } else if(<BOY>[Y] < enemy[Y]) {
                            // subtext("roll south");

                            _face(enemy, SOUTH);
                        }
                    }

                    // sleep(0xa0);

                    while(arg[0x00][0x30] > 0x00) {
                        subtext("wait roll");
                        sleep(0x50);
                    }

                    while!(dead(enemy)) {
                        if(arg[0x00][0x30] > 0x00) {
                            subtext("cancel roll");
                            enemy[0x30] = 0x00;
                            end();
                        }
                        // debug_memory(enemy[X], enemy[Y]);
                        // debug_memory(enemy[0x30], enemy[0x30]);

                        if((enemy[X] == arg[0x02]) && (enemy[Y] == arg[0x04])) {
                            // subtext("turn");

                            // if(enemy[FACE_DIRECTION] == FACE_DIRECTION.NORTH) {
                            if(arg[0x00][FACE_DIRECTION] == FACE_DIRECTION.NORTH) {
                                _face(enemy, SOUTH);
                            } else if(arg[0x00][FACE_DIRECTION] == FACE_DIRECTION.EAST) {
                                _face(enemy, WEST);
                            } else if(arg[0x00][FACE_DIRECTION] == FACE_DIRECTION.SOUTH) {
                                _face(enemy, NORTH);
                            } else if(arg[0x00][FACE_DIRECTION] == FACE_DIRECTION.WEST) {
                                _face(enemy, EAST);
                            }
                        }

                        arg[0x02] = enemy[X];
                        arg[0x04] = enemy[Y];
                        sleep(0x05);


                        if(BOSS.ID[X] < arg[0x00][X]) {
                            arg[0x08] = arg[0x00][X] - BOSS.ID[X];
                        } else {
                            arg[0x08] = BOSS.ID[X] - arg[0x00][X];
                        }
                        if(BOSS.ID[Y] < arg[0x00][Y]) {
                            arg[0x0a] = arg[0x00][Y] - BOSS.ID[Y];
                        } else {
                            arg[0x0a] = BOSS.ID[Y] - arg[0x00][Y];
                        }

                        if((arg[0x08] < 0x0f) && (arg[0x0a] < 0x0f)) {
                            boss_hit();
                            BOSS.ENEMY_COUNT -= 0x01;
                            _destroy(enemy);
                        }
                    }
                }

                @install()
                fun koopa_stomped_2() {
                    heal(SCRIPT_OWNER, 0x00, False);
                    yield();
                    animate(SCRIPT_OWNER, LOOP, ANIMATION_ENEMY.LIZARD_ROLL);
                    attach_script(SCRIPT_OWNER, DAMAGE, reference(koopa_stomped_1));

                    <SCRIPT_OWNER>[0x30] = 0x00;
                    koopa_rolling(<SCRIPT_OWNER>);
                }

                @install()
                fun koopa_stomped_1() {
                    yield();
                    animate(SCRIPT_OWNER, ONCE_FREEZE, ANIMATION_ENEMY.LIZARD_DUCK_1);
                    attach_script(SCRIPT_OWNER, DAMAGE, reference(koopa_stomped_2));

                    <SCRIPT_OWNER>[0x30] = 0x01;
                }
                
                @install()
                fun add_mario_koopa() {
                    BOSS.ENEMY_COUNT += 0x01;

                    add_dynamic_enemy_with_flags(LIZARD, BOSS.ID[X], BOSS.ID[Y], 0x00);
                    attach_to_script(LAST_ENTITY);
                    attach_script(SCRIPT_OWNER, DAMAGE, reference(koopa_stomped_1));
                    
                    <SCRIPT_OWNER>[FALLING_HEIGHT] = 0x0fff;
                    animate(SCRIPT_OWNER, LOOP, ANIMATION_ENEMY.LIZARD_ROLL);
                    attribute(SCRIPT_OWNER, ROOT, True);
                    sleep(0x55);

                    <SCRIPT_OWNER>[JUMP_HEIGHT] = 0x20;
                    sleep(0x30);

                    attribute(SCRIPT_OWNER, ROOT, False);
                    animate(SCRIPT_OWNER, ONCE, ANIMATION_ALL.DEFAULT);
                }

                fun shoot_boss(x, y) {
                    shoot_entity_absolute(BOSS.ID, SPEAR, x, y, 0x30, 0x00);
                }

                @install()
                fun toss_hammers() {
                    animate(BOSS.ID, ONCE, ANIMATION_ENEMY.LIZARD_TALK);
                    face(BOSS.ID, SOUTH);

                    shoot_boss(<BOY>[X] , <BOY>[Y] );
                    sleep(0x05);
                    shoot_boss(<BOY>[X] + randrange(0x05), <BOY>[Y] - randrange(0x05));
                    sleep(0x05);
                    shoot_boss(<BOY>[X] - randrange(0x0a), <BOY>[Y] + randrange(0x0a));
                    sleep(0x0a);
                    shoot_boss(<BOY>[X] + randrange(0x0a), <BOY>[Y] - randrange(0x0a));
                    sleep(0x05);
                    shoot_boss(<BOY>[X] + randrange(0x1a), <BOY>[Y] + randrange(0x1a));
                    sleep(0x0a);
                    shoot_boss(<BOY>[X] + randrange(0x1a), <BOY>[Y] - randrange(0x1a));
                    sleep(0x01);
                    shoot_boss(<BOY>[X] - randrange(0x1a), <BOY>[Y] - randrange(0x1a));
                    sleep(0x0a);
                    shoot_boss(<BOY>[X] + randrange(0x1a), <BOY>[Y] + randrange(0x1a));
                }

                @install()
                fun fireball() {
                    animate(BOSS.ID, ONCE, ANIMATION_ENEMY.LIZARD_TALK);
                    face(BOSS.ID, SOUTH);

                    shoot_entity_entity(BOSS.ID, ONION, BOY, 0x10, 0xff);
                }

                @install()
                @async()
                fun boss_ai() {
                    if(BOSS.DEBUG) {
                        subtext("phase 0");
                    }
                    
                    while(BOSS.PHASE == 0x00) {
                        BOSS.RNG = randrange(0x04);
                        if(BOSS.DEBUG) {
                            subtext("rng");
                        }
                        
                        if(BOSS.RNG == 0x00) {
                            if(BOSS.ENEMY_COUNT <= 0x00) {
                                add_mario_koopa();
                            }
                        } else if(BOSS.RNG == 0x01) {
                            toss_hammers();
                        } else if(BOSS.RNG == 0x02) {
                            fireball();
                        } else if(BOSS.RNG == 0x03) {
                            nop();
                        }

                        sleep(0xa0);
                    }

                    if(BOSS.DEBUG) {
                        subtext("phase 1");
                    }
                    
                    while(BOSS.PHASE == 0x01) {
                        yield();
                    }

                    if(BOSS.DEBUG) {
                        subtext("yatta");
                    }
                }

                fun add_mario_enemy_bowser(x, y) {
                    add_enemy(LIZARD_BLACK, x, y);
                    BOSS.ID = <LAST_ENTITY>;

                    boss_ai();
                }

                fun trigger_enter() {
                    add_mario_enemy_bowser(0x18, 0x23);

                    mario_init(False, False);
                }
            };
        };
    };
};

area southern_jungle() {
    map eastern_waterfall(0x6b) {
        enum entrance {
            south = entrance(0x11, 0x3f, NORTH)
        }

        enum soundtrack {
            default = soundtrack(0x46, 0xff)
        }

        @install()
        fun yeet() {
            control(NONE);

            animate(BOY, LOOP, ANIMATION_BOY.FALL_1);
            sleep(0x05);

            animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
            <BOY>[JUMP_HEIGHT] = 0x20;

            arg[0x00] = <BOY>[X] + 0x30;
            while(<BOY>[X] < arg[0x00]) {
                <BOY>[X] += 0x01;

                yield();
            }

            arg[0x02] = <BOY>[Y] + 0x40;
            while(<BOY>[Y] < arg[0x02]) {
                <BOY>[Y] += 0x02;

                yield();
            }

            map_transition(junkyard, crash_south, NONE);
        }

        enum stepon_trigger {
            stepon_0 = yeet(),
            stepon_1 = yeet(),
            stepon_2 = yeet(),
            stepon_3 = yeet(),
            stepon_4 = yeet(),
            stepon_5 = yeet(),
            stepon_6 = @install() {
                map_transition(eastern_river, north, SOUTH);
            }
        }

        fun trigger_enter() {
            default_init_room(True, True);
        }
    };

    map pyramid(0x06) {
        enum entrance {
            north = entrance(0x66, 0x04, SOUTH),
            east = entrance(0xa3, 0x71, WEST),

            cave_tiny = entrance(0x87, 0x84, SOUTH),

            pyramid_1_1 = entrance(0x4c, 0x6b, SOUTH),
            pyramid_2_1 = entrance(0x46, 0x4e, SOUTH),
            pyramid_2_2 = entrance(0x5e, 0x4e, SOUTH),
            pyramid_3_1 = entrance(0x52, 0x38, SOUTH),
            pyramid_3_2 = entrance(0x5b, 0x33, EAST),

            wings = entrance(0x3d, 0x71, NONE),
        }

        @install()
        fun pit_triggered() {
            generic_fall(0d80);

            dust_unreachable(0d143, 0d108);
            damage(BOTH, 0d999, True);
        }

        enum stepon_trigger {
            stepon_0 = @install() {
                subtext("S=0");
            },
            door_tiny = @install() {
                subtext("S=1");
            },
            pit_1 = pit_triggered(),
            pit_2 = pit_triggered(),
            pit_3 = pit_triggered(),
            stairs_bottom = @install() {
                subtext("S=5");
            },
            switch_left = @install() {
                subtext("S=6");
            },
            switch_right = @install() {
                subtext("S=7");
            },
            switch_bottom_south = @install() {
                subtext("S=8");
            },
            switch_bottom_west = @install() {
                subtext("S=9");
            },

            pit_4 = pit_triggered(),
            pit_5 = pit_triggered(),
            pit_6 = pit_triggered(),
            pit_7 = pit_triggered(),
            pit_8 = pit_triggered(),
            exit_east = @install() {
                map_transition(flowers, west, EAST);
            },
            stepon_16 = @install() {
                subtext("S=16");
            },
            door_2_1 = @install() {
                subtext("S=17");
            },
            door_2_2 = @install() {
                subtext("S=18");
            },
            door_3_2 = @install() {
                subtext("S=19");
            },

            switch_bottom = @install() {
                subtext("S=20");
            },
            stepon_21 = @install() {
                subtext("S=21");
            },
            switch_left_west = @install() {
                subtext("S=22");
            },
            switch_left_south = @install() {
                subtext("S=23");
            },
            switch_right_east = @install() {
                subtext("S=24");
            },
            switch_right_south = @install() {
                subtext("S=25");
            },
            exit_north = @install() {
                map_transition(eastern_river, south, NORTH);
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
            b_trigger_17 = @install() {
                subtext("B=17");
            },
            b_trigger_18 = @install() {
                subtext("B=18");
            },
            b_trigger_19 = @install() {
                subtext("B=19");
            },
        }

        enum ROOM {
            DEBUG = False,

            BRIDGE_SIZE = 0d45,
            BRIDGE_REVEALED = flag(),
            BRIDGE_REVEALER_ENTITY = memory_tmp(),
        }

        @install()
        fun message_triggered() {
            player_message_triggered();

            subtext("shortcut ahead, therefore try jumping"); // https://soapstone.retzudo.com/04j243v
        }

        @install()
        @async()
        fun revealer_approached() {
            attach_to_script(ROOM.BRIDGE_REVEALER_ENTITY);

            while!(dead(<SCRIPT_OWNER>)) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = <SCRIPT_OWNER>[X];
                arg[0x06] = <SCRIPT_OWNER>[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= ROOM.BRIDGE_SIZE) && (arg[0x0a] <= ROOM.BRIDGE_SIZE)) {
                    pit_triggered();
                    end();
                }

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }

                yield();
            }
        }

        @install()
        fun revealer_triggered() {
            set(ROOM.BRIDGE_REVEALED);
            object[0x0b] = 0x7e;
            sleep(0x29);
            destroy(ROOM.BRIDGE_REVEALER_ENTITY);
        }

        fun trigger_enter() {
            object[0x04] = 0x01;
            object[0x05] = 0x01;
            object[0x06] = 0x01;
            object[0x07] = 0x01;
            object[0x08] = 0x01;
            object[0x09] = 0x01;
            object[0x0a] = 0x01;

            if!(ROOM.BRIDGE_REVEALED) {
                add_enemy(REVEALER_TARGET_ENTITY, 0d148, 0d119);
                ROOM.BRIDGE_REVEALER_ENTITY = <LAST_ENTITY>;

                special_script(REVEALER, reference(revealer_triggered));
                revealer_approached();
            } else {
                revealer_triggered();
            }

            default_init_room(True, True);

            player_message(0d134, 0d122, reference(message_triggered));
        }
    };

    map flowers(0x38) {
        enum entrance {
            north = entrance(0x62, 0x0b, SOUTH),
            west = entrance(0x04, 0x1f, EAST),

            crash = entrance(0x64, 0x5b, NONE),
        }

        enum stepon_trigger {
            exit_north = @install() {
                map_transition(northern_jungle, south, NORTH);
            },
            exit_south = @install() {
                map_transition(pyramid, east, WEST);
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
            b_trigger_17 = @install() {
                subtext("B=17");
            },
            b_trigger_18 = @install() {
                subtext("B=18");
            },
            b_trigger_19 = @install() {
                subtext("B=19");
            },

            b_trigger_20 = @install() {
                subtext("B=20");
            },
            b_trigger_21 = @install() {
                subtext("B=21");
            },
            b_trigger_22 = @install() {
                subtext("B=22");
            },
            b_trigger_23 = @install() {
                subtext("B=23");
            },
            b_trigger_24 = @install() {
                subtext("B=24");
            },
            b_trigger_25 = @install() {
                subtext("B=25");
            },
            b_trigger_26 = @install() {
                subtext("B=26");
            },
            b_trigger_27 = @install() {
                subtext("B=27");
            },
            b_trigger_28 = @install() {
                subtext("B=28");
            },
            b_trigger_29 = @install() {
                subtext("B=29");
            },

            b_trigger_30 = @install() {
                subtext("B=30");
            },
        }

        enum ROOM {
            DEBUG = False,

            LIFT_TRIGGER = memory_tmp(),
            LIFT_CORD = memory_tmp(),
            LIFT_TRIGGER_RADIUS = 0x20,
            LIFT_START = 0x0fff,
            LIFT_END = 0x30,
            LIFT_SPEED_INCREMEND = 0x01,
            LIFT_SPEED_SLEEP = 0x05,
        }


        @install()
        fun lift_triggered() {
            control(NONE);

            add_placeholder(LIFT_CORD_VERTICAL, 0x00, 0x00);
            ROOM.LIFT_CORD = <LAST_ENTITY>;
            ROOM.LIFT_CORD[X] = ROOM.LIFT_TRIGGER[X];
            ROOM.LIFT_CORD[Y] = ROOM.LIFT_TRIGGER[Y] - 0xb0;
            ROOM.LIFT_CORD[FALLING_HEIGHT] = ROOM.LIFT_START;

            ROOM.LIFT_TRIGGER[FALLING_HEIGHT] = ROOM.LIFT_START;
            yield();
            animate(ROOM.LIFT_TRIGGER, LOOP, ANIMATION_PLACEHOLDER.LIFT_MOVING);

            sleep(0x50);

            animate(ROOM.LIFT_TRIGGER, ONCE_FREEZE, ANIMATION_PLACEHOLDER.LIFT_MOVING);

            _walk(DOG, COORDINATE_ABSOLUTE, ROOM.LIFT_TRIGGER[X] - 0x0a, ROOM.LIFT_TRIGGER[Y], NONE);
            _walk(BOY, COORDINATE_ABSOLUTE, ROOM.LIFT_TRIGGER[X] + 0x0a, ROOM.LIFT_TRIGGER[Y], BOTH);

            face(BOY, SOUTH);
            face(DOG, SOUTH);

            animate(ROOM.LIFT_TRIGGER, LOOP, ANIMATION_PLACEHOLDER.LIFT_MOVING);

            while(arg[0x00] < ROOM.LIFT_END) {
                ROOM.LIFT_TRIGGER[JUMP_HEIGHT] = arg[0x00];
                ROOM.LIFT_CORD[JUMP_HEIGHT] = arg[0x00];
                <BOY>[JUMP_HEIGHT] = arg[0x00];
                <DOG>[JUMP_HEIGHT] = arg[0x00];

                arg[0x00] += ROOM.LIFT_SPEED_INCREMEND;
                sleep(ROOM.LIFT_SPEED_SLEEP);
            }

            map_transition(tree_house, door, NONE);
        }
        
        @install()
        @async()
        fun hidden_lift_check() {
            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = ROOM.LIFT_TRIGGER[X];
                arg[0x06] = ROOM.LIFT_TRIGGER[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= ROOM.LIFT_TRIGGER_RADIUS) && (arg[0x0a] <= ROOM.LIFT_TRIGGER_RADIUS)) {
                    lift_triggered();
                    end();
                }
                yield();

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }
            }
        }
        
        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            default_init_room(True, True);

            add_enemy(PLACEHOLDER, 0x72, 0x75);
            ROOM.LIFT_TRIGGER = <LAST_ENTITY>;

            hidden_lift_check();
        }
    };

    map tree_house(0x34) {
        enum entrance {
            door = entrance(0x12, 0x23, NORTH)
        }

        enum stepon_trigger {
            door = @install() {
                map_transition(flowers, crash, NONE);
            }
        }

        enum b_trigger {
            gourd_1 = @install() {
                subtext("B=0");
            },
            gourd_2 = @install() {
                subtext("B=1");
            },
            gourd_3 = @install() {
                subtext("B=2");
            },
        }


        fun trigger_enter() {
            default_init_room(True, False);
        }
    };

    map northern_jungle(0x41) {
        enum entrance {
            north = entrance(0x56, 0x05, SOUTH),
            south = entrance(0x07, 0x4d, NORTH),

            cave_1 = entrance(0x08, 0x0f, SOUTH),
            cave_2 = entrance(0x48, 0x13, SOUTH),

            wings = entrance(0x0f, 0x3f, NONE),
        }

        enum stepon_trigger {
            exit_north = @install() {
                map_transition(jungle_firepit, south, NORTH);
            },
            cave_2 = @install() {
                subtext("S=1");
            },
            cave_1 = @install() {
                subtext("S=2");
            },
            exit_south = @install() {
                map_transition(flowers, north, SOUTH);
            },
        }
        
        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
            b_trigger_17 = @install() {
                subtext("B=17");
            },
            b_trigger_18 = @install() {
                subtext("B=18");
            },
            b_trigger_19 = @install() {
                subtext("B=19");
            },

            b_trigger_20 = @install() {
                subtext("B=20");
            },
            b_trigger_21 = @install() {
                subtext("B=21");
            },
            b_trigger_22 = @install() {
                subtext("B=22");
            },
        }
        
        fun trigger_enter() {
            init_map(0x00, 0x00, 0x63, 0x4f);

            fade_in();
        }
    };

    map jungle_firepit(0x36) {
        enum entrance {
            south = entrance(0x17, 0x2c, NORTH),
        }

        enum stepon_trigger {
            exit_south = @install() {
                map_transition(northern_jungle, north, SOUTH);
            },
            windwalker = @install() {
                subtext("S=1");
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
        }

        fun trigger_enter() {
            fade_in();
        }
    };
};

area town() {
    enum AREA_TOWN_TEMPLE {
        SECRET_PASSAGE_OPENED = flag(),

        MUSIC_TOWN = 0x42,
    }

    enum TEMPLE {
        MUSIC = 0x1e,
    }

    map town_market_alley(0x4e) {
        enum entrance {
            north = entrance(0x2a, 0x01, SOUTH),
            east = entrance(0x39, 0xc3, WEST),
        }

        enum soundtrack {
            default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
        }

        enum stepon_trigger {
            exit_north = @install() {
                map_transition(town_temple, south, NORTH);
            },
            exit_east = @install() {
                map_transition(town_center, west_2, EAST);
            },
        }

        fun trigger_enter() {
            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // south
                add_enemy(RAT, 0d23, 0d179);

                // north
                add_enemy(MAGGOT, 0d9, 0d31);
                add_enemy(MAGGOT, 0d39, 0d38);

                add_enemy(MAGGOT_RED, 0d39, 0d13);
            }

            default_init_room(False, False);
        }
    };

    area temple() {
        area level_0() {
            map town_temple(0x29) {
                enum entrance {
                    north = entrance(0x29, 0x03, SOUTH),
                    east_1 = entrance(0x4b, 0x3f, WEST),
                    east_2 = entrance(0x49, 0x5d, WEST),
                    south = entrance(0x29, 0x8b, NORTH),
                    west_1 = entrance(0x09, 0x5d, EAST),
                    west_2 = entrance(0x09, 0x3f, EAST),

                    // elevator = entrance(0x29, 0x49, NONE),
                    elevator = entrance(0x29, 0x4c, SOUTH),
                }

                enum soundtrack {
                    default = soundtrack(TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    stepon_0 = @install() {
                        subtext("S=0");
                    },
                    stepon_1 = @install() {
                        subtext("S=1");
                    },
                    stepon_2 = @install() {
                        subtext("S=2");
                    },
                    stepon_3 = @install() {
                        subtext("S=3");
                    },
                    stepon_4 = @install() {
                        subtext("S=4");
                    },
                    stepon_5 = @install() {
                        subtext("S=5");
                    },
                    exit_south = @install() {
                        map_transition(town_market_alley, north, SOUTH);
                    },
                    door_west_2 = @install() {
                        map_transition(town_temple_north_west, east, WEST);
                    },
                    door_west_1 = @install() {
                        subtext("S=8");
                    },
                    door_east_2 = @install() {
                        if(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                            map_transition(town_level_2, west, EAST);
                        } else {
                            error_contraption(WEST);
                        }
                    },

                    door_east_1 = @install() {
                        map_transition(town_temple_switch, west, EAST);
                    },
                    stepon_11 = @install() {
                        subtext("S=11");
                    },
                    switch_triggered = @install() {
                        subtext("S=12");
                    },
                    stepon_13 = @install() {
                        subtext("S=13");
                    },
                    stepon_14 = @install() {
                        subtext("S=14");
                    },
                    stepon_15 = @install() {
                        subtext("S=15");
                    },
                    stepon_16 = @install() {
                        subtext("S=16");
                    },
                    stepon_17 = @install() {
                        subtext("S=17");
                    },
                    stepon_18 = @install() {
                        subtext("S=18");
                    },
                    stepon_19 = @install() {
                        subtext("S=19");
                    },

                    stepon_20 = @install() {
                        subtext("S=20");
                    },
                    stepon_21 = @install() {
                        subtext("S=21");
                    },
                    stepon_22 = @install() {
                        subtext("S=22");
                    },
                    stepon_23 = @install() {
                        subtext("S=23");
                    },
                    stepon_24 = @install() {
                        subtext("S=24");
                    },
                    stepon_25 = @install() {
                        subtext("S=25");
                    },
                    stepon_26 = @install() {
                        subtext("S=26");
                    },
                    stepon_27 = @install() {
                        subtext("S=27");
                    },
                    stepon_28 = @install() {
                        subtext("S=28");
                    },
                    stepon_29 = @install() {
                        subtext("S=29");
                    },

                    stepon_30 = @install() {
                        subtext("S=30");
                    },
                    elevator = @install() {
                        control(NONE);

                        object[0x05] = 0x7e; // open elevator
                        sleep(0x50);

                        walk(BOY, TILE_ABSOLUTE, 0d43, 0d73, NONE);
                        walk(DOG, TILE_ABSOLUTE, 0d41, 0d73, BOTH);

                        face(BOY, SOUTH);
                        face(DOG, SOUTH);
                        
                        object[0x05] = 0x00; // open elevator

                        sleep(0x50);

                        map_transition(town_temple_underground, elevator, NONE);
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() {
                        subtext("B=0");
                    },
                    b_trigger_1 = @install() {
                        subtext("B=1");
                    },
                }

                fun open_doors(open) {
                    if(open) {
                        object[0x03] = 0x01; // NE

                        object[0x07] = 0x01; // SW
                        object[0x08] = 0x01; // SE

                        object[0x09] = 0x01; // NW
                    } else {
                        object[0x03] = 0x00; // NE

                        object[0x07] = 0x00; // SW
                        object[0x08] = 0x00; // SE

                        object[0x09] = 0x00; // NW
                    }
                }

                @install()
                fun debug_triggered() {
                    set(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED);

                    destroy(SCRIPT_OWNER);
                }

                fun trigger_enter() {
                    if!(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                        add_debug_entity(0d69, 0d87, reference(debug_triggered));
                    }

                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // east
                        add_enemy(MAGGOT_RED, 0d65, 0d78);

                        // south
                        add_enemy(MAGGOT_RED, 0d50, 0d109);
                        add_enemy(MAGGOT_RED, 0d63, 0d110);

                        // west
                        add_enemy(MAGGOT_RED, 0d26, 0d73);
                    }

                    open_doors(True);
                    object[0x07] = 0x00; // SW

                    init_map(0x00, 0x30, 0x50, 0x8a);

                    default_init_room(False, False);

                    // object[0x00] = 0x7e; // enroll bridge
                    // object[0x01] = 0x01; // open gourde_2
                    // object[0x02] = 0x01; // open gourde_1
                    // object[0x03] = 0x01; // open door_NE
                    // object[0x04] = 0x03; // open door_boss
                    // object[0x05] = 0x7e; // open elevator
                    // object[0x06] = 0x01; // activate switch
                    // object[0x07] = 0x00; // open door_SW
                    // object[0x08] = 0x00; // open door_SE
                    // object[0x09] = 0x00; // open door_NW
                }
            };

            map town_temple_north_west(0x23) {
                enum entrance {
                    north = entrance(0x24, 0x2e, SOUTH),
                    east = entrance(0x3b, 0x3f, WEST),
                }

                enum soundtrack {
                    default = soundtrack(TEMPLE.MUSIC, 0xff)
                }

                enum ROOM {
                    LEFT_OPENED = flag(),
                    CENTER_OPENED = flag(),
                    RIGHT_TRIGGERED = flag_tmp(),
                }

                enum stepon_trigger {
                    exit_east = @install() {
                        map_transition(town_temple, west_2, EAST);
                    },
                    stepon_1 = @install() {
                        subtext("S=1");
                    },
                    switch_2 = @install() {
                        if((!ROOM.LEFT_OPENED) && (!ROOM.CENTER_OPENED)) {
                            object[0x01] = 0x7e; // activate switch_2

                            if!(ROOM.RIGHT_TRIGGERED) {
                                set(ROOM.CENTER_OPENED);
                                object[0x04] = 0x00; // gate 2
                            } else {
                                set(ROOM.LEFT_OPENED);
                                object[0x03] = 0x00; // gate 1
                            }
                        }
                    },
                    switch_1 = @install() {
                        if((!ROOM.LEFT_OPENED) && (!ROOM.CENTER_OPENED)) {

                            object[0x00] = 0x7e; // activate switch_1

                            if!(ROOM.RIGHT_TRIGGERED) {
                                set(ROOM.LEFT_OPENED);
                                object[0x03] = 0x00; // gate 1
                            } else {
                                set(ROOM.CENTER_OPENED);
                                object[0x04] = 0x00; // gate 2
                            }
                        }
                    },
                    switch_3 = @install() {
                        set(ROOM.RIGHT_TRIGGERED);

                        object[0x05] = 0x01; // gate 3
                        object[0x02] = 0x01; // activate switch_3
                    },
                    exit_north = @install() {
                        map_transition(town_temple_boss, south, NORTH);
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() {
                        subtext("B=0");
                    },
                    b_trigger_1 = @install() {
                        subtext("B=1");
                    },
                    b_trigger_2 = @install() {
                        subtext("B=2");
                    },
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // north
                        add_enemy(MAGGOT_RED, 0d49, 0d38);

                        // south
                        add_enemy(MAGGOT_RED, 0d31, 0d75);

                        // center
                        add_enemy_with_flags(BOY_DERPY, 0d36, 0d61, INACTIVE_IMORTAL);
                    }

                    if!(ROOM.LEFT_OPENED) {
                        object[0x03] = 0x03; // gate 1
                    } else {
                        object[0x00] = 0x7e; // activate switch_1
                    }
                    if!(ROOM.CENTER_OPENED) {
                        object[0x04] = 0x03; // gate 2
                    } else {
                        object[0x01] = 0x7e; // activate switch_2
                    }
                    object[0x05] = 0x02; // gate 3
                    if(ROOM.LEFT_OPENED || ROOM.CENTER_OPENED) {
                        object[0x02] = 0x7e; // activate switch_3
                    }


                    fade_in();
                }
            };

            map town_temple_boss(0x2a) {
                enum entrance {
                    south = entrance(0x41, 0x53, NORTH)
                }

                enum soundtrack {
                    default = soundtrack(TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_south = @install() {
                        map_transition(town_temple_north_west, north, SOUTH);
                    }
                }

                enum ROOM {
                    COLLECTIBLE_LOOTED = flag(),
                }

                @install()
                fun debug_triggered() {
                    set(ROOM.COLLECTIBLE_LOOTED);
                    collectible_collected();

                    destroy(SCRIPT_OWNER);
                }

                fun trigger_enter() {
                    if!(ROOM.COLLECTIBLE_LOOTED) {
                        add_collectible(0x01, 0d64, 0d66, reference(debug_triggered));
                    }

                    init_map(0x30, 0x30 + 0x06, 0x50, 0x4c + 0x06);
                    fade_in();
                }
            };

            map town_temple_switch(0x2c) {
                enum entrance {
                    west = entrance(0x01, 0x1b, EAST),
                }

                enum soundtrack {
                    default = soundtrack(TEMPLE.MUSIC, 0xff)
                }

                enum BOSS {
                    DEBUG = True,

                    RIDER_ID = memory_tmp(),
                    MOUNT_ID = memory_tmp(),
                    TMP_ID = memory_tmp(),

                    PHASE = memory_tmp(),
                    TIMER = memory_tmp(),

                    DISMOUNT = memory_tmp(),

                    COUNTDOWN = 0x03,
                }

                fun show_switch(show) {
                    if(show) {
                        object[0x00] = 0x0a;
                    } else {
                        object[0x00] = 0x00;
                    }
                }

                @install()
                fun boss_defeated() {
                    set(SOULS_MEMORY.DEAD_TEMPLE_MINITAUR);
                    SOULS_MEMORY.BOSSES_DEFEATED_COUNTER += 0x01;
                    SOULS_MEMORY.PROGRESS_COUNTER += 0x01;

                    show_switch(True);
                }
                fun switch_activated() {
                    if!(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                        set(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED);

                        // debug_memory(BOSS.DISMOUNT, BOSS.DISMOUNT);
                        object[0x00] = 0x0b;
                    }
                }

                enum stepon_trigger {
                    exit_west = @install() {
                        map_transition(town_temple, east_1, WEST);
                    },
                    switch = @install() {
                        switch_activated();
                    }
                }

                @install()
                @async()
                fun stack_t01_offset() {
                    while!(dead(BOSS.MOUNT_ID)) {
                        if(BOSS.DISMOUNT == 0x00) {
                            BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                            BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y] - 0x1d;
                        }
                        yield();
                    }
                }

                @install()
                fun rider_damage() {
                    if(BOSS.PHASE == 0x00) {
                        BOSS.DISMOUNT += 0x100;
                        // attribute(BOSS.RIDER_ID, NO_CLIP, False);
                    } else if(BOSS.PHASE == 0x01) {
                        if(dead(BOSS.MOUNT_ID)) { // TODO: doesn't trigger if minitaur dies last
                            BOSS.PHASE = 0x02;
                            end();
                        }
                    }
                }
                @install()
                fun mount_damage() {
                    if(BOSS.PHASE == 0x00) {
                        if(BOSS.MOUNT_ID[HP] < 0x012c) {
                            BOSS.PHASE = 0x01;
                            end();
                        }
                        nop();
                    } if(BOSS.PHASE == 0x01) {
                        BOSS.DISMOUNT += 0x100;
                        // attribute(BOSS.RIDER_ID, NO_CLIP, False);
                        animate(BOSS.MOUNT_ID, ONCE, ANIMATION_ALL.DEFAULT);
                    }
                }

                @install()
                @async()
                fun boss_watcher() {
                    if(BOSS.DEBUG) {
                        subtext("phase 0");
                    }

                    while(BOSS.PHASE == 0x00) {
                        if(BOSS.DISMOUNT == 0x05) {
                            _heel(BOSS.RIDER_ID, BOSS.MOUNT_ID[X], BOSS.MOUNT_ID[Y] - 0x1d);
                            // attribute(BOSS.RIDER_ID, NO_CLIP, True);
                            animate(BOSS.RIDER_ID, ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_EXIT);
                        } else if(BOSS.DISMOUNT == 0x01) {
                            BOSS.RIDER_ID[Z] = BOSS.MOUNT_ID[Z];
                        }
                    
                        if(BOSS.DISMOUNT > 0x00) { // TODO: buggy, since menu resets paletts
                            BOSS.DISMOUNT -= 0x01;
                        }

                        yield();
                    }

                    if(BOSS.DEBUG) {
                        subtext("phase 1");
                    }

                    BOSS.TMP_ID = BOSS.RIDER_ID;
                    BOSS.RIDER_ID = BOSS.MOUNT_ID;
                    BOSS.MOUNT_ID = BOSS.TMP_ID;

                    yield();

                    BOSS.DISMOUNT = 0x100;
                    _heel(BOSS.RIDER_ID, BOSS.MOUNT_ID[X], BOSS.MOUNT_ID[Y] - 0x1d);
                    BOSS.RIDER_ID[Z] = BOSS.MOUNT_ID[Z];
                    animate(BOSS.MOUNT_ID, ONCE, ANIMATION_ALL.DEFAULT);

                    while(BOSS.PHASE == 0x01) {
                        if(BOSS.DISMOUNT == 0x05) {
                            _heel(BOSS.RIDER_ID, BOSS.MOUNT_ID[X], BOSS.MOUNT_ID[Y] - 0x1d);
                            // attribute(BOSS.RIDER_ID, NO_CLIP, True);
                            animate(BOSS.RIDER_ID, ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_EXIT);
                        } else if(BOSS.DISMOUNT == 0x01) {
                            BOSS.RIDER_ID[Z] = BOSS.MOUNT_ID[Z];
                        }
                    
                        if(BOSS.DISMOUNT > 0x00) { // TODO: buggy, since menu resets paletts
                            BOSS.DISMOUNT -= 0x01;
                        }

                        yield();
                    }

                    if(BOSS.DEBUG) {
                        subtext("yatta");
                    }

                    boss_defeated();
                }

                fun spawn_boss() {
                    add_enemy(MINITAUR, 0x20, 0x20);
                    BOSS.MOUNT_ID = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, DAMAGE, reference(mount_damage));
                    add_enemy(MEGATAUR, 0x20, 0x20);
                    BOSS.RIDER_ID = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, DAMAGE, reference(rider_damage));

                    animate(BOSS.RIDER_ID, FREEZE, ANIMATION_ENEMY.MEGATAUR_ENTER);
                    
                    stack_t01_offset();
                    boss_watcher();
                }

                fun trigger_enter() {
                    if!(SOULS_MEMORY.DEAD_TEMPLE_MINITAUR) {
                        show_switch(False);

                        spawn_boss();
                    } else {
                        if(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                            object[0x00] = 0x0b;
                        } else {
                            show_switch(True);
                        }
                    }

                    fade_in();
                }
            };
        };

        area level_1() {
            map town_temple_underground(0x29) {
                enum entrance {
                    north = entrance(0x29, 0x03, SOUTH),
                    east_1 = entrance(0x4b, 0x3f, WEST),
                    east_2 = entrance(0x49, 0x5d, WEST),
                    south = entrance(0x29, 0x8b, NORTH),
                    west_1 = entrance(0x09, 0x5d, EAST),
                    west_2 = entrance(0x09, 0x3f, EAST),

                    // elevator = entrance(0x29, 0x49, NONE),
                    elevator = entrance(0x29, 0x4c, SOUTH),
                }

                enum soundtrack {
                    default = soundtrack(TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    stepon_0 = @install() {
                        subtext("S=0");
                    },
                    stepon_1 = @install() {
                        subtext("S=1");
                    },
                    stepon_2 = @install() {
                        subtext("S=2");
                    },
                    stepon_3 = @install() {
                        subtext("S=3");
                    },
                    stepon_4 = @install() {
                        subtext("S=4");
                    },
                    stepon_5 = @install() {
                        subtext("S=5");
                    },
                    exit_south = @install() {
                        subtext("S=6");
                    },
                    door_west_2 = @install() {
                        subtext("S=7");
                    },
                    door_west_1 = @install() {
                        subtext("S=8");
                    },
                    door_east_2 = @install() {
                        subtext("S=9");
                    },

                    door_east_1 = @install() {
                        subtext("S=10");
                    },
                    stepon_11 = @install() {
                        subtext("S=11");
                    },
                    switch_triggered = @install() {
                        subtext("S=12");
                    },
                    stepon_13 = @install() {
                        subtext("S=13");
                    },
                    stepon_14 = @install() {
                        subtext("S=14");
                    },
                    stepon_15 = @install() {
                        subtext("S=15");
                    },
                    stepon_16 = @install() {
                        subtext("S=16");
                    },
                    stepon_17 = @install() {
                        subtext("S=17");
                    },
                    stepon_18 = @install() {
                        subtext("S=18");
                    },
                    stepon_19 = @install() {
                        subtext("S=19");
                    },

                    stepon_20 = @install() {
                        subtext("S=20");
                    },
                    stepon_21 = @install() {
                        subtext("S=21");
                    },
                    stepon_22 = @install() {
                        subtext("S=22");
                    },
                    stepon_23 = @install() {
                        subtext("S=23");
                    },
                    stepon_24 = @install() {
                        subtext("S=24");
                    },
                    stepon_25 = @install() {
                        subtext("S=25");
                    },
                    stepon_26 = @install() {
                        subtext("S=26");
                    },
                    stepon_27 = @install() {
                        subtext("S=27");
                    },
                    stepon_28 = @install() {
                        subtext("S=28");
                    },
                    stepon_29 = @install() {
                        subtext("S=29");
                    },

                    stepon_30 = @install() {
                        subtext("S=30");
                    },
                    elevator = @install() {
                        map_transition(town_temple, elevator, NONE);
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() {
                        subtext("B=0");
                    },
                    b_trigger_1 = @install() {
                        subtext("B=1");
                    },
                }

                fun open_doors(open) {
                    if(open) {
                        object[0x03] = 0x01; // NE

                        object[0x07] = 0x01; // SW
                        object[0x08] = 0x01; // SE

                        object[0x09] = 0x01; // NW
                    } else {
                        object[0x03] = 0x00; // NE

                        object[0x07] = 0x00; // SW
                        object[0x08] = 0x00; // SE

                        object[0x09] = 0x00; // NW
                    }
                }

                @install()
                fun debug_triggered() {
                    nop();

                    destroy(SCRIPT_OWNER);
                }

                fun trigger_enter() {
                    if!(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                        add_debug_entity(0d69, 0d87, reference(debug_triggered));
                    }

                    open_doors(True);

                    default_init_room(True, False);
                }
            };
        };
    };

    area town_level_0() {
        map town_center(0x08) {
            enum entrance {
                north = entrance(0x2c, 0x03, SOUTH),
                east = entrance(0x5b, 0x37, WEST),
                west_1 = entrance(0x01, 0x40, EAST),
                west_2 = entrance(0x01, 0x14, EAST),

                door = entrance(0x08, 0x5d, SOUTH),

                crash = entrance(0x2c, 0x39, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
            }

            fun open_door(open) {
                if(open) {
                    tile_animate(0x20, 0xff, 0x02);
                } else {
                    tile_animate(0x20, 0xff, 0x00);
                }
            }

            enum stepon_trigger {
                exit_east = @install() {
                    map_transition(town_market, west, EAST);
                },
                exit_door = @install() {
                    open_door(True);
                    map_transition(town_room, south, NORTH);
                },
                exit_north = @install() {
                    map_transition(town_level_1, south, NORTH);
                },
                exit_west_1 = @install() {
                    map_transition(town_bridge, east, WEST);
                },
                exit_west_2 = @install() {
                    map_transition(town_market_alley, east, WEST);
                },
            }

            enum b_trigger {
                guard_south = @install() {
                    subtext("B=0");
                },
                guard_center_1 = @install() {
                    subtext("B=1");
                },
                guard_center_2 = @install() {
                    subtext("B=2");
                },
                guard_north = @install() {
                    subtext("B=3");
                },
                b_trigger_4 = @install() {
                    subtext("B=4");
                },
            }

            fun trigger_enter() {
                open_door(False);

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // north
                    add_enemy(PIRATE_ANCHOR, 0d16, 0d20);

                    // east
                    add_enemy(RAT, 0d86, 0d54);

                    // west
                    add_enemy(SLIME, 0d7, 0d59);
                }

                if!(FLAG.IN_ANIMATION) {
                    crash_both();
                }

                object[0x0d] = 0x02;

                // object[0x0e] = 0x01;

                // object[0x00] = 0x01; // show crowd_1_1
                // object[0x01] = 0x01; // show crowd_1_2
                // object[0x02] = 0x01; // show crowd_1_3
                // object[0x03] = 0x01; // show crowd_1_4
                // object[0x04] = 0x01; // show crowd_1_5
                // object[0x05] = 0x01; // show crowd_2_1
                // object[0x06] = 0x01; // show crowd_2_2
                // object[0x07] = 0x01; // show crowd_2_3
                // object[0x08] = 0x01; // show crowd_2_4
                // object[0x09] = 0x01; // show crowd_2_5
                // object[0x0a] = ???
                // object[0x0b] = same as crowd_2_2 ???
                // object[0x0c] = same as crowd_1_3 ???
                // object[0x0d] = 0x02; // show statue, crater, statue_reparing
                // object[0x0e] = 0x01; // show guard_statue

                bonfire(0x2c, 0x3a); // TODO: same map id as inbetwixx

                default_init_room(False, False);
            }
        };

        map town_room(0x30) { // variant: tavern
            enum entrance {
                south = entrance(0x6f, 0x51, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
            }

            enum stepon_trigger {
                monk = nop(),
                monk_trigger_west = nop(),
                monk_trigger_south = nop(),
                exit_cave_hammock = nop(),
                exit_south = @install() {
                    map_transition(town_center, door, SOUTH);
                },
                exit_ship_small = nop(),
                exit_cave_crates = nop(),
                exit_cave_monk = nop(),
            }

            enum b_trigger {
                gourd_hammock = nop(),
                gourd_monk_1 = nop(),
                gourd_monk_2 = nop(),
                gourd_crates = nop(),
                groud = @install() {
                    _loot_chest(0x06, LOOT_REWARD.TICKET_FOR_EXHIBITION, 0x01);
                },
                gourd_ship = nop(),
                barkeeper = @install() {
                    subtext("B=6");
                },
            }

            enum ROOM {
                RIDER_1_ID = memory_tmp(),
                MOUNT_1_ID = memory_tmp(),
                RIDER_2_ID = memory_tmp(),
                MOUNT_2_ID = memory_tmp(),
                RIDER_3_ID = memory_tmp(),
                MOUNT_3_ID = memory_tmp(),

                HITS_BOXER_1 = memory_tmp(),
                HITS_BOXER_2 = memory_tmp(),
                HITS_BOXER_3 = memory_tmp(),

                HITS_THRESHOLD = 0x05,

                BOXERS_BEATEN = memory_tmp(),

                BOXERS_BEATEN_THRESHOLD = 0x03,
            }

            @install()
            @async()
            fun stack_boxer1() {
                while!(dead(ROOM.RIDER_1_ID)) {
                    ROOM.RIDER_1_ID[X] = ROOM.MOUNT_1_ID[X];
                    ROOM.RIDER_1_ID[Y] = ROOM.MOUNT_1_ID[Y];
                    yield();
                }
            }
            @install()
            @async()
            fun stack_boxer2() {
                while!(dead(ROOM.RIDER_2_ID)) {
                    ROOM.RIDER_2_ID[X] = ROOM.MOUNT_2_ID[X];
                    ROOM.RIDER_2_ID[Y] = ROOM.MOUNT_2_ID[Y];
                    yield();
                }
            }
            @install()
            @async()
            fun stack_boxer3() {
                while!(dead(ROOM.RIDER_3_ID)) {
                    ROOM.RIDER_3_ID[X] = ROOM.MOUNT_3_ID[X];
                    ROOM.RIDER_3_ID[Y] = ROOM.MOUNT_3_ID[Y];
                    yield();
                }
            }

            fun boxer_hit(rider_id, mount_id, hit_counter) { // TODO: buggy
                hit_counter += 0x01;

                debug_memory(hit_counter, ROOM.HITS_THRESHOLD);

                if(hit_counter >= ROOM.HITS_THRESHOLD) {
                    add_enemy(PLACEHOLDER, 0x00, 0x00);
                    animate(LAST_ENTITY, ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                    <LAST_ENTITY>[X] = rider_id[X];
                    <LAST_ENTITY>[Y] = rider_id[Y];

                    destroy(mount_id);
                    destroy(rider_id);

                    ROOM.BOXERS_BEATEN += 0x01;
                    
                }
            }

            fun boxer_killed() {
                ROOM.BOXERS_BEATEN += 0x01;

                if(ROOM.BOXERS_BEATEN >= ROOM.BOXERS_BEATEN_THRESHOLD) {
                    souls_boss_defeated();

                    set(SOULS_MEMORY.DEAD_TAVERN_BOXERS);
                }
            }

            @install()
            fun boxer1dead() {
                // boxer_hit(ROOM.RIDER_1_ID, ROOM.MOUNT_1_ID ,ROOM.HITS_BOXER_1);

                ROOM.HITS_BOXER_1 += 0x01;

                if(ROOM.HITS_BOXER_1 >= ROOM.HITS_THRESHOLD) {
                    add_enemy(PLACEHOLDER, 0x00, 0x00);
                    animate(LAST_ENTITY, ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                    <LAST_ENTITY>[X] = ROOM.RIDER_1_ID[X];
                    <LAST_ENTITY>[Y] = ROOM.RIDER_1_ID[Y];

                    destroy(ROOM.MOUNT_1_ID);
                    destroy(ROOM.RIDER_1_ID);

                    boxer_killed();
                }
            }
            @install()
            fun boxer2dead() {
                // boxer_hit(ROOM.RIDER_2_ID, ROOM.MOUNT_2_ID ,ROOM.HITS_BOXER_2);

                ROOM.HITS_BOXER_2 += 0x01;

                if(ROOM.HITS_BOXER_2 >= ROOM.HITS_THRESHOLD) {
                    add_enemy(PLACEHOLDER, 0x00, 0x00);
                    animate(LAST_ENTITY, ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                    <LAST_ENTITY>[X] = ROOM.RIDER_2_ID[X];
                    <LAST_ENTITY>[Y] = ROOM.RIDER_2_ID[Y];

                    destroy(ROOM.RIDER_2_ID);
                    destroy(ROOM.MOUNT_2_ID);

                    boxer_killed();
                }
            }
            @install()
            fun boxer3dead() {
                // boxer_hit(ROOM.RIDER_3_ID, ROOM.MOUNT_3_ID ,ROOM.HITS_BOXER_3);

                ROOM.HITS_BOXER_3 += 0x01;

                if(ROOM.HITS_BOXER_3 >= ROOM.HITS_THRESHOLD) {
                    add_enemy(PLACEHOLDER, 0x00, 0x00);
                    animate(LAST_ENTITY, ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                    <LAST_ENTITY>[X] = ROOM.RIDER_3_ID[X];
                    <LAST_ENTITY>[Y] = ROOM.RIDER_3_ID[Y];

                    destroy(ROOM.RIDER_3_ID);
                    destroy(ROOM.MOUNT_3_ID);

                    boxer_killed();
                }
            }

            fun add_boxer(id_rider, id_mount, enemy:ENEMY, x, y, trigger) {
                add_enemy(enemy, x, y);
                id_rider = <LAST_ENTITY>;
                <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
                attach_script(LAST_ENTITY, DAMAGE, trigger);
                add_enemy(MAGGOT_RED, x, y);
                id_mount = <LAST_ENTITY>;
                attribute(LAST_ENTITY, INVISIBLE, True);
                attribute(LAST_ENTITY, INVINCIBLE_TEMP, True);
            }

            fun init_room(index) {
                if(index == 0x00) {
                    init_map(0x00, 0x00, 0x2e, 0x2a); // hammock
                } else if(index == 0x01) {
                    init_map(0x00, 0x38, 0x26, 0x5c); // crates
                } else if(index == 0x02) {
                    init_map(0x32, 0x36, 0x56, 0x52); // ship
                } else if(index == 0x03) {
                    // init_map(0x58, 0x30, 0x86, 0x4e); // tavern
                    init_map(0x58, 0x30, 0x86, 0x50); // tavern
                } else if(index == 0x04) {
                    init_map(0x40, 0x00, 0x66, 0x24); // monk
                }
            }

            fun trigger_enter() {
                init_room(0x03);

                if!(SOULS_MEMORY.DEAD_TAVERN_BOXERS) {
                    add_boxer(ROOM.RIDER_1_ID, ROOM.MOUNT_1_ID, BOXER_1, 0x5c, 0x49, reference(boxer1dead));
                    add_boxer(ROOM.RIDER_2_ID, ROOM.MOUNT_2_ID, BOXER_2, 0x80, 0x3d, reference(boxer2dead));
                    add_boxer(ROOM.RIDER_3_ID, ROOM.MOUNT_3_ID, BOXER_2, 0x80, 0x45, reference(boxer3dead));

                    stack_boxer1();
                    stack_boxer2();
                    stack_boxer3();
                }

                default_init_room(False, False);
            }
        };

        map town_market(0x0a) {
            fun open_doors(open) {
                if(open) {
                    // sound(DOOR);
                    tile_animate(0x20, 0xff, 0x02);
                } else {
                    tile_animate(0x20, 0xff, 0x00);
                }
            }

            @install()
            @async()
            fun enter_from_door() {
                open_doors(True);
                sleep(0d20);
                open_doors(False);
            }
            fun enter_from_side() {
                open_doors(False);
            }

            enum entrance {
                north_1 = entrance(0x0f, 0x08, SOUTH, { enter_from_side(); }),
                north_2 = entrance(0x30, 0x08, SOUTH, { enter_from_side(); }),
                north_3 = entrance(0x54, 0x08, SOUTH, { enter_from_side(); }),
                east_1 = entrance(0x5f, 0x18, WEST, { enter_from_side(); }),
                east_2 = entrance(0x5f, 0x46, WEST, { enter_from_side(); }),
                west = entrance(0x05, 0x4b, EAST, { enter_from_side(); }),

                door_1 = entrance(0x5c, 0x3a, SOUTH, { enter_from_door(); }),
                door_2 = entrance(0x5a, 0x72, SOUTH, { enter_from_door(); }),

                crash = entrance(0x45, 0x7b, NONE, { enter_from_side(); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
                // default = soundtrack(0x40, 0xff)
            }

            enum stepon_trigger {
                prophet_south = @install() {
                    subtext("S=0");
                },
                prophet_east = @install() {
                    subtext("S=1");
                },
                prophet_north = @install() {
                    subtext("S=2");
                },
                exit_north_2 = @install() {
                    subtext("S=3");
                },
                exit_north_3 = @install() {
                    subtext("S=4");
                },
                exit_north_1 = @install() {
                    subtext("S=5");
                },
                exit_east_1 = @install() {
                    subtext("S=6");
                },
                exit_east_2 = @install() {
                    subtext("S=7");
                },
                exit_west = @install() {
                    map_transition(town_center, east, WEST);
                },
                door_1 = @install() {
                    // subtext("Does not open from this side.");

                    control(NONE);
                    face(ACTIVE, NORTH);

                    open_doors(True);
                    sleep(0x20);
                    map_transition(town_arena_entry, south_2, NORTH);
                },

                door_2 = @install() {
                    control(NONE);
                    face(ACTIVE, NORTH);

                    open_doors(True);
                    sleep(0x20);
                    map_transition(town_market, east_1, NORTH);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                b_trigger_2 = @install() {
                    subtext("B=2");
                },
                b_trigger_3 = @install() {
                    subtext("B=3");
                },
                b_trigger_4 = @install() {
                    subtext("B=4");
                },
                b_trigger_5 = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                b_trigger_7 = @install() {
                    subtext("B=7");
                },
                b_trigger_8 = @install() {
                    subtext("B=8");
                },
                b_trigger_9 = @install() {
                    subtext("B=9");
                },

                b_trigger_10 = @install() {
                    subtext("B=10");
                },
                b_trigger_11 = @install() {
                    subtext("B=11");
                },
                b_trigger_12 = @install() {
                    subtext("B=12");
                },
                b_trigger_13 = @install() {
                    subtext("B=13");
                },
                b_trigger_14 = @install() {
                    subtext("B=14");
                },
                b_trigger_15 = @install() {
                    subtext("B=15");
                },
                b_trigger_16 = @install() {
                    subtext("B=16");
                },
                b_trigger_17 = @install() {
                    subtext("B=17");
                },
                b_trigger_18 = @install() {
                    subtext("B=18");
                },
                b_trigger_19 = @install() {
                    subtext("B=19");
                },

                b_trigger_20 = @install() {
                    subtext("B=20");
                },
                b_trigger_21 = @install() {
                    subtext("B=21");
                },
                b_trigger_22 = @install() {
                    subtext("B=22");
                },
                b_trigger_23 = @install() {
                    subtext("B=23");
                },
                b_trigger_24 = @install() {
                    subtext("B=24");
                },
                b_trigger_25 = @install() {
                    subtext("B=25");
                },
                b_trigger_26 = @install() {
                    subtext("B=26");
                },
                b_trigger_27 = @install() {
                    subtext("B=27");
                },
                b_trigger_28 = @install() {
                    subtext("B=28");
                },
                b_trigger_29 = @install() {
                    subtext("B=29");
                },

                b_trigger_30 = @install() {
                    subtext("B=30");
                },
                b_trigger_31 = @install() {
                    subtext("B=31");
                },
                b_trigger_32 = @install() {
                    subtext("B=32");
                },
                b_trigger_33 = @install() {
                    subtext("B=33");
                },
                b_trigger_34 = @install() {
                    subtext("B=34");
                },
                b_trigger_35 = @install() {
                    subtext("B=35");
                },
                b_trigger_36 = @install() {
                    subtext("B=36");
                },
                b_trigger_37 = @install() {
                    subtext("B=37");
                },
                b_trigger_38 = @install() {
                    subtext("B=38");
                },
                b_trigger_39 = @install() {
                    subtext("B=39");
                },

                b_trigger_40 = @install() {
                    subtext("B=40");
                },
                b_trigger_41 = @install() {
                    subtext("B=41");
                },
                b_trigger_42 = @install() {
                    subtext("B=42");
                },
                b_trigger_43 = @install() {
                    subtext("B=43");
                },
                b_trigger_44 = @install() {
                    subtext("B=44");
                },
                b_trigger_45 = @install() {
                    subtext("B=45");
                },
                b_trigger_46 = @install() {
                    subtext("B=46");
                },
                b_trigger_47 = @install() {
                    subtext("B=47");
                },
                b_trigger_48 = @install() {
                    subtext("B=48");
                },
                b_trigger_49 = @install() {
                    subtext("B=49");
                },

                b_trigger_50 = @install() {
                    subtext("B=50");
                },
                b_trigger_51 = @install() {
                    subtext("B=51");
                },
                b_trigger_52 = @install() {
                    subtext("B=52");
                },
                b_trigger_53 = @install() {
                    subtext("B=53");
                },
                b_trigger_54 = @install() {
                    subtext("B=54");
                },
                b_trigger_55 = @install() {
                    subtext("B=55");
                },
                b_trigger_56 = @install() {
                    subtext("B=56");
                },
                b_trigger_57 = @install() {
                    subtext("B=57");
                },
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // west
                    add_enemy(RAT, 0d19, 0d59);
                    add_enemy(RAT, 0d23, 0d100);

                    // east
                    add_enemy(RAT, 0d73, 0d49);
                    add_enemy(RAT, 0d81, 0d81);
                }

                if!(FLAG.IN_ANIMATION) {
                    crash_both();
                }

                object[0x00] = 0x01; // remove vendor_1_1 (spice guy)
                object[0x01] = 0x01; // remove vendor_1_2 (rice lady)
                object[0x02] = 0x01; // remove guard_1_1 (next to rice lady)
                object[0x03] = 0x01; // remove vendor_1_3 (fish lady)
                object[0x04] = 0x01; // remove vendor_1_4 (other rice guy)
                object[0x05] = 0x01; // remove vendor_2_1 (spoon lady)
                object[0x06] = 0x01; // remove vendor_2_2 (egg guy)
                object[0x07] = 0x01; // remove vendor_3_1 (jackal lady)
                object[0x08] = 0x01; // remove vendor_2_3 (pot lady)
                object[0x09] = 0x01; // remove person_4_1 (next to pot lady, feeds chicken)
                object[0x0a] = 0x01; // remove vendor_3_2 (amulet guy)
                object[0x0b] = 0x01; // remove vendor_3_3 (chest lady)
                // object[0x0c] = 0x01; // remove ???
                object[0x0d] = 0x01; // remove vendor_3_4 (polish lady)
                object[0x0e] = 0x01; // remove guard_4_1 (next to entrance)
                object[0x0f] = 0x01; // remove vendor_4_1 (other rice lady)
                object[0x10] = 0x01; // remove vendor_4_2 (other beads lady)
                object[0x11] = 0x01; // remove person_4_2 (next to vendor_4_2, juggler)
                object[0x12] = 0x01; // remove person_4_3 (next to vendor_4_2, juggler crowd)
                object[0x13] = 0x01; // remove vendor_4_3 (tapestry lady)
                object[0x14] = 0x01; // remove vendor_5_4 (currency lady)
                object[0x15] = 0x01; // remove vendor_5_1 (perfume lady)
                object[0x16] = 0x01; // remove vendor_5_2 (other spice guy)
                object[0x17] = 0x01; // remove vendor_5_3 (chicken guy)
                object[0x18] = 0x01; // remove vendor_6_1 (beads lady)
                object[0x19] = 0x01; // remove vendor_7_2 (tablet lady)
                object[0x1a] = 0x01; // remove vendor_8_1 (other beads guy)
                object[0x1b] = 0x01; // remove vendor_8_2 (jade disk lady)
                object[0x1c] = 0x01; // remove vendor_9_1 (heart lady)
                object[0x1d] = 0x01; // remove vendor_9_2 (helmet guy)
                object[0x1e] = 0x01; // remove vendor_7_1 (scarab lady)
                object[0x1f] = 0x01; // remove vendor_10_1 (sunstone guy)
                object[0x20] = 0x01; // remove vendor_10_2 (moxa lady)
                object[0x21] = 0x01; // remove vendor_10_3 (appraisal lady)
                object[0x22] = 0x01; // remove vendor_10_4 (sheath guy)
                // object[0x23] = 0x01; // remove ???
                object[0x24] = 0x01; // remove vendor_11_1 (beads lady)
                object[0x24] = 0x01; // remove vendor_10_5 (glove lady)
                // object[0x25] = 0x01; // remove ???
                object[0x26] = 0x01; // remove basket (between vendor_1_1 ans vendor_1_2)
                object[0x27] = 0x04; // remove prophet (goat, chicke, basket)

                fade_in();
            }
        };

        map town_arena_entry(0x0c) { // variant: shop
            enum entrance {
                south_1 = entrance(0x51, 0x1b, NORTH),
                south_2 = entrance(0x0d, 0x1b, NORTH),

                crash = entrance(0x0d, 0x15, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
            }

            enum stepon_trigger {
                exit_south_2 = @install() {
                    map_transition(town_market, door_1, SOUTH);
                },
                exit_inn_south = nop(),
                atlas = @install() {
                    subtext("S=2");
                },
                exit_south_1 = @install() {
                    if(MEMORY.TICKET_FOR_EXHIBITION < 0x01) {
                        dialog("[SLOW]Hey, you have to buy a ticket first![B]");

                        walk(ACTIVE, COORDINATE_RELATIVE_DIRECT, 0x00, -0x02, ACTIVE);
                    } else {
                        question("[SLOW]Please enter a ticket[CHOICE]Yes.[CHOICE]No.");

                        if(MEMORY.QUESTION_ANSWER == 0x00) {
                            MEMORY.TICKET_FOR_EXHIBITION -= 0x01;

                            map_transition(gladiator_arena, south, SOUTH);
                        }
                    }
                },
            }

            enum ROOM {
                TICKET_PRICE = 0x05,
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    show_currency(True);

                    if_currency(MEMORY.CURRENCY_CURRENT < ROOM.TICKET_PRICE) {
                        dialog("[SLOW]Welcome to the one and only...[B]Oh please come back if you have money.[B]");
                    } else {
                        if(MEMORY.TICKET_FOR_EXHIBITION == 0x01) {
                            dialog("[SLOW]Feel free to enter the arena directly.[B]");
                        } else if(MEMORY.TICKET_FOR_EXHIBITION > 0x01) {
                            MEMORY.STRING_PARAMETER_1 = MEMORY.TICKET_FOR_EXHIBITION;
                            dialog("[SLOW]Feel free to enter the arena directly.[B]");
                        }

                        MEMORY.STRING_PARAMETER_1 = ROOM.TICKET_PRICE;
                        question("[SLOW]Welcome to the bomb arena.[B]Tickets cost [MEM1] Souls[CHOICE]Yes.[CHOICE]No.");

                        if(MEMORY.QUESTION_ANSWER == 0x00) {
                            currency_take(TALONS, ROOM.TICKET_PRICE);
                            show_currency(True);

                            sound(PURCHASE);
                            MEMORY.TICKET_FOR_EXHIBITION += 0x01;
                        }
                    }

                    sleep(0x10);
                    show_currency(False);
                },
                b_trigger_1 = nop(),
            }

            fun init_room(index) {
                if(index == 0x01) {
                    init_map(0x02, 0x00, 0x5a, 0x1c);
                } else if(index == 0x02) {
                    init_map(0x00, 0x24, 0x24, 0x42);
                }
            }

            fun trigger_enter() {
                init_room(0x01);

                // bonfire(0x57, 0x08);
                bonfire(0x07, 0x10);

                default_init_room(False, False);
            }
        };

        map gladiator_arena(0x1d) {
            enum entrance {
                north_cinematic = entrance(0x20, 0x07, NONE),
                south = entrance(0x22, 0x69, NORTH), // 0x22, 0x6a

                center = entrance(0x20, 0x53, NONE),
            }

            enum soundtrack {
                default = soundtrack(0x54, 0xff)
            }

            enum ROOM {
                DEBUG = False,

                MANAGER_ID = memory_tmp(),

                PROGRESS = memory(),

                FIGHT_IN_PROGRESS = flag_tmp(),

                PILLAR_OPENED = flag_tmp(),
                COLLECTIBLE_LOOTED = flag(),

                REWARD_1_KILLS = 0x02,
                REWARD_1_CLAIMED = flag(),
                REWARD_2_KILLS = 0x04,
                REWARD_2_CLAIMED = flag(),
                REWARD_3_KILLS = 0x06,
                REWARD_3_CLAIMED = flag(),
                REWARD_4_KILLS = 0x08,
                REWARD_4_CLAIMED = flag(),
            }

            @install()
            fun spawn_next_gladiator() {
                set(ROOM.FIGHT_IN_PROGRESS);

                if(ROOM.DEBUG) {
                    debug_memory(ROOM.PROGRESS, ROOM.PROGRESS);
                }

                if(ROOM.PROGRESS == 0x00) {
                    add_enemy(MOSQUITO, 0x20, 0x53);
                    attach_script(LAST_ENTITY, DEATH, reference(gladiator_dead));
                } else if(ROOM.PROGRESS == 0x01) {
                    add_enemy(BOY_BLACK, 0x20, 0x53);
                    attach_script(LAST_ENTITY, DEATH, reference(gladiator_dead));
                } else if(ROOM.PROGRESS == 0x02) {
                    add_enemy(VIGOR, 0x20, 0x53);
                    attach_script(LAST_ENTITY, DEATH, reference(gladiator_dead));
                } else if(ROOM.PROGRESS == 0x03) {
                    add_enemy(FOOTKNIGHT, 0x20, 0x53);
                    attach_script(LAST_ENTITY, DEATH, reference(gladiator_dead));
                } else {
                    subtext("todo...");
                }
            }

            @install()
            fun gladiator_dead() {
                unset(ROOM.FIGHT_IN_PROGRESS);

                ROOM.PROGRESS += 0x01;

                sound(0x6e);
                
                animate(ROOM.MANAGER_ID, LOOP, ANIMATION_ENEMY.TINY_FLEX);
                sleep(0xa0);
                animate(ROOM.MANAGER_ID, ONCE, ANIMATION_ALL.DEFAULT);

            }

            fun learn_levitate() {
                set(FLAG.LEVITATE);
                subtext("Levitate learned.");
                sleep(0x20);
                select_alchemy_with_preselection(LEVITATE);
            }

            fun claim_reward() {
                if((ROOM.PROGRESS >= ROOM.REWARD_1_KILLS) && !ROOM.REWARD_1_CLAIMED) {
                    set(ROOM.REWARD_1_CLAIMED);
                    
                    subtext("todo");

                    end();
                } else if((ROOM.PROGRESS >= ROOM.REWARD_2_KILLS) && !ROOM.REWARD_2_CLAIMED) {
                    set(ROOM.REWARD_2_CLAIMED);
                    
                    dialog("[SLOW]Let me teach you my secret formula.[B]");

                    learn_levitate();

                    dialog("[SLOW]This technique has been passed down for generations.[B]");

                    end();
                } else if((ROOM.PROGRESS >= ROOM.REWARD_3_KILLS) && !ROOM.REWARD_3_CLAIMED) {
                    set(ROOM.REWARD_3_CLAIMED);
                    
                    subtext("todo");

                    end();
                } else if((ROOM.PROGRESS >= ROOM.REWARD_4_KILLS) && !ROOM.REWARD_4_CLAIMED) {
                    set(ROOM.REWARD_4_CLAIMED);
                    
                    subtext("todo");

                    end();
                }
            }

            @install()
            fun manager_triggered() {
                if(ROOM.FIGHT_IN_PROGRESS) {
                    dialog("[SLOW]You should focus on your enemy.[B]");
                    end();
                }

                claim_reward();

                question("[SLOW]Ready for the next oponent?[CHOICE]Yes[CHOICE]No");

                if(MEMORY.QUESTION_ANSWER == 0x00) {
                    spawn_next_gladiator();
                } else if(MEMORY.QUESTION_ANSWER == 0x01) {
                    map_transition(town_arena_entry, south_1, NONE);
                }
            }

            fun show_bridge(show) {
                if(show) {
                    object[0x00] = 0x01;
                } else {
                    object[0x00] = 0x00;
                }
            }

            @install()
            fun collectible_triggered() {
                set(ROOM.COLLECTIBLE_LOOTED);

                collectible_collected();
            }

            @install()
            fun pillar_triggered() {
                set(ROOM.PILLAR_OPENED);

                object[0x01] = 0x01;

                animate(SCRIPT_OWNER, LOOP, ANIMATION_PLACEHOLDER.EXPLOSION_2);

                add_collectible(0x00, 0x36, 0x48, reference(collectible_triggered));

                sleep(0x20);
                destroy(SCRIPT_OWNER);
            }

            @install()
            fun debug_triggered() {
                learn_levitate();

                destroy(SCRIPT_OWNER);
            }

            fun trigger_enter() {
                init_map(0x00, 0x30, 0x40, 0x70);

                if(FLAG.DEBUG) {
                    if!(FLAG.LEVITATE) {
                        add_debug_entity(0x24, 0x47, reference(debug_triggered));
                    }
                }

                add_enemy_with_flags(TINY, 0x20, 0x42, INACTIVE);
                ROOM.MANAGER_ID = <LAST_ENTITY>;

                add_enemy(PLACEHOLDER, 0x20, 0x48);
                attach_script(LAST_ENTITY, TALK, reference(manager_triggered));

                show_bridge(True);
                default_init_room(False, False);
                character_selection(BOY);

                SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.BOMBS;

                sleep(0x10);
                show_bridge(False);

                if!(ROOM.COLLECTIBLE_LOOTED) {
                    // add_enemy(PLACEHOLDER, 0x36, 0x49);
                    add_enemy_with_flags(FACE_ENTITY, 0x35, 0x4a, 0x0004);
                    attach_script(LAST_ENTITY, DAMAGE, reference(pillar_triggered));
                } else {
                    object[0x01] = 0x01;
                }
            }
        };
    };

    map town_level_1(0x7c) {
        enum entrance {
            north = entrance(0x40, 0x0b, SOUTH),
            south = entrance(0x20, 0x77, NORTH),

            door_1_1_left = entrance(0x2c, 0x63, SOUTH),
            door_1_1_right = entrance(0x44, 0x63, SOUTH),
            door_1_2 = entrance(0x74, 0x63, SOUTH),
            door_1_3 = entrance(0xa2, 0x63, SOUTH),
            door_1_3_back = entrance(0x92, 0x4b, WEST),
            door_2_1 = entrance(0x8e, 0x29, SOUTH),
            door_2_1_back = entrance(0xb7, 0x1f, EAST),

            crash = entrance(0x5d, 0x5d, NONE),
        }

        enum soundtrack {
            default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
        }

        enum stepon_trigger {
            gate = @install() {
                subtext("S=0");
            },
            door_1_1_left = @install() {
                subtext("S=1");
            },
            door_1_1_right = @install() {
                subtext("S=2");
            },
            door_1_2 = @install() {
                subtext("S=3");
            },
            door_1_3 = @install() {
                subtext("S=4");
            },
            door_2_1 = @install() {
                subtext("S=5");
            },
            exit_south = @install() {
                map_transition(town_center, north, SOUTH);
            },
            stepon_7 = @install() {
                subtext("S=7");
            },
            exit_north = @install() {
                map_transition(town_level_2, south, NORTH);
            },
            door_2_1_back = @install() {
                subtext("S=9");
            },

            door_1_3_back = @install() {
                subtext("S=10");
            },
        }

        fun trigger_enter() {
            object[0x00] = 0x7e;

            fade_in();

            if!(FLAG.IN_ANIMATION) {
                <DOG>[X] -= 0x20;
                <DOG>[Y] = <DOG>[Y];
                crash_land(BOTH);
            }
        }
    };

    map town_level_2(0x7b) {
        enum entrance {
            north = entrance(0x20, 0x01, SOUTH),
            south = entrance(0x1c, 0x5f, NORTH),
            west = entrance(0x01, 0x3e, EAST),

            door_1 = entrance(0x2a, 0x01, SOUTH),
            door_2 = entrance(0x2a, 0x01, SOUTH),
            door_3 = entrance(0x2a, 0x01, SOUTH),
            door_4 = entrance(0x2a, 0x01, SOUTH),
            door_5 = entrance(0x2a, 0x01, SOUTH),

            crash = entrance(0x6d, 0x41, NONE),
        }

        enum soundtrack {
            default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
        }

        enum stepon_trigger {
            door_1_1_back = @install() {
                subtext("S=0");
            },
            exit_west = @install() {
                map_transition(town_temple, east_2, WEST);
            },
            exit_north = @install() {
                map_transition(town_level_3, south, NORTH);
            },
            exit_south = @install() {
                map_transition(town_level_1, north, SOUTH);
            },
            door_1_1 = @install() {
                subtext("S=4");
            },
            door_2_1 = @install() {
                subtext("S=5");
            },
            door_2_2 = @install() {
                subtext("S=6");
            },
            door_2_3 = @install() {
                subtext("S=7");
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
        }

        fun block_market(block) {
            if(block) {
                object[0x1a] = 0x01;
            }  else {
                object[0x1a] = 0x00;
            }
        }

        fun trigger_enter() {
            if!(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                block_market(True);
            }

            fade_in();

            if!(FLAG.IN_ANIMATION) {
                <DOG>[X] -= 0x20;
                <DOG>[Y] = <DOG>[Y];
                crash_land(BOTH);
            }
        }
    };

    map town_level_3(0x0b) {
        enum entrance {
            north = entrance(0x56, 0x1f, SOUTH),
            south = entrance(0x56, 0x45, NORTH),

            crash = entrance(0x98, 0x15, NONE),
        }

        enum soundtrack {
            default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
        }

        enum stepon_trigger {
            stepon_0 = @install() {
                subtext("S=0");
            },
            exit_south = @install() {
                map_transition(town_level_2, north, SOUTH);
            },
            stepon_2 = @install() {
                subtext("S=2");
            },
            exit_north = @install() {
                subtext("S=3");
            },
            stepon_4 = @install() {
                subtext("S=4");
            },
            stepon_5 = @install() {
                subtext("S=5");
            },
            stepon_6 = @install() {
                subtext("S=6");
            },
            stepon_7 = @install() {
                subtext("S=7");
            },
            stepon_8 = @install() {
                subtext("S=8");
            },
            stepon_9 = @install() {
                subtext("S=9");
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
        }

        fun open_gate(open) {
            if(open) {
                object[0x00] = 0x7e;
            } else {
                object[0x00] = 0x00;
            }
        }

        enum BOSS {
            DEBUG = False,

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            BOSS_1_ID = memory_tmp(),
            BOSS_2_ID = memory_tmp(),
            BOSS_REMAINING_ID = memory_tmp(),

            LAST_DAMAGED = memory_tmp(),
            RNG = memory_tmp(),

            P1_SPELL = CAST.DISRUPT,
            P1_SPELL_LEVEL = 0x30,

            P2_TIMER_THRARSHOLD = 0x258, // 600
        }

        fun puppet_damaged(self, other, boss_id, dance_animation) {
            if(BOSS.PHASE == 0x00) {
                BOSS.PHASE = 0x01;

                // if(<SCRIPT_OWNER>[HP] > 0x00) {
                    cast(SCRIPT_OWNER, SCRIPT_OWNER, CAST.FORCEFIELD, 0x00);
                // }
            } else if(BOSS.PHASE == 0x01) {
                if(BOSS.LAST_DAMAGED == boss_id) {
                    sleep(0x05);
                    animate(SCRIPT_OWNER, LOOP, dance_animation);
                    sleep(0x20);
                    cast(SCRIPT_OWNER, BOY, BOSS.P1_SPELL, BOSS.P1_SPELL_LEVEL);
                    animate(SCRIPT_OWNER, ONCE, ANIMATION_ALL.DEFAULT);
                }
                
                BOSS.LAST_DAMAGED = boss_id;

                if(dead(<SCRIPT_OWNER>)) {
                    BOSS.BOSS_REMAINING_ID = other;
                    BOSS.PHASE = 0x02;
                }
            }
        }

        @install()
        fun damage_1() {
            puppet_damaged(BOSS.BOSS_1_ID, BOSS.BOSS_2_ID, 0x11, ANIMATION_ENEMY.PUPPET_1_DANCE);
        }
        @install()
        fun damage_2() {
            puppet_damaged(BOSS.BOSS_2_ID, BOSS.BOSS_1_ID, 0x22, ANIMATION_ENEMY.PUPPET_2_DANCE);
        }

        @install()
        @async()
        fun boss_ai() {
            if(BOSS.DEBUG) {
                subtext("phase 0");
            }
            
            while(BOSS.PHASE == 0x00) {
                yield();
            }

            if(BOSS.DEBUG) {
                subtext("phase 1");
            }
            
            while(BOSS.PHASE == 0x01) {
                yield();
            }

            if(BOSS.DEBUG) {
                subtext("phase 2");
            }

            BOSS.TIMER = 0x0000;

            while!(dead(BOSS.BOSS_REMAINING_ID)) {
                if(BOSS.TIMER > BOSS.P2_TIMER_THRARSHOLD) {
                    BOSS.TIMER = 0x0000;
                    BOSS.RNG = randrange(0x03);

                    if(BOSS.BOSS_REMAINING_ID == BOSS.BOSS_1_ID) {
                        if(BOSS.RNG == 0x00) {
                            animate(BOSS.BOSS_REMAINING_ID, ONCE, ANIMATION_ENEMY.PUPPET_1_DANCE);

                            cast(BOSS.BOSS_REMAINING_ID, BOY, CAST.COROSION, 0x10);
                            cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, CAST.FORCEFIELD, 0x00);
                        } else if(BOSS.RNG == 0x01) {
                            animate(BOSS.BOSS_REMAINING_ID, ONCE, ANIMATION_ENEMY.PUPPET_1_DANCE);

                            cast(BOSS.BOSS_REMAINING_ID, BOY, CAST.CONFOUND, 0x10);
                        } else if(BOSS.RNG == 0x02) {
                            cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, CAST.FORCEFIELD, 0x00);
                            animate(BOSS.BOSS_REMAINING_ID, LOOP, ANIMATION_ENEMY.PUPPET_1_DANCE);
                        }
                    } else {
                        if(BOSS.RNG == 0x00) {
                            animate(BOSS.BOSS_REMAINING_ID, ONCE, ANIMATION_ENEMY.PUPPET_2_DANCE);

                            cast(BOY, BOY, CAST.COROSION, 0x10);
                            cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, CAST.FORCEFIELD, 0x00);
                        } else if(BOSS.RNG == 0x01) {
                            animate(BOSS.BOSS_REMAINING_ID, ONCE, ANIMATION_ENEMY.PUPPET_2_DANCE);

                            cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, CAST.HEAL, 0x10);
                        } else if(BOSS.RNG == 0x02) {
                            cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, CAST.FORCEFIELD, 0x00);
                            animate(BOSS.BOSS_REMAINING_ID, LOOP, ANIMATION_ENEMY.PUPPET_2_DANCE);
                        }
                    }
                } else {
                    BOSS.TIMER += 0x01;
                }

                yield();
            }

            if(BOSS.DEBUG) {
                subtext("yatta");
            }
        }

        fun puppet_1(x, y) {
            add_enemy(PUPPET_1, x, y);
            animate(LAST_ENTITY, LOOP, ANIMATION_ENEMY.PUPPET_1_DANGLING);
            attribute(LAST_ENTITY, ROOT, True);
        }
        fun puppet_2(x, y) {
            add_enemy(PUPPET_2, x, y);
            animate(LAST_ENTITY, LOOP, ANIMATION_ENEMY.PUPPET_2_DANGLING);
            attribute(LAST_ENTITY, ROOT, True);
        }

        fun trigger_enter() {
            open_gate(True);

            fade_in();

            if!(FLAG.IN_ANIMATION) {
                <DOG>[X] -= 0x20;
                <DOG>[Y] = <DOG>[Y];
                crash_land(BOTH);
            }

            // puppet_1(0x40, 0x29);
            // puppet_1(0x6c, 0x29);
            // puppet_2(0x56, 0x30);


            puppet_1(0x4b, 0x29);
            attach_script(LAST_ENTITY, DAMAGE, reference(damage_1));
            BOSS.BOSS_1_ID = <LAST_ENTITY>;

            puppet_2(0x61, 0x29);
            attach_script(LAST_ENTITY, DAMAGE, reference(damage_2));
            BOSS.BOSS_2_ID = <LAST_ENTITY>;

            boss_ai();
        }
    };
};

map town_bridge(0x1f) {
    enum entrance {
        east = entrance(0x63, 0x1d, WEST),
        west = entrance(0x01, 0x21, EAST)
    }

    enum soundtrack {
        default = soundtrack(0x68, 0xff)
    }

    enum stepon_trigger {
        exit_east = @install() {
            map_transition(town_center, west_1, EAST);
        },
        exit_west = @install() {
            map_transition(bog_curve, east, WEST);
        }
    }

    fun open_east_exit(open) {
        if(open) {
           object[0x00] = 0x00; 
        } else {
            object[0x00] = 0x7e;
        }
    }
    fun open_bridge(open) {
        if(open) {
           object[0x07] = 0x07e; 
        } else {
            object[0x07] = 0x00;
        }
    }

    enum ROOM {
        RIDDLE_SOLVED = flag(),

        RIDDLE_PROGRESS = memory_tmp(),
    }

    fun riddle_solved() {
        set(ROOM.RIDDLE_SOLVED);

        subtext("yatta");
    }

    @install()
    fun pillar_triggered() {
        if(
            (<ACTIVE> != <BOY>) ||
            (
                (MEMORY.CURRENT_WEAPON != WEAPON_INDEX.AXE_2) &&
                (MEMORY.CURRENT_WEAPON != WEAPON_INDEX.AXE_3) &&
                (MEMORY.CURRENT_WEAPON != WEAPON_INDEX.AXE_4)
            )
        ) {
            animate(ACTIVE, ONCE, ANIMATION_ALL.SLASH_1);
            end();
        }

        animate(BOY, ONCE, ANIMATION_ALL.SLASH_2);

        if((ROOM.RIDDLE_PROGRESS == 0x00) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x01)) {
            ROOM.RIDDLE_PROGRESS += 0x01;
        } else if((ROOM.RIDDLE_PROGRESS == 0x01) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x02)) {
            ROOM.RIDDLE_PROGRESS += 0x01;
        } else if((ROOM.RIDDLE_PROGRESS == 0x02) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x03)) {
            ROOM.RIDDLE_PROGRESS += 0x01;
        } else if((ROOM.RIDDLE_PROGRESS == 0x03) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x04)) {
            ROOM.RIDDLE_PROGRESS += 0x01;
        } else if((ROOM.RIDDLE_PROGRESS == 0x04) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x05)) {
            ROOM.RIDDLE_PROGRESS += 0x01;
        } else if((ROOM.RIDDLE_PROGRESS == 0x05) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x06)) {
            riddle_solved();
        }

        object[<SCRIPT_OWNER>[GENERAL_PURPOSE]] = 0x01;
        animate(SCRIPT_OWNER, LOOP, ANIMATION_PLACEHOLDER.EXPLOSION_2);

        sleep(0x30);
        destroy(SCRIPT_OWNER);

    }

    fun add_pillar(index, x, y) {
        add_enemy(PLACEHOLDER, x, y);
        attach_script(LAST_ENTITY, TALK, reference(pillar_triggered));
        <LAST_ENTITY>[GENERAL_PURPOSE] = index;
    }

    fun trigger_enter() {
        if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
            // east
            add_enemy(FLOWER_PURPLE, 0d93, 0d20);
            
            add_enemy(RAT, 0d68, 0d29);

            // west
            add_enemy(FLOWER_PURPLE, 0d34, 0d24);

            add_enemy(MONK, 0d25, 0d30);

            add_enemy(FLOWER_PURPLE, 0d15, 0d43);
        }

        if!(ROOM.RIDDLE_SOLVED) {
            add_pillar(0x01, 0d12, 0d24);
            add_pillar(0x02, 0d20, 0d24);
            add_pillar(0x03, 0d29, 0d24);

            add_pillar(0x04, 0d12, 0d38);
            add_pillar(0x05, 0d20, 0d38);
            add_pillar(0x06, 0d29, 0d38);
        } else {
            // object[0x01] = 0x7e;
            object[0x02] = 0x7e;
            // object[0x03] = 0x7e;

            object[0x04] = 0x7e;
            // object[0x05] = 0x7e;
            object[0x06] = 0x7e;
        }

        
        open_bridge(True);

        default_init_room(True, True);
    }
};

map bog_curve(0x20) {
    enum entrance {
        east = entrance(0x2b, 0x15, WEST),
        south = entrance(0x1b, 0x29, NORTH)
    }

    enum soundtrack {
        default = soundtrack(0x68, 0xff)
    }

    enum stepon_trigger {
        exit_east = @install() {
            map_transition(town_bridge, west, EAST);
        },
        exit_south = @install() {
            map_transition(bog_bridges, north, SOUTH);
        }
    }

    fun boss_defeated() {
        SOULS_MEMORY.BOSSES_DEFEATED_COUNTER += 0x01;
        SOULS_MEMORY.PROGRESS_COUNTER += 0x01;

        set(SOULS_MEMORY.DEAD_NARIS);
    }

    enum BOSS {
        DEBUG = True,

        RIDER_ID = memory_tmp(),
        MOUNT_ID = memory_tmp(),

        BOSS_HP = 0x07d0, // 0d2000

        GUESS_RNG = memory_tmp(),
        ANGER_LEVEL = 0x0000,

        P1_THRESHOLD = 0x00,
    }

    @install()
    fun naris_opening() {
        dialog("[SLOW]Hi![PAUSE:29] I'm Naris, the smartest boy in Ebon Keep.[PAUSE:51] I bet you're not as smart as me![B]");
    }

    // @install()
    fun spawn_enemies(enemy_id) {
        add_enemy(enemy_id, 0x00, 0x00);
        <LAST_ENTITY>[X] = BOSS.MOUNT_ID[X];
        <LAST_ENTITY>[Y] = BOSS.MOUNT_ID[Y];
        add_enemy(enemy_id, 0x00, 0x00);
        <LAST_ENTITY>[X] = BOSS.MOUNT_ID[X];
        <LAST_ENTITY>[Y] = BOSS.MOUNT_ID[Y];
    }

    @install()
    fun young_naris_question() {
        control_enemy(BOSS.MOUNT_ID, True);
        MEMORY.STRING_PARAMETER_1 = 0x00;
        MEMORY.STRING_PARAMETER_2 = 0x01;

        question("Guess the number of marbles in my hand and I'll give you something.[B]What's your guess?[PAUSE:3d][CHOICE][MEM1].[CHOICE][MEM2].");

        BOSS.GUESS_RNG = randrange(0x02);

        if(MEMORY.QUESTION_ANSWER == BOSS.GUESS_RNG) {
            if(BOSS.DEBUG) {
                subtext("yay");
            }

            damage(BOSS.MOUNT_ID, 0x29a, True);
        } else if(MEMORY.QUESTION_ANSWER == 0x00) {
            if(BOSS.DEBUG) {
                subtext("nay 0");
            }

            spawn_enemies(ENEMY.MAGGOT);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) {
            if(BOSS.DEBUG) {
                subtext("nay 1");
            }

            spawn_enemies(ENEMY.MOSQUITO);
        }

        if(BOSS.DEBUG) {
            sleep(0x30);
            debug_memory(MEMORY.QUESTION_ANSWER, BOSS.GUESS_RNG);
        }

        control_enemy(BOSS.MOUNT_ID, False);
    }
    @install()
    fun old_naris_question() {
        control_enemy(BOSS.MOUNT_ID, True);
        MEMORY.STRING_PARAMETER_1 = 0x00;
        MEMORY.STRING_PARAMETER_2 = 0x01;
        MEMORY.STRING_PARAMETER_3 = 0x02;

        question("Guess the number of marbles in my hand and I'll give you something.[B]What's your guess?[PAUSE:3d][CHOICE][MEM1].[CHOICE][MEM2].[CHOICE][0xa3].");

        BOSS.GUESS_RNG = randrange(0x03);

        if(MEMORY.QUESTION_ANSWER == BOSS.GUESS_RNG) {
            if(BOSS.DEBUG) {
                subtext("yay");
            }

            damage(BOSS.MOUNT_ID, 0x29a, True);
        } else if(MEMORY.QUESTION_ANSWER == 0x00) {
            if(BOSS.DEBUG) {
                subtext("nay 0");
            }

            spawn_enemies(ENEMY.MAGGOT);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) {
            if(BOSS.DEBUG) {
                subtext("nay 1");
            }

            spawn_enemies(ENEMY.MOSQUITO);
        } else if(MEMORY.QUESTION_ANSWER == 0x02) {
            if(BOSS.DEBUG) {
                subtext("nay 2");
            }

            spawn_enemies(ENEMY.SKELESNAIL);
        }

        if(BOSS.DEBUG) {
            sleep(0x30);
            debug_memory(MEMORY.QUESTION_ANSWER, BOSS.GUESS_RNG);
        }

        control_enemy(BOSS.MOUNT_ID, False);
    }
    
    fun spawn_young_naris() {
        add_enemy(VILLAGER_3_2, 0x14, 0x14);
        BOSS.MOUNT_ID = <LAST_ENTITY>;
        attach_script(LAST_ENTITY, TALK, reference(naris_opening));
        <LAST_ENTITY>[HP] = BOSS.BOSS_HP;
    }

    fun spawn_old_naris() {
        add_enemy(VILLAGER_3_4, 0x00, 0x00);
        <LAST_ENTITY>[X] = BOSS.MOUNT_ID[X];
        <LAST_ENTITY>[Y] = BOSS.MOUNT_ID[Y];
        BOSS.MOUNT_ID = <LAST_ENTITY>;
    }

    @install()
    @async()
    fun boss_watcher() {
        if(BOSS.DEBUG) {
            subtext("phase 0");
        }

        while(BOSS.RIDER_ID[HP] >= SYSTEM.HP_MAX) {
            yield();
        }

        attach_script(BOSS.RIDER_ID, DAMAGE, reference(young_naris_question));

        if(BOSS.DEBUG) {
            subtext("phase 1");
        }

        while!(dead(BOSS.MOUNT_ID)) {
            yield();
        }

        spawn_old_naris();
        attach_script(BOSS.RIDER_ID, DAMAGE, reference(old_naris_question));

        if(BOSS.DEBUG) {
            subtext("phase 2");
        }

        while!(dead(BOSS.MOUNT_ID)) {
            yield();
        }

        destroy(BOSS.RIDER_ID);

        if(BOSS.DEBUG) {
            subtext("yatta");
        }

        boss_defeated();
    }

    @install()
    @async()
    fun stack_t01() {
        while!(dead(BOSS.RIDER_ID)) {
            BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
            BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y];
            yield();
        }
    }

    fun trigger_enter() {
        // object[0x00] = 0x7e;
        object[0x01] = 0x7e;

        if!(SOULS_MEMORY.DEAD_NARIS) {
            add_enemy_with_flags(LIZARD, 0x14, 0x14, FLAG_ENEMY.INACTIVE_INVISIBLE);
            BOSS.RIDER_ID = <LAST_ENTITY>;
            attribute(LAST_ENTITY, INVISIBLE, True);
            attribute(LAST_ENTITY, ROOT, True);
            <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;

            spawn_young_naris();

            boss_watcher();
            stack_t01();
        }

        default_init_room(True, True);
    }
};

map bog_bridges(0x40) {
    enum entrance {
        north = entrance(0x0b, 0x01, SOUTH),
        south = entrance(0x1b, 0x53, NORTH)
    }

    enum soundtrack {
        default = soundtrack(0x68, 0xff)
    }

    enum stepon_trigger {
        exit_north = @install() {
            map_transition(bog_curve, south, NORTH);
        },
        exit_south = @install() {
            map_transition(bog_crossing, north_short, SOUTH);
        }
    }

    fun trigger_enter() {
        if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
            // north
            add_enemy(FLOWER_PURPLE, 0d19, 0d12);

            add_enemy(FLOWER_PURPLE, 0d38, 0d13);

            // center
            add_enemy(FLOWER_PURPLE, 0d22, 0d36);

            add_enemy(TENTACLE_WHIP, 0d35, 0d27);
            add_enemy(RAT, 0d40, 0d34);

            // south
            add_enemy(FLOWER_PURPLE, 0d22, 0d71);
        }

        default_init_room(True, True);
    }
};

map bog_crossing(0x05) {
    enum entrance {
        north = entrance(0x2d, 0x01, SOUTH),
        east = entrance(0x5f, 0x4d, WEST),
        west_1 = entrance(0x04, 0x71, EAST),
        west_2 = entrance(0x04, 0x2f, EAST),

        north_short = entrance(0x24, 0x1f, SOUTH),
    }

    enum soundtrack {
        default = soundtrack(0x3a, 0xff)
    }

    enum ROOM {
        FAKE_EXIT_ID = memory_tmp(),

        COLLECTIBLE_LOOTED = flag(),
    }

    enum stepon_trigger {
        stepon_0 = @install() {
            subtext("S=0");
        },
        stepon_1 = @install() {
            subtext("S=1");
        },
        stepon_2 = @install() {
            subtext("S=2");
        },
        stepon_3 = @install() {
            subtext("S=3");
        },
        stepon_4 = @install() {
            subtext("S=4");
        },
        stepon_5 = @install() {
            subtext("S=5");
        },
        stepon_6 = @install() {
            subtext("S=6");
        },
        stepon_7 = @install() {
            subtext("S=7");
        },
        exit_east = @install() {
            map_transition(bog_crossing_firepit, west, EAST);
        },
        exit_north = @install() {
            map_transition(bog_bridges, south, NORTH);
        },

        exit_west_2_east = @install() {
            map_transition(bog_crossing_gourds, east, WEST);
        },
        exit_west_1_exit = @install() {
            map_transition(ship, east, WEST);
        },
        stepon_12 = @install() {
            subtext("S=12");
        },
        stepon_13 = @install() {
            subtext("S=13");
        },
        stepon_14 = @install() {
            subtext("S=14");
        },
        stepon_15 = @install() {
            subtext("S=15");
        },
        stepon_16 = @install() {
            subtext("S=16");
        },
        stepon_17 = @install() {
            subtext("S=17");
        },
        stepon_18 = @install() {
            subtext("S=18");
        },
        stepon_19 = @install() {
            subtext("S=19");
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() {
            subtext("B=0");
        },
        b_trigger_1 = @install() {
            subtext("B=1");
        },
        b_trigger_2 = @install() {
            subtext("B=2");
        },
        b_trigger_3 = @install() {
            subtext("B=3");
        },
        b_trigger_4 = @install() {
            subtext("B=4");
        },
        b_trigger_5 = @install() {
            subtext("B=5");
        },
        b_trigger_6 = @install() {
            subtext("B=6");
        },
        b_trigger_7 = @install() {
            subtext("B=7");
        },
        b_trigger_8 = @install() {
            subtext("B=8");
        },
        b_trigger_9 = @install() {
            subtext("B=9");
        },

        b_trigger_10 = @install() {
            subtext("B=10");
        },
        b_trigger_11 = @install() {
            subtext("B=11");
        },
        b_trigger_12 = @install() {
            subtext("B=12");
        },
        b_trigger_13 = @install() {
            subtext("B=13");
        },
        b_trigger_14 = @install() {
            subtext("B=14");
        },
        b_trigger_15 = @install() {
            subtext("B=15");
        },
        b_trigger_16 = @install() {
            subtext("B=16");
        },
        b_trigger_17 = @install() {
            subtext("B=17");
        },
        b_trigger_18 = @install() {
            subtext("B=18");
        },
        b_trigger_19 = @install() {
            subtext("B=19");
        },
    }

    fun fake_exit() {
        map_transition(bog_bridges, south, NORTH);
    }

    @install()
    @async()
    fun fake_exit_scanner() {
        attach_to_script(ROOM.FAKE_EXIT_ID);

        while(True) {
            arg[0x00] = <ACTIVE>[X];
            arg[0x02] = <ACTIVE>[Y];
            arg[0x04] = <SCRIPT_OWNER>[X];
            arg[0x06] = <SCRIPT_OWNER>[Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= 0x15) && (arg[0x0a] <= 0x15)) {
                fake_exit();
                end();
            }

            yield();
        }
    }

    @install()
    fun collectible_triggered() {
        set(ROOM.COLLECTIBLE_LOOTED);

        collectible_collected();
    }

    
    fun trigger_enter() {
        if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
            // top
            add_enemy(FLOWER_PURPLE, 0d38, 0d49);

            add_enemy(FLOWER_PURPLE, 0d12, 0d45);
            add_enemy(FLOWER_PURPLE, 0d19, 0d50);

            // center
            add_enemy(BUZZARD_1, 0d15, 0d68);
            add_enemy(BUZZARD_1, 0d22, 0d78);

            add_enemy(FLOWER_PURPLE, 0d35, 0d74);

            // south
            add_enemy(FLOWER_PURPLE, 0d33, 0d106);

            add_enemy(BUZZARD_1, 0d55, 0d104);
        }

        if!(ROOM.COLLECTIBLE_LOOTED) {
            add_collectible(0x01, 0x5e, 0x4d, reference(collectible_triggered));
        }

        init_map(0x00, 0x1e, 0xff, 0xff);

        object[0x03] = 0x01;
        object[0x04] = 0x01;

        add_enemy(PLACEHOLDER, 0x24, 0x1f);
        ROOM.FAKE_EXIT_ID = <LAST_ENTITY>;

        default_init_room(True, True);

        sleep(0x10);
        fake_exit_scanner();
    }
};

map bog_crossing_firepit(0x04) { // unused
    enum entrance {
        west = entrance(0x03, 0x1f, EAST),
    }

    enum stepon_trigger {
        exit_east = @install() {
            map_transition(bog_crossing, east, WEST);
        },
        windwalker = @install() {
            subtext("S=1");
        },
    }

    fun trigger_enter() {
        fade_in();
    }
};

map bog_crossing_gourds(0x26) {
    enum entrance {
        east = entrance(0x26, 0x13, WEST),
    }

    enum soundtrack {
        default = soundtrack(0x68, 0xff)
    }

    enum stepon_trigger {
        exit_east = @install() {
            map_transition(bog_crossing, west_2, EAST);
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() {
            subtext("B=0");
        },
        b_trigger_1 = @install() {
            subtext("B=1");
        },
        b_trigger_2 = @install() {
            subtext("B=2");
        },
    }
    
    fun trigger_enter() {
        if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
            add_enemy(MONK, 0d10, 0d9);
            add_enemy(MONK, 0d15, 0d11);
        }

        default_init_room(True, True);
    }
};

map ship(0x68) {
    enum entrance {
        east = entrance(0x5f, 0x5b, WEST),
        west = entrance(0x05, 0x59, EAST),

        door_1_1 = entrance(0x59, 0x2d, SOUTH),
        door_2_1 = entrance(0x30, 0x24, SOUTH),
        door_2_2 = entrance(0x32, 0x40, SOUTH),
        door_3_1 = entrance(0x13, 0x0d, SOUTH),
        door_3_2 = entrance(0x4b, 0x0d, SOUTH),
    }

    enum soundtrack {
        default = soundtrack(0x72, 0xff)
    }

    enum stepon_trigger {
        door_3_1_stairs = @install() {
            subtext("S=0");
        },
        door_3_2_stairs = @install() {
            subtext("S=1");
        },
        door_2_2_stairs = @install() {
            subtext("S=2");
        },
        door_1_1_stairs = @install() {
            subtext("S=3");
        },
        lift_top = @install() {
            subtext("S=4");
        },
        exit_west = @install() {
            map_transition(east_crossing, east, WEST);
        },
        door_3_1 = @install() {
            subtext("S=6");
        },
        door_2_2 = @install() {
            subtext("S=7");
        },
        door_2_1 = @install() {
            subtext("S=8");
        },
        door_1_1 = @install() {
            subtext("S=9");
        },

        door_3_2 = @install() {
            subtext("S=10");
        },
        exit_east = @install() {
            map_transition(bog_crossing, west_1, EAST);
        },
        lift_bottom = @install() {
            subtext("S=12");
        },
    }

    fun trigger_enter() {
        if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
            // east
            add_enemy(RAPTOR_GREEN, 0d76, 0d80);

            // south
            add_enemy(RAPTOR_PURPLE, 0d49, 0d88);

            // west
            add_enemy(RAPTOR_GREEN, 0d41, 0d78);
        }

        add_enemy(STONE_ROUND, 0x54, 0x52);
        
        default_init_room(True, True);
    }
};

area metro() {
    map junkyard(0x49) {
        enum entrance {
            crash_north = entrance(0x58, 0x1c, NONE),
            crash_south = entrance(0x5f, 0x4f, NONE),
            crash_west = entrance(0x0a, 0x3a, NONE),
        }

        enum stepon_trigger {
            stepon_0 = @install() {
                subtext("S=0");
            },
            stepon_1 = @install() {
                subtext("S=1");
            },
            stepon_2 = @install() {
                subtext("S=2");
            },
            stepon_3 = @install() {
                subtext("S=3");
            },
            stepon_4 = @install() {
                subtext("S=4");
            },
            stepon_5 = @install() {
                subtext("S=5");
            },
            stepon_6 = @install() {
                subtext("S=6");
            },
            stepon_7 = @install() {
                subtext("S=7");
            },
            stepon_8 = @install() {
                subtext("S=8");
            },
            stepon_9 = @install() {
                subtext("S=9");
            },

            stepon_10 = @install() {
                subtext("S=10");
            },
            stepon_11 = @install() {
                subtext("S=11");
            },
            stepon_12 = @install() {
                subtext("S=12");
            },
        }
        
        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            fade_in();
        }
    };

    map metro(0x48) {
        enum entrance {
            south = entrance(0x3a, 0x4e, NONE)
        }

        enum ROOM {
            ROW_1 = 0x12,
            ROW_2 = 0x3e,
            ROW_3 = 0x6a,
            ROW_4 = 0x96,

            COLUMN_1 = 0x12,
            COLUMN_2 = 0x52,
            COLUMN_3 = 0x92,
            COLUMN_4 = 0xd2,
        }

        fun demo_room() {
            map_transition(bomb_arena, right, NONE);
        }

        enum stepon_trigger {
            stepon_0 = @install() {
                subtext("S=0");
            },
            stepon_1 = @install() {
                subtext("S=1");
            },
            stepon_2 = @install() {
                subtext("S=2");
            },
            stepon_3 = @install() {
                subtext("S=3");
            },
            stepon_4 = @install() {
                subtext("S=4");
            },
            stepon_5 = @install() {
                subtext("S=5");
            },
            stepon_6 = @install() {
                subtext("S=6");
            },
            stepon_7 = @install() {
                subtext("S=7");
            },
            stepon_8 = @install() {
                subtext("S=8");
            },
            stepon_9 = @install() {
                subtext("S=9");
            },

            stepon_10 = @install() {
                subtext("S=10");
            },
            stepon_11 = @install() {
                subtext("S=11");
            },
            stepon_12 = @install() {
                subtext("S=12");
            },
            stepon_13 = @install() {
                subtext("S=13");
            },
            stepon_14 = @install() {
                subtext("S=14");
            },
            stepon_15 = @install() {
                subtext("S=15");
            },
            stepon_16 = @install() {
                subtext("S=16");
            },
            stepon_17 = @install() {
                subtext("S=17");
            },
            stepon_18 = @install() {
                subtext("S=18");
            },
            stepon_19 = @install() {
                subtext("S=19");
            },

            stepon_20 = @install() {
                subtext("S=20");
            },
            stepon_21 = @install() {
                subtext("S=21");
            },
            stepon_22 = @install() {
                subtext("S=22");
            },
            stepon_23 = @install() {
                subtext("S=23");
            },
            stepon_24 = @install() {
                subtext("S=24");
            },
            stepon_25 = @install() {
                subtext("S=25");
            },
            stepon_26 = @install() {
                subtext("S=26");
            },
            stepon_27 = @install() {
                subtext("S=27");
            },
            stepon_28 = @install() {
                subtext("S=28");
            },
            stepon_29 = @install() {
                subtext("S=29");
            },

            stepon_30 = @install() {
                subtext("S=30");
            },
            stepon_31 = @install() {
                subtext("S=31");
            },
            stepon_32 = @install() {
                subtext("S=32");
            },
            stepon_33 = @install() {
                subtext("S=33");
            },
            stepon_34 = @install() {
                subtext("S=34");
            },
            stepon_35 = @install() {
                subtext("S=35");
            },
            stepon_36 = @install() {
                subtext("S=36");
            },
            stepon_37 = @install() {
                subtext("S=37");
            },
            stepon_38 = @install() {
                subtext("S=38");
            },
            stepon_39 = @install() {
                subtext("S=39");
            },

            stepon_40 = @install() {
                subtext("S=40");
            },
            stepon_41 = @install() {
                subtext("S=41");
            },
            stepon_42 = @install() {
                subtext("S=42");
            },
            stepon_43 = @install() {
                subtext("S=43");
            },
            stepon_44 = @install() {
                subtext("S=44");
            },
            stepon_45 = @install() {
                subtext("S=45");
            },
            stepon_46 = @install() {
                subtext("S=46");
            },
            stepon_47 = @install() {
                subtext("S=47");
            },
            stepon_48 = @install() {
                subtext("S=48");
            },
            stepon_49 = @install() {
                subtext("S=49");
            },

            stepon_50 = @install() {
                subtext("S=50");
            },
            stepon_51 = @install() {
                subtext("S=51");
            },
            stepon_52 = @install() {
                subtext("S=52");
            },
            stepon_53 = @install() {
                subtext("S=53");
            },
            stepon_54 = @install() {
                subtext("S=54");
            },
            stepon_55 = @install() {
                subtext("S=55");
            },
        }

        enum b_trigger {
            door_center = @install() {
                subtext("B=0");
            },
            dog_door_in_d1 = @install() {
                subtext("B=1");
            },
            dog_door_out_d1 = @install() {
                subtext("B=2");
            },
            dog_door_out_d2 = @install() {
                subtext("B=3");
            },
            dog_door_in_d2 = @install() {
                subtext("B=4");
            },
            dog_door_out_d3 = @install() {
                subtext("B=5");
            },
            dog_door_in_d3 = @install() {
                subtext("B=6");
            },
            dog_door_out_d4 = @install() {
                subtext("B=7");
            },
            dog_door_in_d4 = @install() {
                subtext("B=8");
            },
            dog_door_out_c4 = @install() {
                subtext("B=9");
            },

            dog_door_in_c4 = @install() {
                subtext("B=10");
            },
            dog_door_out_c3 = @install() {
                subtext("B=11");
            },
            dog_door_in_c3 = @install() {
                subtext("B=12");
            },
            dog_door_out_c2 = @install() {
                subtext("B=13");
            },
            dog_door_in_c2 = @install() {
                subtext("B=14");
            },
            dog_door_out_c1 = @install() {
                subtext("B=15");
            },
            dog_door_in_c1 = @install() {
                subtext("B=16");
            },
            dog_door_out_b1 = @install() {
                subtext("B=17");
            },
            dog_door_in_b1 = @install() {
                subtext("B=18");
            },
            dog_door_out_b2 = @install() {
                subtext("B=19");
            },

            dog_door_in_b2 = @install() {
                subtext("B=20");
            },
            dog_door_out_b3 = @install() {
                subtext("B=21");
            },
            dog_door_in_b3 = @install() {
                subtext("B=22");
            },
            dog_door_out_b4 = @install() {
                subtext("B=23");
            },
            dog_door_in_b4 = @install() {
                subtext("B=24");
            },
            dog_door_out_a4 = @install() {
                subtext("B=25");
            },
            dog_door_in_a4 = @install() {
                subtext("B=26");
            },
            dog_door_out_a3 = @install() {
                subtext("B=27");
            },
            dog_door_in_a3 = @install() {
                subtext("B=28");
            },
            dog_door_out_a2 = @install() {
                subtext("B=29");
            },

            dog_door_in_a2 = @install() {
                subtext("B=30");
            },
            dog_door_out_a1 = @install() {
                subtext("B=31");
            },
            dog_door_in_a1 = @install() {
                subtext("B=32");
            },
            door_d4 = @install() {
                door_act4_airlock(ROOM.COLUMN_4, ROOM.ROW_4, object[0x14]);

                demo_room();
            },
            door_d3 = @install() {
                door_act4_airlock(ROOM.COLUMN_3, ROOM.ROW_4, object[0x15]);

                demo_room();
            },
            door_b3 = @install() {
                door_act4_airlock(ROOM.COLUMN_3, ROOM.ROW_2, object[0x0f]);

                demo_room();
            },
            door_c4 = @install() {
                door_act4_airlock(ROOM.COLUMN_4, ROOM.ROW_3, object[0x13]);

                demo_room();
            },
            door_b4 = @install() {
                door_act4_airlock(ROOM.COLUMN_4, ROOM.ROW_2, object[0x0e]);

                demo_room();
            },
            door_a4 = @install() {
                door_act4_airlock(ROOM.COLUMN_4, ROOM.ROW_1, object[0x0d]);

                demo_room();
            },
            door_a3 = @install() {
                door_act4_airlock(ROOM.COLUMN_3, ROOM.ROW_1, object[0x0c]);

                demo_room();
            },

            door_b2 = @install() {
                door_act4_airlock(ROOM.COLUMN_2, ROOM.ROW_2, object[0x10]);

                demo_room();
            },
            door_a2 = @install() {
                door_act4_airlock(ROOM.COLUMN_2, ROOM.ROW_1, object[0x00]);

                demo_room();
            },
            door_a1 = @install() {
                door_act4_airlock(ROOM.COLUMN_1, ROOM.ROW_1, object[0x0b]);

                demo_room();
            },
            door_d1 = @install() {
                door_act4_airlock(ROOM.COLUMN_1, ROOM.ROW_4, object[0x16]);

                demo_room();
            },
            door_c1 = @install() {
                door_act4_airlock(ROOM.COLUMN_1, ROOM.ROW_3, object[0x11]);

                demo_room();
            },
            door_c2 = @install() {
                door_act4_airlock(ROOM.COLUMN_2, ROOM.ROW_3, object[0x12]);

                demo_room();
            },
            b_trigger_46 = @install() {
                subtext("B=46");
            },
            b_trigger_47 = @install() {
                subtext("B=47");
            },
            b_trigger_48 = @install() {
                subtext("B=48");
            },
            b_trigger_49 = @install() {
                subtext("B=49");
            },

            b_trigger_50 = @install() {
                subtext("B=50");
            },
            b_trigger_51 = @install() {
                subtext("B=51");
            },
            b_trigger_52 = @install() {
                subtext("B=52");
            },
        }
        
        fun trigger_enter() {
            fade_in();
        }
    };

    map reactor_room(0x42) {
        enum entrance {
            north = entrance(0x2c, 0x0d, NONE),
            east = entrance(0x3e, 0x3b, NONE),

            lever_room = entrance(0x52, 0x0d, NONE),
        }

        enum stepon_trigger {
            exit_lever_room = @install() {
                subtext("S=0");
            },
            exit_north = @install() {
                subtext("S=1");
            },
            exit_south = @install() {
                subtext("S=2");
            },
            stepon_3 = @install() {
                subtext("S=3");
            },
            stepon_4 = @install() {
                subtext("S=4");
            },
            stepon_5 = @install() {
                subtext("S=5");
            },
            stepon_6 = @install() {
                subtext("S=6");
            },
            stepon_7 = @install() {
                subtext("S=7");
            },
            stepon_8 = @install() {
                subtext("S=8");
            },
            stepon_9 = @install() {
                subtext("S=9");
            },

            stepon_10 = @install() {
                subtext("S=10");
            },
            stepon_11 = @install() {
                subtext("S=11");
            },
            stepon_12 = @install() {
                subtext("S=12");
            },
            stepon_13 = @install() {
                subtext("S=13");
            },
            stepon_14 = @install() {
                subtext("S=14");
            },
            stepon_15 = @install() {
                subtext("S=15");
            },
            stepon_16 = @install() {
                subtext("S=16");
            },
            stepon_17 = @install() {
                subtext("S=17");
            },
            stepon_18 = @install() {
                subtext("S=18");
            },
            stepon_19 = @install() {
                subtext("S=19");
            },

            stepon_20 = @install() {
                subtext("S=20");
            },
            stepon_21 = @install() {
                subtext("S=21");
            },
            stepon_22 = @install() {
                subtext("S=22");
            },
            stepon_23 = @install() {
                subtext("S=23");
            },
            stepon_24 = @install() {
                subtext("S=24");
            },
            stepon_25 = @install() {
                subtext("S=25");
            },
            stepon_26 = @install() {
                subtext("S=26");
            },
            stepon_27 = @install() {
                subtext("S=27");
            },
        }

        enum b_trigger {
            lever = @install() {
                subtext("B=0");
            },
            gourd = @install() {
                subtext("B=1");
            },
        }

        fun trigger_enter() {
            // object[0x00] = 0x01; // deactivate heater_1_1
            // object[0x01] = 0x01; // deactivate heater_1_2
            // object[0x02] = 0x01; // deactivate heater_1_5
            // object[0x03] = 0x01; // deactivate heater_2_1
            // object[0x04] = 0x01; // deactivate heater_2_2
            // object[0x05] = 0x01; // deactivate heater_2_5
            // object[0x06] = 0x01; // deactivate heater_3_1
            // object[0x07] = 0x01; // deactivate heater_3_3
            // object[0x08] = 0x01; // deactivate heater_3_4
            // object[0x09] = 0x01; // deactivate heater_4_1
            // object[0x0a] = 0x01; // deactivate heater_4_2
            // b-1d ?
            // object[0x1e] = 0x01; // toggle lever
            // object[0x1f] = 0x01; // loot gourd

            fade_in();
        }
    };
};

// dungeons

area dungeon_isaac() {
    enum AREA_BASEMENT {
        DEBUG = True,

        // ENABLE_DOORS = memory_tmp(),

        ENEMY_COUNT_TOTAL = memory_tmp(),
        ENEMY_COUNT = memory_tmp(),

        MUSIC_DEFAULT = 0x58,
    }

    group isaac_helper() {
        fun prepare_room(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x34, 0x1e); // room_1
            } else if(index == 0x02) {
                init_map(0x38, 0x00, 0x6e, 0x1e); // room 2
            } else if(index == 0x03) {
                init_map(0x4c, 0x24, 0x6e, 0x54); // room_3
            } else if(index == 0x04) {
                init_map(0x26, 0x24, 0x48, 0x54); // room_4
            } else if(index == 0x05) {
                init_map(0x00, 0x24, 0x22, 0x54); // room_5
            }
        }

        @install()
        fun enemies_alive() {
            MEMORY.STRING_PARAMETER_1 = AREA_BASEMENT.ENEMY_COUNT;
            MEMORY.STRING_PARAMETER_2 = AREA_BASEMENT.ENEMY_COUNT_TOTAL;

            subtext("[MEM1]/[MEM2] enemies alive.");
        }

        fun check_exits(clear_flag) {
            if(AREA_BASEMENT.ENEMY_COUNT > 0x00) {
                enemies_alive();

                end();
            } else {
                set(clear_flag);
            }
        }

        @install()
        fun shoot(entity) {
            shoot_entity_entity(entity, ONION, BOY, 0x10, 0xff);
        }
        @install()
        fun shoot_plus(entity) {
            shoot_entity_relative(entity, ONION, 0x00, -0x80, 0x10, 0xff); // north
            shoot_entity_relative(entity, ONION, 0x80, 0x00, 0x10, 0xff); // east
            shoot_entity_relative(entity, ONION, 0x00, 0x80, 0x10, 0xff); // south
            shoot_entity_relative(entity, ONION, -0x80, 0x00, 0x10, 0xff); // west
        }
        @install()
        fun shoot_bomb(entity) {
            shoot_entity_entity(entity, ONION, BOY, 0x2a, 0x1a);
            arg[0x02] = <BOY>[X];
            arg[0x04] = <BOY>[Y];

            sleep(0x50);

            bomb_absolute(entity, arg[0x02], arg[0x04], 0x60);
            add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_GREEN_1, 0x00, 0x00);
            arg[0x06] = <LAST_ENTITY>;

            arg[0x06][X] = arg[0x02];
            arg[0x06][Y] = arg[0x04];
            sleep(0x20);
            _destroy(arg[0x06]);
        }
        @install()
        fun explode(entity) {
            bomb_entity(entity, 0x70);
            add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_GREEN_1, 0x00, 0x00);
            arg[0x02] = <LAST_ENTITY>;

            arg[0x02][X] = entity[X];
            arg[0x02][Y] = entity[Y];
            sleep(0x20);
            _destroy(arg[0x02]);
        }

        @install()
        fun jump(entity) {
            entity[JUMP_HEIGHT] = 0x30;
            
            while(arg[0x02] <= 0x30) {
                arg[0x02] += 0x01;

                if(entity[X] > <BOY>[X]) {
                    entity[X] -= 0x01;
                } else if(entity[X] < <BOY>[X]) {
                    entity[X] += 0x01;
                }

                if(entity[Y] > <BOY>[Y]) {
                    entity[Y] -= 0x01;
                } else if(entity[Y] < <BOY>[Y]) {
                    entity[Y] += 0x01;
                }

                sleep(0x02);
            }
        }

        @install()
        @async()
        fun isaac_ai_shooting(enemy) {
            sleep(0x60);

            while!(dead(enemy)) {
                shoot(enemy);
                // shoot_plus(enemy);
                // shoot_bomb(enemy);

                sleep(0xa0);
            }
        }
        @install()
        @async()
        fun isaac_ai_shooting_plus(enemy) {
            sleep(0x60);

            while!(dead(enemy)) {
                // shoot(enemy);
                shoot_plus(enemy);
                // shoot_bomb(enemy);

                sleep(0xf0);
            }
        }
        @install()
        @async()
        fun isaac_ai_jumping(enemy) {
            sleep(0x60);

            while!(dead(enemy)) {
                // _control_enemy(enemy, False);
                jump(enemy);
                // _control_enemy(enemy, True);

                sleep(0xf0);
            }
        }

        @install()
        fun isaac_enemy_death() {
            AREA_BASEMENT.ENEMY_COUNT -= 0x01;

            // if(AREA_BASEMENT.ENEMY_COUNT == 0x00) {
            //     AREA_BASEMENT.ENABLE_DOORS = 0x01;
            // }

            if(AREA_BASEMENT.DEBUG) {
                MEMORY.STRING_PARAMETER_1 = AREA_BASEMENT.ENEMY_COUNT;
                MEMORY.STRING_PARAMETER_2 = AREA_BASEMENT.ENEMY_COUNT_TOTAL;

                subtext("[MEM1] / [MEM2]");
            }
        }
        @install()
        fun isaac_enemy_death_shoot_plus() {
            isaac_enemy_death();

            shoot_plus(<SCRIPT_OWNER>);
        }
        @install()
        fun isaac_enemy_death_shoot_bomb() {
            isaac_enemy_death();

            shoot_bomb(<SCRIPT_OWNER>);
        }
        @install()
        fun isaac_enemy_death_explode() {
            isaac_enemy_death();

            explode(<SCRIPT_OWNER>);
        }

        fun add_isaac_enemy() {
            AREA_BASEMENT.ENEMY_COUNT_TOTAL += 0x01;
            AREA_BASEMENT.ENEMY_COUNT += 0x01;
        }
        fun add_isaac_enemy_fly_shooting(x, y) {
            add_isaac_enemy();

            add_enemy(MOSQUITO, x, y);
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death));
            isaac_ai_shooting(<LAST_ENTITY>);
        }
        fun add_isaac_enemy_fly_exploding(x, y) {
            add_isaac_enemy();

            add_enemy(MOSQUITO, x, y);
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death_shoot_bomb));
        }
        fun add_isaac_enemy_maggot(x, y) {
            add_isaac_enemy();

            add_enemy(MAGGOT, x, y);
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death));
        }
        fun add_isaac_enemy_slime(x, y) {
            add_isaac_enemy();

            add_enemy(SLIME_GREEN, x, y);
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death));
            isaac_ai_shooting_plus(<LAST_ENTITY>);
        }
        fun add_isaac_enemy_jumper(x, y) {
            add_isaac_enemy();

            // add_enemy(DANCING_DEVIL_1, x, y);
            add_enemy(MUMMY, x, y);
            // add_enemy(FRIPPO, x, y);
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death));
            // attribute(LAST_ENTITY, ROOT, True);
            isaac_ai_jumping(<LAST_ENTITY>);
        }
        fun add_isaac_enemy_spider(x, y) {
            add_isaac_enemy();

            add_enemy(SPIDER, x, y);
            <LAST_ENTITY>[HP] = 0x01;
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death_explode));
            // isaac_ai_jumping(<LAST_ENTITY>);
        }
    };

    area level_0() {
        enum BASEMENT_LEVEL {
            NIGHT = False,
            RAIN = False,
        }

        map basement_0_start(0x22) { // center "+"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_west = @install() {
                    map_transition(basement_0_4, east, WEST);
                },
                exit_east = @install() {
                    map_transition(basement_0_2, west, EAST);
                },

                exit_north = @install() {
                    map_transition(basement_0_1, south, NORTH);
                },
                exit_south = @install() {
                    map_transition(basement_0_3, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);

                // add_isaac_enemy_fly_shooting(0x1a, 0x30);
                // add_isaac_enemy_fly_exploding(0x15, 0x30);
                // add_isaac_enemy_maggot(0x15, 0x30);
                // add_isaac_enemy_slime(0x15, 0x30);
                // add_isaac_enemy_frippo(0x15, 0x30);
                // add_isaac_enemy_spider(0x15, 0x30);


                bonfire(0d23, 0d51);

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);

                if!(FLAG.IN_ANIMATION) {
                    // teleport(DOG, 0x19, 0x1d);
                    <DOG>[X] += 0x20;
                    <DOG>[Y] += 0x20;
                    crash_land(BOTH);

                    subtext("Basement Level 1");
                }
            }
        };

        map basement_0_2(0x22) { // east "->"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    subtext("S=13");
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x5b, 0x2d);
                        add_isaac_enemy_maggot(0x5d, 0x2f);
                    }
                }

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_0_3(0x22) { // south "v"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    subtext("S=15");
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x59, 0x47);
                        add_isaac_enemy_maggot(0x5b, 0x49);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_0_4(0x22) { // east "<-"
            enum entrance {
                east = entrance(0x6f, 0x17, WEST),
                south_1 = entrance(0x65, 0x1f, NORTH),
                south_2 = entrance(0x46, 0x1f, NORTH),
                west = entrance(0x38, 0x18, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() {
                    subtext("S=5");
                },
                east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, west, EAST);
                },
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() {
                    subtext("S=16");
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = @install() {
                    subtext("B=2");
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                sniff = @install() {
                    subtext("B=8");
                },
            }

            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                // object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x51, 0x12);
                        add_isaac_enemy_maggot(0x53, 0x15);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_0_1(0x22) { // north "|"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, north, SOUTH);
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_door, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x5d, 0x2d);
                        add_isaac_enemy_maggot(0x5f, 0x2e);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_0_door(0x20) { // north-north "drake-south"
            enum entrance {
                east = entrance(0x2b, 0x15, WEST),
                south = entrance(0x1b, 0x29, NORTH)
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_east = @install() {
                    subtext("S=0");
                },
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);
                    map_transition(basement_0_1, north, SOUTH);
                }
            }

            @install()
            fun trap_door_interacted() {
                check_exits(ROOM.CLEAR_FLAG);
                map_transition(basement_1_start, center, NONE);
            }

            fun trigger_enter() {
                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x10, 0x13);
                attach_script(LAST_ENTITY, TALK, reference(trap_door_interacted));

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_spider(0d32, 0d22);
                        add_isaac_enemy_spider(0d17, 0d28);
                        add_isaac_enemy_spider(0d36, 0d32);
                    }
                }

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);

                // object[0x00] = 0x01; // close south
                // object[0x01] = 0x01; // open east
            }
        };
    };

    area level_1() {
        enum BASEMENT_LEVEL {
            NIGHT = False,
            RAIN = False,
        }

        map basement_1_start(0x22) { // center "+"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_west = @install() {
                    map_transition(basement_1_5, east, WEST);
                },
                exit_east = @install() {
                    map_transition(basement_1_2, west, EAST);
                },

                exit_north = @install() {
                    map_transition(basement_1_4, south_1, NORTH);
                },
                exit_south = @install() {
                    map_transition(basement_1_6, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x05);

                object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);

                if!(FLAG.IN_ANIMATION) {
                    // teleport(DOG, 0x19, 0x1d);
                    <DOG>[X] += 0x20;
                    <DOG>[Y] += 0x20;
                    crash_land(BOTH);

                    subtext("Basement Level 2");
                }
            }
        };

        map basement_1_2(0x22) { // east "--"
            enum entrance {
                east = entrance(0x35, 0x16, WEST),
                north = entrance(0x18, 0x1f, NORTH),
                west = entrance(0x00, 0x15, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, east, WEST);
                },
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_3, west, EAST);
                },
                exit_south = @install() {
                    subtext("S=4");
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                sign = @install() {
                    subtext("B=3");
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                sniff = @install() {
                    subtext("B=7");
                },
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x01);

                // object[0x00] = 0x01; // opens room_1_south
                // object[0x01] = 0x01; // closes room_1_east
                // object[0x12] = 0x01; // hides room_1_sign
                // object[0x09] = 0x01; // shows room_1_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x24, 0x12);
                        add_isaac_enemy_spider(0d36, 0d18);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_3(0x22) { // east-east "-^"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    subtext("S=13");
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_2, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_fly_exploding(0d93, 0d50);
                        add_isaac_enemy_fly_exploding(0d95, 0d58);
                        add_isaac_enemy_maggot(0x5d, 0x31);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_4(0x22) { // north "/\"
            enum entrance {
                east = entrance(0x6f, 0x17, WEST),
                south_1 = entrance(0x65, 0x1f, NORTH),
                south_2 = entrance(0x46, 0x1f, NORTH),
                west = entrance(0x38, 0x18, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_5, north, SOUTH);
                },
                east = @install() {
                    subtext("S=6");
                },
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, north, SOUTH);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = @install() {
                    subtext("B=2");
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                sniff = @install() {
                    subtext("B=8");
                },
            }

            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                // object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x53, 0x13);
                        add_isaac_enemy_spider(0d78, 0d16);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_5(0x22) { // west "L"
            enum entrance {
                north = entrance(0x39, 0x24, SOUTH),
                east = entrance(0x48, 0x4b, WEST),
                west = entrance(0x26, 0x4e, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() {
                    subtext("S=1");
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_4, south_2, NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, west, EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                // object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x37, 0x37);
                        add_isaac_enemy_spider(0d53, 0d66);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_6(0x22) { // south "_|_"
            enum entrance {
                north = entrance(0x39, 0x24, SOUTH),
                east = entrance(0x48, 0x4b, WEST),
                west = entrance(0x26, 0x4e, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_door, east, WEST);
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, south, NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_9, west, EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        // north
                        add_isaac_enemy_slime(0d62, 0d52);

                        // south
                        add_isaac_enemy_maggot(0x37, 0x3b);
                        add_isaac_enemy_maggot(0x3d, 0x4a);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_door(0x1f) { // south-west "badboy-east"
            enum entrance {
                east = entrance(0x63, 0x1d, WEST),
                west = entrance(0x01, 0x21, EAST)
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);
                    map_transition(basement_1_6, west, EAST);
                },
                exit_west = nop(),
            }

            fun open_east_exit(open) {
                if(open) {
                object[0x00] = 0x00; 
                } else {
                    object[0x00] = 0x7e;
                }
            }
            fun open_bridge(open) {
                if(open) {
                object[0x07] = 0x07e; 
                } else {
                    object[0x07] = 0x00;
                }
            }

            @install()
            fun trap_door_interacted() {
                check_exits(ROOM.CLEAR_FLAG);
                map_transition(basement_2_start, center, NONE);
            }

            fun trigger_enter() {
                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x59, 0x1d);
                attach_script(LAST_ENTITY, TALK, reference(trap_door_interacted));

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        // west
                        add_isaac_enemy_fly_exploding(0d74, 0d30);

                        // north
                        add_isaac_enemy_spider(0d93, 0d17);
                    }
                }

                fade_in();
            }
        };

        map basement_1_9(0x22) { // south-east "->"
            enum entrance {
                east = entrance(0x35, 0x16, WEST),
                north = entrance(0x18, 0x1f, NORTH),
                west = entrance(0x00, 0x15, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_6, east, WEST);
                },
                exit_east = @install() {
                    subtext("S=3");
                },
                exit_south = @install() {
                    subtext("S=4");
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                sign = @install() {
                    subtext("B=3");
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                sniff = @install() {
                    subtext("B=7");
                },
                room_2_sniff = nop(),
            }

            fun prepare_room(index) {
                if(index == 0x01) {
                    init_map(0x00, 0x00, 0x34, 0x1e); // room_1
                } else if(index == 0x02) {
                    init_map(0x38, 0x00, 0x6e, 0x1e); // room 2
                } else if(index == 0x03) {
                    init_map(0x4c, 0x24, 0x6e, 0x54); // room_3
                } else if(index == 0x04) {
                    init_map(0x26, 0x24, 0x48, 0x54); // room_4
                } else if(index == 0x05) {
                    init_map(0x00, 0x24, 0x22, 0x54); // room_5
                }
            }

            fun trigger_enter() {
                prepare_room(0x01);

                // object[0x00] = 0x01; // opens room_1_south
                object[0x01] = 0x01; // closes room_1_east
                // object[0x12] = 0x01; // hides room_1_sign
                // object[0x09] = 0x01; // shows room_1_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        // west
                        add_isaac_enemy_spider(0d15, 0d19);

                        // center
                        add_isaac_enemy_maggot(0x20, 0x15);

                        // east
                        add_isaac_enemy_fly_exploding(0d34, 0d21);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };
    };

    area level_2() {
        enum BASEMENT_LEVEL {
            NIGHT = True,
            RAIN = False,
        }

        map basement_2_start(0x22) { // center "+"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_west = @install() {
                    subtext("S=8");
                },
                exit_east = @install() {
                    map_transition(basement_2_4, west, EAST);
                },

                exit_north = @install() {
                    map_transition(basement_2_1, south, NORTH);
                },
                exit_south = @install() {
                    map_transition(basement_2_2, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x05);

                // object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);

                if!(FLAG.IN_ANIMATION) {
                    // teleport(DOG, 0x19, 0x1d);
                    <DOG>[X] += 0x20;
                    <DOG>[Y] += 0x20;
                    crash_land(BOTH);

                    subtext("Basement Level 3");
                }
            }
        };

        map basement_2_1(0x22) { // north "^"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_start, north, SOUTH);
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    subtext("S=13");
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    subtext("S=15");
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);
                
                object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x5b, 0x32);

                        add_isaac_enemy_fly_exploding(0d89, 0d58);

                        add_isaac_enemy_fly_shooting(0d100, 0d66);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_2(0x22) { // south "L"
            enum entrance {
                north = entrance(0x39, 0x24, SOUTH),
                east = entrance(0x48, 0x4b, WEST),
                west = entrance(0x26, 0x4e, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() {
                    subtext("S=1");
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_start, south, NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_3, west, EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                // object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_fly_exploding(0d62, 0d48);

                        add_isaac_enemy_slime(0d52, 0d62);

                        add_isaac_enemy_maggot(0x3c, 0x3c);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_3(0x22) { // south-east, east-south "_|"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_4, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_2, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0d98, 0d51);
                        add_isaac_enemy_maggot(0x5d, 0x3b);

                        add_isaac_enemy_spider(0d90, 0d59);
                        add_isaac_enemy_spider(0d101, 0d67);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_4(0x22) { // east "-,-"
            enum entrance {
                east = entrance(0x35, 0x16, WEST),
                south = entrance(0x18, 0x1f, NORTH),
                west = entrance(0x00, 0x15, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_start, east, WEST);
                },
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_5, west, EAST);
                },
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_3, north, SOUTH);
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                sign = @install() {
                    subtext("B=3");
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                sniff = @install() {
                    subtext("B=7");
                },
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x01);

                object[0x00] = 0x01; // opens room_1_south
                // object[0x01] = 0x01; // closes room_1_east
                // object[0x12] = 0x01; // hides room_1_sign
                // object[0x09] = 0x01; // shows room_1_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_spider(0d15, 0d17);

                        add_isaac_enemy_maggot(0x26, 0x15);
                        
                        add_isaac_enemy_slime(0d38, 0d17);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_5(0x22) { // east-east "-|"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_4, east, WEST);
                },
                exit_east = @install() {
                    subtext("S=9");
                },

                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_boss, south, NORTH);
                },
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_6, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x05);

                object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_spider(0d17, 0d45);
                        add_isaac_enemy_maggot(0x10, 0x38);

                        add_isaac_enemy_slime(0d22, 0d55);

                        add_isaac_enemy_spider(0d17, 0d74);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_6(0x22) { // east-east-south "v"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_5, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    subtext("S=15");
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x59, 0x47);
                    add_isaac_enemy_maggot(0x5b, 0x49);
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_boss(0x20) { // east-east-north "drake-south"
            enum entrance {
                east = entrance(0x2b, 0x15, WEST),
                south = entrance(0x1b, 0x29, NORTH)
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum BOSS {
                PROGRESS = flag_tmp(),
                ID = memory_tmp(),

                FOLLOWING = memory_tmp(),

                PUKE_HELPER = memory_tmp(),

                MOVE_RNG = memory_tmp(),

                CANNONBALL_X = memory_tmp(),
                CANNONBALL_Y = memory_tmp(),
                CANNONBALL_COUNT = memory_tmp(),
            }

            enum stepon_trigger {
                exit_east = @install() {
                    subtext("S=0");
                },
                exit_south = @install() {
                    if!(BOSS.PROGRESS) {
                        map_transition(basement_2_5, north, SOUTH);
                    }
                }
            }

            @install()
            @async()
            fun boss_defeated() {
                set(SOULS_MEMORY.DEAD_MONSTRO);
                unset(BOSS.PROGRESS);
                souls_boss_defeated();

                music(AREA_BASEMENT.MUSIC_DEFAULT);
            }

            group monstro_ai() {
                @install()
                fun flop() {
                    shoot_entity_relative(BOSS.ID, ONION, 0x20 + randrange(0x20), 0x20 + randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                    shoot_entity_relative(BOSS.ID, ONION, 0x20 + randrange(0x20), 0x20 + randrange(0x20), 0x20 + randrange(0x10), 0x0a);

                    shoot_entity_relative(BOSS.ID, ONION, -0x20 - randrange(0x20), 0x20 + randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                    shoot_entity_relative(BOSS.ID, ONION, -0x20 - randrange(0x20), 0x20 + randrange(0x20), 0x20 + randrange(0x10), 0x0a);

                    shoot_entity_relative(BOSS.ID, ONION, -0x20 - randrange(0x20), -0x20 - randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                    shoot_entity_relative(BOSS.ID, ONION, -0x20 - randrange(0x20), -0x20 - randrange(0x20), 0x20 + randrange(0x10), 0x0a);

                    shoot_entity_relative(BOSS.ID, ONION, 0x20 + randrange(0x20), -0x20 - randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                    shoot_entity_relative(BOSS.ID, ONION, 0x20 + randrange(0x20), -0x20 - randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                }

                @install()
                fun puke() {
                    shoot_entity_absolute(BOSS.ID, ONION, <BOY>[X], <BOY>[Y], 0x20 + randrange(0x10), 0x0a);
                    shoot_entity_absolute(BOSS.ID, ONION, <BOY>[X] + randrange(0x40), <BOY>[Y] + randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                    sleep(0x02);
                    shoot_entity_absolute(BOSS.ID, ONION, <BOY>[X] + randrange(0x40), <BOY>[Y] + randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                    shoot_entity_absolute(BOSS.ID, ONION, <BOY>[X] + randrange(0x40), <BOY>[Y] + randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                    shoot_entity_absolute(BOSS.ID, ONION, <BOY>[X] + randrange(0x40), <BOY>[Y] + randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                    sleep(0x02);
                    shoot_entity_absolute(BOSS.ID, ONION, <BOY>[X] + randrange(0x40), <BOY>[Y] + randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                    shoot_entity_absolute(BOSS.ID, ONION, <BOY>[X] + randrange(0x40), <BOY>[Y] + randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                    sleep(0x05);
                    shoot_entity_absolute(BOSS.ID, ONION, <BOY>[X] + randrange(0x40), <BOY>[Y] + randrange(0x20), 0x20 + randrange(0x10), 0x0a);
                }

                @async()
                @install()
                fun following() {
                    while!(dead(BOSS.ID)) {
                        if(BOSS.FOLLOWING > 0x00) {
                            if(BOSS.ID[X] > <BOY>[X]) {
                                BOSS.ID[X] -= BOSS.FOLLOWING;
                            } else if(BOSS.ID[X] < <BOY>[X]) {
                                BOSS.ID[X] += BOSS.FOLLOWING;
                            }

                            if(BOSS.ID[Y] > <BOY>[Y]) {
                                BOSS.ID[Y] -= BOSS.FOLLOWING;
                            } else if(BOSS.ID[Y] < <BOY>[Y]) {
                                BOSS.ID[Y] += BOSS.FOLLOWING;
                            }
                        }

                        yield();
                    }
                }

                @install()
                fun yeet() {
                    BOSS.ID[JUMP_HEIGHT] = 0x55;
                    
                    BOSS.FOLLOWING = 0x01;
                    sleep(0xa0);
                    BOSS.FOLLOWING = 0x00;

                    flop();
                }

                @install()
                fun hop() {
                    BOSS.ID[JUMP_HEIGHT] = 0x20;

                    BOSS.FOLLOWING = 0x01;
                    sleep(0x40);
                    BOSS.FOLLOWING = 0x00;
                }

                fun move() {
                    animate(BOSS.ID, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);

                    BOSS.MOVE_RNG = randrange(0x05);

                    if(BOSS.MOVE_RNG == 0x00) {
                        puke();
                        sleep(0x50);
                    } else if(BOSS.MOVE_RNG == 0x01) {
                        yeet();
                        sleep(0x60);
                    } else {
                        hop();
                        sleep(0x20);
                    }
                }

                @async()
                @install()
                fun move_logic() {
                    sleep(0x80);
                    
                    while!(dead(BOSS.ID)) {
                        move();
                    }
                }

                @install()
                fun monstro_damage() {
                    attribute(BOSS.ID, INVISIBLE, True);
                    yield();
                    attribute(BOSS.ID, INVISIBLE, False);
                    animate(BOSS.ID, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);

                    if(dead(BOSS.ID)) {
                        boss_defeated();
                    }
                }

                fun spawn_boss(x, y) {
                    add_enemy(MAGMAR, x, y);
                    BOSS.ID = <LAST_ENTITY>;
                    animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
                    attach_script(LAST_ENTITY, DAMAGE, reference(monstro_damage));
                    attribute(LAST_ENTITY, ROOT, True);

                    following();
                    move_logic();

                    set(BOSS.PROGRESS);
                    fade_to_music(BOSS);
                }
            };

            @install()
            fun trap_door_interacted() {
                if!(BOSS.PROGRESS) {
                    map_transition(basement_3_start, center, NONE);
                }
            }

            fun trigger_enter() {
                if!(SOULS_MEMORY.DEAD_MONSTRO) {
                    spawn_boss(0x10, 0x13);

                    subtext("Isaac vs. Monstro");
                }

                // available(BOY);
                // destroy(DOG); // teleport(BOY, 0x00, 0x00);

                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x10, 0x13);
                attach_script(LAST_ENTITY, TALK, reference(trap_door_interacted));

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };
    };

    area level_3() {
        enum BASEMENT_LEVEL {
            NIGHT = True,
            RAIN = False,
        }

        map basement_3_start(0x22) { // start "-|"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_west = @install() {
                    map_transition(basement_3_1, east, WEST);
                },
                exit_east = @install() {
                    subtext("S=9");
                },

                exit_north = @install() {
                    map_transition(basement_3_4, south_2, NORTH);
                },
                exit_south = @install() {
                    map_transition(basement_3_3, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);

                if!(FLAG.IN_ANIMATION) {
                    // teleport(DOG, 0x19, 0x1d);
                    <DOG>[X] += 0x20;
                    <DOG>[Y] += 0x20;
                    crash_land(BOTH);

                    subtext("Basement Level 5");
                }
            }
        };

        map basement_3_1(0x22) { // west ",-"
            enum entrance {
                east = entrance(0x6f, 0x17, WEST),
                south_1 = entrance(0x65, 0x1f, NORTH),
                south_2 = entrance(0x46, 0x1f, NORTH),
                west = entrance(0x38, 0x18, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_2, north, SOUTH);
                },
                east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_start, west, EAST);
                },
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() {
                    subtext("S=16");
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = @install() {
                    subtext("B=2");
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                sniff = @install() {
                    subtext("B=8");
                },
            }


            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                // object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                // object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_fly_exploding(0d79, 0d17);

                        add_isaac_enemy_spider(0x57, 0x16);

                        add_isaac_enemy_fly_exploding(0d92, 0d26);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_2(0x22) { // west-south "L"
            enum entrance {
                north = entrance(0x39, 0x24, SOUTH),
                east = entrance(0x48, 0x4b, WEST),
                west = entrance(0x26, 0x4e, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() {
                    subtext("S=1");
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_1, south_2, NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_3, west, EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                // object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_slime(0d57, 0d61);

                        add_isaac_enemy_maggot(0x3c, 0x3c);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_3(0x22) { // south, west-south-east "_|"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_start, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_2, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_spider(0d97, 0d55);
                        
                        add_isaac_enemy_maggot(0x59, 0x47);
                        add_isaac_enemy_maggot(0x5b, 0x49);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_4(0x22) { // north "/\"
            enum entrance {
                east = entrance(0x6f, 0x17, WEST),
                south_1 = entrance(0x65, 0x1f, NORTH),
                south_2 = entrance(0x46, 0x1f, NORTH),
                west = entrance(0x38, 0x18, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_start, north, SOUTH);
                },
                east = @install() {
                    subtext("S=6");
                },
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_5, north, SOUTH);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = @install() {
                    subtext("B=2");
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                sniff = @install() {
                    subtext("B=8");
                },
            }

            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                // object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x53, 0x13);

                        add_isaac_enemy_fly_shooting(0d92, 0d17);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_5(0x22) { // north-south2 "|-"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_west = @install() {
                    subtext("S=8");
                },
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_6, west, EAST);
                },

                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_4, south_1, NORTH);
                },
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_7, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                // object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x12, 0x36);

                        add_isaac_enemy_fly_exploding(0d27, 0d56);

                        add_isaac_enemy_spider(0d15, 0d69);
                        add_isaac_enemy_spider(0d22, 0d67);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_6(0x22) { // north-south2-east "-^"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    subtext("S=13");
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_5, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x5d, 0x31);

                        add_isaac_enemy_slime(0d97, 0d68);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_7(0x22) { // north-south2-south "|"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_west = @install() {
                    subtext("S=8");
                },
                exit_east = @install() {
                    subtext("S=9");
                },

                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_5, south, NORTH);
                },
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_8, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    subtext("B=5");
                },
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                // object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_fly_exploding(0d24, 0d56);
                        add_isaac_enemy_fly_shooting(0d11, 0d56);

                        add_isaac_enemy_maggot(0x12, 0x36);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_8(0x22) { // north-south2-south-south "_|"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_7, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_9, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_slime(0d96, 0d54);

                        add_isaac_enemy_maggot(0x59, 0x47);
                        add_isaac_enemy_maggot(0x5b, 0x49);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_9(0x22) { // north-south2-south-south-east "--"
            enum entrance {
                east = entrance(0x35, 0x16, WEST),
                north = entrance(0x18, 0x1f, NORTH),
                west = entrance(0x00, 0x15, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_boss, east, WEST);
                },
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_8, west, EAST);
                },
                exit_south = @install() {
                    subtext("S=4");
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    subtext("B=0");
                },
                b_trigger_1 = @install() {
                    subtext("B=1");
                },
                room_2_sign = nop(),
                sign = @install() {
                    subtext("B=3");
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    subtext("B=6");
                },
                sniff = @install() {
                    subtext("B=7");
                },
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x01);

                object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x23, 0x15);

                    add_isaac_enemy_spider(0d13, 0d18);
                    add_isaac_enemy_spider(0d23, 0d25);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_boss(0x20) { // north-south2-south-south-east-east "drake-east"
            enum entrance {
                east = entrance(0x2b, 0x15, WEST),
                south = entrance(0x1b, 0x29, NORTH)
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum BOSS {
                PROGRESS = flag_tmp(),

                MOUNT_ID = memory_tmp(),
                RIDER_ID = memory_tmp(),

                MOVE_RNG = memory_tmp(),

                CANNONBALL_X = memory_tmp(),
                CANNONBALL_Y = memory_tmp(),
                CANNONBALL_COUNT = memory_tmp(),
            }

            enum stepon_trigger {
                exit_east = @install() {
                    if!(BOSS.PROGRESS) {
                        map_transition(basement_3_9, west, EAST);
                    }
                },
                exit_south = @install() {
                    subtext("S=1");
                }
            }

            @install()
            fun boss_defeated() {
                set(SOULS_MEMORY.DEAD_DARK_ONE);
                unset(BOSS.PROGRESS);

                souls_boss_defeated();

                music(AREA_BASEMENT.MUSIC_DEFAULT);
            }

            group boss_ai() {
                @install()
                fun shoot_x() {
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x80, -0x80, 0x10, 0xff); // north east
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, -0x80, -0x80, 0x10, 0xff); // north west
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x80, 0x80, 0x10, 0xff); // south east
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, -0x80, 0x80, 0x10, 0xff); // south west
                }

                @install()
                fun shoot_plus() {
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, -0x80, 0x10, 0xff); // north
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x80, 0x00, 0x10, 0xff); // east
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff); // south
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, -0x80, 0x00, 0x10, 0xff); // west
                }

                @install()
                fun shoot_star() {
                    // shoot_x();
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x60, -0x60, 0x10, 0xff); // north east
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, -0x60, -0x60, 0x10, 0xff); // north west
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x60, 0x60, 0x10, 0xff); // south east
                    shoot_entity_relative(BOSS.MOUNT_ID, ONION, -0x60, 0x60, 0x10, 0xff); // south west

                    shoot_plus();
                }

                @install()
                fun charge_right() {
                    face(BOSS.MOUNT_ID, EAST);
                    animate(BOSS.MOUNT_ID, LOOP, ANIMATION_ENEMY.LIZARD_ROLL);

                    BOSS.CANNONBALL_COUNT = 0x0000;

                    while(BOSS.CANNONBALL_COUNT <= 0x02) {
                        if(BOSS.MOUNT_ID[X] > 0x200) {
                            BOSS.CANNONBALL_COUNT += 0x01;

                            BOSS.MOUNT_ID[X] = 0x00;
                            BOSS.MOUNT_ID[Y] = <BOY>[Y];

                            animate(BOSS.MOUNT_ID, LOOP, ANIMATION_ENEMY.LIZARD_ROLL);
                        }

                        BOSS.MOUNT_ID[X] += 0x08;
                        bomb_entity(BOSS.MOUNT_ID, 0x10);

                        yield();
                    }

                    BOSS.CANNONBALL_X = <BOY>[X];
                    BOSS.CANNONBALL_Y = <BOY>[Y];

                    BOSS.MOUNT_ID[X] = 0x00;
                    BOSS.MOUNT_ID[Y] = BOSS.CANNONBALL_Y;

                    while(BOSS.MOUNT_ID[X] < BOSS.CANNONBALL_X) {
                        BOSS.MOUNT_ID[X] += 0x08;
                        bomb_entity(BOSS.MOUNT_ID, 0x10);

                        yield();
                    }

                    animate(BOSS.MOUNT_ID, ONCE, ANIMATION_ENEMY.LIZARD_DUCK_1);

                    BOSS.CANNONBALL_X = BOSS.MOUNT_ID[X] - 0x10;

                    while(BOSS.MOUNT_ID[X] > BOSS.CANNONBALL_X) {
                        BOSS.MOUNT_ID[X] -= 0x01;

                        sleep(0x02);
                    }

                    animate(BOSS.MOUNT_ID, ONCE, ANIMATION_ALL.DEFAULT);
                }

                @install()
                @async()
                fun stack_t01() {
                    while!(dead(<BOY>)) {
                        BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                        BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y];
                        yield();

                        // <DOG>[X] = <BOY>[X] - 0x05;
                        // <DOG>[Y] = <BOY>[Y];
                        // yield();
                    }
                }

                fun move() {
                    attribute(BOSS.MOUNT_ID, ROOT, True);
                    animate(BOSS.MOUNT_ID, ONCE, ANIMATION_ENEMY.LIZARD_DUCK_2);
                    control(BOSS.MOUNT_ID, True);
                    animate(BOSS.MOUNT_ID, LOOP, ANIMATION_ENEMY.LIZARD_DUCK_1);
                    sleep(0x20);

                    BOSS.MOVE_RNG = randrange(0x03);

                    if(BOSS.MOVE_RNG == 0x00) {
                        shoot_x();
                        sleep(0x50);
                        shoot_plus();
                    } else if(BOSS.MOVE_RNG == 0x01) {
                        shoot_star();
                    } else {
                        charge_right();
                    }

                    animate(BOSS.MOUNT_ID, ONCE, ANIMATION_ENEMY.LIZARD_DUCK_2);
                    sleep(0x20);
                    animate(BOSS.MOUNT_ID, ONCE, ANIMATION_ALL.DEFAULT);
                    attribute(BOSS.MOUNT_ID, ROOT, False);
                    control(BOSS.MOUNT_ID, False);
                }

                @async()
                @install()
                fun move_logic() {
                    sleep(0x80);
                    
                    while!(dead(BOSS.MOUNT_ID)) {
                        move();
                        
                        sleep(0x60);
                    }
                }

                fun spawn_boss(x, y) {
                    add_enemy(MAGMAR, x, y);
                    BOSS.RIDER_ID = <LAST_ENTITY>;
                    animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
                    attach_script(LAST_ENTITY, DEATH, reference(boss_defeated));
                    attribute(LAST_ENTITY, ROOT, True);
                    attribute(LAST_ENTITY, INVISIBLE, True);
                    attribute(LAST_ENTITY, INVINCIBLE, True);

                    // add_enemy_with_flags(DRAKE, x, y, INACTIVE);
                    // add_enemy_with_flags(FOOTKNIGHT, x, y, INACTIVE);
                    add_enemy_with_flags(LIZARD_BLACK, x, y, 0x00);
                    attach_script(LAST_ENTITY, DEATH, reference(boss_defeated));
                    BOSS.MOUNT_ID = <LAST_ENTITY>;

                    move_logic();
                    stack_t01();

                    set(BOSS.PROGRESS);
                    fade_to_music(BOSS);
                }
            };

            @install()
            fun trap_door_interacted() {
                if!(BOSS.PROGRESS) {
                    map_transition(west_hut_outside, hut, NONE);
                }
            }

            fun trigger_enter() {
                object[0x00] = 0x01; // close south
                object[0x01] = 0x7e; // open east

                if!(SOULS_MEMORY.DEAD_DARK_ONE) {
                    spawn_boss(0x10, 0x13);

                    subtext("Isaac vs. Dark One");
                }

                // available(BOY);
                // destroy(DOG); // teleport(BOY, 0x00, 0x00);

                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x10, 0x13);
                attach_script(LAST_ENTITY, TALK, reference(trap_door_interacted));

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };
    };
};

area dungeon_volcano() {
    map dungeon_volcano(0x3b) {
        enum entrance {
            north_1 = entrance(0x2e, 0x05, SOUTH),
            north_2 = entrance(0x76, 0x06, SOUTH),
            south_1 = entrance(0x7d, 0xb1, NORTH),
            south_2 = entrance(0x51, 0xb1, NORTH),
        }

        enum ROOM {
            ID_STONE = memory_tmp(),

            Z_UPSTAIRS = 0x10,
            Z_DOWNSTAIRS = 0x20,
        }

        enum BOSS {
            DEBUG = True,

            HEAD_1_ID = memory_tmp(),
            HEAD_2_ID = memory_tmp(),
            HEAD_3_ID = memory_tmp(),

            PHASE = memory_tmp(),
        }

        enum stepon_trigger {
            exit_north_1 = @install() {
                map_transition(squidmar, south, NORTH);
            },
            exit_north_2 = @install() {
                map_transition(aquagoth, south, NORTH);
            },
            exit_south_1 = @install() {
                map_transition(east_crossing, elevator_top, SOUTH);
            },
            exit_south_2 = @install() {
                map_transition(east_crossing, elevator_bottom, SOUTH);
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() {
                subtext("B=0");
            },
            b_trigger_1 = @install() {
                subtext("B=1");
            },
            b_trigger_2 = @install() {
                subtext("B=2");
            },
            b_trigger_3 = @install() {
                subtext("B=3");
            },
            b_trigger_4 = @install() {
                subtext("B=4");
            },
            b_trigger_5 = @install() {
                subtext("B=5");
            },
            b_trigger_6 = @install() {
                subtext("B=6");
            },
            b_trigger_7 = @install() {
                subtext("B=7");
            },
            b_trigger_8 = @install() {
                subtext("B=8");
            },
            b_trigger_9 = @install() {
                subtext("B=9");
            },

            b_trigger_10 = @install() {
                subtext("B=10");
            },
            b_trigger_11 = @install() {
                subtext("B=11");
            },
            b_trigger_12 = @install() {
                subtext("B=12");
            },
            b_trigger_13 = @install() {
                subtext("B=13");
            },
            b_trigger_14 = @install() {
                subtext("B=14");
            },
            b_trigger_15 = @install() {
                subtext("B=15");
            },
            b_trigger_16 = @install() {
                subtext("B=16");
            },
            b_trigger_17 = @install() {
                subtext("B=17");
            },
            b_trigger_18 = @install() {
                subtext("B=18");
            },
            b_trigger_19 = @install() {
                subtext("B=19");
            },

            b_trigger_20 = @install() {
                subtext("B=20");
            },
            b_trigger_21 = @install() {
                subtext("B=21");
            },
            b_trigger_22 = @install() {
                subtext("B=22");
            },
            b_trigger_23 = @install() {
                subtext("B=23");
            },
            b_trigger_24 = @install() {
                subtext("B=24");
            },
            b_trigger_25 = @install() {
                subtext("B=25");
            },
            b_trigger_26 = @install() {
                subtext("B=26");
            },
            b_trigger_27 = @install() {
                subtext("B=27");
            },
            b_trigger_28 = @install() {
                subtext("B=28");
            },
            b_trigger_29 = @install() {
                subtext("B=29");
            },

            b_trigger_30 = @install() {
                subtext("B=30");
            },
            b_trigger_31 = @install() {
                subtext("B=31");
            },
            b_trigger_32 = @install() {
                subtext("B=32");
            },
            b_trigger_33 = @install() {
                subtext("B=33");
            },
        }

        fun boss_defeated() {
            SOULS_MEMORY.BOSSES_DEFEATED_COUNTER += 0x01;
            SOULS_MEMORY.PROGRESS_COUNTER += 0x01;

            set(SOULS_MEMORY.DEAD_VOLCANO_HYDRA);

            animate(ROOM.ID_STONE, ONCE_FREEZE, ANIMATION_PLACEHOLDER.EXPLOSION_1);
        }

        fun spawn_snake(x, y) {
            add_enemy(BONE_SNAKE, x, y);
            <LAST_ENTITY>[Z] = ROOM.Z_UPSTAIRS;
            attach_script(LAST_ENTITY, DEATH, reference(head_killed));
        }
        fun spawn_salabog(x, y) {
            add_enemy(SALABOG, x, y);
            <LAST_ENTITY>[Z] = ROOM.Z_UPSTAIRS;
            attach_script(LAST_ENTITY, DEATH, reference(head_killed));
        }

        fun spawn_1_head() {
            spawn_snake(0x47, 0x74);
        }
        fun spawn_2_head() {
            spawn_snake(0x47, 0x74);
            spawn_snake(0x48, 0x74);
        }
        fun spawn_big_head() {
            spawn_salabog(0x47, 0x74);
        }

        @install()
        fun head_killed() {
            if(BOSS.PHASE == 0x00) {
                spawn_2_head();
            } else if(BOSS.PHASE == 0x02) {
                spawn_big_head();
            } else if(BOSS.PHASE > 0x02) {
                boss_defeated();
            }

            BOSS.PHASE += 0x01;
        }

        fun trigger_enter() {
            if!(SOULS_MEMORY.DEAD_VOLCANO_HYDRA) {
                if(<BOY>[Z] == ROOM.Z_UPSTAIRS) {
                    spawn_1_head();
                    // add_enemy(OGLIN, 0x44, 0x65);
                    add_enemy(SLIME_PINK, 0x44, 0x65);
                    add_enemy(SLIME_PINK, 0x51, 0x6d);
                } else {
                    spawn_1_head();
                    attribute(LAST_ENTITY, INVINCIBLE, True);
                }

                add_enemy(STONE_ROUND, 0x44, 0x85);
                ROOM.ID_STONE = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, TALK, reference(contraption_trigger));
            }

            default_init_room(True, False);
        }
    };

    map squidmar(0x6d) {
        enum entrance {
            south = entrance(0x1b, 0x51, NORTH)
        }

        enum ROOM {
            FAKE_EXIT_ID = memory_tmp()
        }

        fun fake_exit() {
            map_transition(dungeon_volcano, north_1, NORTH);
        }

        @install()
        @async()
        fun fake_exit_scanner() {
            attach_to_script(ROOM.FAKE_EXIT_ID);

            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = <SCRIPT_OWNER>[X];
                arg[0x06] = <SCRIPT_OWNER>[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    fake_exit();
                    end();
                }

                yield();
            }
        }

        @install()
        fun squidmar_dialog() {
            dialog("I'm Squidmar.[0x80][0x19][0x81]");
        }
        @install()
        fun squidmar_combat() {
            dialog("...[0x80][0x19][0x81]");
        }

        fun trigger_enter() {
            add_enemy(AQUAGOTH_ENTITY, 0x1a, 0x34);
            attach_script(LAST_ENTITY, DAMAGE, reference(squidmar_combat));
            attach_script(LAST_ENTITY, TALK, reference(squidmar_dialog));

            default_init_room(True, False);

            add_enemy(PLACEHOLDER, 0x1b, 0x52);
            ROOM.FAKE_EXIT_ID = <LAST_ENTITY>;
            sleep(0x10);
            fake_exit_scanner();
        }
    };

    map aquagoth(0x6d) {
        enum entrance {
            south = entrance(0x1b, 0x51, NORTH)
        }

        enum ROOM {
            FAKE_EXIT_ID = memory_tmp(),
        }

        fun fake_exit() {
            map_transition(dungeon_volcano, north_2, NORTH);
        }

        @install()
        @async()
        fun fake_exit_scanner() {
            attach_to_script(ROOM.FAKE_EXIT_ID);

            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = <SCRIPT_OWNER>[X];
                arg[0x06] = <SCRIPT_OWNER>[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    fake_exit();
                    end();
                }

                yield();
            }
        }

        @install()
        fun aquagoth_dialog() {
            dialog("I'm Aquagoth.[0x80][0x19][0x81]");
        }
        @install()
        fun aquagoth_combat() {
            dialog("...[0x80][0x19][0x81]");
        }

        fun init_room() {
            if(SOULS_MEMORY.WITH_WEATHER) {
                sfx_effect(SEPIA, True);
            }
            
            default_init_room(False, False);
        }

        fun trigger_enter() {
            add_enemy(AQUAGOTH_ENTITY, 0x1a, 0x34);
            attach_script(LAST_ENTITY, DAMAGE, reference(aquagoth_combat));
            attach_script(LAST_ENTITY, TALK, reference(aquagoth_dialog));

            init_room();

            add_enemy(PLACEHOLDER, 0x1b, 0x52);
            ROOM.FAKE_EXIT_ID = <LAST_ENTITY>;
            sleep(0x10);
            fake_exit_scanner();

            subtext("A fould stench is in the air.");
        }
    };
};

// experimental

area experimental_room() {
    fun character_selection(character:CHARACTER) {
        if(character == CHARACTER.BOY) {
            available(BOY);
            destroy(DOG); // teleport(BOY, 0x00, 0x00);

            attribute(BOY, INVINCIBLE, True);
        } else if(character == CHARACTER.DOG) {
            available(DOG);
            teleport(BOY, 0x00, 0x00);

            MEMORY.DOG = DOG.TOASTER;

            attribute(DOG, INVINCIBLE, True);

            attach_script(DOG, DEATH, reference(boy_death));
        }
    }

    fun general_boss_defeated() {
        attribute(ACTIVE, INVINCIBLE, True);

        subtext("Yatta!");

        sleep(0xff);
        sleep(0xff);
    }

    fun countdown(countdown) {
        if(countdown >= 0x03) {
            subtext("3...");
            sleep(0x3c);
        }
        if(countdown >= 0x02) {
            subtext("2...");
            sleep(0x3c);
        }
        if(countdown >= 0x01) {
            subtext("1...");
            sleep(0x3c);
        }
        if(countdown >= 0x00) {
            subtext("GO");
        }
    }

    map arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = @install() {
                subtext("S=0");
            },
            exit_south = @install() {
                subtext("S=1");
            },
            center = @install() {
                subtext("S=2");
            }
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            if!(FLAG.IN_ANIMATION) {

                // teleport(DOG, 0x19, 0x1d);
                <DOG>[X] += 0x20;
                <DOG>[Y] += 0x20;
                crash_land(BOTH);
            }
        }
    };

    map toaster_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum soundtrack {
            default = soundtrack(0x3e, 0xff)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        enum BOSS {
            HEAL_AMOUNT = 0x0f,

            HIT_COUNT_MEMORY = <0x2834>,
            HIT_COUNT = 0x0a,

            COUNTDOWN = 0x03
        }

        fun boss_defeated() {
            general_boss_defeated();

            map_transition(toaster_arena, center, NONE);
        }

        fun boss_hit() {
            BOSS.HIT_COUNT_MEMORY -= 0x01;

            if(BOSS.HIT_COUNT_MEMORY <= 0x00) {
                boss_defeated();
            } else {
                MEMORY.STRING_PARAMETER_1 = BOSS.HIT_COUNT_MEMORY;
                MEMORY.STRING_PARAMETER_2 = BOSS.HIT_COUNT;

                subtext("[MEM1]/[MEM2]");
            }
        }

        @install()
        fun guardbot_down() {
            boss_hit();

            yield();
            attribute(SCRIPT_OWNER, INVINCIBLE, True);

            animate(SCRIPT_OWNER, ONCE_FREEZE, ANIMATION_ENEMY.GATE_BOT_DEAD);

            sleep(0xff);
            sleep(0xff);

            cast(SCRIPT_OWNER, SCRIPT_OWNER, CAST.HEAL, BOSS.HEAL_AMOUNT);
            sleep(0xff);

            animate(SCRIPT_OWNER, ONCE, ANIMATION_ALL.DEFAULT);
            attribute(SCRIPT_OWNER, INVINCIBLE, False);
        }

        fun spawn_guardbot(x, y) {
            add_enemy(GATE_BOT, x, y);
            <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
            attach_script(LAST_ENTITY, DAMAGE, reference(guardbot_down));
        }

        fun trigger_enter() {
            default_init_room(True, False);
            character_selection(DOG);

            close_exits(True);

            BOSS.HIT_COUNT_MEMORY = BOSS.HIT_COUNT;

            spawn_guardbot(0x29, 0x2b);
            spawn_guardbot(0x13, 0x29);
            spawn_guardbot(0x29, 0x1b);
            spawn_guardbot(0x13, 0x19);

            countdown(BOSS.COUNTDOWN);
            attribute(DOG, INVINCIBLE, False);
        }
    };

    map bomb_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum BOSS {
            ID = memory_tmp(),
        }

        @install()
        fun boss_defeated() {
            general_boss_defeated();

            map_transition(bomb_arena, right, NONE);
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        fun memscan() {
            // animate(BOSS.ID, LOOP, ANIMATION_ENEMY.VIGOR_FLEX);
            // yield();

            debug_memory(BOSS.ID[0x36], BOSS.ID[HP]);

            if(BOSS.ID[DAMAGE_TYPE] > 0x00) {
                heal(SCRIPT_OWNER, 0x00, False);
            }

            sleep(0x50);

            debug_memory(BOSS.ID[0x36], BOSS.ID[HP]);
        }

        fun trigger_enter() {
            close_exits(True);
            character_selection(BOY);

            add_enemy(VIGOR, 0x15, 0x1e);
            BOSS.ID = <LAST_ENTITY>;
            attach_script(LAST_ENTITY, DEATH, reference(boss_defeated));
            attach_script(LAST_ENTITY, DAMAGE, reference(memscan));

            default_init_room(True, False);
            SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.BOMBS;

            countdown(0x03);
            // attribute(BOY, INVINCIBLE, False);

            set(SOULS_MEMORY.BOMB_ENABLED);
            unlock(ENERGY_CORE);
            subtext("Start = Bomb");

            sleep(0x50);
        }
    };

    map invisible_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum ROOM {
            REVEALER_ID = memory_tmp(),
        }

        enum BOSS {
            BOSS_ID = memory_tmp(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        fun boss_defeated4() {
            general_boss_defeated();

            map_transition(invisible_arena, right, NONE);
        }

        @install()
        fun revealer_triggered() {
            destroy(ROOM.REVEALER_ID);

            attribute(BOSS.BOSS_ID, INVISIBLE, False);
        }

        @install()
        @async()
        fun stack_revealer_boss() {
            while!(dead(ROOM.REVEALER_ID)) {
                ROOM.REVEALER_ID[X] = BOSS.BOSS_ID[X];
                ROOM.REVEALER_ID[Y] = BOSS.BOSS_ID[Y];
                yield();
            }
        }

        fun trigger_enter() {
            close_exits(True);

            add_enemy(MAGMAR, 0x1e, 0x21);
            attribute(LAST_ENTITY, INVISIBLE, True);
            BOSS.BOSS_ID = <LAST_ENTITY>;
            attach_script(LAST_ENTITY, DEATH, reference(boss_defeated4));

            default_init_room(True, False);

            add_enemy(REVEALER_TARGET_ENTITY, 0x1e, 0x21);
            ROOM.REVEALER_ID = <LAST_ENTITY>;

            special_script(REVEALER, reference(revealer_triggered));
            stack_revealer_boss();

            countdown(0x03);
            attribute(BOY, INVINCIBLE, False);

        }
    };

    map drone_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum BOSS {
            RIDER_1_ID = memory_tmp(),
            MOUNT_1_ID = memory_tmp(),

            RIDER_2_ID = memory_tmp(),
            MOUNT_2_ID = memory_tmp(),

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            COUNTDOWN = 0x03,
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        @async()
        fun stack_t01_t23() {
            while(True) {
                if!(dead(BOSS.RIDER_1_ID)) {
                    BOSS.RIDER_1_ID[X] = BOSS.MOUNT_1_ID[X];
                    BOSS.RIDER_1_ID[Y] = BOSS.MOUNT_1_ID[Y] - 0x15;
                    yield();
                }
                if!(dead(BOSS.RIDER_2_ID)) {
                    BOSS.RIDER_2_ID[X] = BOSS.MOUNT_2_ID[X];
                    BOSS.RIDER_2_ID[Y] = BOSS.MOUNT_2_ID[Y] - 0x15;
                    yield();
                }

                yield();
            }
        }

        fun turret(id_1, id_2, x, y, mount_type) {
            add_enemy(GATE_BOT, x, y);
            id_1 = <LAST_ENTITY>;

            add_enemy(mount_type, x, y);
            id_2 = <LAST_ENTITY>;
            attribute(LAST_ENTITY, INVISIBLE, True);
            attribute(LAST_ENTITY, INVINCIBLE, True);
            attribute(LAST_ENTITY, MUTE, True);
        }

        fun spawn_boss(x, y) {
            turret(BOSS.RIDER_1_ID, BOSS.MOUNT_1_ID, x, y, ENEMY.MOSQUITO);
            turret(BOSS.RIDER_2_ID, BOSS.MOUNT_2_ID, x, y, ENEMY.BEE);
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            spawn_boss(0x10, 0x20);
            stack_t01_t23();
            // boss_watcher();

            character_selection(BOY);
            // character_selection(DOG);
            countdown(BOSS.COUNTDOWN);
            attribute(BOY, INVINCIBLE, False);
            // attribute(DOG, INVINCIBLE, False);
        }
    };

    map rats_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum soundtrack {
            default = soundtrack(0x30, 0x30)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum BOSS {
            RAT_1_ID = memory_tmp(),
            RAT_1_X = 0x13,
            RAT_1_Y = 0x19,
            RAT_2_ID = memory_tmp(),
            RAT_2_X = 0x29,
            RAT_2_Y = 0x1b,
            RAT_3_ID = memory_tmp(),
            RAT_3_X = 0x13,
            RAT_3_Y = 0x25,
            RAT_4_ID = memory_tmp(),
            RAT_4_X = 0x29,
            RAT_4_Y = 0x27,

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            COUNTDOWN = 0x03,
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        fun rat_dead(x, y, death_trigger) {
            add_enemy(RAT, x, y);
            attach_script(LAST_ENTITY, DEATH, death_trigger);
            <LAST_ENTITY>[HP] = 0x0001;

            sleep(0x20);
            destroy(SCRIPT_OWNER);
        }

        @install()
        fun rat_1_dead() {
            rat_dead(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));
        }
        @install()
        fun rat_2_dead() {
            rat_dead(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));
        }
        @install()
        fun rat_3_dead() {
            rat_dead(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));
        }
        @install()
        fun rat_4_dead() {
            rat_dead(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
        }

        fun spawn_rat(x, y, death_trigger) {
            add_enemy(RAT, x, y);
            attach_script(LAST_ENTITY, DEATH, death_trigger);
            <LAST_ENTITY>[HP] = 0x0001;
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            character_selection(DOG);
            // character_selection(DOG);
            // countdown(BOSS.COUNTDOWN);
            attribute(DOG, INVINCIBLE, False);
            // attribute(DOG, INVINCIBLE, False);

            spawn_rat(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));
            spawn_rat(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));

            sleep(0x40);

            spawn_rat(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));
            spawn_rat(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));

            sleep(0x20);

            spawn_rat(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));
            spawn_rat(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));

            sleep(0x20);

            spawn_rat(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
            spawn_rat(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
        }
    };

    map radahn3_arena(0x5c) {
        enum entrance {
            north = entrance(0x1b, 0x03, SOUTH),
            south = entrance(0x1d, 0x33, NORTH),

            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum soundtrack {
            default = soundtrack(0x32, 0xff)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        enum BOSS {
            DEBUG = True,

            RIDER_ID = memory_tmp(),
            MOUNT_ID = memory_tmp(),

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            HP = 0x03e8, // 1000

            COUNTDOWN = 0x03,

            STOMP_ENTITY = memory_tmp(),
            STOMP_DISTANCE = 0x20,
            STOMP_COOL_DOWN_TIMER = memory_tmp(),
            STOMP_COOL_DOWN = 0x100,
            STOMP_DAMAGE_CLOSE = 0x50,
            STOMP_DAMAGE = 0x10,
            STOMP_EXPLOSION_DISTANCE = 0x30,

            // p1

            P1_THRESHOLD = 0x320, // 800
            P1_TIME_BEFORE_SALVAGE = 0x500,

            // p2

            P2_THRESHOLD = 0x1f4, // 500
            P2_TIME_BEFORE_SALVAGE = 0x300,

            RANDOM_SPELL = memory_tmp(),
            TIME_BEFORE_RANDOM_SPELL = 0x300,
        }

        fun boss_killed() {
            nop();
        }

        @install()
        @async()
        fun grab() {
            <0x283d> = BOSS.MOUNT_ID;

            if(dead(<0x283d>)) {
                subtext("dead 1");
                end();
            }
            control(NONE);
            attribute(BOY, ROOT, True);
            attribute(<0x283d>, ROOT, True);

            <0x249d> = <BOY>[X];
            <0x249f> = <BOY>[Y];
            <0x24ab> = 0x01d8;
            <0x24af> = 0x00f8;

            if(<0x249d> < <0x24ab>) {
                arg[0x00] = 0x01;
            }
            animate(0x283d, LOOP, ANIMATION_ENEMY.STERLING_FLY_2);

            <0x249d> = <0x283d>[X];
            <0x249f> = <0x283d>[Y];

            <0x24a1> = <BOY>[X] - 0x06;
            <0x24a1> = <BOY>[Y] - 0x1f;

            <0x2847> = 0x1e;
            <0x249f> -= 0x10;

            _teleport(<0x283d>, <0x249d>, <0x249f>);

            <0x283f> = <0x24a1> - <0x249d>;
            <0x2841> = <0x24a3> - <0x249f>;

            <0x2843> = (<0x283f> lshift 0x04) / <0x2847>;
            <0x2845> = (<0x2841> lshift 0x04) / <0x2847>;

            <0x23b9> = <0x249d> lshift 0x04;
            <0x23bb> = <0x24bb> lshift 0x04;

            <0x283d>[JUMP_HEIGHT] = <0x2847> / 0x02;
            arg[0x02] = 0x00;

            while(arg[0x02] <= <0x2847>) {
                <0x23b9> += <0x2843>;
                <0x23bb> += <0x2845>;
                <0x23db> = 0x0000;
                _teleport(<0x283d>, <0x23b9> rshift 0x04, <0x23bb> rshift 0x04);
                yield();
                arg[0x02] += 0x01;

                sleep(0x30);
                debug_memory(<0x23b9> rshift 0x04, <0x23bb> rshift 0x04);
            }

            // if(dead(<0x283d>)) {
            //     subtext("dead 2");
            //     end();
            // }

            // call(0x99988a);

            debug_memory(<0x2843>, <0x2845>);
            // subtext("test 2");
            end();

            <0x249d> = <BOY>[X];
            <0x249f> = <BOY>[Y];

            if(arg[0x00] == 0x01) {
                <0x24a1> = 0x00f8;
                <0x24a3> = 0x00e8;
                face(BOY, WEST);
                face(0x283d, WEST);
            } else {
                <0x24a1> = 0x02d8;
                <0x24a3> = 0x00e8;
                face(BOY, EAST);
                face(0x283d, EAST);
            }

            yield();

            animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
            <0x2847> = 0x004b;
            <0x249f> -= 0x10;
            <0x23db> = 0x0010;
            _teleport(<BOY>, <0x249d>, <0x249f>);

            <0x23db> = 0x0000;
            _teleport(<0x283d>, <0x249d> - 0x06, <0x249f> - 0x1f);

            <0x283f> = <0x24a1> - <0x249d>;
            <0x2841> = <0x24a3> - <0x249f>;

            <0x2843> = (<0x283f> lshift 0x04) / <0x2847>;
            <0x2845> = (<0x2841> lshift 0x04) / <0x2847>;

            <0x23b9> = <0x249d> lshift 0x04;
            <0x23bb> = <0x249f> lshift 0x04;

            <BOY>[JUMP_HEIGHT] = <0x2847> / 0x02;
            <0x283d>[JUMP_HEIGHT] = <0x2847> / 0x02;

            arg[0x02] = 0x00;

            while(arg[0x02] <= <0x2847>) {
                <0x23b9> += <0x2843>;
                <0x23bb> += <0x2845>;
                <0x23db> = 0x0010;
                _teleport(<BOY>, <0x23b9> rshift 0x04, <0x23bb> rshift 0x04);
                <0x23db> = 0x0000;
                _teleport(<0x283d>, (<0x23b9> rshift 0x04) - 0x06, (<0x23bb> rshift 0x04) - 0x1f);
                yield();
                arg[0x02] += 0x01;
            }

            sleep(0x1d);
            call(0x99988a);

            <0x249d> = <BOY>[X];
            <0x249f> = <BOY>[Y];

            if(arg[0x00] == 0x01) {
                <0x24a1> = 0x00f8;
                <0x24a3> = 0x01e8;
            } else {
                <0x24a1> = 0x02d8;
                <0x24a3> = 0x0258;
            }

            animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
            _teleport(<BOY>, <0x249d>, <0x249f>);

            while(<0x249f> < <0x24a3>) {
                _teleport(<BOY>, <0x249d>, <0x249f>);
                yield();
                <0x249f> += 0x04;
            }

            sfx_effect(SHAKING, True);

            animate(BOY, ONCE, ANIMATION_BOY.FALL_1);
            <0x23d7> = 0x0001;
            damage(BOY, 0x5a, True);
            sleep(0x0e);

            sfx_effect(SHAKING, False);

            attribute(BOY, ROOT, False);
            control(BOY);

            <0x24ab> = 0x0158;
            <0x24af> = 0x00e8;

            _teleport(<0x283d>, <0x24ab>, <0x24af>);
            yield();
            attribute(<0x283d>, ROOT, False);

        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(BOSS.MOUNT_ID)) {
                BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y] - 0x15;
                yield();

                if(BOSS.STOMP_COOL_DOWN_TIMER == 0x0000) {
                    arg[0x00] = BOSS.MOUNT_ID[X];
                    arg[0x02] = BOSS.MOUNT_ID[Y];
                    arg[0x04] = <ACTIVE>[X];
                    arg[0x06] = <ACTIVE>[Y];

                    if(arg[0x00] < arg[0x04]) {
                        arg[0x08] = arg[0x04] - arg[0x00];
                    } else {
                        arg[0x08] = arg[0x00] - arg[0x04];
                    }

                    if(arg[0x02] < arg[0x06]) {
                        arg[0x0a] = arg[0x06] - arg[0x02];
                    } else {
                        arg[0x0a] = arg[0x02] - arg[0x06];
                    }

                    if((arg[0x08] <= BOSS.STOMP_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_DISTANCE)) {
                        BOSS.STOMP_COOL_DOWN_TIMER = BOSS.STOMP_COOL_DOWN;

                        grab();
                        call_async(ADDRESS.STERLING_ROAR);
                    }
                    yield();

                    // if(BOSS.DEBUG) {
                    //     debug_memory(arg[0x08], arg[0x0a]);
                    //     sleep(0x20);
                    // }
                } else {
                    BOSS.STOMP_COOL_DOWN_TIMER -= 0x01;
                }
            }
        }

        fun cast_salvage(target:CHARACTER, level) {
            animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_CAST_1);
            cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
            cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
            cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
            cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
        }

        @install()
        fun boss_damage() {
            // animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_DAMAGE);

            if(BOSS.PHASE == 0x00) {
                BOSS.TIMER = 0x00;

                if(BOSS.RIDER_ID[HP] < BOSS.P1_THRESHOLD) {
                    BOSS.PHASE = 0x01;
                }
            } else if(BOSS.PHASE == 0x01) {
                if(BOSS.RIDER_ID[HP] < BOSS.P2_THRESHOLD) {
                    BOSS.PHASE = 0x02;
                }
            } else if(BOSS.PHASE == 0x02) {
                BOSS.TIMER -= 0x60;
            }

            if(BOSS.DEBUG) {
                MEMORY.STRING_PARAMETER_1 = BOSS.RIDER_ID[HP];
                MEMORY.STRING_PARAMETER_2 = BOSS.HP;

                subtext("Rider = [MEM1]/[MEM2]");
            }
        }

        @install()
        @async()
        fun boss_watcher() {
            if(BOSS.DEBUG) {
                subtext("phase 0");
            }

            while(BOSS.PHASE == 0x00) {
                if(BOSS.TIMER > BOSS.P1_TIME_BEFORE_SALVAGE) {
                    cast_salvage(ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[0x0b] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER += 0x01;
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext("phase 1");
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
            cast(BOSS.RIDER_ID, ACTIVE, CAST.CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                if(BOSS.TIMER > BOSS.P2_TIME_BEFORE_SALVAGE) {
                    cast_salvage(ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[PALETTE] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER += 0x01;
                }
                yield();
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
            cast(BOSS.RIDER_ID, ACTIVE, CAST.CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                BOSS.TIMER += 0x01;

                if(BOSS.TIMER > BOSS.TIME_BEFORE_RANDOM_SPELL) {
                    BOSS.TIMER = 0x0000;

                    BOSS.RANDOM_SPELL = randrange(0x03);

                    if(BOSS.RANDOM_SPELL == 0x00) {
                        cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
                        cast(BOSS.RIDER_ID, ACTIVE, CAST.CONFOUND, 0x05);
                    } else if(BOSS.RANDOM_SPELL == 0x01) {
                        cast(BOSS.RIDER_ID, ACTIVE, CAST.DRAIN, 0x30);
                    } else if(BOSS.RANDOM_SPELL == 0x02) {
                        cast(BOSS.RIDER_ID, ACTIVE, CAST.PLAGUE, 0x01);
                    } 
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext("phase 2");
            }

            boss_killed();
        }

        fun spawn_boss(x, y) {
            add_enemy(VERMINATOR, x, y);
            <LAST_ENTITY>[HP] = BOSS.HP;
            BOSS.RIDER_ID = <LAST_ENTITY>;
            attach_script(LAST_ENTITY, DAMAGE, reference(boss_damage));
            attribute(LAST_ENTITY, ROOT, True);

            add_enemy(STERLING, x, y);
            BOSS.MOUNT_ID = <LAST_ENTITY>;
            // attach_sterling_script_to_last_entity();
            // attribute(LAST_ENTITY, ROOT, True);
        }

        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            default_init_room(True, False);

            if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                close_exits(True);

                spawn_boss(0x10, 0x13);
                stack_t01_offset();
                boss_watcher();

                character_selection(BOY);
                countdown(BOSS.COUNTDOWN);
                attribute(BOY, INVINCIBLE, False);
            }
        }
    };

    map isaac3_arena(0x5c) { // unused
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = @install() {
                subtext("S=0");
            },
            exit_south = @install() {
                subtext("S=1");
            },
            center = @install() {
                subtext("S=2");
            }
        }

        enum BOSS {
            MOUNT_ID = memory_tmp(),
            RIDER_ID = memory_tmp(),

            FOLLOWING = memory_tmp(),

            PUKE_HELPER = memory_tmp(),

            MOVE_RNG = memory_tmp(),

            CANNONBALL_X = memory_tmp(),
            CANNONBALL_Y = memory_tmp(),
            CANNONBALL_COUNT = memory_tmp(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        fun shoot_w() {
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x20, 0x80, 0x10, 0xff);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, -0x20, 0x80, 0x10, 0xff);
        }

        @install()
        fun shoot_line() {
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            sleep(0x0a);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            sleep(0x0a);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            sleep(0x0a);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            sleep(0x0a);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            sleep(0x0a);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
        }

        @async()
        @install()
        fun fly_left_right() {
            while(True) {
                while(BOSS.MOUNT_ID[X] < 0x150) {
                    BOSS.MOUNT_ID[X] += 0x01;
                    yield();
                }
                while(BOSS.MOUNT_ID[X] > 0x50) {
                    BOSS.MOUNT_ID[X] -= 0x01;
                    yield();
                }
            }
        }

        @install()
        fun monstro_damage() {
            yield();
            // animate(BOSS.MOUNT_ID, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);

            // animate(BOSS.MOUNT_ID, LOOP, ANIMATION_ALL.DEFAULT);
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(<BOY>)) {
                BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                BOSS.RIDER_ID[Y] += 0x50;
                yield();

                // <DOG>[X] = <BOY>[X] - 0x05;
                // <DOG>[Y] = <BOY>[Y];
                // yield();
            }
        }

        fun move() {
            // control(BOSS.MOUNT_ID, True);
            sleep(0x20);

            BOSS.MOVE_RNG = randrange(0x03);

            if(BOSS.MOVE_RNG == 0x00) {
                shoot_w();
            } else if(BOSS.MOVE_RNG == 0x01) {
                shoot_line();
            } else {
                nop();
            }

            sleep(0x20);
            // control(BOSS.MOUNT_ID, False);
        }

        @async()
        @install()
        fun move_logic() {
            sleep(0x80);
            
            while(True) {
                move();
                
                sleep(0x60);
            }
        }

        fun spawn_boss(x, y) {
            add_enemy(RIMSALA_BOSS_1, x, y);
            BOSS.RIDER_ID = <LAST_ENTITY>;
            // animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
            attach_script(LAST_ENTITY, DAMAGE, reference(monstro_damage));
            // attribute(LAST_ENTITY, ROOT, True);
            // attribute(LAST_ENTITY, INVISIBLE, True);
            // attribute(LAST_ENTITY, INVINCIBLE, True);

            // add_enemy_with_flags(DRAKE, x, y, INACTIVE);
            // add_enemy_with_flags(FOOTKNIGHT, x, y, INACTIVE);
            add_enemy(RIMSALA_BOSS_2, x, y);
            BOSS.MOUNT_ID = <LAST_ENTITY>;
            // <LAST_ENTITY>[HP] = 0x100;
            attribute(LAST_ENTITY, INVINCIBLE, True);

            fly_left_right();
            move_logic();
            stack_t01_offset();
        }

        fun trigger_enter() {
            spawn_boss(0x10, 0x08);

            available(BOY);
            destroy(DOG); // teleport(BOY, 0x00, 0x00);

            default_init_room(True, False);
            SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.ISAAC;

            close_exits(True);

            if!(FLAG.IN_ANIMATION) {
                // teleport(DOG, 0x19, 0x1d);
                <DOG>[X] += 0x20;
                <DOG>[Y] += 0x20;
                crash_land(BOTH);
            }
        }
    };

    map barrier_check_arena(0x5c) { // unused
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = @install() {
                subtext("S=0");
            },
            exit_south = @install() {
                subtext("S=1");
            },
            center = @install() {
                subtext("S=2");
            }
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @async()
        @install()
        fun barrier_check() {
            // code(0xb5, param(THROWABLE.LIGHTNING), entity_t(LAST_ENTITY), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y]), param(0x00), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y] + 0x80), param(0xff), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            
            add_enemy_with_flags(AQUAGOTH_ENTITY, 0x15, 0x1c, 0x00);
            attribute(LAST_ENTITY, INVINCIBLE, True);
            // attribute(LAST_ENTITY, INVISIBLE, True);
            attribute(LAST_ENTITY, NO_CLIP, True);
            attach_to_script(LAST_ENTITY);
            <SCRIPT_OWNER>[Z] = 0xff;

            face(LAST_ENTITY, EAST);

            while(True) {
                code(0xb5, param(THROWABLE.ONION), entity_t(LAST_ENTITY), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y]), param(0x00), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y] + 0x30), param(0x05), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                sleep(0x1);

                // if(<DOG>[HP] <= 0x00) {
                //     <DOG>[X] += 0x01;
                // }

                arg[0x00] = <BOY>[X];
                arg[0x02] = <BOY>[Y];
                arg[0x04] = <SCRIPT_OWNER>[X];
                arg[0x06] = <SCRIPT_OWNER>[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    <BOY>[X] += 0x01;
                }

                arg[0x00] = <DOG>[X];
                arg[0x02] = <DOG>[Y];
                arg[0x04] = <SCRIPT_OWNER>[X];
                arg[0x06] = <SCRIPT_OWNER>[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    <DOG>[X] += 0x01;
                }
            }
        }

        @async()
        @install()
        fun barrier_check_2() {
            add_enemy_with_flags(AQUAGOTH_ENTITY, 0x15, 0x1c, 0x00);
            attribute(LAST_ENTITY, INVINCIBLE, True);
            // attribute(LAST_ENTITY, INVISIBLE, True);
            attribute(LAST_ENTITY, NO_CLIP, True);
            attach_to_script(LAST_ENTITY);
            <SCRIPT_OWNER>[Z] = 0xff;

            face(LAST_ENTITY, EAST);

            while(True) {
                code(0xb5, param(THROWABLE.LIGHTNING), entity_t(LAST_ENTITY), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y]), param(0x00), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y] + 0x30), param(0x30), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x20);

                code(0xb5, param(THROWABLE.LIGHTNING), entity_t(LAST_ENTITY), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y] + 0x50), param(0x00), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y] + 0x20), param(0x30), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x20);
            }
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            if!(FLAG.IN_ANIMATION) {
                // teleport(DOG, 0x19, 0x1d);
                <DOG>[X] += 0x20;
                <DOG>[Y] += 0x20;
                crash_land(BOTH);
            }

            // <DOG>[HP] = 0x0;

            // barrier_check();
            barrier_check_2();
        }
    };

    map river(0x53) {
        enum entrance {
            center = entrance(0x32, 0x10, NONE),
            right = entrance(0x64, 0x10, WEST),
        }

        enum ROOM {
            DEBUG = False,

            SHIP_ID = memory_tmp(),

            ROCK_1 = memory_tmp(),
            ROCK_2 = memory_tmp(),
            ROCK_3 = memory_tmp(),
            ROCK_CRASH_SIZE = 0x0a,

            CRASH = memory_tmp(),
        }

        enum BOSS {
            ID = memory_tmp(),

            X = 0x52,
            Y = 0x07,

            HIDDEN = True,
        }

        fun yeet() {
            // source: call(0x94e9d8);
            
            control(NONE);

            // <0x24ab> = <BOY>[X];
            // <0x24af> = <BOY>[Y];

            // <0x24cf> = 0x0228;
            // <0x24d1> = 0x0058;

            // <0x24cf> += 0x05;
            // sleep(0x17);

            animate(BOY, LOOP, ANIMATION_BOY.FALL_1);
            // sleep(0x03);
            // animate(DOG, LOOP, ANIMATION_DOG.ACT1_ANGRY);
            sleep(0x05);

            // call_async(0x94eb06);
            // call_async(0x94eb0c);

            animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
            <BOY>[JUMP_HEIGHT] = 0x20;

            while(<BOY>[X] > 0x70) {
                // _teleport(<BOY>, <0x24ab>, <0x24af>);
                <BOY>[X] -= 0x01;
                // _teleport(DOG, <0x24ab>, <0x24af>);
                // _teleport(0x2838, 0x24ab, 0x24af - 0x01);

                // <0x24ab> -= 0x01;
                yield();

                // debug_memory(<0x24ab>, <0x24cf>);
                // sleep(0x20);
            }

            while(<BOY>[Y] < 0xd0) {
                // _teleport(<BOY>, <0x24ab>, <0x24af>);
                <BOY>[Y] += 0x03;
                // _teleport(DOG, <0x24ab>, <0x24af>);
                // _teleport(0x2838, 0x24ab, 0x24af - 0x01);

                // <0x24ab> -= 0x01;
                yield();

                // debug_memory(<0x24ab>, <0x24cf>);
                // sleep(0x20);
            }
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(<BOY>)) {
                if(ROOM.CRASH) {
                    damage(BOY, 0xff, True);
                    yield();
                } else {
                    <BOY>[X] -= 0x02;

                    ROOM.SHIP_ID[X] = <BOY>[X];
                    ROOM.SHIP_ID[Y] = <BOY>[Y] - 0x03;
                    yield();
                    
                    if(<BOY>[Y] < 0x40) {
                        <BOY>[Y] = 0x40;
                    } else if(<BOY>[Y] > 0xd0) {
                        <BOY>[Y] = 0xd0;
                    }
                    // yield();

                    if(<BOY>[X] < 0xb0) {
                        yeet();

                        map_transition(junkyard, crash_west, NONE);
                    } 
                    yield();
                }
            }
        }

        @install()
        @async()
        fun boss_watcher() {
            while!(dead(BOSS.ID)) {
                sleep(0xff);
                sleep(0xff);
                animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.SALABOG_DUCK);
                attribute(BOSS.ID, INVINCIBLE, True);
                sleep(0xff);
                animate(LAST_ENTITY, ONCE, ANIMATION_ALL.DEFAULT);
                attribute(BOSS.ID, INVINCIBLE, False);
            }
        }

        fun spawn_boss() {
            add_enemy(SALABOG, BOSS.X, BOSS.Y);
            BOSS.ID = <LAST_ENTITY>;

            boss_watcher();
        }

        @install()
        fun revealer_triggered() {
            destroy(SCRIPT_OWNER);

            spawn_boss();
        }

        @install()
        fun crash() {
            ROOM.CRASH = 0x01;

            control(NONE);

            damage(BOY, 0xff, True);
            destroy(ROOM.SHIP_ID);

            
        }

        fun rock_check() {
            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= ROOM.ROCK_CRASH_SIZE) && (arg[0x0a] <= ROOM.ROCK_CRASH_SIZE)) {
                crash();
                end();
            }
            sleep(0x05);

            if(ROOM.DEBUG) {
                debug_memory(arg[0x08], arg[0x0a]);
                sleep(0x20);
            }
        }

        @install()
        @async()
        fun rock_1_check() {
            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = ROOM.ROCK_1[X] + 0x0a;
                arg[0x06] = ROOM.ROCK_1[Y];

                rock_check();
            }
        }

        @install()
        @async()
        fun rock_2_check() {
            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = ROOM.ROCK_2[X] + 0x0a;
                arg[0x06] = ROOM.ROCK_2[Y];

                rock_check();
            }
        }
        @install()
        @async()
        fun rock_3_check() {
            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = ROOM.ROCK_3[X] + 0x0a;
                arg[0x06] = ROOM.ROCK_3[Y];

                rock_check();
            }
        }

        fun add_rock(x, y, id) {
            add_enemy_with_flags(STONE, x, y, FLAG_ENEMY.INVISBLE_INVINCIBLE_INACTIVE);
            id = <LAST_ENTITY>;
        }

        fun trigger_enter() {
            available(BOY);
            destroy(DOG); // teleport(BOY, 0x00, 0x00);

            add_placeholder(ANIMATION_PLACEHOLDER.SHELL_BOAT, 0x00, 0x00);
            ROOM.SHIP_ID = <LAST_ENTITY>;

            stack_t01_offset();

            if(BOSS.HIDDEN) {
                add_enemy(REVEALER_TARGET_ENTITY, BOSS.X, BOSS.Y);
                special_script(REVEALER, reference(revealer_triggered));
            } else {
                spawn_boss();
            }
            
            fade_in();

            add_rock(0x45, 0x10, ROOM.ROCK_1);
            rock_1_check();
            yield();
            add_rock(0x2d, 0x16, ROOM.ROCK_2);
            rock_2_check();
            yield();
            add_rock(0x19, 0x10, ROOM.ROCK_3);
            rock_3_check();

            add_enemy(TENTACLE_WHIP, 0x21, 0x0c);
            // add_enemy(TENTACLE_SPIKE, 0x1e, 0x0b);
            add_enemy(TENTACLE_SPIKE, 0x1b, 0x0e);
        }
    };

    group podunk() {
        map podunk_old(0x31) {
            enum entrance {
                north = entrance(0d09, 0d00, SOUTH),
                west = entrance(0d00, 0d19, EAST),

                cinema_left = entrance(0d64, 0d15, SOUTH),
                cinema_right = entrance(0d75, 0d15, SOUTH),
            }

            enum ROOM {
                COMMENT_SOUTH = flag_tmp(),

                COMMENT_BUILDING = flag_tmp(),
                COMMENT_CINEMA = flag_tmp(),
                
                COORDINATE_BUILDING_BOTTOM = 0d19 * 0x0008,
                COORDINATE_BUILDING_LEFT = 0d19 * 0x0008,
                COORDINATE_BUILDING_LEFT_THRESHOLD = 0d20 * 0x0008,
                COORDINATE_BUILDING_RIGHT = 0d121 * 0x0008,
                COORDINATE_BUILDING_RIGHT_THRESHOLD = 0d120 * 0x0008,

                COORDINATE_SOUTH_BORDER = 0d33 * 0x0008,

                COORDINATE_EAST_BORDER = 0d135 * 0x0008,

                COORDINATE_CINEMA_REACHED = 0d70 * 0x0008,
            }

            fun bug_discovered_1() {
                add_dynamic_enemy_with_flags(MAGGOT, <ACTIVE>[X] - 0x50, <ACTIVE>[Y] + 0x50, 0x0000);
                <LAST_ENTITY>[FALLING_HEIGHT] = 0x1000;
                add_dynamic_enemy_with_flags(MAGGOT, <ACTIVE>[X] + 0x50, <ACTIVE>[Y] + 0x50, 0x0000);
                <LAST_ENTITY>[FALLING_HEIGHT] = 0x1000;
            }
            fun bug_discovered_2() {
                add_dynamic_enemy_with_flags(MAGGOT_RED, <ACTIVE>[X] - 0x50, <ACTIVE>[Y] - 0x50, 0x0000);
                <LAST_ENTITY>[FALLING_HEIGHT] = 0x1000;
                add_dynamic_enemy_with_flags(MAGGOT_RED, <ACTIVE>[X] + 0x50, <ACTIVE>[Y] - 0x50, 0x0000);
                <LAST_ENTITY>[FALLING_HEIGHT] = 0x1000;
            }

            @install()
            @async()
            fun fake_exit_check() {
                while(True) {
                    if!(ROOM.COMMENT_CINEMA) {
                        if(<ACTIVE>[X] > ROOM.COORDINATE_CINEMA_REACHED) {
                            set(ROOM.COMMENT_CINEMA);

                            subtext("comment 1");
                        }
                    } else if(<ACTIVE>[X] > ROOM.COORDINATE_EAST_BORDER) {
                        map_transition(mansion_old, west, EAST);
                        end();
                    }

                    if((<ACTIVE>[Y] < ROOM.COORDINATE_BUILDING_BOTTOM) && (<ACTIVE>[X] > ROOM.COORDINATE_BUILDING_LEFT) && (<ACTIVE>[X] < ROOM.COORDINATE_BUILDING_RIGHT)) { // cinema
                        if!(ROOM.COMMENT_BUILDING) {
                            set(ROOM.COMMENT_BUILDING);

                            subtext("comment building");
                            bug_discovered_1();

                            sleep(0d120);
                        } else {
                            if(<ACTIVE>[X] < ROOM.COORDINATE_BUILDING_LEFT_THRESHOLD) { // push left
                                <ACTIVE>[X] = ROOM.COORDINATE_BUILDING_LEFT;

                                // subtext("left");
                            } else if(<ACTIVE>[X] > ROOM.COORDINATE_BUILDING_RIGHT_THRESHOLD) { // push right
                                <ACTIVE>[X] = ROOM.COORDINATE_BUILDING_RIGHT;

                                // subtext("left");
                            } else { // push bottom
                                <ACTIVE>[Y] = ROOM.COORDINATE_BUILDING_BOTTOM;
                            }
                        }
                        
                        // sleep(0x10);
                        yield();
                    } else if(<ACTIVE>[Y] > ROOM.COORDINATE_SOUTH_BORDER) {
                        if!(ROOM.COMMENT_SOUTH) {
                            set(ROOM.COMMENT_SOUTH);

                            subtext("comment south 1");
                            sleep(0d120);
                            subtext("comment south 2");
                            sleep(0d120);

                            bug_discovered_2();

                            init_map(0x00, 0x00, 0d145, 0d33);
                        } else {
                            <ACTIVE>[Y] = ROOM.COORDINATE_SOUTH_BORDER;
                        }
                    }

                    yield();
                }
            }

            @install()
            fun cat_triggered() {
                destroy(SCRIPT_OWNER);

                subtext("todo");

                bug_discovered_1();
                bug_discovered_2();
            }

            fun trigger_enter() {
                add_placeholder(CAT_CLEANING_2, 0d122, 0d17);
                add_placeholder(CAT_CLEANING_2, 0d123, 0d17);
                attach_script(LAST_ENTITY, TALK, reference(cat_triggered));
                
                fade_in();

                fake_exit_check();
            }
        };

        map mansion_old(0x02) {
            enum entrance {
                west = entrance(0d00, 0d106, EAST),
                south = entrance(0d35, 0d113, NORTH),
            }

            enum ROOM {
                PROFESSOR = memory_tmp(),

                COORDINATE_NORTH_BORDER = 0d22 * 0x0008,
            }

            @install()
            @async()
            fun fake_exit_check() {
                while(True) {
                    if(<ACTIVE>[Y] < ROOM.COORDINATE_NORTH_BORDER) {
                        map_transition(lab_cutscene, north, NORTH);
                    }

                    yield();
                }
            }

            @install()
            @async()
            fun professor_glitch() {
                while(True) {
                    ROOM.PROFESSOR[X] += 0x10;
                    ROOM.PROFESSOR[Y] -= 0x05;
                    sleep(0x05);
                    ROOM.PROFESSOR[X] -= 0x20;
                    sleep(0x03);
                    ROOM.PROFESSOR[X] += 0x10;
                    ROOM.PROFESSOR[Y] += 0x05;
                    sleep(0x30);
                    if(randrange(0x02)) {
                        sleep(0x50);
                    }
                }
            }

            fun trigger_enter() {
                add_enemy(PROFESSOR, 0d35, 0d71);
                control_enemy(LAST_ENTITY, True);
                ROOM.PROFESSOR = <LAST_ENTITY>;
                professor_glitch();

                fade_in();

                fake_exit_check();
            }
        };

        map lab_cutscene(0x46) {
            enum entrance {
                north = entrance(0x3e, 0x14, NONE, { door_act4_airlock_reverse(0x3e, 0x14, 0d26); }),
                east = entrance(0x58, 0x57, NONE),
                west = entrance(0x1a, 0x5b, NONE),
                
                cutscene_1 = entrance(0x34, 0x59, NONE), // in front of computer
                cutscene_2 = entrance(0x3e, 0x25, NONE), // intro fight
            }

            fun open_door(object_id, flag) {
                if!(flag) {
                    set(flag);
                    
                    sound(0xb0);
                    object[object_id] = 0x7e;
                // } else {
                //     unset(flag);
                //     
                //     sound(0xb0);
                //     object[object_id] = 0x00;
                }
            }

            enum ROOM {
                DOOR_1_OPEN = flag_tmp(),
                DOOR_2_OPEN = flag_tmp(),
            }

            enum stepon_trigger {
                door_2_north = @install() {
                    open_door(0x04, ROOM.DOOR_2_OPEN);
                },
                door_2_south = @install() {
                    open_door(0x04, ROOM.DOOR_2_OPEN);
                },
                door_1_north = @install() {
                    open_door(0x00, ROOM.DOOR_1_OPEN);
                },
                door_1_south = @install() {
                    open_door(0x00, ROOM.DOOR_1_OPEN);
                },
                exit_east = @install() {
                    subtext("S=4");
                },
            }

            enum b_trigger {
                gourd = @install() {
                    subtext("B=0");
                },
                door_north = @install() {
                    door_act4_airlock(0x3e, 0x14, object[0d26]);
                },
                lever = @install() {
                    map_transition(podunk_new, cinema_left, NONE);
                },
            }

            fun trigger_enter() {
                fade_in();
            }
        };

        map podunk_new(0x32) {
            enum entrance {
                north = entrance(0d09, 0d00, SOUTH),
                west = entrance(0d00, 0d19, EAST),

                cinema_left = entrance(0d12, 0d13, SOUTH),
                cinema_right = entrance(0d23, 0d13, SOUTH),
            }

            enum ROOM {
                COORDINATE_BUILDING_BOTTOM = 0d17 * 0x0008,
                COORDINATE_BUILDING_RIGHT = 0d69 * 0x0008,
                COORDINATE_BUILDING_RIGHT_THRESHOLD = 0d68 * 0x0008,

                COORDINATE_EAST_BORDER = 0d84 * 0x0008,
            }

            @install()
            @async()
            fun fake_exit_check() {
                while(True) {
                    if((<ACTIVE>[Y] < ROOM.COORDINATE_BUILDING_BOTTOM) && (<ACTIVE>[X] < ROOM.COORDINATE_BUILDING_RIGHT)) { // inside building
                        if(<ACTIVE>[X] > ROOM.COORDINATE_BUILDING_RIGHT_THRESHOLD) { // push right
                            <ACTIVE>[X] = ROOM.COORDINATE_BUILDING_RIGHT;
                        } else { // bush bottom
                            <ACTIVE>[Y] = ROOM.COORDINATE_BUILDING_BOTTOM;
                        }
                        
                        yield();
                    } else if(<ACTIVE>[X] > ROOM.COORDINATE_EAST_BORDER) { // right
                        map_transition(mansion_modern, west, EAST);
                        end();
                    }

                    yield();
                }
            }

            fun trigger_enter() {
                fade_in();

                sleep(0d60);
                fake_exit_check();
            }
        };

        map mansion_modern(0x03) {
            enum entrance {
                west = entrance(0d00, 0d106, EAST),
                south = entrance(0d19, 0d111, NORTH),
            }

            enum BOSS {
                ID_CARLTRON = memory_tmp(),
                ID_LEFT = memory_tmp(),
                ID_RIGHT = memory_tmp(),
                ID_BACK = memory_tmp(),

                PHASE = memory_tmp(),

                COUNTDOWN = 0x03,
            }

            group boss_ai() {
                @install()
                fun abomination_triggered() {
                    if(<SCRIPT_OWNER> == BOSS.ID_CARLTRON) {
                        heal(SCRIPT_OWNER, 0x00, False);

                        // subtext("c");

                        
                        attribute(BOSS.ID_CARLTRON, NO_CLIP, True);
                        control(NONE);
                        face(ACTIVE, NORTH);
                        animate(ACTIVE, ONCE, ANIMATION_ALL.KNOCKBACK);
                        damage(BOY, 0x05, True);
                        sleep(0x01);
                        attribute(BOSS.ID_CARLTRON, NO_CLIP, False);

                        animate(SCRIPT_OWNER, ONCE, ANIMATION_ENEMY.CARLTRON_TALK);
                        sleep(0x50);
                        animate(SCRIPT_OWNER, ONCE, ANIMATION_ALL.DEFAULT);

                        control(BOTH);

                        if(BOSS.PHASE == 0x00) {
                            BOSS.PHASE = 0x01;
                        }
                    } else if(<SCRIPT_OWNER> == BOSS.ID_LEFT) {
                        // subtext("l");

                        if(BOSS.PHASE == 0x01) {
                            if(dead(<SCRIPT_OWNER>)) {
                                BOSS.PHASE = 0x02;
                            }
                        }
                    } else if(<SCRIPT_OWNER> == BOSS.ID_RIGHT) {
                        if(BOSS.PHASE >= 0x02) {
                            if(dead(<SCRIPT_OWNER>)) {
                                BOSS.PHASE += 0x01;
                            }
                        }
                    } else if(<SCRIPT_OWNER> == BOSS.ID_BACK) {
                        if(BOSS.PHASE >= 0x02) {
                            if(dead(<SCRIPT_OWNER>)) {
                                BOSS.PHASE += 0x01;
                            }
                        }
                    }
                }

                @install()
                @async()
                fun abomination_watcher() {
                    subtext("phase 0");

                    while(BOSS.PHASE == 0x00) {
                        yield();
                    }

                    subtext("phase 1");

                    animate(BOSS.ID_CARLTRON, ONCE, ANIMATION_ENEMY.CARLTRON_SMUG);

                    add_enemy(THRAXX_LEFT_ARM, 0x00, 0x00);
                    BOSS.ID_LEFT = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                    sleep(0x50);

                    while(BOSS.PHASE == 0x01) {
                        yield();
                    }

                    subtext("phase 2");

                    animate(BOSS.ID_CARLTRON, ONCE, ANIMATION_ENEMY.CARLTRON_SMUG);

                    add_enemy(THRAXX2_LEFT_ARM, 0x00, 0x00);
                    BOSS.ID_LEFT = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                    sleep(0x50);

                    add_enemy(THRAXX_RIGHT_ARM, 0x00, 0x00);
                    BOSS.ID_RIGHT = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                    sleep(0x50);

                    add_enemy(BONE_SNAKE, 0x00, 0x00);
                    BOSS.ID_BACK = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                    sleep(0x50);

                    while(BOSS.PHASE == 0x02) {
                        yield();
                    }

                    subtext("phase 3");

                    while(BOSS.PHASE == 0x03) {
                        yield();
                    }

                    subtext("phase 4");

                    while(BOSS.PHASE == 0x04) {
                        yield();
                    }

                    subtext("phase 5");

                    add_enemy(SALABOG, 0x00, 0x00);
                    BOSS.ID_BACK = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                    while(BOSS.PHASE == 0x05) {
                        yield();
                    }

                    control_enemy(BOSS.ID_CARLTRON, True);
                    attribute(BOSS.ID_CARLTRON, INVINCIBLE, True);
                    face(BOSS.ID_CARLTRON, SOUTH);
                    animate(BOSS.ID_CARLTRON, ONCE, ANIMATION_ENEMY.CARLTRON_DROPPING);
                    sleep(0x80);

                    animate(BOSS.ID_CARLTRON, LOOP, ANIMATION_ENEMY.CARLTRON_LYING);
                    destroy(BOSS.ID_LEFT);
                    destroy(BOSS.ID_RIGHT);
                    destroy(BOSS.ID_BACK);
                    sleep(0xff);

                    // destroy(BOSS.ID_CARLTRON);

                    subtext("yatta!");
                }

                @install()
                @async()
                fun stack_t0123() {
                    while!(dead(BOSS.ID_CARLTRON)) {
                        BOSS.ID_LEFT[X] = BOSS.ID_CARLTRON[X] - 0x05;
                        BOSS.ID_LEFT[Y] = BOSS.ID_CARLTRON[Y] - 0x1a;

                        // sleep(0x02);
                        yield();

                        BOSS.ID_RIGHT[X] = BOSS.ID_CARLTRON[X] + 0x05;
                        BOSS.ID_RIGHT[Y] = BOSS.ID_CARLTRON[Y] - 0x1a;

                        // sleep(0x0);
                        yield();

                        BOSS.ID_BACK[X] = BOSS.ID_CARLTRON[X];
                        BOSS.ID_BACK[Y] = BOSS.ID_CARLTRON[Y] - 0x20;

                        // sleep(0x02);
                        yield();
                    }
                }

                fun add_boss(x, y) {
                    add_enemy(CARLTRON, x, y);
                    BOSS.ID_CARLTRON = <LAST_ENTITY>;
                    <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
                    attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                    abomination_watcher();
                    stack_t0123();
                }

            };

            fun trigger_enter() {
                add_boss(0d20, 0d81);

                fade_in();
            }
        };
    };
};
