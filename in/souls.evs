#memory(
    string_key(0x0000)..string_key(0x232b), // all string keys
    function_key(0x0000)..function_key(0x232b), // TODO: all function keys?

    0x300000..0x3fffff, // extension

    <0x2272>
)
#include("in/core.evs")

#patch(
    // "void_maps",

    "skip_intro",
    // "brian",
    // "camera_hack",
    // "free_graveyard_ids",
    // "save_file_growth",

    // asm
    // "debug_menu", // uses 0x3f0000…???
    "_hook_input", // 0x3f0000…0x310000
        "hotkeys", // uses 0x3f00000…???
        // "room_timer", // uses 0x300000…???
    // "_hook_trigger",
)

// HELPER

@install()
fun cheat() {
    unlock(ITEM.WEAPONS);

    if(False) {
        unlock(ITEM.ALCHEMY);
        unlock(ITEM.INGREDIENTS);
        select_alchemy();
    }
}

fun test_owner() {
    attach_to_script(CHARACTER.BOY);

    if(<CHARACTER.SCRIPT_OWNER> == <CHARACTER.BOY>) {
        subtext(string("yay[END]"));
    } else {
        subtext(string("nay[END]"));
    }
}
fun test_owner2() {
    if(<CHARACTER.SCRIPT_OWNER> == <0x2834>) {
        subtext(string("yay[END]"));
    } else {
        subtext(string("nay[END]"));
    }
}

fun loot(flag, object_id, reward, amount, next) {
    if(!flag) {
        <0x2391> = reward;

        <0x2395> = object;

        if(reward < 0x0100) { 
            if(amount > 0x00) {
                <0x2393> = amount;
            }
        } else {
            if(amount > 0x00) {
                <0x2461> = amount - 0x01;
            }    
        }

        call_id(0x39);
        
        if(next > 0x00) {
            <0x2461> = next - 0x01;
        }

        if(<0x22ea, 0x01>) {
            set(flag);
        }
    }
}

@install()
@inject(ADDRESS.HOTKEY_START)
fun hotkey_start() {
    subtext(string("Start[END]"));

    drop_bomb();
}
@install()
@inject(ADDRESS.HOTKEY_START_L)
fun hotkey_start_l() {
    subtext(string("Start+L[END]"));

    // map_transition(arena, left, DIRECTION.NONE);
}
@install()
@inject(ADDRESS.HOTKEY_START_R)
fun hotkey_start_r() {
    subtext(string("Start+R[END]"));

    // map_transition(arena, right, DIRECTION.NONE);
}

fun axe2_wall(flag, object) {
    if(<CHARACTER.ACTIVE> == <CHARACTER.BOY>) {
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_ALL.SLASH_2);

        if(<0x235f>&0xff >= 0x0c) {
            if(<0x2360>&0xff == 0x02) {
                add_enemy(ENEMY.PLACEHOLDER, 0x00, 0x00);
                <CHARACTER.LAST_ENTITY>[0x1a] = <CHARACTER.BOY>[0x1a];
                <CHARACTER.LAST_ENTITY>[0x1c] = <CHARACTER.BOY>[0x1c];
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);

                sleep(0x04);

                sound(0x58);

                object = 0x01;
                set(flag);
            }
        }
    }
}

@install(ADDRESS.INTRO_FIRST_CODE_EXECUTED)
fun intro_skip() {
    map_transition(inbetwixx, start, DIRECTION.NONE);
}

@install()
fun bonfire_triggered() {
    // test_owner2();
    // end();
    
    subtext(string("bonfire[END]"));

    // bonfire_activate(<CHARACTER.SCRIPT_OWNER>[0x1a], <CHARACTER.SCRIPT_OWNER>[0x1c], reference(bonfire_triggered));

    destroy(CHARACTER.SCRIPT_OWNER);
}
@install()
fun bomb_wall_triggered() {
    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);
    // subtext(string("nice.[END]"));

    object[<0x2834>] = <0x2836>;
    // object[<CHARACTER.SCRIPT_OWNER>[0x2a]] = <CHARACTER.SCRIPT_OWNER>[0x15];

    sleep(0x50);
    destroy(CHARACTER.SCRIPT_OWNER);

    if(<CHARACTER.SCRIPT_OWNER> == <0x283f>) {
        subtext(string("yay[END]"));
    } else {
        subtext(string("nay[END]"));
    }
}

// MAPS

map inbetwixx(0x05) {
    enum entrance {
        north_1 = entrance(0x2d, 0x01, DIRECTION.SOUTH),
        east_1 = entrance(0x5f, 0x4d, DIRECTION.WEST),
        west_1 = entrance(0x04, 0x71, DIRECTION.EAST),
        west_2 = entrance(0x04, 0x2f, DIRECTION.EAST),

        start = entrance(0x0f, 0x47, DIRECTION.NONE)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        stepon_9 = @install() fun test() {
            subtext(string("exit? 9 [END]"));
        },
        west_2_east = @install() fun test() {
            map_transition(northeast_inbetwixx, east, DIRECTION.WEST);
        },
        west_1_exit = @install() fun test() {
            map_transition(east_inbetwixx, east_2, DIRECTION.WEST);
        },
        stepon_12 = @install() fun test() {
            subtext(string("exit? 12 [END]"));
        },
        stepon_13 = @install() fun test() {
            subtext(string("exit? 13 [END]"));
        },
        stepon_14 = @install() fun test() {
            subtext(string("exit? 14 [END]"));
        },
        stepon_15 = @install() fun test() {
            subtext(string("exit? 15 [END]"));
        },

        stepon_16 = @install() fun test() {
            subtext(string("exit? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("exit? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("exit? 18 [END]"));
        },
        stepon_19 = @install() fun test() {
            subtext(string("exit? 19 [END]"));
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            _axe2_wall(0x00);
        },
        b_trigger_1 = @install() fun test() {
            _axe2_wall(0x01);
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        }
    }

    fun init_room() {
        sfx_effect(SFX_EFFECT.RAIN, True);
        sfx_effect(SFX_EFFECT.NIGHT, True);

        fade_in();

        subtext(string("Inbetwixx[END]"));
    }

    fun intro() {
        teleport(CHARACTER.DOG, 0x13, 0x49);
        animate(CHARACTER.DOG, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);

        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

        sleep(0x50);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
        sleep(0x30);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
        sleep(0x40);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
        sleep(0x15);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.KNEEL);
    }

    fun bomb_wall_trigger(object, x, y) {
        // add_enemy_with_flags(ENEMY.THRAXX_HEART, 0x3d, 0x3c, 0x0000);
        add_enemy_with_flags(ENEMY.FACE_ENTITY, x, y, 0x0004);
        // <CHARACTER.LAST_ENTITY>[0x2a] = object;
        // <CHARACTER.LAST_ENTITY>[0x15] = 0x01;
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(bomb_wall_triggered));

        <0x2834> = object;
        <0x2836> = 0x01;
    }

    @install()
    fun trigger_enter() {
        init_room();

        if(!FLAG.IN_ANIMATION) {
            // intro();
            
            unlock(ITEM.SPEAR_1);
            cheat();

            // code(0xa3, 0x18, "// (a3) CALL 'Prepare room change? North exit/south entrance outdoor-indoor?' (0x26)"); // TODO: 4x4 combinations, not 4
            // 19=ww, 1a=Ww, 1b=wn, 1c=ws, 1d=ee, 1e=Ee, 1f=EN
            // 20=ES, 21=SS, 22=Ss, 23=sW, 24=SW, 25=SE, 26=NN, 27=NN, 28=NE, 29=NW, 2a=NS, 2b=Ns, 2c=ns, 2d=ss

            // load_map(0x05, 0x0f, 0x47);
        }

        bonfire(0x31, 0x35, reference(bonfire_triggered));
        
        bomb_wall_trigger(0x01, 0x3f, 0x3c);
        <0x283f> = <CHARACTER.LAST_ENTITY>;
    }
};

map east_inbetwixx(0x5b) {
    enum entrance {
        north = entrance(0x12, 0x09, DIRECTION.SOUTH),
        east_1 = entrance(0x6d, 0x11, DIRECTION.WEST),
        east_2 = entrance(0x6d, 0x23, DIRECTION.WEST),
        east_3 = entrance(0x6d, 0x35, DIRECTION.WEST),
        west = entrance(0x01, 0x37, DIRECTION.EAST)
    }

    enum stepon_trigger {
        exit_east_1 = @install() fun test() {
            map_transition(east_inbetwixx, east_3, DIRECTION.EAST);
        },
        exit_east_3 = @install() fun test() {
            map_transition(east_inbetwixx, east_1, DIRECTION.EAST);
        },
        exit_east_2 = @install() fun test() {
            map_transition(inbetwixx, west_1, DIRECTION.EAST);
        },
        exit_west = @install() fun test() {
            map_transition(east_hut, east, DIRECTION.WEST);
        },
        exit_north = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        }
    }

    fun init_room() {
        sfx_effect(SFX_EFFECT.RAIN, True);
        sfx_effect(SFX_EFFECT.NIGHT, True);

        init_map(0x00, 0x06, 0x6e, 0x52);

        fade_in();

        subtext(string("East Inbetwixx[END]"));
    }

    fun trigger_enter() {
        init_room();
    }
};

map east_hut(0x33) {
    enum entrance {
        hut = entrance(0x13, 0x13, DIRECTION.SOUTH), // TODO: 13/15
        east = entrance(0x25, 0x12, DIRECTION.WEST)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            map_transition(east_hut2, door, DIRECTION.NORTH);
        },
        stepon_1 = @install() fun test() {
            map_transition(east_inbetwixx, west, DIRECTION.EAST);
        }
    }

    fun init_room() {
        sfx_effect(SFX_EFFECT.RAIN, True);
        sfx_effect(SFX_EFFECT.NIGHT, True);

        fade_in();
    }

    fun trigger_enter() {
        init_room();
    }
};

map east_hut2(0x34) {
    enum entrance {
        door = entrance(0x12, 0x23, DIRECTION.NORTH)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            map_transition(east_hut, hut, DIRECTION.SOUTH);
        }
    }

    fun init_room() {
        // sfx_effect(SFX_EFFECT.RAIN, True);
        sfx_effect(SFX_EFFECT.NIGHT, True);

        fade_in();
    }

    fun trigger_enter() {
        init_room();
    }
};


map arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum stepon_trigger {
        exit_north = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        exit_south = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        center = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        }
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    fun init_room() {
        sfx_effect(SFX_EFFECT.RAIN, True);
        sfx_effect(SFX_EFFECT.NIGHT, True);

        fade_in();
    }

    fun trigger_enter() {
        init_room();

        subtext(string("Arena[END]"));

        if(!FLAG.IN_ANIMATION) {
            close_exits(True);

            // teleport(CHARACTER.DOG, 0x19, 0x1d);
            <CHARACTER.DOG>[0x1a] = <CHARACTER.DOG>[0x1a] + 0x20;
            <CHARACTER.DOG>[0x1c] = <CHARACTER.DOG>[0x1c] + 0x20;
            crash_land(CHARACTER.BOTH);
        }
    }
};

map northeast_inbetwixx(0x07) {
    enum entrance {
        east = entrance(0x44, 0x44, DIRECTION.WEST),
        west = entrance(0x01, 0x3d, DIRECTION.EAST),
        cave = entrance(0x41, 0x0b, DIRECTION.SOUTH)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        exit_west = @install() fun test() {
            map_transition(inbetwixx, west_2, DIRECTION.EAST);
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            _axe2_wall(0x00);
        }
    }

    fun init_room() {
        sfx_effect(SFX_EFFECT.RAIN, True);
        sfx_effect(SFX_EFFECT.NIGHT, True);

        fade_in();
    }

    fun trigger_enter() {
        init_room();

        subtext(string("North East Inbetwixx[END]"));
    }
};
