#memory(
    string_key(0x0546)..string_key(0x232b), // last half of string keys
    function_key(0x0000)..function_key(0x232b), // TODO: all function keys?

    0x300000..0x3fffff, // extension

    // reserved: <0x2258>
    <0x2272>,

    <0x2834>..<0x28ff>
)
#include("in/core.evs")

#patch(
    "skip_intro",
    // "save_file_growth",

    // asm
    // "debug_menu", // uses 0x3f0000…???
    "_hook_input", // 0x3f0000…0x310000
        "hotkeys", // uses 0x3f00000…???
        // "room_timer", // uses 0x300000…???
    // "_hook_trigger",
)

// STRINGS

@install(0x4713f)
fun string_revealver_entity_name() {
    cstring("SECRET[END]");
}

// HELPER

fun branch_lady(x, y, id) {
    add_enemy(ENEMY.VILLAGER_2_4, x, y);
    entity_script_controlled(CHARACTER.LAST_ENTITY);
    face(CHARACTER.LAST_ENTITY, DIRECTION.WEST);
    attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, id);
    <CHARACTER.LAST_ENTITY>[0x0b] = 0x50;
}

@install(ADDRESS.INTRO_FIRST_CODE_EXECUTED)
fun jump_to_inbetwixx() {
    // set(FLAG.DEBUG);
    map_transition(inbetwixx, start, DIRECTION.NONE);
}

@install()
fun bomb_wall_triggered() {
    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);
    object[<0x2838>] = <0x283a>;

    sleep(0x50);

    destroy(CHARACTER.SCRIPT_OWNER);
}

// souls

enum SOULS_MEMORY {
    INIT = flag(),
    INTRO_WATCHED = flag(),

    DEMO_MODE = True,

    MAP_VARIANT = <0x2258>, // TODO: hardcoded

    DUST_ENTITY = <0x24fd>,
    DUST_DROP_X = <0x24ff>,
    DUST_DROP_Y = <0x2501>,
    DUST_DROP_MAP = <0x2503>,
    DUST_DROP_VARIANT = <0x2505>,

    BONFIRE_X = <0x2507>,
    BONFIRE_Y = <0x2509>,
    BONFIRE_MAP = <0x250b>,
    BONFIRE_VARIANT = <0x250d>,
    BONFIRE_TELEPORT_REQUIRED = flag(),
    
    ESTUS_CHARGES = <0x250f>,
    ESTUS_CHARGES_INIT = 0x01,
    
    BOMB_ENABLED = flag(),
}

@install()
fun dust_loot() {
    SOULS_MEMORY.DUST_DROP_MAP = 0xffff;
    SOULS_MEMORY.DUST_DROP_VARIANT = 0xffff;

    // attach_script(CHARACTER.SCRIPT_OWNER, SCRIPT_TRIGGER.LOOT, 0x172b);

    // subtext(string("Reclaimed souls"));

    currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.TALONS);

    // <0x2391> = 0x0000;
    // <0x2395> = 0x0000;
    // call_id(0x3d);
    animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.LOOT);

    destroy(SOULS_MEMORY.DUST_ENTITY);

    // sleep(0x80);

    show_currency(True);
    sleep(0x40);
    show_currency(False);
}

@install()
fun dust_drop() {
    // subtext(string("Souls in reach...[END]"));

    attach_script(CHARACTER.SCRIPT_OWNER, SCRIPT_TRIGGER.LOOT, reference(dust_loot));

    <0x23d9> = 0x0001;
    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.DUST);
    sleep(0x3c);
    <0x23d9> = 0x0001;
    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.FREEZE, ANIMATION_ENEMY.DUST);
}

@install()
fun return_to_bonfire() {
    if(SOULS_MEMORY.BONFIRE_MAP == 0x26) { // TODO: inbetwixx map id
        set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
        map_transition(inbetwixx, start, DIRECTION.NONE); // TODO
    } else if(SOULS_MEMORY.BONFIRE_MAP == 0x1a) { // TODO: crossing map id
        set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
        map_transition(east_crossing, crash, DIRECTION.NONE); // TODO
    }

    map_transition(inbetwixx, start, DIRECTION.NONE);
}

@install()
fun boy_death() {
    control(CHARACTER.NONE);

    currency_get(CURRENCY.CREDITS, 0x01);

    show_currency(True);
    yield();

    // subtext(string("Souls lost"));

    // damage(CHARACTER.DOG, 0x03e8);

    currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.GOLD_COINS);
    currency_convert(0x01, CURRENCY.TALONS, 0x01, CURRENCY.JEWELES);

    SOULS_MEMORY.DUST_DROP_X = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
    SOULS_MEMORY.DUST_DROP_Y = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];
    // <0x2503> = MEMORY.MAP;
    SOULS_MEMORY.DUST_DROP_MAP = MEMORY.MAP & 0xff;
    SOULS_MEMORY.DUST_DROP_VARIANT = SOULS_MEMORY.MAP_VARIANT;

    // sleep(0x20);

    // currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.GOLD_COINS);
    destroy(SOULS_MEMORY.DUST_ENTITY);

    animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.DUST);
    animate(CHARACTER.DOG, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.DUST);

    sleep(0xa0);

    fade_out();

    show_currency(False);
    yield();

    sleep(0x50);

    heal(CHARACTER.BOTH, False);

    return_to_bonfire();

    control(CHARACTER.BOTH);
}

@install()
fun bonfire_triggered() {
    // test_owner2();
    // end();
    
    // subtext(string("bonfire[END]"));

    // bonfire_activate(<CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X], <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y], reference(bonfire_triggered));

    // destroy(CHARACTER.SCRIPT_OWNER);

    SOULS_MEMORY.BONFIRE_X = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
    SOULS_MEMORY.BONFIRE_Y = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
    SOULS_MEMORY.BONFIRE_MAP = MEMORY.MAP & 0xff;
    SOULS_MEMORY.BONFIRE_VARIANT = SOULS_MEMORY.MAP_VARIANT;

    MEMORY.PETAL = SOULS_MEMORY.ESTUS_CHARGES;
}

fun bonfire(x, y, id) {
    // add_enemy_with_flags(ENEMY.LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE_IMORTAL);
    // attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, 0x181e);
    // entity_script_controlled(CHARACTER.LAST_ENTITY);

    if(SOULS_MEMORY.BONFIRE_MAP == MEMORY.MAP&0xff) {
        if(SOULS_MEMORY.BONFIRE_VARIANT == SOULS_MEMORY.MAP_VARIANT) {
            add_enemy_with_flags(ENEMY.LANTERN_LIGHT_RED, x, y, FLAG_ENEMY.INACTIVE);
        } else {
            add_enemy_with_flags(ENEMY.LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE);
        }
    } else {
        add_enemy_with_flags(ENEMY.LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE);
    }
    
    attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, id);
    <CHARACTER.LAST_ENTITY>[0x2a] = 0x0fff;
}

@install()
fun init_souls() {
    if!(SOULS_MEMORY.INIT) {
        set(SOULS_MEMORY.INIT);

        SOULS_MEMORY.ESTUS_CHARGES = SOULS_MEMORY.ESTUS_CHARGES_INIT;
        MEMORY.PETAL = SOULS_MEMORY.ESTUS_CHARGES;
    }

    if(SOULS_MEMORY.DUST_DROP_MAP == MEMORY.MAP&0xff) {
        if(SOULS_MEMORY.DUST_DROP_VARIANT == SOULS_MEMORY.MAP_VARIANT) {
            add_dynamic_enemy_with_flags(ENEMY.BEE, SOULS_MEMORY.DUST_DROP_X, SOULS_MEMORY.DUST_DROP_Y, 0x00);
            SOULS_MEMORY.DUST_ENTITY = <CHARACTER.LAST_ENTITY>;
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(dust_drop));
            
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);
            damage(CHARACTER.LAST_ENTITY, 0x03e8, False);
        }
    }

    if(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED) {
        // if(SOULS_MEMORY.BONFIRE_MAP == MEMORY.MAP&0xff) {
        //     if(SOULS_MEMORY.BONFIRE_VARIANT == SOULS_MEMORY.MAP_VARIANT) {
        //         if(SOULS_MEMORY.BONFIRE_X != 0x00) {
        //             if(SOULS_MEMORY.BONFIRE_Y != 0x00) { // TODO
                        <CHARACTER.BOY>[ATTRIBUTE.X] = SOULS_MEMORY.BONFIRE_X;
                        <CHARACTER.BOY>[ATTRIBUTE.Y] = SOULS_MEMORY.BONFIRE_Y;

                        <CHARACTER.DOG>[ATTRIBUTE.X] = SOULS_MEMORY.BONFIRE_X;
                        <CHARACTER.DOG>[ATTRIBUTE.Y] = SOULS_MEMORY.BONFIRE_Y;
        //             }
        //         }
        //     }
        // }
        unset(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
    }

    attach_script(CHARACTER.BOY, SCRIPT_TRIGGER.DEATH, reference(boy_death));

    special_script(SPECIAL_SCRIPTS.WINGS, reference(return_to_bonfire));

    MEMORY.BOY_XP_REQUIRED = 0x7fff;
    MEMORY.DOG_XP_REQUIRED = 0x7fff;
}

// HOTKEYS

@install()
@inject(ADDRESS.HOTKEY_START)
@count_limit(0x20)
fun hotkey_start() {
    if(FLAG.DEBUG) {
        subtext(string("Start[END]"));
    }

    if(SOULS_MEMORY.BOMB_ENABLED) {
        if(FLAG.ENERGY_CORE) {
            drop_bomb();
        }
    }
}
@install()
@inject(ADDRESS.HOTKEY_START_L)
@count_limit(0x20)
fun hotkey_start_l() {
    if(FLAG.DEBUG) {
        subtext(string("Start+L[END]"));

        // map_transition(inbetwixx, start, DIRECTION.NONE);
        // map_transition(hidden_room, room_alchemist, DIRECTION.NONE);
        // map_transition(east_crossing, crash, DIRECTION.NONE);
        // map_transition(castle_bridges, west, DIRECTION.NONE);
        // map_transition(town_center, west_1, DIRECTION.NONE);
        map_transition(pipe_maze, pipe_east, DIRECTION.NONE);

        // MEMORY.MAP_PALETTE = MEMORY.MAP_PALETTE - 0x01;
    }
}
@install()
@inject(ADDRESS.HOTKEY_START_R)
@count_limit(0x20)
fun hotkey_start_r() {
    if(FLAG.DEBUG) {
        subtext(string("Start+R[END]"));

        // map_transition(arena, right, DIRECTION.NONE);
        
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.NO_CLIP);
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.INVINCIBLE_2);
        debug_boy();
        // debug_memory(<0x2834>[0x15], <0x2836>[0x2a]);

        // map_transition(toaster_arena, center, DIRECTION.NONE);

        // MEMORY.MAP_PALETTE = MEMORY.MAP_PALETTE + 0x01;
    }
}

// MAPS

fun init_hack() {
    init_souls();

    MEMORY.DOG = DOG.WOLF;
    available(CHARACTER.BOTH);
}

fun default_init_room(night, rain) {
    init_hack();
    
    if(rain) {
        sfx_effect(SFX_EFFECT.RAIN, True);
    }
    if(night) {
        sfx_effect(SFX_EFFECT.NIGHT, True);
    }

    fade_in();
}

// center

map inbetwixx(0x05) {
    enum entrance {
        north_1 = entrance(0x2d, 0x01, DIRECTION.SOUTH),
        east = entrance(0x5f, 0x4d, DIRECTION.WEST),
        west_1 = entrance(0x04, 0x71, DIRECTION.EAST),
        west_2 = entrance(0x04, 0x2f, DIRECTION.EAST),

        start = entrance(0x0f, 0x47, DIRECTION.NONE)
    }

    enum soundtrack {
        default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0x30)
    }

    @install()
    fun ravine_triggered() {
        fall_into_pit(0x0140);

        sleep(0xd0);

        damage(CHARACTER.BOTH, 0x00ff, True);
        sleep(0x60);
        yield();
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        stepon_1 = ravine_triggered(),
        stepon_2 = ravine_triggered(),
        stepon_3 = ravine_triggered(),
        stepon_4 = ravine_triggered(),
        stepon_5 = ravine_triggered(),
        stepon_6 = ravine_triggered(),
        stepon_7 = @install() fun test() {
            subtext(string("step-on? 7 [END]"));
        },
        exit_east = @install() fun test() {
            map_transition(east_inbetwixx, west_2, DIRECTION.EAST);
        },
        exit_north = @install() fun test() {
            subtext(string("step-on? 9 [END]"));
        },
        exit_west_2_east = @install() fun test() {
            map_transition(northwest_inbetwixx, east, DIRECTION.WEST);
        },
        exit_west_1_exit = @install() fun test() {
            map_transition(west_inbetwixx, east_2, DIRECTION.WEST);
        },
        stepon_12 = @install() fun test() {
            subtext(string("step-on? 12 [END]"));
        },
        stepon_13 = @install() fun test() {
            subtext(string("step-on? 13 [END]"));
        },
        stepon_14 = @install() fun test() {
            subtext(string("step-on? 14 [END]"));
        },
        stepon_15 = @install() fun test() {
            subtext(string("step-on? 15 [END]"));
        },

        stepon_16 = @install() fun test() {
            subtext(string("step-on? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("step-on? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("step-on? 18 [END]"));
        },
        stepon_19 = @install() fun test() {
            subtext(string("step-on? 19 [END]"));
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            _axe2_wall(0x00);
        },
        b_trigger_1 = @install() fun test() {
            _axe2_wall(0x01);
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 6 [END]"));

            // _loot(0x0a, LOOT_REWARD.MUSHROOM, 0x01, 0x00);
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        }
    }

    fun init_room() {
        default_init_room(True, True);

        subtext(string("Inbetwixx[END]"));
    }

    fun intro() {
        teleport(CHARACTER.DOG, 0x13, 0x49);
        animate(CHARACTER.DOG, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);

        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

        sleep(0x50);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
        sleep(0x30);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
        sleep(0x40);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
        sleep(0x15);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.KNEEL);
    }

    fun bomb_wall_trigger(object, x, y) {
        // add_enemy_with_flags(ENEMY.THRAXX_HEART, x, y, 0x0000);
        add_enemy_with_flags(ENEMY.FACE_ENTITY, x, y, 0x0004);
        // <CHARACTER.LAST_ENTITY>[0x2a] = object;
        // <CHARACTER.LAST_ENTITY>[0x15] = 0x01;
        
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(bomb_wall_triggered));
        // store_last_entity(0x2834);

        <0x2838> = object;
        <0x283a> = 0x01;
    }

    @install()
    fun energy_core_triggered() {
        if(<CHARACTER.ACTIVE> == <CHARACTER.BOY>) {
            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.LOOT);
            sleep(0x10);

            unlock(ITEM.ENERGY_CORE);

            destroy(CHARACTER.SCRIPT_OWNER);
        }
    }

    @install()
    fun test_room_portal() {
        attach_to_script(CHARACTER.BOY);

        question_max(string("[0x96]Dog Test Rooms:[LF][0x8b]Gate Bots (90%)[LF][0x8b]Rats (80%)[LF]Boy Test Rooms:[LF][0x8b]Bomb (50%)[LF][0x8b]Mosquito (80%)[LF][0x8b]Invisible (100%)[LF][0x8b]Abomination (80%)[LF][0x8b]Radahn (90%)[LF][0x8b]Drone (80%)[END]"), 0x09 + 0x07);

        if(MEMORY.QUESTION_ANSWER == 0x00) { // toaster arena
            map_transition(toaster_arena, center, DIRECTION.NONE);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) { // rats arena
            map_transition(rats_arena, right, DIRECTION.NONE);
        } else if(MEMORY.QUESTION_ANSWER == 0x02) { // bomb arena
            map_transition(bomb_arena, right, DIRECTION.NONE);
        } else if(MEMORY.QUESTION_ANSWER == 0x03) { // mosquito arena
            map_transition(mosquito_arena, right, DIRECTION.NONE);
        } else if(MEMORY.QUESTION_ANSWER == 0x04) { // invisible arena
            map_transition(invisible_arena, right, DIRECTION.NONE);
        } else if(MEMORY.QUESTION_ANSWER == 0x05) { // abomination arena
            map_transition(abomination_arena, right, DIRECTION.NONE);
        } else if(MEMORY.QUESTION_ANSWER == 0x06) { // radahn arena
            map_transition(radahn_arena, right, DIRECTION.NONE);
        } else if(MEMORY.QUESTION_ANSWER == 0x07) { // drone arena
            map_transition(drone_arena, right, DIRECTION.NONE);
        } else if(MEMORY.QUESTION_ANSWER == 0x08) { // nop
            nop();
        } else if(MEMORY.QUESTION_ANSWER == 0x09) { // nop
            nop();
        } else if(MEMORY.QUESTION_ANSWER == 0x0a) { // nop
            nop();
        }
    }
    @install()
    fun cheat_selection() {
        attach_to_script(CHARACTER.BOY);

        question(string("[0x96]Cheats:[LF][0x8b]Basics[LF][0x8b]Alchemy[LF][0x8b]Money[END]"));

        if(MEMORY.QUESTION_ANSWER == 0x00) { // basics
            unlock(ITEM.WEAPONS);
            unlock(ITEM.JAGUAR_RING);
            unlock(ITEM.CONSUMABLES);
            
            // unlock(ITEM.SPEAR_1);
            unlock(ITEM.AXE_2);

            set(SOULS_MEMORY.BOMB_ENABLED);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) { // alchemy
            unlock(ITEM.ALCHEMY);
            unlock(ITEM.INGREDIENTS);
            select_alchemy();
        } else if(MEMORY.QUESTION_ANSWER == 0x02) { // money
            currency_get(CURRENCY.TALONS, 0x29a);
        } else if(MEMORY.QUESTION_ANSWER == 0x03) { // nop
            nop();
        } else if(MEMORY.QUESTION_ANSWER == 0x04) { // nop
            nop();
        } else if(MEMORY.QUESTION_ANSWER == 0x05) { // nop
            nop();
        } else if(MEMORY.QUESTION_ANSWER == 0x06) { // nop
            nop();
        } else if(MEMORY.QUESTION_ANSWER == 0x07) { // nop
            nop();
        } else if(MEMORY.QUESTION_ANSWER == 0x08) { // nop
            nop();
        } else if(MEMORY.QUESTION_ANSWER == 0x09) { // nop
            nop();
        } else if(MEMORY.QUESTION_ANSWER == 0x0a) { // nop
            nop();
        }
    }

    @install()
    fun trigger_enter() {
        if(SOULS_MEMORY.DEMO_MODE) {
            if!(FLAG.ENERGY_CORE) {
                add_placeholder(ANIMATION_PLACEHOLDER.ENERGY_CORE_OPEN, 0x1f, 0x47);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(energy_core_triggered));
            }

            add_enemy_with_flags(ENEMY.TINKER, 0x0c, 0x42, FLAG_ENEMY.INACTIVE);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = 0x32;
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.VINCIBLE);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.VINCIBLE_2);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(cheat_selection));

            add_enemy_with_flags(ENEMY.FIRE_EYES, 0x11, 0x42, FLAG_ENEMY.INACTIVE);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = 0x32;
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(test_room_portal));
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.VINCIBLE);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.VINCIBLE_2);
        }

        init_room();

        if!(FLAG.IN_ANIMATION) {
            if!(SOULS_MEMORY.INTRO_WATCHED) {
                set(SOULS_MEMORY.INTRO_WATCHED);

                intro();

                subtext(string("v0.2.0 - debug - by r.bin[END]"));
            }
            
            // code(0xa3, 0x18, "// (a3) CALL 'Prepare room change? North exit/south entrance outdoor-indoor?' (0x26)"); // TODO: 4x4 combinations, not 4
            // 19=ww, 1a=Ww, 1b=wn, 1c=ws, 1d=ee, 1e=Ee, 1f=EN
            // 20=ES, 21=SS, 22=Ss, 23=sW, 24=SW, 25=SE, 26=NN, 27=NN, 28=NE, 29=NW, 2a=NS, 2b=Ns, 2c=ns, 2d=ss

            // load_map(0x05, 0x0f, 0x47);
        }

        bonfire(0x31, 0x35, reference(bonfire_triggered));
        // bomb_wall_trigger(0x01, 0x3f, 0x3c);
        // bomb_wall_trigger(0x00, 0x43, 0x60);
    }
};

// east

map west_inbetwixx(0x5b) {
    enum entrance {
        north = entrance(0x12, 0x09, DIRECTION.SOUTH),
        east_1 = entrance(0x6d, 0x11, DIRECTION.WEST),
        east_2 = entrance(0x6d, 0x23, DIRECTION.WEST),
        east_3 = entrance(0x6d, 0x35, DIRECTION.WEST),
        west = entrance(0x01, 0x37, DIRECTION.EAST)
    }

    enum soundtrack {
        default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0x30)
    }

    enum stepon_trigger {
        exit_east_1 = @install() fun test() {
            map_transition(west_inbetwixx, east_3, DIRECTION.EAST);
        },
        exit_east_3 = @install() fun test() {
            map_transition(west_inbetwixx, east_1, DIRECTION.EAST);
        },
        exit_east_2 = @install() fun test() {
            map_transition(inbetwixx, west_1, DIRECTION.EAST);
        },
        exit_west = @install() fun test() {
            map_transition(west_hut, east, DIRECTION.WEST);
        },
        exit_north = @install() fun test() {
            map_transition(volcano, south, DIRECTION.NORTH);
        }
    }

    fun init_room() {
        init_map(0x00, 0x06, 0x6e, 0x52);
        default_init_room(True, True);

        subtext(string("West Inbetwixx[END]"));
    }

    @install()
    fun branch_triggered() {
        dialog(string("...[0x80][0x19][0x81][END]"));

        <CHARACTER.SCRIPT_OWNER>[0x0b] = 0x0800;
        control_enemy(CHARACTER.SCRIPT_OWNER, False);
    }

    enum BOSS {
        DEBUG = False,

        ID_OWL_1 = memory_tmp(),
        ID_OWL_2 = memory_tmp(),

        TRANSFORM_DISTANCE = 0x10
    }

    @install()
    fun transform() {
        control_enemy(BOSS.ID_OWL_1, True);
        control_enemy(BOSS.ID_OWL_2, True);

        destroy(BOSS.ID_OWL_1);

        attribute_bit(BOSS.ID_OWL_2, ATTRIBUTE_BITS.INVINCIBLE);

        animate(BOSS.ID_OWL_2, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.BLACK_OWL_FUSION);

        sleep(0x30);

        add_enemy(ENEMY.BOY_BLACK, 0x00, 0x00);
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = BOSS.ID_OWL_2[ATTRIBUTE.X];
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = BOSS.ID_OWL_2[ATTRIBUTE.Y];
        destroy(BOSS.ID_OWL_2);
    }

    @install()
    @async()
    fun grabby_owls() {
        while(True) {
            arg[0x00] = BOSS.ID_OWL_1[ATTRIBUTE.X];
            arg[0x02] = BOSS.ID_OWL_1[ATTRIBUTE.Y];
            arg[0x04] = BOSS.ID_OWL_2[ATTRIBUTE.X];
            arg[0x06] = BOSS.ID_OWL_2[ATTRIBUTE.Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if(arg[0x08] <= BOSS.TRANSFORM_DISTANCE) {
                if(arg[0x0a] <= BOSS.TRANSFORM_DISTANCE) {
                    transform();
                    end();
                }
            }
            yield();

            if(BOSS.DEBUG) {
                debug_memory(arg[0x08], arg[0x0a]);
                sleep(0x20);
            }
        }
    }
    
    @install()
    fun owl_triggered() {
        sleep(0x30);
        animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ALL.SLASH_2);
    }

    fun trigger_enter() {
        branch_lady(0x58, 0x0f, reference(branch_triggered));

        add_enemy(ENEMY.OWL_BLACK, 0x2d, 0x21);
        <CHARACTER.LAST_ENTITY>[0x2a] = 0x0fff;
        store_last_entity(BOSS.ID_OWL_1);

        add_enemy(ENEMY.OWL_BLACK, 0x47, 0x42);
        <CHARACTER.LAST_ENTITY>[0x2a] = 0x0fff;
        store_last_entity(BOSS.ID_OWL_2);
        animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ALL.SLASH_2);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(owl_triggered));
        face(CHARACTER.LAST_ENTITY, DIRECTION.SOUTH);

        init_room();
        
        grabby_owls();
    }
};

map west_hut(0x33) {
    enum entrance {
        hut = entrance(0x13, 0x13, DIRECTION.SOUTH), // TODO: 13/15
        east = entrance(0x25, 0x12, DIRECTION.WEST),

        backdoor = entrance(0x0f, 0x0f, DIRECTION.WEST),
    }

    enum soundtrack {
        default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0x30)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            map_transition(west_hut2, door, DIRECTION.NORTH);
        },
        stepon_1 = @install() fun test() {
            map_transition(west_inbetwixx, west, DIRECTION.EAST);
        }
    }

    @install()
    fun secret_room_triggered() {
        map_transition(potato_room, stairs, DIRECTION.WEST);
    }

    fun trigger_enter() {
        default_init_room(True, True);

        // add_enemy(ENEMY.PLACEHOLDER, 0x0d, 0x0e);
        add_enemy(ENEMY.PLACEHOLDER, 0x0d, 0x12);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(secret_room_triggered));
    }
};

map potato_room(0x60) {
    enum entrance {
        stairs = entrance(0x29, 0x0d, DIRECTION.WEST)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            map_transition(west_hut, backdoor, DIRECTION.EAST);
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
    }

    fun trigger_enter() {
        default_init_room(True, False);
    }
};

map west_hut2(0x34) {
    enum entrance {
        door = entrance(0x12, 0x23, DIRECTION.NORTH)
    }

    enum soundtrack {
        default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0x30)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            map_transition(west_hut, hut, DIRECTION.SOUTH);
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
    }

    fun trigger_enter() {
        default_init_room(True, False);
    }
};

map volcano(0x69) {
    enum entrance {
        cutscene_north_1 = entrance(0x4a, 0x38, DIRECTION.NONE),
        cutscene_north_2 = entrance(0x5f, 0x1b, DIRECTION.NONE),
        east = entrance(0x6d, 0x83, DIRECTION.WEST), // 0x6b, 0x83
        south = entrance(0x1b, 0x9d, DIRECTION.NORTH),

        cave_west = entrance(0x0b, 0x70, DIRECTION.SOUTH),
        cave_center = entrance(0x3f, 0x4a, DIRECTION.SOUTH),
        cave_east = entrance(0x4d, 0x6a, DIRECTION.SOUTH),
    }

    enum soundtrack {
        default = soundtrack(MUSIC.JUNGLE_AMBIENT_BIRDS, 0xff)
    }

    enum stepon_trigger {
        tunnel_gauge = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("step-on? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("step-on? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("step-on? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("step-on? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("step-on? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("step-on? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("step-on? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("step-on? 8 [END]"));
        },
        stepon_9 = @install() fun test() {
            subtext(string("step-on? 9 [END]"));
        },

        stepon_10 = @install() fun test() {
            subtext(string("step-on? 10 [END]"));
        },
        exit_south = @install() fun test() {
            map_transition(west_inbetwixx, north, DIRECTION.SOUTH);
        },
        cave_east = @install() fun test() {
            subtext(string("step-on? 12 [END]"));
        },
        cave_west = @install() fun test() {
            map_transition(stairs, stairs_west_bottom, DIRECTION.NORTH);
        },
        cave_center = @install() fun test() {
            subtext(string("step-on? 14 [END]"));
        },
        exit_east = @install() fun test() {
            map_transition(northwest_inbetwixx, west, DIRECTION.EAST);
        },
        stepon_16 = @install() fun test() {
            subtext(string("step-on? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("step-on? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("step-on? 18 [END]"));
        },
        stepon_19 = @install() fun test() {
            subtext(string("step-on? 19 [END]"));
        },

        stepon_20 = @install() fun test() {
            subtext(string("step-on? 20 [END]"));
        },
        stepon_21 = @install() fun test() {
            subtext(string("step-on? 21 [END]"));
        },
        stepon_22 = @install() fun test() {
            subtext(string("step-on? 22 [END]"));
        },
        stepon_23 = @install() fun test() {
            subtext(string("step-on? 23 [END]"));
        },
        stepon_24 = @install() fun test() {
            subtext(string("step-on? 24 [END]"));
        },
        stepon_25 = @install() fun test() {
            subtext(string("step-on? 25 [END]"));
        },
        stepon_26 = @install() fun test() {
            subtext(string("step-on? 26 [END]"));
        },
        stepon_27 = @install() fun test() {
            subtext(string("step-on? 27 [END]"));
        },
        stepon_28 = @install() fun test() {
            subtext(string("step-on? 28 [END]"));
        },
        stepon_29 = @install() fun test() {
            subtext(string("step-on? 29 [END]"));
        },

        stepon_30 = @install() fun test() {
            subtext(string("step-on? 30 [END]"));
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        },

        b_trigger_20 = @install() fun test() {
            subtext(string("b? 20 [END]"));
        },
        b_trigger_21 = @install() fun test() {
            subtext(string("b? 21 [END]"));
        },
        b_trigger_22 = @install() fun test() {
            subtext(string("b? 22 [END]"));
        },
        b_trigger_23 = @install() fun test() {
            subtext(string("b? 23 [END]"));
        },
        b_trigger_24 = @install() fun test() {
            subtext(string("b? 24 [END]"));
        },
        b_trigger_25 = @install() fun test() {
            subtext(string("b? 25 [END]"));
        },
        b_trigger_26 = @install() fun test() {
            subtext(string("b? 26 [END]"));
        },
        b_trigger_27 = @install() fun test() {
            subtext(string("b? 27 [END]"));
        },
        b_trigger_28 = @install() fun test() {
            subtext(string("b? 28 [END]"));
        },
        b_trigger_29 = @install() fun test() {
            subtext(string("b? 29 [END]"));
        },

        b_trigger_30 = @install() fun test() {
            subtext(string("b? 30 [END]"));
        },
        b_trigger_31 = @install() fun test() {
            subtext(string("b? 31 [END]"));
        },
        b_trigger_32 = @install() fun test() {
            subtext(string("b? 32 [END]"));
        },
    }

    fun trigger_enter() {
        default_init_room(True, True);
    }
};

map stairs(0x1a) {
    enum entrance {
        stairs_east_top = entrance(0x43, 0x03, DIRECTION.SOUTH),
        stairs_west_top = entrance(0x15, 0x05, DIRECTION.SOUTH),
        stairs_west_bottom = entrance(0x5f, 0xa1, DIRECTION.NORTH),
    }

    enum stepon_trigger {
        cutscene_energy_core = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        exit_stairs_west_bottom = @install() fun test() {
            map_transition(volcano, cave_west, DIRECTION.SOUTH);
        },
        exit_stairs_west_top = @install() fun test() {
            map_transition(chessboard, stairs_east, DIRECTION.NORTH);
        },
        exit_stairs_east_top = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
    }

    enum b_trigger {
        pickup_energy_core = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
    }

    fun trigger_enter() {
        fade_in();
    }
};

map chessboard(0x19) {
    enum entrance {
        east = entrance(0x93, 0x42, DIRECTION.WEST),
        west = entrance(0x01, 0x42, DIRECTION.EAST),
        stairs_east = entrance(0x53, 0x4c, DIRECTION.WEST),
        stairs_west = entrance(0x40, 0x40, DIRECTION.EAST) // 0x4c, 0x40
    }

    enum stepon_trigger {
        stairs_east = @install() fun test() {
            map_transition(stairs, stairs_west_top, DIRECTION.EAST);
        },
        spawn_boss = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        exit_west = @install() fun test() {
            map_transition(gate, east, DIRECTION.WEST);
        },
        exit_east = @install() fun test() {
            map_transition(well, west, DIRECTION.EAST);
        },
        stairs_west = @install() fun test() {
            map_transition(hidden_stairs, stairs, DIRECTION.WEST);
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        }
    }

    fun trigger_enter() {
        fade_in();
    }
};

map hidden_stairs(0x60) {
    enum entrance {
        stairs = entrance(0x29, 0x0d, DIRECTION.WEST)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            map_transition(chessboard, stairs_west, DIRECTION.EAST);
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
    }

    fun trigger_enter() {
        default_init_room(True, False);
    }
};

map well(0x6c) {
    enum entrance {
        west = entrance(0x01, 0x1c, DIRECTION.EAST)
    }

    enum stepon_trigger {
        exit_west = @install() fun test() {
            map_transition(chessboard, east, DIRECTION.WEST);
        },
    }

    enum b_trigger {
        barrier = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
    }

    fun trigger_enter() {
        fade_in();
    }
};

map gate(0x76) {
    enum entrance {
        north = entrance(0x2c, 0x09, DIRECTION.SOUTH),
        east = entrance(0x67, 0x71, DIRECTION.WEST),
    }

    enum stepon_trigger {
        east_north = @install() fun test() {
            map_transition(castle_center, south_2, DIRECTION.NORTH);
        },
        exit_east = @install() fun test() {
            map_transition(chessboard, west, DIRECTION.EAST);
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        },
    }

    fun trigger_enter() {
        fade_in();
    }
};

map castle_center(0x1c) {
    enum entrance {
        north = entrance(0x40, 0x04, DIRECTION.SOUTH),
        south_1 = entrance(0x72, 0x38, DIRECTION.NORTH),
        south_2 = entrance(0x4c, 0x38, DIRECTION.NORTH),
        south_3 = entrance(0x08, 0x38, DIRECTION.NORTH),
    }

    enum stepon_trigger {
        exit_north = @install() fun test() {
            map_transition(castle_throne_room, south, DIRECTION.NORTH);
        },
        exit_south_3 = @install() fun test() {
            map_transition(market_west, north, DIRECTION.SOUTH);
        },
        exit_south_2 = @install() fun test() {
            map_transition(gate, north, DIRECTION.SOUTH);
        },
        exit_south_1 = @install() fun test() {
            map_transition(castle_bridges, west, DIRECTION.SOUTH);
        },
        guard_right = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        guard_left = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        guard = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        },
    }
    
    fun trigger_enter() {
        fade_in();
    }
};

map market_west(0x4e) {
    enum entrance {
        north = entrance(0x2a, 0x01, DIRECTION.SOUTH),
        east = entrance(0x39, 0xc3, DIRECTION.WEST),
    }

    enum stepon_trigger {
        exit_north = @install() fun test() {
            map_transition(castle_center, south_3, DIRECTION.NORTH);
        },
        exit_east = @install() fun test() {
            map_transition(castle_fire_pit, west, DIRECTION.EAST);
        },
    }

    fun trigger_enter() {
        fade_in();
    }
};

map castle_throne_room(0x4d) {
    enum entrance {
        south = entrance(0x31, 0x21, DIRECTION.NORTH),

        cinematic_enter = entrance(0x37, 0x01, DIRECTION.NORTH),
    }

    enum ROOM {
        FAKE_EXIT_ID = memory_tmp(),
    }

    fun fake_exit() {
        map_transition(castle_center, north, DIRECTION.SOUTH);
    }

    @install()
    @async()
    fun fake_exit_scanner() {
        attach_to_script(ROOM.FAKE_EXIT_ID);

        while(True) {
            arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
            arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
            arg[0x04] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
            arg[0x06] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if(arg[0x08] <= 0x20) {
                if(arg[0x0a] <= 0x20) {
                    fake_exit();
                    end();
                }
            }

            yield();
        }
    }

    fun trigger_enter() {
        fade_in();

        add_enemy(ENEMY.PLACEHOLDER, 0x31, 0x21);
        ROOM.FAKE_EXIT_ID = <CHARACTER.LAST_ENTITY>;
        sleep(0x10);
        fake_exit_scanner();
    }
};

map castle_fire_pit(0x3a) {
    enum entrance {
        west = entrance(0x05, 0x1b, DIRECTION.EAST),

        cutscene_landing = entrance(0x0b, 0x1b, DIRECTION.NONE),
    }

    enum stepon_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        exit_west = @install() fun test() {
            map_transition(market_west, east, DIRECTION.WEST);
        },
    }

    fun trigger_enter() {
        fade_in();
    }
};

map castle_bridges(0x70) {
    enum entrance {
        east = entrance(0x8b, 0x28, DIRECTION.WEST),
        west = entrance(0x01, 0x29, DIRECTION.EAST),

        door_east = entrance(0x5f, 0x28, DIRECTION.EAST),
        door_west = entrance(0x2d, 0x29, DIRECTION.WEST),

        balcony_east_1 = entrance(0x4f, 0x0f, DIRECTION.EAST),
        balcony_east_2 = entrance(0x4f, 0x19, DIRECTION.EAST),
        balcony_east_3 = entrance(0x4f, 0x23, DIRECTION.EAST),

        balcony_west_1 = entrance(0x3f, 0x23, DIRECTION.WEST),
        balcony_west_2 = entrance(0x3f, 0x19, DIRECTION.WEST),
        balcony_west_3 = entrance(0x3f, 0x0f, DIRECTION.WEST),
    }

    enum stepon_trigger {
        exit_door_east = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        exit_door_west = @install() fun test() {
            map_transition(castle_balconies, stairs_west, DIRECTION.EAST);
        },
        exit_east = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        balcony_east_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        balcony_east_2 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        balcony_east_1 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        exit_west = @install() fun test() {
            map_transition(castle_center, south_1, DIRECTION.WEST);
        },
        balcony_west_1 = @install() fun test() {
            map_transition(castle_balconies, balcony_west_1, DIRECTION.EAST);
        },
        balcony_west_2 = @install() fun test() {
            map_transition(castle_balconies, balcony_west_2, DIRECTION.EAST);
        },
        balcony_west_3 = @install() fun test() {
            map_transition(castle_balconies, balcony_west_3, DIRECTION.EAST);
        },
    }

    fun trigger_enter() {
        init_map(0x00, 0x00, 0x3c, 0x74);
        
        fade_in();
    }
};

map castle_balconies(0x72) {
    enum entrance {
        balcony_east_1 = entrance(0x75, 0x1a, DIRECTION.WEST),
        balcony_east_2 = entrance(0x75, 0x3c, DIRECTION.WEST),
        balcony_east_3 = entrance(0x75, 0x5e, DIRECTION.WEST),

        balcony_west_1 = entrance(0x05, 0x5e, DIRECTION.EAST),
        balcony_west_2 = entrance(0x05, 0x3c, DIRECTION.EAST),
        balcony_west_3 = entrance(0x05, 0x1a, DIRECTION.EAST),

        stairs_east = entrance(0x45, 0x39, DIRECTION.EAST),
        stairs_west = entrance(0x35, 0x39, DIRECTION.WEST),

        vent_east_1 = entrance(0x67, 0x23, DIRECTION.NONE),
        vent_east_2 = entrance(0x67, 0x67, DIRECTION.NONE),

        vent_west_1 = entrance(0x13, 0x67, DIRECTION.NONE),
        vent_west_2 = entrance(0x13, 0x45, DIRECTION.NONE),
        vent_west_3 = entrance(0x13, 0x23, DIRECTION.NONE),
    }

    enum stepon_trigger {
        door_west_3 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        door_west_2 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        door_west_1 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        door_east_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        door_east_2 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        door_east_1 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        vent_west_2 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        vent_west_1 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        vent_west_1 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        vent_west_2 = @install() fun test() {
            subtext(string("exit? 9 [END]"));
        },

        vent_west_3 = @install() fun test() {
            subtext(string("exit? 10 [END]"));
        },
        stairs_east = @install() fun test() {
            subtext(string("exit? 11 [END]"));
        },
        stairs_west = @install() fun test() {
            map_transition(castle_bridges, door_west, DIRECTION.EAST);
        },
        balcony_east_3 = @install() fun test() {
            subtext(string("exit? 13 [END]"));
        },
        balcony_east_2 = @install() fun test() {
            subtext(string("exit? 14 [END]"));
        },
        balcony_east_1 = @install() fun test() {
            subtext(string("exit? 15 [END]"));
        },
        balcony_west_1 = @install() fun test() {
            map_transition(castle_bridges, balcony_west_1, DIRECTION.WEST);
        },
        balcony_west_2 = @install() fun test() {
            map_transition(castle_bridges, balcony_west_2, DIRECTION.WEST);
        },
        balcony_west_3 = @install() fun test() {
            map_transition(castle_bridges, balcony_west_3, DIRECTION.WEST);
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
    }

    fun trigger_enter() {
        object[0x00] = 0x7e;
        object[0x01] = 0x7e;
        object[0x02] = 0x7e;

        fade_in();
    }
};

// north east

map northwest_inbetwixx(0x07) {
    enum entrance {
        east = entrance(0x44, 0x44, DIRECTION.WEST),
        west = entrance(0x01, 0x3d, DIRECTION.EAST),
        cave = entrance(0x41, 0x0b, DIRECTION.SOUTH)
    }

    enum soundtrack {
        default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0x30)
    }

    enum stepon_trigger {
        lift_west = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        lift_east = @install() fun test() {
            subtext(string("step-on? 1 [END]"));
        },
        exit_west = @install() fun test() {
            map_transition(volcano, east, DIRECTION.WEST);
        },
        bridge_east = @install() fun test() {
            // fall_into_pit(0x0250);

            subtext(string("step-on? 3 [END]"));
        },
        bridge_west = @install() fun test() {
            subtext(string("step-on? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("step-on? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            map_transition(northern_waterfall, south, DIRECTION.NORTH);
        },
        stepon_7 = @install() fun test() {
            subtext(string("step-on? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("step-on? 8 [END]"));
        },
        exit_west = @install() fun test() {
            map_transition(inbetwixx, west_2, DIRECTION.EAST);
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            _axe2_wall(0x00);
        }
    }

    fun init_room() {
        default_init_room(True, True);
    }

    fun trigger_enter() {
        init_room();

        subtext(string("North West Inbetwixx[END]"));
    }
};

map northern_waterfall(0x6b) {
    enum entrance {
        south = entrance(0x11, 0x3f, DIRECTION.NORTH)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("step-on? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("step-on? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("step-on? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("step-on? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("step-on? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            map_transition(northwest_inbetwixx, cave, DIRECTION.SOUTH);
        }
    }

    fun trigger_enter() {
        default_init_room(True, True);
    }
};

// east

map east_inbetwixx(0x59) {
    enum entrance {
        east = entrance(0x73, 0x22, DIRECTION.WEST),
        cave = entrance(0x42, 0x1a, DIRECTION.SOUTH),
        south_1 = entrance(0x44, 0x9e, DIRECTION.NORTH),
        south_2 = entrance(0x33, 0x9e, DIRECTION.NORTH),
        west_1 = entrance(0x01, 0x2a, DIRECTION.EAST),
        west_2 = entrance(0x01, 0x22, DIRECTION.EAST),
        west_3 = entrance(0x01, 0x15, DIRECTION.EAST)
    }

    enum soundtrack {
        default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0x30)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("step-on? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("step-on? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("step-on? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("step-on? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("step-on? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("step-on? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("step-on? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("step-on? 8 [END]"));
        },
        stepon_9 = @install() fun test() {
            subtext(string("step-on? 9 [END]"));
        },

        stepon_10 = @install() fun test() {
            subtext(string("step-on? 10 [END]"));
        },
        stepon_11 = @install() fun test() {
            subtext(string("step-on? 11 [END]"));
        },
        stepon_12 = @install() fun test() {
            subtext(string("step-on? 12 [END]"));
        },
        stepon_13 = @install() fun test() {
            subtext(string("step-on? 13 [END]"));
        },
        stepon_14 = @install() fun test() {
            subtext(string("step-on? 14 [END]"));
        },
        stepon_15 = @install() fun test() {
            subtext(string("step-on? 15 [END]"));
        },
        stepon_16 = @install() fun test() {
            subtext(string("step-on? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("step-on? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("step-on? 18 [END]"));
        },
        stepon_19 = @install() fun test() {
            subtext(string("step-on? 19 [END]"));
        },

        stepon_20 = @install() fun test() {
            subtext(string("step-on? 20 [END]"));
        },
        stepon_21 = @install() fun test() {
            subtext(string("step-on? 21 [END]"));
        },
        stepon_22 = @install() fun test() {
            subtext(string("step-on? 22 [END]"));
        },
        stepon_23 = @install() fun test() {
            subtext(string("step-on? 23 [END]"));
        },
        exit_west_1 = @install() fun test() {
            map_transition(east_inbetwixx, west_3, DIRECTION.WEST);
        },
        exit_cave = @install() fun test() {
            subtext(string("step-on? 25 [END]"));
        },
        exit_south_1 = @install() fun test() {
            map_transition(east_crossing, crash, DIRECTION.SOUTH);
        },
        exit_south_2 = @install() fun test() {
            map_transition(east_crossing, north, DIRECTION.SOUTH);
        },
        exit_west_2 = @install() fun test() {
            map_transition(inbetwixx, east, DIRECTION.WEST);
        },
        exit_west_3 = @install() fun test() {
            map_transition(east_inbetwixx, west_1, DIRECTION.WEST);
        },

        stepon_30 = @install() fun test() {
            subtext(string("step-on? 30 [END]"));
        },
        stepon_31 = @install() fun test() {
            subtext(string("step-on? 31 [END]"));
        },
        stepon_32 = @install() fun test() {
            subtext(string("step-on? 32 [END]"));
        },
        stepon_33 = @install() fun test() {
            subtext(string("step-on? 33 [END]"));
        },
        stepon_34 = @install() fun test() {
            subtext(string("step-on? 34 [END]"));
        },
        stepon_35 = @install() fun test() {
            subtext(string("step-on? 35 [END]"));
        },
        stepon_36 = @install() fun test() {
            subtext(string("step-on? 36 [END]"));
        },
        stepon_37 = @install() fun test() {
            subtext(string("step-on? 37 [END]"));
        },
        stepon_38 = @install() fun test() {
            subtext(string("step-on? 38 [END]"));
        },
        stepon_39 = @install() fun test() {
            subtext(string("step-on? 39 [END]"));
        },

        stepon_40 = @install() fun test() {
            subtext(string("step-on? 40 [END]"));
        },
        stepon_41 = @install() fun test() {
            subtext(string("step-on? 41 [END]"));
        },
        stepon_42 = @install() fun test() {
            subtext(string("step-on? 42 [END]"));
        },
        stepon_43 = @install() fun test() {
            subtext(string("step-on? 43 [END]"));
        },
        stepon_44 = @install() fun test() {
            subtext(string("step-on? 44 [END]"));
        },
        stepon_45 = @install() fun test() {
            subtext(string("step-on? 45 [END]"));
        },
        stepon_46 = @install() fun test() {
            subtext(string("step-on? 46 [END]"));
        },
        stepon_47 = @install() fun test() {
            subtext(string("step-on? 47 [END]"));
        },
        stepon_48 = @install() fun test() {
            subtext(string("step-on? 48 [END]"));
        },
        stepon_49 = @install() fun test() {
            subtext(string("step-on? 49 [END]"));
        },

        stepon_50 = @install() fun test() {
            subtext(string("step-on? 50 [END]"));
        },
        stepon_51 = @install() fun test() {
            subtext(string("step-on? 51 [END]"));
        },
        stepon_52 = @install() fun test() {
            subtext(string("step-on? 52 [END]"));
        },
        stepon_53 = @install() fun test() {
            subtext(string("step-on? 53 [END]"));
        },
        stepon_54 = @install() fun test() {
            subtext(string("step-on? 54 [END]"));
        },
        stepon_55 = @install() fun test() {
            subtext(string("step-on? 55 [END]"));
        },
        stepon_56 = @install() fun test() {
            subtext(string("step-on? 56 [END]"));
        },
        stepon_57 = @install() fun test() {
            subtext(string("step-on? 57 [END]"));
        },
        stepon_58 = @install() fun test() {
            subtext(string("step-on? 58 [END]"));
        },
        stepon_59 = @install() fun test() {
            subtext(string("step-on? 59 [END]"));
        },

        stepon_60 = @install() fun test() {
            subtext(string("step-on? 60 [END]"));
        },
        stepon_61 = @install() fun test() {
            subtext(string("step-on? 61 [END]"));
        },
        stepon_62 = @install() fun test() {
            subtext(string("step-on? 62 [END]"));
        },
        stepon_63 = @install() fun test() {
            subtext(string("step-on? 63 [END]"));
        },
        exit_east = @install() fun test() {
            map_transition(eastern_barrier, west, DIRECTION.EAST);
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        },
        b_trigger_20 = @install() fun test() {
            subtext(string("b? 20 [END]"));
        },
        b_trigger_21 = @install() fun test() {
            subtext(string("b? 21 [END]"));
        },
        b_trigger_22 = @install() fun test() {
            subtext(string("b? 22 [END]"));
        },
        b_trigger_23 = @install() fun test() {
            subtext(string("b? 23 [END]"));
        },
        b_trigger_24 = @install() fun test() {
            subtext(string("b? 24 [END]"));
        },
        b_trigger_25 = @install() fun test() {
            subtext(string("b? 25 [END]"));
        },
        b_trigger_26 = @install() fun test() {
            subtext(string("b? 26 [END]"));
        },
        b_trigger_27 = @install() fun test() {
            subtext(string("b? 27 [END]"));
        }
    }

    @install()
    fun branch_triggered() {
        dialog(string("...[0x80][0x19][0x81][END]"));

        <CHARACTER.SCRIPT_OWNER>[0x0b] = 0x0800;
        control_enemy(CHARACTER.SCRIPT_OWNER, False);
    }

    fun init_room() {
        default_init_room(True, True);
    }

    fun trigger_enter() {
        branch_lady(0x4e, 0x2c, reference(branch_triggered));

        init_room();
    }
};

map east_crossing(0x4f) {
    enum entrance {
        north = entrance(0x27, 0x01, DIRECTION.SOUTH),
        cave = entrance(0x15, 0x1a, DIRECTION.SOUTH),
        east = entrance(0x3f, 0x4b, DIRECTION.WEST),
        west = entrance(0x01, 0x4b, DIRECTION.EAST),

        crash = entrance(0x32, 0x1e, DIRECTION.NONE),

        elevator_top = entrance(0x0d, 0x2b, DIRECTION.SOUTH),
        elevator_bottom = entrance(0x1b, 0x47, DIRECTION.SOUTH),
    }

    enum ROOM {
        STONE_TRIGGERED = flag()
    }

    @install()
    fun ravine_triggered() {
        fall_into_pit(0x00d0);

        sleep(0xd0);

        damage(CHARACTER.BOTH, 0x50, True);
        sleep(0x60);
        yield();

        if(<CHARACTER.BOY>[ATTRIBUTE.HP] > 0x00) {
            map_transition(radahn_arena, center, DIRECTION.NONE);
        }
    }

    enum stepon_trigger {
        ravine_1 = ravine_triggered(),
        ravine_2 = ravine_triggered(),
        ravine_3 = ravine_triggered(),
        ravine_4 = ravine_triggered(),
        ravine_5 = ravine_triggered(),
        ravine_6 = ravine_triggered(),
        ravine_7 = ravine_triggered(),
        ravine_8 = ravine_triggered(),
        ravine_9 = ravine_triggered(),
        ravine_10 = ravine_triggered(),

        ravine_11 = ravine_triggered(),
        ravine_12 = ravine_triggered(),
        ravine_13 = ravine_triggered(),
        ravine_14 = ravine_triggered(),
        ravine_15 = ravine_triggered(),
        ravine_16 = ravine_triggered(),
        ravine_17 = ravine_triggered(),
        ravine_18 = ravine_triggered(),
        ravine_19 = ravine_triggered(),
        exit_east = @install() fun test() {
            subtext(string("step-on? 19 [END]"));
        },

        exit_cave = @install() fun test() {
            subtext(string("Does not open from this side.[END]"));
        },
        exit_west = @install() fun test() {
            map_transition(eastern_river, east, DIRECTION.WEST);
        },
        elevator_bottom = @install() fun test() {
            map_transition(dungeon_volcano, south_1, DIRECTION.NORTH);
        },
        elevator_top = @install() fun test() {
            map_transition(dungeon_volcano, south_2, DIRECTION.NORTH);
        },
        exit_north = @install() fun test() {
            map_transition(east_inbetwixx, south_2, DIRECTION.NORTH);
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        }
    }

    @install()
    fun stone_triggered() {
        if(<CHARACTER.ACTIVE> == <CHARACTER.BOY>) {
            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_ALL.SLASH_2);

            <CHARACTER.SCRIPT_OWNER>[0x20] = 0x30;
            sleep(0x50);

            object[0x00] = 0x01;
            destroy(CHARACTER.SCRIPT_OWNER);

            set(ROOM.STONE_TRIGGERED);
        }
    }

    fun init_room() {
        default_init_room(True, True);
    }

    fun trigger_enter() {
        if!(ROOM.STONE_TRIGGERED) {
            add_enemy(ENEMY.STONE_ROUND, 0x24, 0x18);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(stone_triggered));
        } else {
            object[0x00] = 0x01;
        }

        bonfire(0x2d, 0x44, reference(bonfire_triggered));

        init_room();

        if!(FLAG.IN_ANIMATION) {
            <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] - 0x20;
            <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] - 0x20;
            crash_land(CHARACTER.BOTH);
        }
    }
};

map eastern_barrier(0x13) {
    enum entrance {
        north = entrance(0x17, 0x01, DIRECTION.SOUTH),
        east = entrance(0x2b, 0x11, DIRECTION.WEST),
        west = entrance(0x06, 0x18, DIRECTION.EAST),
    }

    enum soundtrack {
        default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0x30)
    }

    enum stepon_trigger {
        exit_west = @install() fun test() {
            map_transition(east_inbetwixx, east, DIRECTION.WEST);
        },
        stepon_1 = @install() fun test() {
            subtext(string("step-on? 1 [END]"));
        },
        exit_north = @install() fun test() {
            map_transition(graveyard, south, DIRECTION.NORTH);
        },
        exit_east = @install() fun test() {
            map_transition(pipe_entrance, pipe_west, DIRECTION.EAST);
        },
    }

    enum b_trigger {
        barrier = @install() fun test() {
            _axe2_wall(0x00);
        },
    }

    fun trigger_enter() {
        default_init_room(True, True);
    }
};

map eastern_river(0x2f) {
    enum entrance {
        north = entrance(0x53, 0x04, DIRECTION.SOUTH),
        east = entrance(0x81, 0x31, DIRECTION.WEST),
        south = entrance(0x55, 0x6e, DIRECTION.SOUTH),
    }

    enum ROOM {
        WATER_REMOVED = flag()
    } 

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("step-on? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("step-on? 2 [END]"));
        },
        exit_north = @install() fun test() {
            map_transition(eastern_waterfall, south, DIRECTION.NORTH);
        },
        exit_east = @install() fun test() {
            map_transition(east_crossing, west, DIRECTION.EAST);
        },
        exit_south = @install() fun test() {
            subtext(string("step-on? 5 [END]"));
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        },
    }

    fun remove_water(remove) {
        if(remove) {
            object[0x00] = 0x01;
            object[0x01] = 0x01;
        } else {
            object[0x00] = 0x00;
            object[0x01] = 0x00;
        }
    }

    @install()
    fun revealer_triggered() {
        destroy(CHARACTER.SCRIPT_OWNER);

        remove_water(True);

        set(ROOM.WATER_REMOVED);
    }

    fun trigger_enter() {
        // object[0x00] = 0x01;
        // object[0x01] = 0x01;
        
        if!(ROOM.WATER_REMOVED) {
            add_enemy(ENEMY.REVEALER_TARGET_ENTITY, 0x52, 0x26);
            special_script(SPECIAL_SCRIPTS.REVEALER, reference(revealer_triggered));
        } else {
            remove_water(True);
        }

        default_init_room(True, True);
    }
};


map eastern_waterfall(0x6b) {
    enum entrance {
        south = entrance(0x11, 0x3f, DIRECTION.NORTH)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("step-on? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("step-on? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("step-on? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("step-on? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("step-on? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            map_transition(eastern_river, north, DIRECTION.SOUTH);
        }
    }

    fun trigger_enter() {
        default_init_room(True, True);
    }
};

map graveyard(0x27) {
    enum entrance {
        north = entrance(0x32, 0x0f, DIRECTION.SOUTH),
        south = entrance(0x2f, 0x5f, DIRECTION.NORTH)
    }

    enum stepon_trigger {
        exit_north = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        exit_south = @install() fun test() {
            map_transition(eastern_barrier, north, DIRECTION.SOUTH);
        },
        spawn_boss = @install() fun test() {
            subtext(string("step-on? 2 [END]"));
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        },

        b_trigger_20 = @install() fun test() {
            subtext(string("b? 20 [END]"));
        },
        b_trigger_21 = @install() fun test() {
            subtext(string("b? 21 [END]"));
        },
        b_trigger_22 = @install() fun test() {
            subtext(string("b? 22 [END]"));
        },
        b_trigger_23 = @install() fun test() {
            subtext(string("b? 23 [END]"));
        },
        b_trigger_24 = @install() fun test() {
            subtext(string("b? 24 [END]"));
        },
        b_trigger_25 = @install() fun test() {
            subtext(string("b? 25 [END]"));
        },
        b_trigger_26 = @install() fun test() {
            subtext(string("b? 26 [END]"));
        },
        b_trigger_27 = @install() fun test() {
            subtext(string("b? 27 [END]"));
        },
        b_trigger_28 = @install() fun test() {
            subtext(string("b? 28 [END]"));
        },
        b_trigger_29 = @install() fun test() {
            subtext(string("b? 29 [END]"));
        }
    }

    fun trigger_enter() {
        default_init_room(True, True);
    }
};

map pipe_entrance(0x3e) {
    enum entrance {
        pipe_east = entrance(0x2d, 0x17, DIRECTION.NONE),
        south = entrance(0x1a, 0x2f, DIRECTION.NORTH),
        pipe_west = entrance(0x07, 0x17, DIRECTION.NONE),
        
        room_switch = entrance(0xbf, 0x23, DIRECTION.NONE),
        room_gate = entrance(0x87, 0x1f, DIRECTION.NONE),
        gate = entrance(0x98, 0x10, DIRECTION.SOUTH),
        room_empty = entrance(0x6f, 0x1b, DIRECTION.NONE),
    }

    enum stepon_trigger {
        switch_triggered = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        exit_room_switch = @install() fun test() {
            map_transition(mosquito_arena, right, DIRECTION.NORTH);
        },
        stepon_2 = @install() fun test() {
            subtext(string("step-on? 2 [END]"));
        },
        exit_room_empty = @install() fun test() {
            map_transition(mosquito_arena, right, DIRECTION.NORTH); // TODO: placeholder
        },
        exit_north_1 = @install() fun test() {
            map_transition(pipe_entrance, room_switch, DIRECTION.NORTH);
        },
        exit_north_2 = @install() fun test() {
            map_transition(pipe_maze, pipe_east, DIRECTION.NORTH);
        },
        jump_room_switch = @install() fun test() {
            call(0x94af0d);
        },
        stepon_7 = @install() fun test() {
            subtext(string("step-on? 7 [END]"));
        },
        exit_south = @install() fun test() {
            map_transition(hidden_room, room_nss_north, DIRECTION.SOUTH);
        },
        jump_empty_room = @install() fun test() {
            call(0x94af0d);
        },

        stepon_10 = @install() fun test() {
            subtext(string("step-on? 10 [END]"));
        },
        stepon_11 = @install() fun test() {
            subtext(string("step-on? 11 [END]"));
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
    }

    enum ROOM {
        DEBUG = False,

        SECRET_PASSAGE_TRIGGER = memory_tmp(),
        SECRET_PASSAGE_DISTANCE = 0x20,
    }

    @install()
    @async()
    fun hidden_exit_check() {
        while(True) {
            arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
            arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
            arg[0x04] = ROOM.SECRET_PASSAGE_TRIGGER[ATTRIBUTE.X];
            arg[0x06] = ROOM.SECRET_PASSAGE_TRIGGER[ATTRIBUTE.Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if(arg[0x08] <= ROOM.SECRET_PASSAGE_DISTANCE) {
                if(arg[0x0a] <= ROOM.SECRET_PASSAGE_DISTANCE) {
                    // map_transition(sewers, pipe, DIRECTION.EAST);
                    map_transition(eastern_barrier, east, DIRECTION.WEST);
                    end();
                }
            }
            yield();

            if(ROOM.DEBUG) {
                debug_memory(arg[0x08], arg[0x0a]);
                sleep(0x20);
            }
        }
    }
    
    fun trigger_enter() {
        default_init_room(True, False);

        // add_enemy(ENEMY.PLACEHOLDER, 0x30, 0x17);
        add_enemy(ENEMY.PLACEHOLDER, 0x05, 0x17);
        ROOM.SECRET_PASSAGE_TRIGGER = <CHARACTER.LAST_ENTITY>;
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);

        sleep(0x10);
        hidden_exit_check();
    }
};

map hidden_room(0x3c) {
    enum entrance {
        main_north = entrance(0xd3, 0x3d, DIRECTION.SOUTH),
        main_east = entrance(0xf7, 0x5b, DIRECTION.WEST),
        main_south = entrance(0xd5, 0x95, DIRECTION.NORTH),
        main_west = entrance(0xbb, 0x5d, DIRECTION.EAST),

        cave_outside = entrance(0x54, 0xb1, DIRECTION.NORTH),

        room_nw_north = entrance(0x20, 0x85, DIRECTION.SOUTH),
        room_nw_west = entrance(0x01, 0xa3, DIRECTION.EAST),

        room_es_east = entrance(0x67, 0x1c, DIRECTION.WEST),
        room_es_south = entrance(0x4c, 0x39, DIRECTION.NORTH),

        room_nss_north = entrance(0x9e, 0x05, DIRECTION.SOUTH),
        room_nss_south_1 = entrance(0x9e, 0x37, DIRECTION.NORTH),
        room_nss_south_2 = entrance(0x84, 0x37, DIRECTION.NORTH),

        room_s_south = entrance(0x9e, 0x7b, DIRECTION.NORTH),

        room_alchemist = entrance(0xd0, 0x05, DIRECTION.SOUTH),

        room_ns_north = entrance(0x1c, 0x3d, DIRECTION.SOUTH),
        room_ns_south = entrance(0x22, 0x7b, DIRECTION.NORTH),

        room_nne_north_1 = entrance(0x4c, 0x36, DIRECTION.SOUTH),
        room_nne_north_2 = entrance(0x60, 0x39, DIRECTION.SOUTH),
        room_nne_east = entrance(0x7f, 0x60, DIRECTION.WEST),

        room_sw_south = entrance(0x1c, 0x3b, DIRECTION.NORTH),
        room_sw_west = entrance(0x01, 0x24, DIRECTION.EAST),
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("step-on? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("step-on? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("step-on? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("step-on? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("step-on? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("step-on? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("step-on? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("step-on? 8 [END]"));
        },
        stepon_9 = @install() fun test() {
            subtext(string("step-on? 9 [END]"));
        },

        stepon_10 = @install() fun test() {
            subtext(string("step-on? 10 [END]"));
        },
        stepon_11 = @install() fun test() {
            subtext(string("step-on? 11 [END]"));
        },
        stepon_12 = @install() fun test() {
            subtext(string("step-on? 12 [END]"));
        },
        exit_room_nss_south_2 = @install() fun test() {
            subtext(string("Does not open from this side.[END]"));
        },
        exit_room_nss_south_1 = @install() fun test() {
            map_transition(hidden_room, room_alchemist, DIRECTION.SOUTH);
        },
        exit_room_nss_north = @install() fun test() {
            map_transition(pipe_entrance, south, DIRECTION.NORTH);
        },
        stepon_16 = @install() fun test() {
            map_transition(hidden_room, room_nss_south_1, DIRECTION.NORTH);
        },
        stepon_17 = @install() fun test() {
            subtext(string("step-on? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("step-on? 18 [END]"));
        },
        stepon_19 = @install() fun test() {
            subtext(string("step-on? 19 [END]"));
        },

        stepon_20 = @install() fun test() {
            subtext(string("step-on? 20 [END]"));
        },
    }
    
    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        },

        b_trigger_20 = @install() fun test() {
            subtext(string("b? 20 [END]"));
        },
        b_trigger_21 = @install() fun test() {
            subtext(string("b? 21 [END]"));
        },
        b_trigger_22 = @install() fun test() {
            subtext(string("b? 22 [END]"));
        },
        b_trigger_23 = @install() fun test() {
            subtext(string("b? 23 [END]"));
        },
        b_trigger_24 = @install() fun test() {
            subtext(string("b? 24 [END]"));
        },
    }
    
    fun trigger_enter() {
        default_init_room(False, False);

        add_enemy(ENEMY.STONE_ROUND, 0xdd, 0x27);
    }
};

map sewers(0x7a) {
    enum entrance {
        west = entrance(0x05, 0x0b, DIRECTION.EAST),
        pipe = entrance(0x05, 0x15, DIRECTION.NONE),

        cinematic_east = entrance(0x2d, 0x7, DIRECTION.NONE),
    }

    enum stepon_trigger {
        pipe = @install() fun test() {
            jump_from_ledge();
        },
        exit_west = @install() fun test() {
            map_transition(hidden_room, room_nss_south_2, DIRECTION.WEST);
        },
    }
    
    fun trigger_enter() {
        default_init_room(True, True);
    }
};

map pipe_maze(0x3d) {
    enum entrance {
        pipe_east = entrance(0x67, 0x94, DIRECTION.NONE),
        pipe_west = entrance(0x5b, 0x94, DIRECTION.NONE),
    }

    fun pit_1_triggered() {
        map_transition(town_center, crash, DIRECTION.NONE);
    }
    fun pit_2_triggered() {
        map_transition(town_market, crash, DIRECTION.NONE);
    }
    fun pit_3_triggered() {
        map_transition(town_level_1, crash, DIRECTION.NONE);
    }
    fun pit_4_triggered() {
        map_transition(town_level_2, crash, DIRECTION.NONE);
    }
    fun pit_5_triggered() {
        map_transition(town_level_3, crash, DIRECTION.NONE);
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        exit_room_nw_west = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        crossing_pit_3_2 = @install() fun test() {
            object[0x06] = 0x00;
        },
        crossing_pit_1_3 = @install() fun test() {
            object[0x06] = 0x01;
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        stepon_9 = @install() fun test() {
            subtext(string("exit? 9 [END]"));
        },

        stepon_10 = @install() fun test() {
            subtext(string("exit? 10 [END]"));
        },
        stepon_11 = @install() fun test() {
            subtext(string("exit? 11 [END]"));
        },
        stepon_12 = @install() fun test() {
            subtext(string("exit? 12 [END]"));
        },
        stepon_13 = @install() fun test() {
            subtext(string("exit? 13 [END]"));
        },
        stepon_14 = @install() fun test() {
            subtext(string("exit? 14 [END]"));
        },
        stepon_15 = @install() fun test() {
            subtext(string("exit? 15 [END]"));
        },
        stepon_16 = @install() fun test() {
            subtext(string("exit? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("exit? 17 [END]"));
        },
        crossing_pit_1_2 = @install() fun test() {
            object[0x07] = 0x01;
        },
        stepon_19 = @install() fun test() {
            subtext(string("exit? 19 [END]"));
        },

        stepon_20 = @install() fun test() {
            subtext(string("exit? 20 [END]"));
        },
        stepon_21 = @install() fun test() {
            subtext(string("exit? 21 [END]"));
        },
        stepon_22 = @install() fun test() {
            subtext(string("exit? 22 [END]"));
        },
        stepon_23 = @install() fun test() {
            subtext(string("exit? 23 [END]"));
        },
        stepon_24 = @install() fun test() {
            subtext(string("exit? 24 [END]"));
        },
        stepon_25 = @install() fun test() {
            subtext(string("exit? 25 [END]"));
        },
        stepon_26 = @install() fun test() {
            subtext(string("exit? 26 [END]"));
        },
        stepon_27 = @install() fun test() {
            subtext(string("exit? 27 [END]"));
        },
        stepon_28 = @install() fun test() {
            subtext(string("exit? 28 [END]"));
        },
        stepon_29 = @install() fun test() {
            subtext(string("exit? 29 [END]"));
        },

        stepon_30 = @install() fun test() {
            subtext(string("exit? 30 [END]"));
        },
        pit_1_north = @install() fun test() {
            <0x24b3> = 0x0002;
            <0x24b5> = 0x002d;
            <0x24b7> = 0x0000;

            call(0x94ac56);

            pit_1_triggered();
        },
        pit_1_south = @install() fun test() {
            <0x24b3> = 0x002a;
            <0x24b5> = 0x0023;
            <0x24b7> = 0x0000;
            
            call(0x94ac56);

            pit_1_triggered();
        },
        pit_5_north = @install() fun test() {
            <0x24c3> = 0x0008;
            <0x24b3> = 0x0002;
            <0x24b5> = 0x002d;
            <0x24b7> = 0x0000;
            call(0x94ac56);

            pit_5_triggered();
        },
        pit_4_south = @install() fun test() {
            <0x24c3> = 0x0007;
            <0x24b3> = 0x002a;
            <0x24b5> = 0x0023;
            <0x24b7> = 0x0000;
            call(0x94ac56);

            pit_4_triggered();
        },
        pit_3_north = @install() fun test() {
            <0x24c3> = 0x0009;
            <0x24b3> = 0x0002;
            <0x24b5> = 0x002d;
            <0x24b7> = 0x0000;
            call(0x94ac56);

            pit_3_triggered();
        },
        pit_3_west = @install() fun test() {
            <0x24c3> = 0x0009;
            <0x24b3> = 0x0002;
            <0x24b5> = 0x0022;
            <0x24b7> = 0x0016;
            call(0x94ac56);

            pit_3_triggered();
        },
        pit_2_north = @install() fun test() {
            <0x24c3> = 0x000a;
            <0x24b3> = 0x0002;
            <0x24b5> = 0x002d;
            <0x24b7> = 0x0000;
            call(0x94ac56);

            pit_2_triggered();
        },
        pit_2_east = @install() fun test() {
            <0x24c3> = 0x000a;
            <0x24b3> = 0x0002;
            <0x24b5> = 0x0022;
            <0x24b7> = -0x0011;
            call(0x94ac56);

            pit_2_triggered();
        },
    }

    fun trigger_enter() {
        default_init_room(True, False);
    }
};

map town_market_alley(0x4e) {
    enum entrance {
        north = entrance(0x2a, 0x01, DIRECTION.SOUTH),
        east = entrance(0x39, 0xc3, DIRECTION.WEST),
    }

    enum stepon_trigger {
        exit_north = @install() fun test() {
            map_transition(town_temple, south, DIRECTION.NORTH);
        },
        exit_east = @install() fun test() {
            map_transition(town_center, west_2, DIRECTION.EAST);
        },
    }

    fun trigger_enter() {
        fade_in();
    }
};

map town_temple(0x29) {
    enum entrance {
        north = entrance(0x29, 0x03, DIRECTION.SOUTH),
        east_1 = entrance(0x4b, 0x3f, DIRECTION.WEST),
        east_2 = entrance(0x49, 0x5d, DIRECTION.WEST),
        south = entrance(0x29, 0x8b, DIRECTION.NORTH),
        west_1 = entrance(0x09, 0x5d, DIRECTION.EAST),
        west_2 = entrance(0x09, 0x3f, DIRECTION.EAST),

        elevator = entrance(0x29, 0x49, DIRECTION.NONE),
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        exit_south = @install() fun test() {
            map_transition(town_market_alley, north, DIRECTION.SOUTH);
        },
        door_west_2 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        door_west_1 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        door_east_2 = @install() fun test() {
            map_transition(town_level_2, west, DIRECTION.EAST);
        },

        door_east_1 = @install() fun test() {
            map_transition(town_temple_switch, west, DIRECTION.EAST);
        },
        stepon_11 = @install() fun test() {
            subtext(string("exit? 11 [END]"));
        },
        switch = @install() fun test() {
            subtext(string("exit? 12 [END]"));
        },
        stepon_13 = @install() fun test() {
            subtext(string("exit? 13 [END]"));
        },
        stepon_14 = @install() fun test() {
            subtext(string("exit? 14 [END]"));
        },
        stepon_15 = @install() fun test() {
            subtext(string("exit? 15 [END]"));
        },
        stepon_16 = @install() fun test() {
            subtext(string("exit? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("exit? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("exit? 18 [END]"));
        },
        stepon_19 = @install() fun test() {
            subtext(string("exit? 19 [END]"));
        },

        stepon_20 = @install() fun test() {
            subtext(string("exit? 20 [END]"));
        },
        stepon_21 = @install() fun test() {
            subtext(string("exit? 21 [END]"));
        },
        stepon_22 = @install() fun test() {
            subtext(string("exit? 22 [END]"));
        },
        stepon_23 = @install() fun test() {
            subtext(string("exit? 23 [END]"));
        },
        stepon_24 = @install() fun test() {
            subtext(string("exit? 24 [END]"));
        },
        stepon_25 = @install() fun test() {
            subtext(string("exit? 25 [END]"));
        },
        stepon_26 = @install() fun test() {
            subtext(string("exit? 26 [END]"));
        },
        stepon_27 = @install() fun test() {
            subtext(string("exit? 27 [END]"));
        },
        stepon_28 = @install() fun test() {
            subtext(string("exit? 28 [END]"));
        },
        stepon_29 = @install() fun test() {
            subtext(string("exit? 29 [END]"));
        },

        stepon_30 = @install() fun test() {
            subtext(string("exit? 30 [END]"));
        },
        elevator = @install() fun test() {
            subtext(string("exit? 31 [END]"));
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
    }

    fun open_doors(open) {
        if(open) {
            object[0x03] = 0x01; // NE

            object[0x07] = 0x01; // SW
            object[0x08] = 0x01; // SE

            object[0x09] = 0x01; // NW
        } else {
            object[0x03] = 0x00; // NE

            object[0x07] = 0x00; // SW
            object[0x08] = 0x00; // SE

            object[0x09] = 0x00; // NW
        }
    }

    fun trigger_enter() {
        open_doors();

        fade_in();
    }
};

map town_temple_switch(0x2c) {
    enum entrance {
        west = entrance(0x01, 0x1b, DIRECTION.EAST),
    }

    fun switch_activated() {
        object[0x00] = 0x0b;
    }

    enum stepon_trigger {
        exit_west = @install() fun test() {
            map_transition(town_temple, east_1, DIRECTION.WEST);
        },
        switch = @install() fun test() {
            switch_activated();
        }
    }

    fun show_switch(show) {
        if(show) {
            object[0x00] = 0x0a;
        } else {
            object[0x00] = 0x00;
        }
    }

    fun trigger_enter() {
        show_switch(True);

        fade_in();
    }
};

map town_center(0x08) {
    enum entrance {
        north = entrance(0x2c, 0x03, DIRECTION.SOUTH),
        east = entrance(0x5b, 0x37, DIRECTION.WEST),
        west_1 = entrance(0x01, 0x40, DIRECTION.EAST),
        west_2 = entrance(0x01, 0x14, DIRECTION.EAST),

        door = entrance(0x08, 0x5d, DIRECTION.SOUTH),

        crash = entrance(0x2c, 0x39, DIRECTION.NONE),
    }

    enum stepon_trigger {
        exit_east = @install() fun test() {
            map_transition(town_market, west, DIRECTION.EAST);
        },
        exit_door = @install() fun test() {
            map_transition(town_room, ship_tavern, DIRECTION.NORTH);
        },
        exit_north = @install() fun test() {
            map_transition(town_level_1, south, DIRECTION.NORTH);
        },
        exit_west_1 = @install() fun test() {
            map_transition(town_bridge, east, DIRECTION.WEST);
        },
        exit_west_2 = @install() fun test() {
            map_transition(town_market_alley, east, DIRECTION.WEST);
        },
    }

    enum b_trigger {
        guard_south = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        guard_center_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        guard_center_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        guard_north = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
    }

    fun trigger_enter() {
        fade_in();

        if!(FLAG.IN_ANIMATION) {
            <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] - 0x20;
            <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] - 0x20;
            crash_land(CHARACTER.BOTH);
        }
    }
};

map town_room(0x30) {
    enum entrance {
        cave_hammock = entrance(0x0f, 0x29, DIRECTION.NORTH),
        cave_crates = entrance(0x0f, 0x5b, DIRECTION.NORTH),
        ship_small = entrance(0x47, 0x51, DIRECTION.NORTH),
        ship_tavern = entrance(0x6f, 0x51, DIRECTION.NORTH),
        cave_monk = entrance(0x4f, 0x23, DIRECTION.NORTH),
    }

    enum stepon_trigger {
        monk = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        monk_trigger_west = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        monk_trigger_south = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        exit_cave_hammock = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        exit_ship_tavern = @install() fun test() {
            map_transition(town_center, door, DIRECTION.SOUTH);
        },
        exit_ship_small = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        exit_cave_crates = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        exit_cave_monk = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
    }

    fun trigger_enter() {
        fade_in();
    }
};

map town_market(0x0a) {
    enum entrance {
        north_1 = entrance(0x0f, 0x08, DIRECTION.SOUTH),
        north_2 = entrance(0x30, 0x08, DIRECTION.SOUTH),
        north_3 = entrance(0x54, 0x08, DIRECTION.SOUTH),
        east_1 = entrance(0x5f, 0x18, DIRECTION.WEST),
        east_2 = entrance(0x5f, 0x46, DIRECTION.WEST),
        west = entrance(0x05, 0x4b, DIRECTION.EAST),

        door_1 = entrance(0x5c, 0x3a, DIRECTION.SOUTH),
        door_2 = entrance(0x5a, 0x72, DIRECTION.SOUTH),

        crash = entrance(0x43, 0x79, DIRECTION.NONE),
    }

    enum stepon_trigger {
        prophet_south = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        prophet_east = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        prophet_north = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        exit_north_2 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        exit_north_3 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        exit_north_1 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        exit_east_1 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        exit_east_2 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        exit_west = @install() fun test() {
            map_transition(town_center, east, DIRECTION.WEST);
        },
        door_1 = @install() fun test() {
            subtext(string("Does not open from this side.[END]"));
        },

        door_2 = @install() fun test() {
            map_transition(town_market, door_1, DIRECTION.NORTH);
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        // TODO: 3a b-trigger
    }

    fun trigger_enter() {
        fade_in();

        if!(FLAG.IN_ANIMATION) {
            <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] - 0x20;
            <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y];
            crash_land(CHARACTER.BOTH);
        }
    }
};

map town_level_1(0x7c) {
    enum entrance {
        north = entrance(0x40, 0x0b, DIRECTION.SOUTH),
        south = entrance(0x20, 0x77, DIRECTION.NORTH),

        door_1_1_left = entrance(0x2c, 0x63, DIRECTION.SOUTH),
        door_1_1_right = entrance(0x44, 0x63, DIRECTION.SOUTH),
        door_1_2 = entrance(0x74, 0x63, DIRECTION.SOUTH),
        door_1_3 = entrance(0xa2, 0x63, DIRECTION.SOUTH),
        door_1_3_back = entrance(0x92, 0x4b, DIRECTION.WEST),
        door_2_1 = entrance(0x8e, 0x29, DIRECTION.SOUTH),
        door_2_1_back = entrance(0xb7, 0x1f, DIRECTION.EAST),

        crash = entrance(0x5d, 0x5d, DIRECTION.NONE),
    }

    enum stepon_trigger {
        gate = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        door_1_1_left = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        door_1_1_right = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        door_1_2 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        door_1_3 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        door_2_1 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        exit_south = @install() fun test() {
            map_transition(town_center, north, DIRECTION.SOUTH);
        },
        stepon_7 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        exit_north = @install() fun test() {
            map_transition(town_level_2, south, DIRECTION.NORTH);
        },
        door_2_1_back = @install() fun test() {
            subtext(string("exit? 9 [END]"));
        },

        door_1_3_back = @install() fun test() {
            subtext(string("exit? 10 [END]"));
        },
    }

    fun trigger_enter() {
        object[0x00] = 0x7e;

        fade_in();

        if!(FLAG.IN_ANIMATION) {
            <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] - 0x20;
            <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y];
            crash_land(CHARACTER.BOTH);
        }
    }
};

map town_level_2(0x7b) {
    enum entrance {
        north = entrance(0x20, 0x01, DIRECTION.SOUTH),
        south = entrance(0x1c, 0x5f, DIRECTION.NORTH),
        west = entrance(0x01, 0x3e, DIRECTION.EAST),

        door_1 = entrance(0x2a, 0x01, DIRECTION.SOUTH),
        door_2 = entrance(0x2a, 0x01, DIRECTION.SOUTH),
        door_3 = entrance(0x2a, 0x01, DIRECTION.SOUTH),
        door_4 = entrance(0x2a, 0x01, DIRECTION.SOUTH),
        door_5 = entrance(0x2a, 0x01, DIRECTION.SOUTH),

        crash = entrance(0x6d, 0x41, DIRECTION.NONE),
    }

    enum stepon_trigger {
        door_1_1_back = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        exit_west = @install() fun test() {
            map_transition(town_temple, east_2, DIRECTION.WEST);
        },
        exit_north = @install() fun test() {
            map_transition(town_level_3, south, DIRECTION.NORTH);
        },
        exit_south = @install() fun test() {
            map_transition(town_level_1, north, DIRECTION.SOUTH);
        },
        door_1_1 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        door_2_1 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        door_2_2 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        door_2_3 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
    }

    fun block_market(block) {
        if(block) {
            object[0x1a] = 0x01;
        }  else {
            object[0x1a] = 0x00;
        }
    }

    fun trigger_enter() {
        // block_market(True);

        fade_in();

        if!(FLAG.IN_ANIMATION) {
            <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] - 0x20;
            <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y];
            crash_land(CHARACTER.BOTH);
        }
    }
};

map town_level_3(0x0b) {
    enum entrance {
        north = entrance(0x56, 0x1f, DIRECTION.SOUTH),
        south = entrance(0x56, 0x45, DIRECTION.NORTH),

        crash = entrance(0x98, 0x15, DIRECTION.NONE),
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        exit_south = @install() fun test() {
            map_transition(town_level_2, north, DIRECTION.SOUTH);
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        exit_north = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        stepon_9 = @install() fun test() {
            subtext(string("exit? 9 [END]"));
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
    }

    fun open_gate(open) {
        if(open) {
            object[0x00] = 0x7e;
        } else {
            object[0x00] = 0x00;
        }
    }

    fun trigger_enter() {
        open_gate(True);

        fade_in();

        if!(FLAG.IN_ANIMATION) {
            <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] - 0x20;
            <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y];
            crash_land(CHARACTER.BOTH);
        }

        subtext(string("Empty map - nothing to explore[END]"));
    }
};

map town_bridge(0x1f) {
    enum entrance {
        east = entrance(0x63, 0x1d, DIRECTION.WEST),
        west = entrance(0x01, 0x21, DIRECTION.EAST)
    }

    enum stepon_trigger {
        exit_east = @install() fun test() {
            map_transition(town_center, west_1, DIRECTION.EAST);
        },
        exit_west = @install() fun test() {
            map_transition(bog_curve, east, DIRECTION.WEST);
        }
    }

    fun open_east_exit(open) {
        if(open) {
           object[0x00] = 0x00; 
        } else {
            object[0x00] = 0x7e;
        }
    }
    fun open_bridge(open) {
        if(open) {
           object[0x07] = 0x07e; 
        } else {
            object[0x07] = 0x00;
        }
    }

    fun trigger_enter() {
        // open_east_exit(True);

        // object[0x01] = 0x7e;
        object[0x02] = 0x7e;
        // object[0x03] = 0x7e;

        object[0x04] = 0x7e;
        // object[0x05] = 0x7e;
        object[0x06] = 0x7e;
        
        open_bridge(True);

        fade_in();
    }
};

map bog_curve(0x20) {
    enum entrance {
        east = entrance(0x2b, 0x15, DIRECTION.WEST),
        south = entrance(0x1b, 0x29, DIRECTION.NORTH)
    }

    enum stepon_trigger {
        exit_east = @install() fun test() {
            map_transition(town_bridge, west, DIRECTION.EAST);
        },
        exit_south = @install() fun test() {
            map_transition(bog_bridges, north, DIRECTION.SOUTH);
        }
    }

    fun trigger_enter() {
        // object[0x00] = 0x7e;
        object[0x01] = 0x7e;

        fade_in();
    }
};

map bog_bridges(0x40) {
    enum entrance {
        north = entrance(0x0b, 0x01, DIRECTION.SOUTH),
        south = entrance(0x1b, 0x53, DIRECTION.NORTH)
    }

    enum stepon_trigger {
        exit_north = @install() fun test() {
            map_transition(bog_curve, south, DIRECTION.NORTH);
        },
        exit_south = @install() fun test() {
            map_transition(bog_cave, north_1, DIRECTION.SOUTH);
        }
    }

    fun trigger_enter() {
        fade_in();
    }
};

map bog_cave(0x67) {
    enum entrance {
        north_1 = entrance(0x0b, 0x01, DIRECTION.SOUTH),
        north_2 = entrance(0x1b, 0x01, DIRECTION.SOUTH),
        cave = entrance(0x24, 0x4c, DIRECTION.SOUTH),

        dungeon_south = entrance(0x7c, 0x75, DIRECTION.SOUTH),
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        exit_north_1 = @install() fun test() {
            map_transition(bog_bridges, south, DIRECTION.NORTH);
        },
        exit_north_2 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        cave = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        dungeon_south = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        dungeon_west_1 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        dungeon_west_2 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        dungeon_west_2 = @install() fun test() {
            subtext(string("exit? 9 [END]"));
        },

        dungeon_east_1 = @install() fun test() {
            subtext(string("exit? 10 [END]"));
        },
        dungeon_east_2 = @install() fun test() {
            subtext(string("exit? 11 [END]"));
        },
        dungeon_east_3 = @install() fun test() {
            subtext(string("exit? 12 [END]"));
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        // TODO: 2a
    }

    fun trigger_enter() {
        fade_in();

        subtext(string("Empty map - nothing to explore[END]"));
    }
};

// misc

fun character_selection(character) {
    if(character == CHARACTER.BOY) {
        available(CHARACTER.BOY);
        teleport(CHARACTER.DOG, 0x00, 0x00);

        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.INVINCIBLE);
    } if(character == CHARACTER.DOG) {
        available(CHARACTER.DOG);
        teleport(CHARACTER.BOY, 0x00, 0x00);

        MEMORY.DOG = DOG.TOASTER;

        attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.INVINCIBLE);

        attach_script(CHARACTER.DOG, SCRIPT_TRIGGER.DEATH, reference(boy_death));
    }
}

fun general_boss_defeated() {
    attribute_bit(CHARACTER.ACTIVE, ATTRIBUTE_BITS.INVINCIBLE);

    subtext(string("Yatta![END]"));

    sleep(0xff);
    sleep(0xff);
}

fun countdown(countdown) {
    if(countdown >= 0x03) {
        subtext(string("3...[END]"));
        sleep(0x3c);
    }
    if(countdown >= 0x02) {
        subtext(string("2...[END]"));
        sleep(0x3c);
    }
    if(countdown >= 0x01) {
        subtext(string("1...[END]"));
        sleep(0x3c);
    }
    if(countdown >= 0x00) {
        subtext(string("GO[END]"));
    }
}

map arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum stepon_trigger {
        exit_north = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        exit_south = @install() fun test() {
            subtext(string("step-on? 1 [END]"));
        },
        center = @install() fun test() {
            subtext(string("step-on? 2 [END]"));
        }
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    fun trigger_enter() {
        default_init_room(True, False);

        close_exits(True);

        if!(FLAG.IN_ANIMATION) {

            // teleport(CHARACTER.DOG, 0x19, 0x1d);
            <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] + 0x20;
            <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] + 0x20;
            crash_land(CHARACTER.BOTH);
        }
    }
};

map toaster_arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum soundtrack {
        default = soundtrack(0x3e, 0xff)
    }

    enum stepon_trigger {
        exit_north = nop(),
        exit_south = nop(),
        center = nop(),
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    enum BOSS {
        HEAL_AMOUNT = 0x0f,

        HIT_COUNT_MEMORY = <0x2834>,
        HIT_COUNT = 0x0a,

        COUNTDOWN = 0x03
    }

    fun boss_defeated() {
        general_boss_defeated();

        map_transition(toaster_arena, center, DIRECTION.NONE);
    }

    fun boss_hit() {
        BOSS.HIT_COUNT_MEMORY = BOSS.HIT_COUNT_MEMORY - 0x01;

        if(BOSS.HIT_COUNT_MEMORY <= 0x00) {
            boss_defeated();
        } else {
            MEMORY.STRING_PARAMETER_1 = BOSS.HIT_COUNT_MEMORY;
            MEMORY.STRING_PARAMETER_2 = BOSS.HIT_COUNT;

            subtext(string("[0xa1]/[0xa2][END]"));
        }
    }

    @install()
    fun guardbot_down() {
        boss_hit();

        yield();
        attribute_bit(CHARACTER.SCRIPT_OWNER, ATTRIBUTE_BITS.INVINCIBLE);

        animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.GATE_BOT_DEAD);

        sleep(0xff);
        sleep(0xff);

        cast(CHARACTER.SCRIPT_OWNER, CHARACTER.SCRIPT_OWNER, CAST.HEAL, BOSS.HEAL_AMOUNT);
        sleep(0xff);

        animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
        attribute_bit(CHARACTER.SCRIPT_OWNER, ATTRIBUTE_BITS.VINCIBLE);
    }

    fun spawn_guardbot(x, y) {
        add_enemy(ENEMY.GATE_BOT, x, y);
        attribute(CHARACTER.LAST_ENTITY, ATTRIBUTE.HP, 0x0fff);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(guardbot_down));
    }

    fun trigger_enter() {
        default_init_room(True, False);
        character_selection(CHARACTER.DOG);

        close_exits(True);

        BOSS.HIT_COUNT_MEMORY = BOSS.HIT_COUNT;

        spawn_guardbot(0x29, 0x2b);
        spawn_guardbot(0x13, 0x29);
        spawn_guardbot(0x29, 0x1b);
        spawn_guardbot(0x13, 0x19);

        countdown(BOSS.COUNTDOWN);
        attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.VINCIBLE);
    }
};

map bomb_arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum stepon_trigger {
        exit_north = nop(),
        exit_south = nop(),
        center = nop(),
    }

    @install()
    fun boss_defeated() {
        general_boss_defeated();

        map_transition(bomb_arena, right, DIRECTION.NONE);
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    fun trigger_enter() {
        close_exits(True);
        character_selection(CHARACTER.BOY);

        add_enemy(ENEMY.VIGOR, 0x15, 0x1e);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(boss_defeated));

        default_init_room(True, False);

        countdown(0x03);
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);

        set(SOULS_MEMORY.BOMB_ENABLED);
        unlock(ITEM.ENERGY_CORE);
        subtext(string("Start = Bomb[END]"));
    }
};

map mosquito_arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum stepon_trigger {
        exit_north = @install() fun test() {
            map_transition(hidden_room, room_nss_south_2, DIRECTION.NORTH);
        },
        exit_south = nop(),
        center = nop(),
    }

    enum BOSS {
        BOSS_ID = memory_tmp(),

        MOSQUITO_1_ID = memory_tmp(),
        MOSQUITO_1_X = 0x13,
        MOSQUITO_1_Y = 0x19,
        MOSQUITO_2_ID = memory_tmp(),
        MOSQUITO_2_X = 0x29,
        MOSQUITO_2_Y = 0x1b,
        MOSQUITO_3_ID = memory_tmp(),
        MOSQUITO_3_X = 0x13,
        MOSQUITO_3_Y = 0x29,
        MOSQUITO_4_ID = memory_tmp(),
        MOSQUITO_4_X = 0x29,
        MOSQUITO_4_Y = 0x2b,
    }

    @install()
    fun boss_defeated() {
        general_boss_defeated();

        // map_transition(mosquito_arena, right, DIRECTION.NONE);

        close_exits(False);
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    fun mosquito_dead(id, x, y) {
        // yield();
        animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.GORE);
        attribute_bit(CHARACTER.SCRIPT_OWNER, ATTRIBUTE_BITS.INVINCIBLE);

        cast(id, BOSS.BOSS_ID, CAST.FIREBALL, 0xff);

        sleep(0x20);
        animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ALL.INVISIBLE);
        teleport(id, x, y);
        sleep(0x60);

        // heal(CHARACTER.SCRIPT_OWNER, 0x10, False);
        animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
        <CHARACTER.SCRIPT_OWNER>[0x0b] = 0x0a00;
        attribute_bit(CHARACTER.SCRIPT_OWNER, ATTRIBUTE_BITS.VINCIBLE);
    }

    @install()
    fun mosquito_1_dead() {
        mosquito_dead(BOSS.MOSQUITO_1_ID, BOSS.MOSQUITO_1_X, BOSS.MOSQUITO_1_Y);
    }
    @install()
    fun mosquito_2_dead() {
        mosquito_dead(BOSS.MOSQUITO_2_ID, BOSS.MOSQUITO_2_X, BOSS.MOSQUITO_2_Y);
    }
    @install()
    fun mosquito_3_dead() {
        mosquito_dead(BOSS.MOSQUITO_3_ID, BOSS.MOSQUITO_3_X, BOSS.MOSQUITO_3_Y);
    }
    @install()
    fun mosquito_4_dead() {
        mosquito_dead(BOSS.MOSQUITO_4_ID, BOSS.MOSQUITO_4_X, BOSS.MOSQUITO_4_Y);
    }

    fun spawn_mosquito(id, x, y, script_id) {
        add_enemy(ENEMY.MOSQUITO, x, y);
        store_last_entity(id);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, script_id);
    }

    fun trigger_enter() {
        close_exits(True);
        character_selection(CHARACTER.BOY);

        add_enemy(ENEMY.MAGMAR, 0x1e, 0x21);
        store_last_entity(BOSS.BOSS_ID);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(boss_defeated));

        default_init_room(True, False);

        if!(FLAG.IN_ANIMATION) {
            crash_land(CHARACTER.BOTH);
        }

        countdown(0x03);
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);

        spawn_mosquito(BOSS.MOSQUITO_1_ID, BOSS.MOSQUITO_1_X, BOSS.MOSQUITO_1_Y, reference(mosquito_1_dead));
        sleep(0x40);
        spawn_mosquito(BOSS.MOSQUITO_2_ID, BOSS.MOSQUITO_2_X, BOSS.MOSQUITO_2_Y, reference(mosquito_2_dead));
        sleep(0x20);
        spawn_mosquito(BOSS.MOSQUITO_3_ID, BOSS.MOSQUITO_3_X, BOSS.MOSQUITO_3_Y, reference(mosquito_3_dead));
        sleep(0x20);
        spawn_mosquito(BOSS.MOSQUITO_4_ID, BOSS.MOSQUITO_4_X, BOSS.MOSQUITO_4_Y, reference(mosquito_4_dead));
    }
};

map invisible_arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum stepon_trigger {
        exit_north = nop(),
        exit_south = nop(),
        center = nop(),
    }

    enum ROOM {
        REVEALER_ID = memory_tmp(),
    }

    enum BOSS {
        BOSS_ID = memory_tmp(),
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    @install()
    fun boss_defeated4() {
        general_boss_defeated();

        map_transition(invisible_arena, right, DIRECTION.NONE);
    }

    @install()
    fun revealer_triggered() {
        destroy(ROOM.REVEALER_ID);

        attribute_bit(BOSS.BOSS_ID, ATTRIBUTE_BITS.VISIBLE);
    }

    @install()
    @async()
    fun stack_revealer_boss() {
        while!(dead(ROOM.REVEALER_ID)) {
            ROOM.REVEALER_ID[ATTRIBUTE.X] = BOSS.BOSS_ID[ATTRIBUTE.X];
            ROOM.REVEALER_ID[ATTRIBUTE.Y] = BOSS.BOSS_ID[ATTRIBUTE.Y];
            yield();
        }
    }

    fun trigger_enter() {
        close_exits(True);

        add_enemy(ENEMY.MAGMAR, 0x1e, 0x21);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        store_last_entity(BOSS.BOSS_ID);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(boss_defeated4));

        default_init_room(True, False);

        add_enemy(ENEMY.REVEALER_TARGET_ENTITY, 0x1e, 0x21);
        store_last_entity(ROOM.REVEALER_ID);

        special_script(SPECIAL_SCRIPTS.REVEALER, reference(revealer_triggered));
        stack_revealer_boss();

        countdown(0x03);
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);

    }
};

map abomination_arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum soundtrack {
        default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0x30)
    }

    enum stepon_trigger {
        exit_north = nop(),
        exit_south = nop(),
        center = nop(),
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    enum BOSS {
        ID_CARLTRON = memory_tmp(),
        ID_LEFT = memory_tmp(),
        ID_RIGHT = memory_tmp(),
        ID_BACK = memory_tmp(),

        PHASE = memory_tmp(),

        COUNTDOWN = 0x03,
    }

    @install()
    fun abomination_triggered() {
        if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_CARLTRON) {
            // subtext(string("c[END]"));

            
            attribute_bit(BOSS.ID_CARLTRON, ATTRIBUTE_BITS.NO_CLIP);
            control(CHARACTER.NONE);
            face(CHARACTER.ACTIVE, DIRECTION.NORTH);
            animate(CHARACTER.ACTIVE, ANIMATION_MODE.ONCE, ANIMATION_ALL.KNOCKBACK);
            damage(CHARACTER.BOY, 0x05);
            sleep(0x01);
            attribute_bit(BOSS.ID_CARLTRON, ATTRIBUTE_BITS.CLIP);

            animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_TALK);
            sleep(0x50);
            animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);

            control(CHARACTER.BOTH);

            if(BOSS.PHASE == 0x00) {
                BOSS.PHASE = 0x01;
            }
        } else if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_LEFT) {
            // subtext(string("l[END]"));

            if(BOSS.PHASE == 0x01) {
                if(dead(<CHARACTER.SCRIPT_OWNER>)) {
                    BOSS.PHASE = 0x02;
                }
            }
        } else if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_RIGHT) {
            if(BOSS.PHASE >= 0x02) {
                if(dead(<CHARACTER.SCRIPT_OWNER>)) {
                    BOSS.PHASE = BOSS.PHASE + 0x01;
                }
            }
        } else if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_BACK) {
            if(BOSS.PHASE >= 0x02) {
                if(dead(<CHARACTER.SCRIPT_OWNER>)) {
                    BOSS.PHASE = BOSS.PHASE + 0x01;
                }
            }
        }
    }

    @install()
    @async()
    fun abomination_watcher() {
        subtext(string("phase 0[END]"));

        while(BOSS.PHASE == 0x00) {
            yield();
        }

        subtext(string("phase 1[END]"));

        animate(BOSS.ID_CARLTRON, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_SMUG);

        add_enemy(ENEMY.THRAXX_LEFT_ARM, 0x00, 0x00);
        store_last_entity(BOSS.ID_LEFT);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        sleep(0x50);

        while(BOSS.PHASE == 0x01) {
            yield();
        }

        subtext(string("phase 2[END]"));

        animate(BOSS.ID_CARLTRON, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_SMUG);

        add_enemy(ENEMY.THRAXX2_LEFT_ARM, 0x00, 0x00);
        store_last_entity(BOSS.ID_LEFT);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        sleep(0x50);

        add_enemy(ENEMY.THRAXX_RIGHT_ARM, 0x00, 0x00);
        store_last_entity(BOSS.ID_RIGHT);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        sleep(0x50);

        add_enemy(ENEMY.BONE_SNAKE, 0x00, 0x00);
        store_last_entity(BOSS.ID_BACK);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        sleep(0x50);

        while(BOSS.PHASE == 0x02) {
            yield();
        }

        subtext(string("phase 3[END]"));

        while(BOSS.PHASE == 0x03) {
            yield();
        }

        subtext(string("phase 4[END]"));

        while(BOSS.PHASE == 0x04) {
            yield();
        }

        subtext(string("phase 5[END]"));

        add_enemy(ENEMY.SALABOG, 0x00, 0x00);
        store_last_entity(BOSS.ID_BACK);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        while(BOSS.PHASE == 0x05) {
            yield();
        }

        control_enemy(BOSS.ID_CARLTRON, True);
        attribute_bit(BOSS.ID_CARLTRON, ATTRIBUTE_BITS.INVINCIBLE);
        face(BOSS.ID_CARLTRON, DIRECTION.SOUTH);
        animate(BOSS.ID_CARLTRON, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_DROPPING);
        sleep(0x80);

        animate(BOSS.ID_CARLTRON, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.CARLTRON_LYING);
        destroy(BOSS.ID_LEFT);
        destroy(BOSS.ID_RIGHT);
        destroy(BOSS.ID_BACK);
        sleep(0xff);

        // destroy(BOSS.ID_CARLTRON);

        subtext(string("yatta![END]"));
    }

    @install()
    @async()
    fun stack_t0123() {
        while!(dead(BOSS.ID_CARLTRON)) {
            BOSS.ID_LEFT[ATTRIBUTE.X] = BOSS.ID_CARLTRON[ATTRIBUTE.X] - 0x05;
            BOSS.ID_LEFT[ATTRIBUTE.Y] = BOSS.ID_CARLTRON[ATTRIBUTE.Y] - 0x1a;

            // sleep(0x02);
            yield();

            BOSS.ID_RIGHT[ATTRIBUTE.X] = BOSS.ID_CARLTRON[ATTRIBUTE.X] + 0x05;
            BOSS.ID_RIGHT[ATTRIBUTE.Y] = BOSS.ID_CARLTRON[ATTRIBUTE.Y] - 0x1a;

            // sleep(0x0);
            yield();

            BOSS.ID_BACK[ATTRIBUTE.X] = BOSS.ID_CARLTRON[ATTRIBUTE.X];
            BOSS.ID_BACK[ATTRIBUTE.Y] = BOSS.ID_CARLTRON[ATTRIBUTE.Y] - 0x20;

            // sleep(0x02);
            yield();
        }
    }

    fun abomination() {
        add_enemy(ENEMY.CARLTRON, 0x10, 0x13);
        store_last_entity(BOSS.ID_CARLTRON);
        <CHARACTER.LAST_ENTITY>[0x2a] = 0x0fff;
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        abomination_watcher();
    }

    fun trigger_enter() {
        default_init_room(True, False);

        close_exits(True);

        character_selection(CHARACTER.BOY);
        
        abomination();
        stack_t0123();

        countdown(BOSS.COUNTDOWN);
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);
    }
};

map radahn_arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum soundtrack {
        default = soundtrack(0x32, 0xff)
    }

    enum stepon_trigger {
        exit_north = nop(),
        exit_south = @install() fun test() {
            map_transition(radahn_exit, room_nw_north, DIRECTION.SOUTH);
        },
        center = nop(),
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    enum BOSS {
        DEBUG = False,

        RIDER_ID = memory_tmp(),
        MOUNT_ID = memory_tmp(),

        PHASE = memory_tmp(),
        TIMER = memory_tmp(),

        HP = 0x03e8, // 1000

        COUNTDOWN = 0x03,

        // p1

        P1_THRASHOLD = 0x320, // 800
        P1_TIME_BEFORE_SALVAGE = 0x200,

        // p2

        P2_THRASHOLD = 0x1f4, // 500
        P2_TIME_BEFORE_SALVAGE = 0x300,

        RANDOM_SPELL = memory_tmp(),
        TIME_BEFORE_RANDOM_SPELL = 0x300,
    }

    @install()
    @async()
    fun stack_t01_offset() {
        while!(dead(BOSS.MOUNT_ID)) {
            BOSS.RIDER_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
            BOSS.RIDER_ID[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x15;
            yield();
        }
    }

    fun cast_salvage(target, level) {
        animate(BOSS.RIDER_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.VERMINATOR_CAST_1);
        cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
        cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
        cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
        cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
    }

    @install()
    fun boss_damage() {
        // animate(BOSS.RIDER_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.VERMINATOR_DAMAGE);

        if(BOSS.PHASE == 0x00) {
            BOSS.TIMER = 0x00;

            if(BOSS.RIDER_ID[ATTRIBUTE.HP] < BOSS.P1_THRASHOLD) {
                BOSS.PHASE = 0x01;
            }
        } else if(BOSS.PHASE == 0x01) {
            if(BOSS.RIDER_ID[ATTRIBUTE.HP] < BOSS.P2_THRASHOLD) {
                BOSS.PHASE = 0x02;
            }
        } else if(BOSS.PHASE == 0x02) {
            BOSS.TIMER = BOSS.TIMER - 0x60;
        }

        if(BOSS.DEBUG) {
            MEMORY.STRING_PARAMETER_1 = BOSS.RIDER_ID[ATTRIBUTE.HP];
            MEMORY.STRING_PARAMETER_2 = BOSS.HP;

            subtext(string("Rider = [0xa1]/[0xa2][END]"));
        }
    }

    @install()
    @async()
    fun boss_watcher() {
        if(BOSS.DEBUG) {
            subtext(string("phase 0[END]"));
        }

        while(BOSS.PHASE == 0x00) {
            if(BOSS.TIMER > BOSS.P1_TIME_BEFORE_SALVAGE) {
                cast_salvage(CHARACTER.ACTIVE, 0x00);

                BOSS.TIMER = 0x00;
            }
        
            if(BOSS.RIDER_ID[0x0b] == 0x0800) { // TODO: buggy, since menu resets paletts
                BOSS.TIMER = BOSS.TIMER + 0x01;
            }
            yield();
        }

        if(BOSS.DEBUG) {
            subtext(string("phase 1[END]"));
        }

        BOSS.TIMER = 0x0000;
        cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);

        while(BOSS.PHASE == 0x01) {
            if(BOSS.TIMER > BOSS.P2_TIME_BEFORE_SALVAGE) {
                cast_salvage(CHARACTER.ACTIVE, 0x00);

                BOSS.TIMER = 0x00;
            }
        
            if(BOSS.RIDER_ID[0x0b] == 0x0800) { // TODO: buggy, since menu resets paletts
                BOSS.TIMER = BOSS.TIMER + 0x01;
            }
            yield();
        }

        BOSS.TIMER = 0x0000;
        cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);

        while(BOSS.PHASE == 0x01) {
            BOSS.TIMER = BOSS.TIMER + 0x01;

            if(BOSS.TIMER > BOSS.TIME_BEFORE_RANDOM_SPELL) {
                BOSS.TIMER = 0x0000;

                BOSS.RANDOM_SPELL = randrange(0x03);

                if(BOSS.RANDOM_SPELL == 0x00) {
                    cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
                    cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);
                } else if(BOSS.RANDOM_SPELL == 0x01) {
                    cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.DRAIN, 0x30);
                } else if(BOSS.RANDOM_SPELL == 0x02) {
                    cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.PLAGUE, 0x01);
                } 
            }
            yield();
        }

        if(BOSS.DEBUG) {
            subtext(string("phase 2[END]"));
        }
    }

    fun spawn_boss(x, y) {
        add_enemy(ENEMY.VERMINATOR, x, y);
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = BOSS.HP;
        store_last_entity(BOSS.RIDER_ID);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(boss_damage));
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);

        add_enemy(ENEMY.RAPTOR_BLACK, x, y);
        store_last_entity(BOSS.MOUNT_ID);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
    }

    fun trigger_enter() {
        default_init_room(True, False);

        close_exits(True);

        spawn_boss(0x10, 0x13);
        stack_t01_offset();
        boss_watcher();

        character_selection(CHARACTER.BOY);
        countdown(BOSS.COUNTDOWN);
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);
    }
};

map radahn_exit(0x3c) {
    enum entrance {
        main_north = entrance(0xd3, 0x3d, DIRECTION.SOUTH),
        main_east = entrance(0xf7, 0x5b, DIRECTION.WEST),
        main_south = entrance(0xd5, 0x95, DIRECTION.NORTH),
        main_west = entrance(0xbb, 0x5d, DIRECTION.EAST),

        cave_outside = entrance(0x54, 0xb1, DIRECTION.NORTH),

        room_nw_north = entrance(0x20, 0x85, DIRECTION.SOUTH),
        room_nw_west = entrance(0x01, 0xa3, DIRECTION.EAST),

        room_es_east = entrance(0x67, 0x1c, DIRECTION.WEST),
        room_es_south = entrance(0x4c, 0x39, DIRECTION.NORTH),

        room_nss_north = entrance(0x9e, 0x05, DIRECTION.SOUTH),
        room_nss_south_1 = entrance(0x9e, 0x37, DIRECTION.NORTH),
        room_nss_south_2 = entrance(0x84, 0x37, DIRECTION.NORTH),

        room_s_south = entrance(0x9e, 0x7b, DIRECTION.NORTH),

        room_alchemist = entrance(0xd0, 0x05, DIRECTION.SOUTH),

        room_ns_north = entrance(0x1c, 0x3d, DIRECTION.SOUTH),
        room_ns_south = entrance(0x22, 0x7b, DIRECTION.NORTH),

        room_nne_north_1 = entrance(0x4c, 0x36, DIRECTION.SOUTH),
        room_nne_north_2 = entrance(0x60, 0x39, DIRECTION.SOUTH),
        room_nne_east = entrance(0x7f, 0x60, DIRECTION.WEST),

        room_sw_south = entrance(0x1c, 0x3b, DIRECTION.NORTH),
        room_sw_west = entrance(0x01, 0x24, DIRECTION.EAST),
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("step-on? 0 [END]"));
        },
        exit_room_nw_west = @install() fun test() {
            map_transition(east_crossing, cave, DIRECTION.WEST);
        },
        stepon_2 = @install() fun test() {
            subtext(string("step-on? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("step-on? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("step-on? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("step-on? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("step-on? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("step-on? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("step-on? 8 [END]"));
        },
        stepon_9 = @install() fun test() {
            subtext(string("step-on? 9 [END]"));
        },

        stepon_10 = @install() fun test() {
            subtext(string("step-on? 10 [END]"));
        },
        stepon_11 = @install() fun test() {
            subtext(string("step-on? 11 [END]"));
        },
        stepon_12 = @install() fun test() {
            subtext(string("step-on? 12 [END]"));
        },
        stepon_13 = @install() fun test() {
            subtext(string("step-on? 13 [END]"));
        },
        stepon_14 = @install() fun test() {
            subtext(string("step-on? 14 [END]"));
        },
        stepon_15 = @install() fun test() {
            subtext(string("step-on? 15 [END]"));
        },
        stepon_16 = @install() fun test() {
            subtext(string("step-on? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("step-on? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("step-on? 18 [END]"));
        },
        stepon_19 = @install() fun test() {
            subtext(string("step-on? 19 [END]"));
        },

        stepon_20 = @install() fun test() {
            subtext(string("step-on? 20 [END]"));
        },
    }
    
    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        },

        b_trigger_20 = @install() fun test() {
            subtext(string("b? 20 [END]"));
        },
        b_trigger_21 = @install() fun test() {
            subtext(string("b? 21 [END]"));
        },
        b_trigger_22 = @install() fun test() {
            subtext(string("b? 22 [END]"));
        },
        b_trigger_23 = @install() fun test() {
            subtext(string("b? 23 [END]"));
        },
        b_trigger_24 = @install() fun test() {
            subtext(string("b? 24 [END]"));
        },
    }

    fun trigger_enter() {
        default_init_room(False, False);
    }
};

map drone_arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum stepon_trigger {
        exit_north = nop(),
        exit_south = nop(),
        center = nop(),
    }

    enum BOSS {
        RIDER_1_ID = memory_tmp(),
        MOUNT_1_ID = memory_tmp(),

        RIDER_2_ID = memory_tmp(),
        MOUNT_2_ID = memory_tmp(),

        PHASE = memory_tmp(),
        TIMER = memory_tmp(),

        COUNTDOWN = 0x03,
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    @install()
    @async()
    fun stack_t01_t23() {
        while(True) {
            if!(dead(BOSS.RIDER_1_ID)) {
                BOSS.RIDER_1_ID[ATTRIBUTE.X] = BOSS.MOUNT_1_ID[ATTRIBUTE.X];
                BOSS.RIDER_1_ID[ATTRIBUTE.Y] = BOSS.MOUNT_1_ID[ATTRIBUTE.Y] - 0x15;
                yield();
            }
            if!(dead(BOSS.RIDER_2_ID)) {
                BOSS.RIDER_2_ID[ATTRIBUTE.X] = BOSS.MOUNT_2_ID[ATTRIBUTE.X];
                BOSS.RIDER_2_ID[ATTRIBUTE.Y] = BOSS.MOUNT_2_ID[ATTRIBUTE.Y] - 0x15;
                yield();
            }

            yield();
        }
    }

    fun turret(id_1, id_2, x, y, mount_type) {
        add_enemy(ENEMY.GATE_BOT, x, y);
        store_last_entity(id_1);

        add_enemy(mount_type, x, y);
        store_last_entity(id_2);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);
    }

    fun spawn_boss(x, y) {
        turret(BOSS.RIDER_1_ID, BOSS.MOUNT_1_ID, x, y, ENEMY.MOSQUITO);
        turret(BOSS.RIDER_2_ID, BOSS.MOUNT_2_ID, x, y, ENEMY.BEE);
    }

    fun trigger_enter() {
        default_init_room(True, False);

        close_exits(True);

        spawn_boss(0x10, 0x20);
        stack_t01_t23();
        // boss_watcher();

        character_selection(CHARACTER.BOY);
        // character_selection(CHARACTER.DOG);
        countdown(BOSS.COUNTDOWN);
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);
        // attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.VINCIBLE);
    }
};

map rats_arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum soundtrack {
        default = soundtrack(0x30, 0x30)
    }

    enum stepon_trigger {
        exit_north = nop(),
        exit_south = nop(),
        center = nop(),
    }

    enum BOSS {
        RAT_1_ID = memory_tmp(),
        RAT_1_X = 0x13,
        RAT_1_Y = 0x19,
        RAT_2_ID = memory_tmp(),
        RAT_2_X = 0x29,
        RAT_2_Y = 0x1b,
        RAT_3_ID = memory_tmp(),
        RAT_3_X = 0x13,
        RAT_3_Y = 0x25,
        RAT_4_ID = memory_tmp(),
        RAT_4_X = 0x29,
        RAT_4_Y = 0x27,

        PHASE = memory_tmp(),
        TIMER = memory_tmp(),

        COUNTDOWN = 0x03,
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    fun rat_dead(x, y, death_trigger) {
        add_enemy(ENEMY.RAT, x, y);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, death_trigger);
        attribute(CHARACTER.LAST_ENTITY, ATTRIBUTE.HP, 0x0001);

        sleep(0x20);
        destroy(CHARACTER.SCRIPT_OWNER);
    }

    @install()
    fun rat_1_dead() {
        rat_dead(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));
    }
    @install()
    fun rat_2_dead() {
        rat_dead(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));
    }
    @install()
    fun rat_3_dead() {
        rat_dead(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));
    }
    @install()
    fun rat_4_dead() {
        rat_dead(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
    }

    fun spawn_rat(x, y, death_trigger) {
        add_enemy(ENEMY.RAT, x, y);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, death_trigger);
        attribute(CHARACTER.LAST_ENTITY, ATTRIBUTE.HP, 0x0001);
    }

    fun trigger_enter() {
        default_init_room(True, False);

        close_exits(True);

        character_selection(CHARACTER.DOG);
        // character_selection(CHARACTER.DOG);
        // countdown(BOSS.COUNTDOWN);
        attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.VINCIBLE);
        // attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.VINCIBLE);

        spawn_rat(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));
        spawn_rat(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));

        sleep(0x40);

        spawn_rat(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));
        spawn_rat(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));

        sleep(0x20);

        spawn_rat(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));
        spawn_rat(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));

        sleep(0x20);

        spawn_rat(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
        spawn_rat(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
    }
};

// dungeons

map dungeon_volcano(0x3b) {
    enum entrance {
        north_1 = entrance(0x2e, 0x05, DIRECTION.SOUTH),
        north_2 = entrance(0x76, 0x06, DIRECTION.SOUTH),
        south_1 = entrance(0x51, 0xb1, DIRECTION.NORTH),
        south_2 = entrance(0x7d, 0xb1, DIRECTION.NORTH),
    }

    enum stepon_trigger {
        exit_north_1 = @install() fun test() {
            map_transition(squidmar, south, DIRECTION.NORTH);
        },
        exit_north_2 = @install() fun test() {
            map_transition(aquagoth, south, DIRECTION.NORTH);
        },
        exit_south_1 = @install() fun test() {
            map_transition(east_crossing, elevator_top, DIRECTION.SOUTH);
        },
        exit_south_2 = @install() fun test() {
            map_transition(east_crossing, elevator_bottom, DIRECTION.SOUTH);
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        },

        b_trigger_20 = @install() fun test() {
            subtext(string("b? 20 [END]"));
        },
        b_trigger_21 = @install() fun test() {
            subtext(string("b? 21 [END]"));
        },
        stepon_22 = @install() fun test() {
            subtext(string("step-on? 22 [END]"));
        },
        stepon_23 = @install() fun test() {
            subtext(string("step-on? 23 [END]"));
        },
        stepon_24 = @install() fun test() {
            subtext(string("step-on? 24 [END]"));
        },
        stepon_25 = @install() fun test() {
            subtext(string("step-on? 25 [END]"));
        },
        stepon_26 = @install() fun test() {
            subtext(string("step-on? 26 [END]"));
        },
        stepon_27 = @install() fun test() {
            subtext(string("step-on? 27 [END]"));
        },
        stepon_28 = @install() fun test() {
            subtext(string("step-on? 28 [END]"));
        },
        stepon_29 = @install() fun test() {
            subtext(string("step-on? 29 [END]"));
        },

        stepon_30 = @install() fun test() {
            subtext(string("step-on? 30 [END]"));
        },
        stepon_31 = @install() fun test() {
            subtext(string("step-on? 31 [END]"));
        },
        stepon_32 = @install() fun test() {
            subtext(string("step-on? 32 [END]"));
        },
        stepon_33 = @install() fun test() {
            subtext(string("step-on? 33 [END]"));
        },
    }

    fun trigger_enter() {
        default_init_room(False, False);
    }
};

map squidmar(0x6d) {
    enum entrance {
        south = entrance(0x1b, 0x51, DIRECTION.NORTH)
    }

    enum ROOM {
        FAKE_EXIT_ID = memory_tmp()
    }

    fun fake_exit() {
        map_transition(dungeon_volcano, north_1, DIRECTION.NORTH);
    }

    @install()
    @async()
    fun fake_exit_scanner() {
        attach_to_script(ROOM.FAKE_EXIT_ID);

        while(True) {
            arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
            arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
            arg[0x04] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
            arg[0x06] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if(arg[0x08] <= 0x20) {
                if(arg[0x0a] <= 0x20) {
                    fake_exit();
                    end();
                }
            }

            yield();
        }
    }

    @install()
    fun squidmar_dialog() {
        dialog(string("I'm Squidmar.[0x80][0x19][0x81][END]"));
    }
    @install()
    fun squidmar_combat() {
        dialog(string("...[0x80][0x19][0x81][END]"));
    }

    fun trigger_enter() {
        add_enemy(ENEMY.AQUAGOTH_ENTITY, 0x1a, 0x34);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(squidmar_combat));
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(squidmar_dialog));

        default_init_room(True, False);

        add_enemy(ENEMY.PLACEHOLDER, 0x1b, 0x52);
        ROOM.FAKE_EXIT_ID = <CHARACTER.LAST_ENTITY>;
        sleep(0x10);
        fake_exit_scanner();
    }
};

map aquagoth(0x6d) {
    enum entrance {
        south = entrance(0x1b, 0x51, DIRECTION.NORTH)
    }

    enum ROOM {
        FAKE_EXIT_ID = memory_tmp(),
    }

    fun fake_exit() {
        map_transition(dungeon_volcano, north_2, DIRECTION.NORTH);
    }

    @install()
    @async()
    fun fake_exit_scanner() {
        attach_to_script(ROOM.FAKE_EXIT_ID);

        while(True) {
            arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
            arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
            arg[0x04] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
            arg[0x06] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if(arg[0x08] <= 0x20) {
                if(arg[0x0a] <= 0x20) {
                    fake_exit();
                    end();
                }
            }

            yield();
        }
    }

    @install()
    fun aquagoth_dialog() {
        dialog(string("I'm Aquagoth.[0x80][0x19][0x81][END]"));
    }
    @install()
    fun aquagoth_combat() {
        dialog(string("...[0x80][0x19][0x81][END]"));
    }

    fun init_room() {
        sfx_effect(SFX_EFFECT.SEPIA, True);
        
        default_init_room(False, False);
    }

    fun trigger_enter() {
        add_enemy(ENEMY.AQUAGOTH_ENTITY, 0x1a, 0x34);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(aquagoth_combat));
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(aquagoth_dialog));

        init_room();

        add_enemy(ENEMY.PLACEHOLDER, 0x1b, 0x52);
        ROOM.FAKE_EXIT_ID = <CHARACTER.LAST_ENTITY>;
        sleep(0x10);
        fake_exit_scanner();

        subtext(string("A fould stench is in the air.[END]"));
    }
};
