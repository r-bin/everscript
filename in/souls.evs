#memory(
    string_key(0x0546)..string_key(0x232b), // last half of string keys
    function_key(0x0000)..function_key(0x232b), // TODO: all function keys?

    0x300000..0x3fffff, // extension

    // reserved: <0x23b9>
    <0x2272>..<0x22ff>,

    <0x2834>..<0x28ff>
)
#include("in/core.evs")

#patch(
    "skip_intro",
    // "save_file_growth",

    // asm
    // "debug_menu", // uses 0x3f0000…???
    "_hook_input", // 0x3f0000…0x310000
        "hotkeys", // uses 0x3f00000…???
        // "room_timer", // uses 0x300000…???
    // "_hook_trigger",
)

// STRINGS

@install(0x4713f)
fun string_revealer_entity_name() {
    cstring("SECRET[END]");
}

// HELPER

@install()
@async()
fun crash_both() {
    <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] - 0x20;
    <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] - 0x20;

    crash_land(CHARACTER.BOTH);
}

@install()
fun contraption_trigger() {
    subtext(string("Locked by some contraption.[END]"));
}

fun branch_lady(x, y, id) {
    add_enemy(ENEMY.VILLAGER_2_4, x, y);
    entity_script_controlled(CHARACTER.LAST_ENTITY);
    face(CHARACTER.LAST_ENTITY, DIRECTION.WEST);
    attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, id);
    <CHARACTER.LAST_ENTITY>[ATTRIBUTE.PALETTE] = 0x50;
}

@install(ADDRESS.INTRO_FIRST_CODE_EXECUTED)
fun jump_to_inbetwixx() {
    set(FLAG.DEBUG);
    map_transition(inbetwixx, start, DIRECTION.NONE);
}

@install()
fun bomb_wall_triggered() {
    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);
    object[<0x2838>] = <0x283a>;

    sleep(0x50);

    destroy(CHARACTER.SCRIPT_OWNER);
}

// souls

enum BUTTON_MAP {
    NORMAL = 0x00,

    BOMBS = 0x01,
    AIRSHIP = 0x02,
    ISAAC = 0x03,
    MARIO = 0x04,
}

enum SOULS_MEMORY {
    INIT = flag(),
    INTRO_WATCHED = flag(),

    DEMO_MODE = True,
    WITH_WEATHER = False,
    WITH_TRASH_ENEMIES = False,

    MAP_VARIANT = <0x23b9>, // TODO: hardcoded

    DUST_ENTITY = memory(), // <0x24fd>,
    DUST_DROP_X = memory(), // <0x24ff>,
    DUST_DROP_Y = memory(), // <0x2501>,
    DUST_DROP_MAP = memory(), // <0x2503>,
    DUST_DROP_VARIANT = memory(), // <0x2505>,

    BONFIRE_X = memory(), // <0x2507>,
    BONFIRE_Y = memory(), // <0x2509>,
    BONFIRE_MAP = memory(), // <0x250b>,
    BONFIRE_VARIANT = memory(), // <0x250d>,
    BONFIRE_TELEPORT_REQUIRED = flag(),
    
    ESTUS_CHARGES = memory(), // <0x250f>,
    ESTUS_SHARDS = memory(), // <0x2512>,
    ESTUS_CHARGES_INIT = 0x01,
    
    // button map
    BUTTON_MAP = memory(), // TODO: should be memory_tmp()
    BOMB_ENABLED = flag(),

    // bosses
    BOSSES_DEFEATED_COUNTER = memory(),
    PROGRESS_COUNTER = memory(),

    // east
    DEAD_VOLCANO_HYDRA = flag(),
    DEAD_ARENA_RADAHN = flag(),
    DEAD_STOMPY_RADAHN = flag(),
    
    DEAD_ARENA_MOSQUITO = flag(),

    DEAD_TEMPLE_MINITAUR = flag(),
    DEAD_TAVERN_BOXERS = flag(),

    DEAD_NARIS = flag(),
}

@install()
fun upgrade_estus() { // TODO: test
    dialog(string("hi[END]"));
    
    if(SOULS_MEMORY.ESTUS_SHARDS > 0x00) {
        dialog(string("estus upgrade?[LF][0x8b]yes[LF][0x8b]no[END]"));

        if(MEMORY.QUESTION_ANSWER == 0x00) {
            SOULS_MEMORY.ESTUS_SHARDS = SOULS_MEMORY.ESTUS_SHARDS - 0x01;

            SOULS_MEMORY.ESTUS_CHARGES = SOULS_MEMORY.ESTUS_CHARGES + 0x01;
        }
    }
}

@install()
fun dust_loot() {
    SOULS_MEMORY.DUST_DROP_MAP = 0xffff;
    SOULS_MEMORY.DUST_DROP_VARIANT = 0xffff;

    // attach_script(CHARACTER.SCRIPT_OWNER, SCRIPT_TRIGGER.LOOT, 0x172b);

    // subtext(string("Reclaimed souls"));

    currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.TALONS);

    // <0x2391> = 0x0000;
    // <0x2395> = 0x0000;
    // call_id(0x3d);
    animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.LOOT);

    destroy(SOULS_MEMORY.DUST_ENTITY);

    // sleep(0x80);

    show_currency(True);
    sleep(0x40);
    show_currency(False);
}

@install()
fun dust_drop() {
    // subtext(string("Souls in reach...[END]"));

    attach_script(CHARACTER.SCRIPT_OWNER, SCRIPT_TRIGGER.LOOT, reference(dust_loot));

    <0x23d9> = 0x0001;
    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.DUST);
    sleep(0x3c);
    <0x23d9> = 0x0001;
    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.FREEZE, ANIMATION_ENEMY.DUST);
}

@install()
fun return_to_bonfire() {
    if(SOULS_MEMORY.BONFIRE_MAP == 0x26) { // TODO: inbetwixx map id
        set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
        map_transition(inbetwixx, start, DIRECTION.NONE); // TODO
    } else if(SOULS_MEMORY.BONFIRE_MAP == 0x1a) { // TODO: crossing map id
        set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
        map_transition(east_crossing, crash, DIRECTION.NONE); // TODO
    } else if(SOULS_MEMORY.BONFIRE_MAP == 0xa8) { // TODO: crossing map id
        set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
        map_transition(well, crash, DIRECTION.NONE); // TODO
    } else if(SOULS_MEMORY.BONFIRE_MAP != 0x00){
        fade_in();
        sleep(0x20);
        
        MEMORY.STRING_PARAMETER_1 = SOULS_MEMORY.BONFIRE_MAP;

        subtext(string("Game could not find bonfire #[0xa1][END]"));
        
        sleep(0xa0);
    }

    map_transition(inbetwixx, start, DIRECTION.NONE);
}

@install()
fun boy_death() {
    control(CHARACTER.NONE);

    currency_get(CURRENCY.CREDITS, 0x01);

    show_currency(True);
    yield();

    // subtext(string("Souls lost"));

    // damage(CHARACTER.DOG, 0x03e8);

    currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.GOLD_COINS);
    currency_convert(0x01, CURRENCY.TALONS, 0x01, CURRENCY.JEWELES);

    SOULS_MEMORY.DUST_DROP_X = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
    SOULS_MEMORY.DUST_DROP_Y = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];
    // <0x2503> = MEMORY.MAP;
    SOULS_MEMORY.DUST_DROP_MAP = MEMORY.MAP & 0xff;
    SOULS_MEMORY.DUST_DROP_VARIANT = SOULS_MEMORY.MAP_VARIANT;

    // sleep(0x20);

    // currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.GOLD_COINS);
    destroy(SOULS_MEMORY.DUST_ENTITY);

    animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.DUST);
    animate(CHARACTER.DOG, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.DUST);

    sleep(0xa0);

    fade_out();

    show_currency(False);
    yield();

    sleep(0x50);

    full_heal(CHARACTER.BOTH, False);

    return_to_bonfire();

    control(CHARACTER.BOTH);
}

@install()
fun bonfire_triggered() {
    // test_owner2();
    // end();
    
    // subtext(string("Bonfire Lit[END]"));

    // bonfire_activate(<CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X], <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y], reference(bonfire_triggered));

    MEMORY.PETAL = SOULS_MEMORY.ESTUS_CHARGES;
}

@install()
fun bonfire_lit() {    
    subtext(string("Bonfire Lit[END]"));

    add_enemy_with_flags(ENEMY.LANTERN_LIGHT_RED, 0x00, 0x00, FLAG_ENEMY.INACTIVE);
    attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(bonfire_triggered));
    <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
    <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

    destroy(CHARACTER.SCRIPT_OWNER);

    SOULS_MEMORY.BONFIRE_X = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
    SOULS_MEMORY.BONFIRE_Y = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
    SOULS_MEMORY.BONFIRE_MAP = MEMORY.MAP & 0xff;
    SOULS_MEMORY.BONFIRE_VARIANT = SOULS_MEMORY.MAP_VARIANT;
}

fun bonfire(x, y) {
    // add_enemy_with_flags(ENEMY.LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE_IMORTAL);
    // attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, 0x181e);
    // entity_script_controlled(CHARACTER.LAST_ENTITY);

    if((SOULS_MEMORY.BONFIRE_MAP == MEMORY.MAP&0xff) && (SOULS_MEMORY.BONFIRE_VARIANT == SOULS_MEMORY.MAP_VARIANT)) {
        add_enemy_with_flags(ENEMY.LANTERN_LIGHT_RED, x, y, FLAG_ENEMY.INACTIVE);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(bonfire_triggered));
    } else {
        add_enemy_with_flags(ENEMY.LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(bonfire_lit));
    }
    
    attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
    <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = SYSTEM.HP_MAX;
}

@install()
fun init_souls() {
    if!(SOULS_MEMORY.INIT) {
        set(SOULS_MEMORY.INIT);

        SOULS_MEMORY.ESTUS_CHARGES = SOULS_MEMORY.ESTUS_CHARGES_INIT;
        MEMORY.PETAL = SOULS_MEMORY.ESTUS_CHARGES;
    }

    if((SOULS_MEMORY.DUST_DROP_MAP == MEMORY.MAP&0xff) && (SOULS_MEMORY.DUST_DROP_VARIANT == SOULS_MEMORY.MAP_VARIANT)) {
        add_dynamic_enemy_with_flags(ENEMY.BEE, SOULS_MEMORY.DUST_DROP_X, SOULS_MEMORY.DUST_DROP_Y, 0x00);
        SOULS_MEMORY.DUST_ENTITY = <CHARACTER.LAST_ENTITY>;
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(dust_drop));
        
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);
        damage(CHARACTER.LAST_ENTITY, 0x03e8, False);
    }

    if(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED) {
        // if(SOULS_MEMORY.BONFIRE_MAP == MEMORY.MAP&0xff) {
        //     if(SOULS_MEMORY.BONFIRE_VARIANT == SOULS_MEMORY.MAP_VARIANT) {
        //         if(SOULS_MEMORY.BONFIRE_X != 0x00) {
        //             if(SOULS_MEMORY.BONFIRE_Y != 0x00) { // TODO
                        <CHARACTER.BOY>[ATTRIBUTE.X] = SOULS_MEMORY.BONFIRE_X;
                        <CHARACTER.BOY>[ATTRIBUTE.Y] = SOULS_MEMORY.BONFIRE_Y;

                        <CHARACTER.DOG>[ATTRIBUTE.X] = SOULS_MEMORY.BONFIRE_X;
                        <CHARACTER.DOG>[ATTRIBUTE.Y] = SOULS_MEMORY.BONFIRE_Y;
        //             }
        //         }
        //     }
        // }
        unset(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
    }

    attach_script(CHARACTER.BOY, SCRIPT_TRIGGER.DEATH, reference(boy_death));

    special_script(SPECIAL_SCRIPTS.WINGS, reference(return_to_bonfire));

    MEMORY.BOY_XP_REQUIRED = SYSTEM.HP_MAX;
    MEMORY.DOG_XP_REQUIRED = SYSTEM.HP_MAX;

    SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.BOMBS;
}

// HOTKEYS

@install()
@inject(ADDRESS.HOTKEY_START)
@count_limit(0x20)
fun hotkey_start() {
    if(FLAG.DEBUG) {
        subtext(string("Start[END]"));
    }

    if(SOULS_MEMORY.BUTTON_MAP == BUTTON_MAP.AIRSHIP) {
        windwalker_rocket();
    } else if(SOULS_MEMORY.BUTTON_MAP == BUTTON_MAP.ISAAC) {
        isaac_tear(False);
    } else if(SOULS_MEMORY.BUTTON_MAP == BUTTON_MAP.BOMBS) {
        drop_bomb(False);
    } else if(SOULS_MEMORY.BUTTON_MAP == BUTTON_MAP.MARIO) {
        mario_yump();
    } else {
        if((SOULS_MEMORY.BOMB_ENABLED) && (FLAG.ENERGY_CORE)) {
            drop_bomb(True);
        }
    }
}
@install()
@inject(ADDRESS.HOTKEY_START_L)
@count_limit(0x20)
fun hotkey_start_l() {
    if(FLAG.DEBUG) {
        subtext(string("Start+L[END]"));

        // return_to_bonfire();
        
        // map_transition(sterling_test, right, DIRECTION.NONE);
        // map_transition(basement_0_start, center, DIRECTION.NONE);
        // map_transition(basement_1_4, south_1, DIRECTION.NONE);
        // map_transition(basement_3_start, center, DIRECTION.NONE);
        map_transition(well, crash, DIRECTION.NONE);

        // MEMORY.MAP_PALETTE = MEMORY.MAP_PALETTE - 0x01;
    }
}
@install()
@inject(ADDRESS.HOTKEY_START_R)
@count_limit(0x20)
fun hotkey_start_r() {
    if(FLAG.DEBUG) {
        subtext(string("Start+R[END]"));

        // map_transition(arena, right, DIRECTION.NONE);
        
        attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.NO_CLIP);
        // attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.INVINCIBLE_2);
        // <CHARACTER.BOY>[ATTRIBUTE.HP] = SYSTEM.HP_MAX;
        
        debug_boy();
        // debug_memory(<0x2834>[0x15], <0x2836>[ATTRIBUTE.HP]);
        // debug_memory(<0x2834>[ATTRIBUTE.HP], <0x2836>[ATTRIBUTE.HP]);
        
        // map_transition(toaster_arena, center, DIRECTION.NONE);

        // MEMORY.MAP_PALETTE = MEMORY.MAP_PALETTE + 0x01;

        // eval("b5 8d 15 00 8d 01 00 88 1f 02 88 21 02 ba 92 04 92 06 e4");
        // code(0xb5, entity_t(0x2849), entity_t(0x2835), entity_t(0x2477), entity_t(0x2479), param(0x0a), arg[0x04], arg[0x06], param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
        // <0x2849> = 0x1a;
        // <0x2835> = <CHARACTER.DOG>;
        // <0x2477> = 0x00;
        // <0x2479> = 0x00;
        // code(0xb5, entity_t(0x2849), entity_t(0x2835), entity_t(0x2477), entity_t(0x2479), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0xee), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

        // <0x2849> = <0x2849> + 0x02;
        // debug_memory(<0x2849>, <0x2849>);
    }
}

// MAPS

fun init_hack() {
    init_souls();

    MEMORY.DOG = DOG.WOLF;
    available(CHARACTER.BOTH);
}

fun default_init_room(night, rain) {
    init_hack();
    
    if(SOULS_MEMORY.WITH_WEATHER) {
        if(rain) {
            sfx_effect(SFX_EFFECT.RAIN, True);
        }
        if(night) {
            sfx_effect(SFX_EFFECT.NIGHT, True);
        }
    }

    fade_in();
}

fun isaac_mode() {
    SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.ISAAC;
    MEMORY.PACIFIED = 0x01;
}

fun isaac_init(night, rain) {
    // TODO: dog should stay unavailable
    available(CHARACTER.BOY);
    teleport(CHARACTER.DOG, 0xff, 0xff);

    default_init_room(night, rain);

    available(CHARACTER.BOY);
    teleport(CHARACTER.DOG, 0xff, 0xff);

    isaac_mode();
}

// MAPS

area inbetwixx_center() {
    map inbetwixx(0x05) {
        enum entrance {
            north = entrance(0x2d, 0x01, DIRECTION.SOUTH),
            east = entrance(0x5f, 0x4d, DIRECTION.WEST),
            west_1 = entrance(0x04, 0x71, DIRECTION.EAST),
            west_2 = entrance(0x04, 0x2f, DIRECTION.EAST),

            start = entrance(0x0f, 0x47, DIRECTION.NONE)
        }

        enum soundtrack {
            default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            DEBUG = False,
            
            BRIDGE_REVEALED = flag(),
            BRIDGE_REVEALER_ENTITY = memory_tmp(),
        }

        @install()
        fun ravine_triggered() {
            pit_act2_between(0x0140);

            sleep(0xd0);

            damage(CHARACTER.BOTH, 0x00ff, True);
            sleep(0x60);
            yield();
        }

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                subtext(string("step-on? 0 [END]"));
            },
            stepon_1 = ravine_triggered(),
            stepon_2 = ravine_triggered(),
            stepon_3 = ravine_triggered(),
            stepon_4 = ravine_triggered(),
            stepon_5 = ravine_triggered(),
            stepon_6 = ravine_triggered(),
            stepon_7 = @install() fun test() {
                subtext(string("step-on? 7 [END]"));
            },
            exit_east = @install() fun test() {
                map_transition(east_inbetwixx, west_2, DIRECTION.EAST);
            },
            exit_north = @install() fun test() {
                map_transition(north_inbetwixx, south, DIRECTION.NORTH);
            },
            exit_west_2_east = @install() fun test() {
                map_transition(northwest_inbetwixx, east, DIRECTION.WEST);
            },
            exit_west_1_exit = @install() fun test() {
                map_transition(west_inbetwixx, east_2, DIRECTION.WEST);
            },
            stepon_12 = @install() fun test() {
                subtext(string("step-on? 12 [END]"));
            },
            stepon_13 = @install() fun test() {
                subtext(string("step-on? 13 [END]"));
            },
            stepon_14 = @install() fun test() {
                subtext(string("step-on? 14 [END]"));
            },
            stepon_15 = @install() fun test() {
                subtext(string("step-on? 15 [END]"));
            },

            stepon_16 = @install() fun test() {
                subtext(string("step-on? 16 [END]"));
            },
            stepon_17 = @install() fun test() {
                subtext(string("step-on? 17 [END]"));
            },
            stepon_18 = @install() fun test() {
                subtext(string("step-on? 18 [END]"));
            },
            stepon_19 = @install() fun test() {
                subtext(string("step-on? 19 [END]"));
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                _axe2_wall(0x00);
            },
            b_trigger_1 = @install() fun test() {
                _axe2_wall(0x01);
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 6 [END]"));

                // _loot(0x0a, LOOT_REWARD.MUSHROOM, 0x01, 0x00);
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            b_trigger_16 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
            b_trigger_17 = @install() fun test() {
                subtext(string("b? 17 [END]"));
            },
            b_trigger_18 = @install() fun test() {
                subtext(string("b? 18 [END]"));
            },
            b_trigger_19 = @install() fun test() {
                subtext(string("b? 19 [END]"));
            }
        }

        fun init_room() {
            default_init_room(True, True);

            subtext(string("Inbetwixx[END]"));
        }

        fun intro() {
            teleport(CHARACTER.DOG, 0x13, 0x49);
            animate(CHARACTER.DOG, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);

            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

            sleep(0x50);
            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
            sleep(0x30);
            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
            sleep(0x40);
            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
            sleep(0x15);
            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.KNEEL);

            sleep(0x20);
            animate(CHARACTER.DOG, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
        }

        fun bomb_wall_trigger(object, x, y) {
            // add_enemy_with_flags(ENEMY.THRAXX_HEART, x, y, 0x0000);
            add_enemy_with_flags(ENEMY.FACE_ENTITY, x, y, 0x0004);
            // <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = object;
            // <CHARACTER.LAST_ENTITY>[0x15] = 0x01;
            
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(bomb_wall_triggered));
            // store_last_entity(0x2834);

            <0x2838> = object;
            <0x283a> = 0x01;
        }

        @install()
        fun energy_core_triggered() {
            if(<CHARACTER.ACTIVE> == <CHARACTER.BOY>) {
                animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.LOOT);
                sleep(0x10);

                unlock(ITEM.ENERGY_CORE);

                destroy(CHARACTER.SCRIPT_OWNER);
            }
        }

        @install()
        fun test_room_portal() {
            attach_to_script(CHARACTER.BOY);

            question_max(string("[0x96]Dog Test Rooms:[LF][0x8b]Gate Bots (90%)[LF][0x8b]Rats (80%)[LF]Boy Test Rooms:[LF][0x8b]Bomb (50%)[LF][0x8b]Mosquito (80%)[LF][0x8b]Invisible (100%)[LF][0x8b]Abomination (80%)[LF][0x8b]Radahn (90%)[LF][0x8b]Drone (80%)[END]"), 0x09 + 0x07);

            if(MEMORY.QUESTION_ANSWER == 0x00) { // toaster arena
                map_transition(toaster_arena, center, DIRECTION.NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x01) { // rats arena
                map_transition(rats_arena, right, DIRECTION.NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x02) { // bomb arena
                map_transition(bomb_arena, right, DIRECTION.NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x03) { // mosquito arena
                map_transition(mosquito_arena, right, DIRECTION.NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x04) { // invisible arena
                map_transition(invisible_arena, right, DIRECTION.NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x05) { // abomination arena
                map_transition(abomination_arena, right, DIRECTION.NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x06) { // radahn arena
                map_transition(radahn_arena, right, DIRECTION.NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x07) { // drone arena
                map_transition(drone_arena, right, DIRECTION.NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0x08) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x09) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x0a) { // nop
                nop();
            }
        }
        @install()
        fun cheat_selection() {
            attach_to_script(CHARACTER.BOY);

            question_max(string("[0x96]Cheats:[LF][0x8b]Basics[LF][0x8b]All[LF][0x8b]Alchemy[LF][0x8b]Money[END]"), 0x08);

            if(MEMORY.QUESTION_ANSWER == 0x00) { // basics
                unlock(ITEM.WEAPONS);
                unlock(ITEM.JAGUAR_RING);
                unlock(ITEM.CONSUMABLES);
                
                // unlock(ITEM.SPEAR_1);
                unlock(ITEM.AXE_2);

                set(SOULS_MEMORY.BOMB_ENABLED);
            } else if(MEMORY.QUESTION_ANSWER == 0x01) { // all
                unlock(ITEM.ALL);
            } else if(MEMORY.QUESTION_ANSWER == 0x02) { // alchemy
                unlock(ITEM.ALCHEMY);
                unlock(ITEM.INGREDIENTS);

                select_alchemy();
            } else if(MEMORY.QUESTION_ANSWER == 0x03) { // money
                currency_get(CURRENCY.TALONS, 0x29a);
            } else if(MEMORY.QUESTION_ANSWER == 0x04) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x05) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x06) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x07) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x08) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x09) { // nop
                nop();
            } else if(MEMORY.QUESTION_ANSWER == 0x0a) { // nop
                nop();
            }
        }

        @install()
        @async()
        fun revealer_approached() {
            attach_to_script(ROOM.BRIDGE_REVEALER_ENTITY);

            while!(dead(<CHARACTER.SCRIPT_OWNER>)) {
                arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
                arg[0x04] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
                arg[0x06] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    ravine_triggered();
                    end();
                }

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }

                yield();
            }
        }

        @install()
        fun revealer_triggered() {
            set(ROOM.BRIDGE_REVEALED);
            object[0x02] = 0x7e;
            sleep(0x29);
            destroy(ROOM.BRIDGE_REVEALER_ENTITY);
        }

        @install()
        fun lift_off() {
            <0x2834> = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
            <0x2836> = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];
            // walk_relative(WALK_TYPE.ABSOLUTE, CHARACTER.BOY, <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X], <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y], False);
            // walk_relative(WALK_TYPE.ABSOLUTE, CHARACTER.BOY, <0x2834>, <0x2836>, False);
            control(CHARACTER.NONE);
            _walk(WALK_TYPE.UNKNOWN, CHARACTER.DOG, <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X] + 0x30, <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y], CHARACTER.NONE);
            _walk(WALK_TYPE.UNKNOWN, CHARACTER.BOY, <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X] + 0x30, <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y], CHARACTER.BOTH);
            _walk(WALK_TYPE.UNKNOWN, CHARACTER.DOG, <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X] + 0x00, <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y] - 0x02, CHARACTER.NONE);
            _walk(WALK_TYPE.UNKNOWN, CHARACTER.BOY, <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X] + 0x00, <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y] - 0x02, CHARACTER.BOTH);
            
            face(CHARACTER.BOY, DIRECTION.EAST);
            face(CHARACTER.DOG, DIRECTION.EAST);

            sleep(0x20);

            while(arg[0x00] < 0xa0) {
                arg[0x00] = arg[0x00] + 0x01;

                control(CHARACTER.NONE);
                face(CHARACTER.BOY, DIRECTION.EAST);
                face(CHARACTER.DOG, DIRECTION.EAST);

                <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y] - 0x01;
                <CHARACTER.BOY>[ATTRIBUTE.Y] = <CHARACTER.BOY>[ATTRIBUTE.Y] - 0x01;
                <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] - 0x01;

                yield();
            }

            map_transition(windwalker_sidescroller, west, DIRECTION.NONE);
        }

        @install()
        fun trigger_enter() {
            if(SOULS_MEMORY.DEMO_MODE) {
                if!(FLAG.ENERGY_CORE) {
                    add_placeholder(ANIMATION_PLACEHOLDER.ENERGY_CORE_OPEN, 0x1f, 0x47);
                    attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(energy_core_triggered));
                }

                add_enemy_with_flags(ENEMY.TINKER, 0x0c, 0x42, FLAG_ENEMY.INACTIVE);
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = 0x32;
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.VINCIBLE);
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.VINCIBLE_2);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(cheat_selection));

                add_enemy_with_flags(ENEMY.FIRE_EYES, 0x11, 0x42, FLAG_ENEMY.INACTIVE);
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = 0x32;
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(test_room_portal));
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.VINCIBLE);
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.VINCIBLE_2);
            }

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                add_enemy(ENEMY.FLOWER_PURPLE, 0x59, 0x4f);
            }

            if!(ROOM.BRIDGE_REVEALED) {
                add_enemy(ENEMY.REVEALER_TARGET_ENTITY, 0x24, 0x1a);
                ROOM.BRIDGE_REVEALER_ENTITY = <CHARACTER.LAST_ENTITY>;

                special_script(SPECIAL_SCRIPTS.REVEALER, reference(revealer_triggered));
                revealer_approached();
            } else {
                revealer_triggered();
            }

            init_room();

            if!(FLAG.IN_ANIMATION) {
                if!(SOULS_MEMORY.INTRO_WATCHED) {
                    set(SOULS_MEMORY.INTRO_WATCHED);

                    intro();

                    subtext(string("v0.3.0 - debug - by r.bin[END]"));
                }
                
                // code(0xa3, 0x18, "// (a3) CALL 'Prepare room change? North exit/south entrance outdoor-indoor?' (0x26)"); // TODO: 4x4 combinations, not 4
                // 19=ww, 1a=Ww, 1b=wn, 1c=ws, 1d=ee, 1e=Ee, 1f=EN
                // 20=ES, 21=SS, 22=Ss, 23=sW, 24=SW, 25=SE, 26=NN, 27=NN, 28=NE, 29=NW, 2a=NS, 2b=Ns, 2c=ns, 2d=ss

                // load_map(0x05, 0x0f, 0x47);
            }

            bonfire(0x31, 0x35);
            // bomb_wall_trigger(0x01, 0x3f, 0x3c);
            // bomb_wall_trigger(0x00, 0x43, 0x60);

            add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0x38, 0x6c);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(lift_off));
        }
    };
};

area north_inbetwixx() {
    map north_inbetwixx(0x2b) {
        enum entrance {
            north = entrance(0x41, 0x03, DIRECTION.SOUTH),
            south = entrance(0x45, 0x41, DIRECTION.NORTH),
        }

        enum stepon_trigger {
            exit_south = @install() fun test() {
                map_transition(inbetwixx, north, DIRECTION.SOUTH);
            },
            exit_north = @install() fun test() {
                subtext(string("exit? 1 [END]"));
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            b_trigger_16 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
        }

        fun place_masks(position) {
            if(position == 0x01) {
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x3d, 0x04);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_2, 0x46, 0x04);

                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_3, 0x42, 0x0b);
            } else if(position == 0x02) {
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x38, 0x04);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_2, 0x4c, 0x04);
            } else if(position == 0x03) {
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x32, 0x14);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_2, 0x32, 0x24);

                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_3, 0x52, 0x14);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x52, 0x24);
            }
        }

        enum BOSS_STOMPY {
            DEBUG = False,
            IN_PROGRESS = memory_tmp(),

            RIDER_ID = memory_tmp(),
            MOUNT_ID = memory_tmp(),

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            HP = 0x03e8, // 1000

            COUNTDOWN = 0x03,

            STOMP_ENTITY = memory_tmp(),
            STOMP_DISTANCE = 0x20,
            STOMP_COOL_DOWN_TIMER = memory_tmp(),
            STOMP_COOL_DOWN = 0x100,
            STOMP_DAMAGE_CLOSE = 0x50,
            STOMP_DAMAGE = 0x10,
            STOMP_EXPLOSION_DISTANCE = 0x30,

            // p1

            P1_THRESHOLD = 0x320, // 800
            P1_TIME_BEFORE_SALVAGE = 0x500,

            // p2

            P2_THRESHOLD = 0x1f4, // 500
            P2_TIME_BEFORE_SALVAGE = 0x300,

            RANDOM_SPELL = memory_tmp(),
            TIME_BEFORE_RANDOM_SPELL = 0x300,
        }

        fun boss_killed() {
            set(SOULS_MEMORY.DEAD_STOMPY_RADAHN);
        }

        @install()
        @async()
        fun stomp() {
            BOSS_STOMPY.MOUNT_ID[ATTRIBUTE.JUMP_HEIGHT] = 0x30;

            // attribute_bit(BOSS_STOMPY.MOUNT_ID, ATTRIBUTE_BITS.LOCK_IN_PLACE);
            // animate(BOSS_STOMPY.MOUNT_ID, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.STERLING_FLY_1);

            sleep(0x60);

            add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_GREEN_3, 0x00, 0x00);
            BOSS_STOMPY.STOMP_ENTITY = <CHARACTER.LAST_ENTITY>;
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = BOSS_STOMPY.MOUNT_ID[ATTRIBUTE.X];
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = BOSS_STOMPY.MOUNT_ID[ATTRIBUTE.Y] + 0x10;

            arg[0x00] = BOSS_STOMPY.STOMP_ENTITY[ATTRIBUTE.X];
            arg[0x02] = BOSS_STOMPY.STOMP_ENTITY[ATTRIBUTE.Y];
            arg[0x04] = <CHARACTER.BOY>[ATTRIBUTE.X];
            arg[0x06] = <CHARACTER.BOY>[ATTRIBUTE.Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= BOSS_STOMPY.STOMP_DISTANCE) && (arg[0x0a] <= BOSS_STOMPY.STOMP_DISTANCE)) {
                damage(CHARACTER.BOY, BOSS_STOMPY.STOMP_DAMAGE_CLOSE);
            } else if((arg[0x08] <= BOSS_STOMPY.STOMP_EXPLOSION_DISTANCE) && (arg[0x0a] <= BOSS_STOMPY.STOMP_EXPLOSION_DISTANCE)) {
                damage(CHARACTER.BOY, BOSS_STOMPY.STOMP_DAMAGE);
            }

            if(BOSS_STOMPY.DEBUG) {
                debug_memory(arg[0x08], arg[0x0a]);
                sleep(0x20);
            }

            sleep(0x30);
            destroy(BOSS_STOMPY.STOMP_ENTITY);
            // attribute_bit(BOSS_STOMPY.MOUNT_ID, ATTRIBUTE_BITS.UNLOCK);
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(BOSS_STOMPY.MOUNT_ID)) {
                if(BOSS_STOMPY.STOMP_COOL_DOWN_TIMER == 0x0000) {
                    arg[0x00] = BOSS_STOMPY.MOUNT_ID[ATTRIBUTE.X];
                    arg[0x02] = BOSS_STOMPY.MOUNT_ID[ATTRIBUTE.Y];
                    arg[0x04] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                    arg[0x06] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];

                    if(arg[0x00] < arg[0x04]) {
                        arg[0x08] = arg[0x04] - arg[0x00];
                    } else {
                        arg[0x08] = arg[0x00] - arg[0x04];
                    }

                    if(arg[0x02] < arg[0x06]) {
                        arg[0x0a] = arg[0x06] - arg[0x02];
                    } else {
                        arg[0x0a] = arg[0x02] - arg[0x06];
                    }

                    if((arg[0x08] <= BOSS_STOMPY.STOMP_DISTANCE) && (arg[0x0a] <= BOSS_STOMPY.STOMP_DISTANCE)) {
                        BOSS_STOMPY.STOMP_COOL_DOWN_TIMER = BOSS_STOMPY.STOMP_COOL_DOWN;

                        stomp();
                        call_async(ADDRESS.STERLING_ROAR);
                    }

                    // if(BOSS_STOMPY.DEBUG) {
                    //     debug_memory(arg[0x08], arg[0x0a]);
                    //     sleep(0x20);
                    // }
                } else {
                    BOSS_STOMPY.STOMP_COOL_DOWN_TIMER = BOSS_STOMPY.STOMP_COOL_DOWN_TIMER - 0x01;
                }

                // yield();
                sleep(0x02);
            }
        }

        fun trigger_enter() {
            // place_masks(0x01);

            add_enemy(ENEMY.VERMINATOR, 0x42, 0x07);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);

            add_enemy(ENEMY.FORESTDRAKE, 0x38, 0x1d);
            BOSS_STOMPY.MOUNT_ID = <CHARACTER.LAST_ENTITY>;
            stack_t01_offset();

            add_enemy(ENEMY.STERLING, 0x4b, 0x1d);
            // add_enemy(ENEMY.STERLING, 0x4b, 0x1d);
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.NO_CLIP);

            fade_in();
        }
    };
};

area west_inbetwixx() {
    map west_inbetwixx(0x5b) {
        enum entrance {
            north = entrance(0x12, 0x09, DIRECTION.SOUTH),
            east_1 = entrance(0x6d, 0x11, DIRECTION.WEST),
            east_2 = entrance(0x6d, 0x23, DIRECTION.WEST),
            east_3 = entrance(0x6d, 0x35, DIRECTION.WEST),
            west = entrance(0x01, 0x37, DIRECTION.EAST),
        }

        enum soundtrack {
            default = soundtrack(0x0a, 0xff)
        }

        enum ROOM {
            BRANCH_USED = flag(),

            FAKE_SLASH_GRASS_X = memory_tmp(),
            FAKE_SLASH_GRASS_Y = memory_tmp(),
        }

        enum BOSS {
            DEBUG = False,

            ID_OWL_1 = memory_tmp(),
            ID_OWL_2 = memory_tmp(),

            TRANSFORM_DISTANCE = 0x10
        }

        enum stepon_trigger {
            exit_east_1 = @install() fun test() {
                map_transition(west_inbetwixx, east_3, DIRECTION.EAST);
            },
            exit_east_3 = @install() fun test() {
                map_transition(west_inbetwixx, east_1, DIRECTION.EAST);
            },
            exit_east_2 = @install() fun test() {
                map_transition(inbetwixx, west_1, DIRECTION.EAST);
            },
            exit_west = @install() fun test() {
                map_transition(west_hut_outside, east, DIRECTION.WEST);
            },
            exit_north = @install() fun test() {
                map_transition(volcano, south, DIRECTION.NORTH);
            }
        }

        @install()
        fun fake_slash_grass() {
            if(<0x22DA> == 0x02) {
                // fade_out();
                // sleep(0x20);

                ROOM.FAKE_SLASH_GRASS_X = <CHARACTER.BOY>[ATTRIBUTE.X];
                ROOM.FAKE_SLASH_GRASS_Y = <CHARACTER.BOY>[ATTRIBUTE.Y];

                <CHARACTER.BOY>[ATTRIBUTE.X] = 0x010B;
                <CHARACTER.BOY>[ATTRIBUTE.Y] = 0x0187;
                face(CHARACTER.BOY, DIRECTION.EAST);

                MEMORY.GAIN_WEAPON = 0x18;
                yield();
                // <0x0ABA> = 0x0000;
                if(False) {
                    attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.INVINCIBLE_2);

                    add_enemy(ENEMY.BOY_DERPY, 0x21, 0x30);
                    // animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.LOOP, ANIMATION_ALL.SLASH_1);
                    attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
                    // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
                    attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);
                    face(CHARACTER.LAST_ENTITY, DIRECTION.EAST);
                    sleep(0x05);

                    attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE_2);
                } else {
                    attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.INVISIBLE);
                    // attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.MUTE);
                    animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_ALL.SLASH_1);
                    yield();
                    sound(0x01);
                    // sound(0x0c);
                    // sleep(0x05);
                    animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
                    sleep(0x10);
                    // attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.UNMUTE);
                    attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VISIBLE);
                }
                MEMORY.GAIN_WEAPON = 0x02;
                unset(<0x22DB, 0x10>);

                <CHARACTER.BOY>[ATTRIBUTE.X] = ROOM.FAKE_SLASH_GRASS_X;
                <CHARACTER.BOY>[ATTRIBUTE.Y] = ROOM.FAKE_SLASH_GRASS_Y;

                // sound(0x01);

                // sleep(0x20);
                // fade_in();
            }
        }

        fun init_room() {
            init_map(0x00, 0x06, 0x6e, 0x52);
            default_init_room(True, True);

            subtext(string("West Inbetwixx[END]"));
        }

        @install()
        fun branch_triggered() {
            if(MEMORY.SPOON & 0xff > 0x00) {
                question(string("[0x96]Use Spoon[LF][0x8b]Yes[LF][0x8b]No[END]"));

                if(MEMORY.QUESTION_ANSWER == 0x00) {
                    MEMORY.SPOON & 0xff = MEMORY.SPOON & 0xff - 0x01;
                    set(ROOM.BRANCH_USED);

                    <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.PALETTE] = 0x0800;
                    control_enemy(CHARACTER.SCRIPT_OWNER, False);
                }
            } else {
                dialog(string("...[0x80][0x19][0x81][END]"));
            }
        }

        @install()
        fun transform() {
            control_enemy(BOSS.ID_OWL_1, True);
            control_enemy(BOSS.ID_OWL_2, True);

            destroy(BOSS.ID_OWL_1);

            attribute_bit(BOSS.ID_OWL_2, ATTRIBUTE_BITS.INVINCIBLE);

            animate(BOSS.ID_OWL_2, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.BLACK_OWL_FUSION);

            sleep(0x30);

            add_enemy(ENEMY.BOY_BLACK, 0x00, 0x00);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = BOSS.ID_OWL_2[ATTRIBUTE.X];
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = BOSS.ID_OWL_2[ATTRIBUTE.Y];
            destroy(BOSS.ID_OWL_2);
        }

        @install()
        @async()
        fun grabby_owls() {
            while(True) {
                arg[0x00] = BOSS.ID_OWL_1[ATTRIBUTE.X];
                arg[0x02] = BOSS.ID_OWL_1[ATTRIBUTE.Y];
                arg[0x04] = BOSS.ID_OWL_2[ATTRIBUTE.X];
                arg[0x06] = BOSS.ID_OWL_2[ATTRIBUTE.Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= BOSS.TRANSFORM_DISTANCE) && (arg[0x0a] <= BOSS.TRANSFORM_DISTANCE)) {
                    transform();
                    end();
                }
                yield();

                if(BOSS.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }
            }
        }
        
        @install()
        fun owl_triggered() {
            sleep(0x30);
            animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ALL.SLASH_2);
        }

        @install()
        fun quest() {
            question(string("[0x96]Cut grass?[LF][0x8b]Yes[LF][0x8b]No[END]"));

            if(MEMORY.QUESTION_ANSWER == 0x00) {
                // fake_slash_grass();

                sleep(0x30);
                <0x2834> = BOSS.ID_OWL_1;
                _heel(<0x2834>, 0x00, 0x00);
            }
        }

        fun fake_slash_grass_npc() {
            add_enemy_with_flags(ENEMY.VILLAGER_1_1, 0x36, 0x49, FLAG_ENEMY.INACTIVE);
            face(CHARACTER.LAST_ENTITY, DIRECTION.WEST);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(quest));
        }

        fun trigger_enter() {
            fake_slash_grass();
            // fake_slash_grass_npc();
            
            if!(ROOM.BRANCH_USED) {
                branch_lady(0x58, 0x0f, reference(branch_triggered));
            }

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                add_enemy(ENEMY.RAPTOR_GREEN, 0x5c, 0x26);
            }

            add_enemy(ENEMY.OWL_BLACK, 0x2d, 0x21);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = SYSTEM.HP_MAX;
            store_last_entity(BOSS.ID_OWL_1);

            add_enemy(ENEMY.OWL_BLACK, 0x47, 0x42);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = SYSTEM.HP_MAX;
            store_last_entity(BOSS.ID_OWL_2);
            animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ALL.SLASH_2);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(owl_triggered));
            face(CHARACTER.LAST_ENTITY, DIRECTION.SOUTH);

            init_room();
            
            grabby_owls();
        }
    };

    map west_hut_outside(0x33) {
        enum entrance {
            hut = entrance(0x13, 0x13, DIRECTION.SOUTH), // TODO: 13/15
            east = entrance(0x25, 0x12, DIRECTION.WEST),

            backdoor = entrance(0x0f, 0x0f, DIRECTION.WEST),
        }

        enum soundtrack {
            default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                map_transition(west_hut_inside, door, DIRECTION.NORTH);
            },
            stepon_1 = @install() fun test() {
                map_transition(west_inbetwixx, west, DIRECTION.EAST);
            }
        }

        @install()
        fun secret_room_triggered() {
            map_transition(potato_room, stairs, DIRECTION.WEST);
        }

        fun trigger_enter() {

            default_init_room(True, True);

            // add_enemy(ENEMY.PLACEHOLDER, 0x0d, 0x0e);
            add_enemy(ENEMY.PLACEHOLDER, 0x0d, 0x12);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(secret_room_triggered));
        }
    };

    map potato_room(0x60) {
        enum entrance {
            stairs = entrance(0x29, 0x0d, DIRECTION.WEST)
        }

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                map_transition(west_hut_outside, backdoor, DIRECTION.EAST);
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
        }

        fun trigger_enter() {
            default_init_room(True, False);
        }
    };

    map west_hut_inside(0x34) {
        enum entrance {
            door = entrance(0x12, 0x23, DIRECTION.NORTH)
        }

        enum soundtrack {
            default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            CLUE_1 = flag(),
            CLUE_2 = flag(),
        }

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                map_transition(west_hut_outside, hut, DIRECTION.SOUTH);
            }
        }

        enum b_trigger {
            gourd_1  = @install() fun test() {
                nop();
            },
            gourd_2 = @install() fun test() {
                object[0x02] = 0x01; // unload gourd_2
                subtext(string("Locked away childrens toys.[END]"));
                set(ROOM.CLUE_1);
            },
            gourd_3 = @install() fun test() {
                object[0x01] = 0x01; // unload gourd_3
                subtext(string("Cheap religious artifacts.[END]"));
                set(ROOM.CLUE_2);
            },
        }

        @install()
        fun trap_door() {
            if!(ROOM.CLUE_1) {
                end();
            }
            if!(ROOM.CLUE_2) {
                end();
            }
            
            question(string("[0x96]A trap door. Do you want to enter it?[LF][0x8b]Yes[LF][0x8b]No[END]"));

            if(MEMORY.QUESTION_ANSWER == 0x00) {
                map_transition(basement_0_start, center, DIRECTION.NONE);
            }
        }

        fun trigger_enter() {
            object[0x00] = 0x01; // unload gourd_1
            if(ROOM.CLUE_1) {
                object[0x02] = 0x01; // unload gourd_2
            }
            if(ROOM.CLUE_2) {
                object[0x01] = 0x01; // unload gourd_3
            }

            add_enemy(ENEMY.PLACEHOLDER, 0x0f, 0x12);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(trap_door));

            default_init_room(True, False);
        }
    };
};

area altus_plateau_entry() {
    enum AREA_ALTUS_PLATEAU {
        ENTRANCE_UNLOCKED = flag(),
    }

    map volcano(0x69) {
        enum entrance {
            cutscene_north_1 = entrance(0x4a, 0x38, DIRECTION.NONE),
            cutscene_north_2 = entrance(0x5f, 0x1b, DIRECTION.NONE),
            east = entrance(0x6d, 0x83, DIRECTION.WEST), // 0x6b, 0x83
            south = entrance(0x1b, 0x9d, DIRECTION.NORTH),

            cave_west = entrance(0x0b, 0x70, DIRECTION.SOUTH),
            cave_center = entrance(0x3f, 0x4a, DIRECTION.SOUTH),
            cave_east = entrance(0x4d, 0x6a, DIRECTION.SOUTH),

            cave_gauge = entrance(0x5f, 0x16, DIRECTION.SOUTH),
        }

        enum soundtrack {
            default = soundtrack(MUSIC.JUNGLE_AMBIENT_BIRDS, 0xff)
        }

        enum stepon_trigger {
            tunnel_gauge = @install() fun test() {
                map_transition(cave_gauge, south, DIRECTION.NORTH);
            },
            stepon_1 = @install() fun test() {
                subtext(string("step-on? 1 [END]"));
            },
            stepon_2 = @install() fun test() {
                subtext(string("step-on? 2 [END]"));
            },
            stepon_3 = @install() fun test() {
                subtext(string("step-on? 3 [END]"));
            },
            stepon_4 = @install() fun test() {
                subtext(string("step-on? 4 [END]"));
            },
            stepon_5 = @install() fun test() {
                subtext(string("step-on? 5 [END]"));
            },
            stepon_6 = @install() fun test() {
                subtext(string("step-on? 6 [END]"));
            },
            stepon_7 = @install() fun test() {
                subtext(string("step-on? 7 [END]"));
            },
            stepon_8 = @install() fun test() {
                subtext(string("step-on? 8 [END]"));
            },
            stepon_9 = @install() fun test() {
                subtext(string("step-on? 9 [END]"));
            },

            stepon_10 = @install() fun test() {
                subtext(string("step-on? 10 [END]"));
            },
            exit_south = @install() fun test() {
                map_transition(west_inbetwixx, north, DIRECTION.SOUTH);
            },
            cave_east = @install() fun test() {
                subtext(string("step-on? 12 [END]"));
            },
            cave_west = @install() fun test() {
                if(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED) {
                    map_transition(stairs, stairs_west_bottom, DIRECTION.NORTH);
                } else {
                    subtext(string("Does not open from this side.[END]"));
                }
            },
            cave_center = @install() fun test() {
                subtext(string("step-on? 14 [END]"));
            },
            exit_east = @install() fun test() {
                map_transition(northwest_inbetwixx, west, DIRECTION.EAST);
            },
            stepon_16 = @install() fun test() {
                subtext(string("step-on? 16 [END]"));
            },
            stepon_17 = @install() fun test() {
                subtext(string("step-on? 17 [END]"));
            },
            stepon_18 = @install() fun test() {
                subtext(string("step-on? 18 [END]"));
            },
            stepon_19 = @install() fun test() {
                subtext(string("step-on? 19 [END]"));
            },

            stepon_20 = @install() fun test() {
                subtext(string("step-on? 20 [END]"));
            },
            stepon_21 = @install() fun test() {
                subtext(string("step-on? 21 [END]"));
            },
            stepon_22 = @install() fun test() {
                subtext(string("step-on? 22 [END]"));
            },
            stepon_23 = @install() fun test() {
                subtext(string("step-on? 23 [END]"));
            },
            stepon_24 = @install() fun test() {
                subtext(string("step-on? 24 [END]"));
            },
            stepon_25 = @install() fun test() {
                subtext(string("step-on? 25 [END]"));
            },
            stepon_26 = @install() fun test() {
                subtext(string("step-on? 26 [END]"));
            },
            stepon_27 = @install() fun test() {
                subtext(string("step-on? 27 [END]"));
            },
            stepon_28 = @install() fun test() {
                subtext(string("step-on? 28 [END]"));
            },
            stepon_29 = @install() fun test() {
                subtext(string("step-on? 29 [END]"));
            },

            stepon_30 = @install() fun test() {
                subtext(string("step-on? 30 [END]"));
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            b_trigger_16 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
            b_trigger_17 = @install() fun test() {
                subtext(string("b? 17 [END]"));
            },
            b_trigger_18 = @install() fun test() {
                subtext(string("b? 18 [END]"));
            },
            b_trigger_19 = @install() fun test() {
                subtext(string("b? 19 [END]"));
            },

            b_trigger_20 = @install() fun test() {
                subtext(string("b? 20 [END]"));
            },
            b_trigger_21 = @install() fun test() {
                subtext(string("b? 21 [END]"));
            },
            b_trigger_22 = @install() fun test() {
                subtext(string("b? 22 [END]"));
            },
            b_trigger_23 = @install() fun test() {
                subtext(string("b? 23 [END]"));
            },
            b_trigger_24 = @install() fun test() {
                subtext(string("b? 24 [END]"));
            },
            b_trigger_25 = @install() fun test() {
                subtext(string("b? 25 [END]"));
            },
            b_trigger_26 = @install() fun test() {
                subtext(string("b? 26 [END]"));
            },
            b_trigger_27 = @install() fun test() {
                subtext(string("b? 27 [END]"));
            },
            b_trigger_28 = @install() fun test() {
                subtext(string("b? 28 [END]"));
            },
            b_trigger_29 = @install() fun test() {
                subtext(string("b? 29 [END]"));
            },

            b_trigger_30 = @install() fun test() {
                subtext(string("b? 30 [END]"));
            },
            b_trigger_31 = @install() fun test() {
                subtext(string("b? 31 [END]"));
            },
            b_trigger_32 = @install() fun test() {
                subtext(string("b? 32 [END]"));
            },
        }

        fun trigger_enter() {
            default_init_room(True, True);
        }
    };

    map cave_gauge(0x64) {
        enum entrance {
            south = entrance(0x15, 0x23, DIRECTION.NORTH)
        }

        enum stepon_trigger {
            exit_south = @install() fun test() {
                map_transition(volcano, cave_gauge, DIRECTION.SOUTH);
            },
            exit_teleporter = @install() fun test() {
                subtext(string("exit? 1 [END]"));
            },
        }

        fun trigger_enter() {
            fade_in();
        }
    };

    area altus_plateau_entry() {
        map stairs(0x1a) {
            enum entrance {
                stairs_east_top = entrance(0x43, 0x03, DIRECTION.SOUTH),
                stairs_west_top = entrance(0x15, 0x05, DIRECTION.SOUTH),
                stairs_west_bottom = entrance(0x5f, 0xa1, DIRECTION.NORTH),
            }

            enum stepon_trigger {
                cutscene_energy_core = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_stairs_west_bottom = @install() fun test() {
                    map_transition(volcano, cave_west, DIRECTION.SOUTH);
                },
                exit_stairs_west_top = @install() fun test() {
                    map_transition(chessboard, stairs_east, DIRECTION.NORTH);
                },
                exit_stairs_east_top = @install() fun test() {
                    subtext(string("exit? 3 [END]"));
                },
            }

            enum b_trigger {
                pickup_energy_core = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
            }

            fun trigger_enter() {
                fade_in();
            }
        };

        map chessboard(0x19) {
            enum entrance {
                east = entrance(0x93, 0x42, DIRECTION.WEST),
                west = entrance(0x01, 0x42, DIRECTION.EAST),
                stairs_east = entrance(0x53, 0x4c, DIRECTION.WEST),
                stairs_west = entrance(0x40, 0x40, DIRECTION.EAST), // 0x4c, 0x40

                crash = entrance(0x54, 0x39, DIRECTION.NONE),
            }

            enum stepon_trigger {
                stairs_east = @install() fun test() {
                    map_transition(stairs, stairs_west_top, DIRECTION.EAST);
                },
                spawn_boss = @install() fun test() {
                    subtext(string("exit? 1 [END]"));
                },
                exit_west = @install() fun test() {
                    map_transition(gate, east, DIRECTION.WEST);
                },
                exit_east = @install() fun test() {
                    map_transition(well, west, DIRECTION.EAST);
                },
                stairs_west = @install() fun test() {
                    map_transition(hidden_stairs, stairs, DIRECTION.WEST);
                }
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                b_trigger_2 = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
                b_trigger_3 = @install() fun test() {
                    subtext(string("b? 3 [END]"));
                },
                b_trigger_4 = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                b_trigger_5 = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                b_trigger_7 = @install() fun test() {
                    subtext(string("b? 7 [END]"));
                },
                b_trigger_8 = @install() fun test() {
                    subtext(string("b? 8 [END]"));
                },
                b_trigger_9 = @install() fun test() {
                    subtext(string("b? 9 [END]"));
                },

                b_trigger_10 = @install() fun test() {
                    subtext(string("b? 10 [END]"));
                },
                b_trigger_11 = @install() fun test() {
                    subtext(string("b? 11 [END]"));
                },
                b_trigger_12 = @install() fun test() {
                    subtext(string("b? 12 [END]"));
                },
                b_trigger_13 = @install() fun test() {
                    subtext(string("b? 13 [END]"));
                },
                b_trigger_14 = @install() fun test() {
                    subtext(string("b? 14 [END]"));
                },
                b_trigger_15 = @install() fun test() {
                    subtext(string("b? 15 [END]"));
                },
                b_trigger_16 = @install() fun test() {
                    subtext(string("b? 16 [END]"));
                },
                b_trigger_17 = @install() fun test() {
                    subtext(string("b? 17 [END]"));
                },
                b_trigger_18 = @install() fun test() {
                    subtext(string("b? 18 [END]"));
                }
            }

            enum ROOM {
                STAIRS_WEST_REVEALED = flag(),
            }

            @install()
            fun revealer_triggered() {
                destroy(CHARACTER.SCRIPT_OWNER);

                set(ROOM.STAIRS_WEST_REVEALED);

                object[0x00] = 0x02;
                sleep(0x10);
                object[0x00] = 0x01;
                sleep(0x10);
                object[0x00] = 0x00;
            }

            fun trigger_enter() {
                object[0x00] = 0x7e; // close stairs_west
                object[0x01] = 0x7e; // close stairs_east
                // object[0x02] = 0x01; // close wall_2
                // object[0x03] = 0x01; // close wall_1
                // object[0x04] = 0x01; // remove bridge_east
                // object[0x05] = 0x01; // remove bridge_west

                if!(ROOM.STAIRS_WEST_REVEALED) {
                    add_enemy(ENEMY.REVEALER_TARGET_ENTITY, 0x3e, 0x40);
                    special_script(SPECIAL_SCRIPTS.REVEALER, reference(revealer_triggered));
                } else {
                    object[0x00] = 0x00;
                }

                default_init_room(False, False);
            }
        };

        map hidden_stairs(0x60) {
            enum entrance {
                stairs = entrance(0x29, 0x0d, DIRECTION.WEST)
            }

            enum stepon_trigger {
                stepon_0 = @install() fun test() {
                    map_transition(chessboard, stairs_west, DIRECTION.EAST);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                b_trigger_2 = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
            }

            fun trigger_enter() {
                default_init_room(True, False);
            }
        };

        map well(0x6c) {
            enum entrance {
                west = entrance(0x01, 0x1c, DIRECTION.EAST),

                crash = entrance(0x38, 0x18, DIRECTION.NONE),
            }

            enum stepon_trigger {
                exit_west = @install() fun test() {
                    map_transition(chessboard, east, DIRECTION.WEST);
                },
            }

            enum b_trigger {
                barrier = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
            }

            @install()
            @async()
            fun crash_windwalker() {
                // add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0x5b, 0x39);
                add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0x2a, 0x0c);
                attach_to_script(CHARACTER.LAST_ENTITY);
                <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.FALLING_HEIGHT] = 0x1fff;
                sleep(0x80);
                <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.JUMP_HEIGHT] = 0x20;
                
                add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_3, 0x00, 0x00);
                arg[0x00] = <CHARACTER.LAST_ENTITY>;

                arg[0x00][ATTRIBUTE.X] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X] + 0x10;
                arg[0x00][ATTRIBUTE.Y] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y] + 0x10;

                add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_3, 0x00, 0x00);
                arg[0x02] = <CHARACTER.LAST_ENTITY>;

                arg[0x02][ATTRIBUTE.X] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X] - 0x10;
                arg[0x02][ATTRIBUTE.Y] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y] - 0x10;

                sleep(0x50);
                _destroy(arg[0x02]);
                sleep(0x10);
                destroy(CHARACTER.SCRIPT_OWNER);
                sleep(0x60);
                _destroy(arg[0x00]);
            }

            fun trigger_enter() {
                if!(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED) {
                    set(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED);

                    if!(FLAG.IN_ANIMATION) {
                        crash_both();
                        crash_windwalker();
                    }
                }

                bonfire(0x1e, 0x14);
                
                default_init_room(False, False);
            }
        };

        map gate(0x76) {
            enum entrance {
                north = entrance(0x2c, 0x09, DIRECTION.SOUTH),
                east = entrance(0x67, 0x71, DIRECTION.WEST),
            }

            enum stepon_trigger {
                east_north = @install() fun test() {
                    map_transition(castle_center, south_2, DIRECTION.NORTH);
                },
                exit_east = @install() fun test() {
                    map_transition(chessboard, west, DIRECTION.EAST);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                b_trigger_2 = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
                b_trigger_3 = @install() fun test() {
                    subtext(string("b? 3 [END]"));
                },
                b_trigger_4 = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                b_trigger_5 = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                b_trigger_7 = @install() fun test() {
                    subtext(string("b? 7 [END]"));
                },
                b_trigger_8 = @install() fun test() {
                    subtext(string("b? 8 [END]"));
                },
                b_trigger_9 = @install() fun test() {
                    subtext(string("b? 9 [END]"));
                },

                b_trigger_10 = @install() fun test() {
                    subtext(string("b? 10 [END]"));
                },
                b_trigger_11 = @install() fun test() {
                    subtext(string("b? 11 [END]"));
                },
                b_trigger_12 = @install() fun test() {
                    subtext(string("b? 12 [END]"));
                },
                b_trigger_13 = @install() fun test() {
                    subtext(string("b? 13 [END]"));
                },
                b_trigger_14 = @install() fun test() {
                    subtext(string("b? 14 [END]"));
                },
                b_trigger_15 = @install() fun test() {
                    subtext(string("b? 15 [END]"));
                },
                b_trigger_16 = @install() fun test() {
                    subtext(string("b? 16 [END]"));
                },
                b_trigger_17 = @install() fun test() {
                    subtext(string("b? 17 [END]"));
                },
                b_trigger_18 = @install() fun test() {
                    subtext(string("b? 18 [END]"));
                },
                b_trigger_19 = @install() fun test() {
                    subtext(string("b? 19 [END]"));
                },
            }

            fun trigger_enter() {
                fade_in();
            }
        };

        area castle() {
            map castle_center(0x1c) {
                enum entrance {
                    north = entrance(0x40, 0x04, DIRECTION.SOUTH),
                    south_1 = entrance(0x72, 0x38, DIRECTION.NORTH),
                    south_2 = entrance(0x4c, 0x38, DIRECTION.NORTH),
                    south_3 = entrance(0x08, 0x38, DIRECTION.NORTH),
                }

                enum stepon_trigger {
                    exit_north = @install() fun test() {
                        map_transition(castle_throne_room, south, DIRECTION.NORTH);
                    },
                    exit_south_3 = @install() fun test() {
                        map_transition(market_west, north, DIRECTION.SOUTH);
                    },
                    exit_south_2 = @install() fun test() {
                        map_transition(gate, north, DIRECTION.SOUTH);
                    },
                    exit_south_1 = @install() fun test() {
                        map_transition(castle_bridges, west, DIRECTION.SOUTH);
                    },
                    guard_right = @install() fun test() {
                        subtext(string("exit? 4 [END]"));
                    },
                    guard_left = @install() fun test() {
                        subtext(string("exit? 5 [END]"));
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() fun test() {
                        subtext(string("b? 0 [END]"));
                    },
                    b_trigger_1 = @install() fun test() {
                        subtext(string("b? 1 [END]"));
                    },
                    b_trigger_2 = @install() fun test() {
                        subtext(string("b? 2 [END]"));
                    },
                    b_trigger_3 = @install() fun test() {
                        subtext(string("b? 3 [END]"));
                    },
                    guard = @install() fun test() {
                        subtext(string("b? 4 [END]"));
                    },
                    b_trigger_5 = @install() fun test() {
                        subtext(string("b? 5 [END]"));
                    },
                    b_trigger_6 = @install() fun test() {
                        subtext(string("b? 6 [END]"));
                    },
                    b_trigger_7 = @install() fun test() {
                        subtext(string("b? 7 [END]"));
                    },
                    b_trigger_8 = @install() fun test() {
                        subtext(string("b? 8 [END]"));
                    },
                    b_trigger_9 = @install() fun test() {
                        subtext(string("b? 9 [END]"));
                    },

                    b_trigger_10 = @install() fun test() {
                        subtext(string("b? 10 [END]"));
                    },
                    b_trigger_11 = @install() fun test() {
                        subtext(string("b? 11 [END]"));
                    },
                    b_trigger_12 = @install() fun test() {
                        subtext(string("b? 12 [END]"));
                    },
                    b_trigger_13 = @install() fun test() {
                        subtext(string("b? 13 [END]"));
                    },
                    b_trigger_14 = @install() fun test() {
                        subtext(string("b? 14 [END]"));
                    },
                    b_trigger_15 = @install() fun test() {
                        subtext(string("b? 15 [END]"));
                    },
                    b_trigger_16 = @install() fun test() {
                        subtext(string("b? 16 [END]"));
                    },
                    b_trigger_17 = @install() fun test() {
                        subtext(string("b? 17 [END]"));
                    },
                    b_trigger_18 = @install() fun test() {
                        subtext(string("b? 18 [END]"));
                    },
                    b_trigger_19 = @install() fun test() {
                        subtext(string("b? 19 [END]"));
                    },
                }
                
                fun trigger_enter() {
                    fade_in();
                }
            };

            map market_west(0x4e) {
                enum entrance {
                    north = entrance(0x2a, 0x01, DIRECTION.SOUTH),
                    east = entrance(0x39, 0xc3, DIRECTION.WEST),
                }

                enum stepon_trigger {
                    exit_north = @install() fun test() {
                        map_transition(castle_center, south_3, DIRECTION.NORTH);
                    },
                    exit_east = @install() fun test() {
                        map_transition(castle_fire_pit, west, DIRECTION.EAST);
                    },
                }

                fun trigger_enter() {
                    fade_in();
                }
            };

            map castle_throne_room(0x4d) {
                enum entrance {
                    south = entrance(0x31, 0x21, DIRECTION.NORTH),

                    cinematic_enter = entrance(0x37, 0x01, DIRECTION.NORTH),
                }

                enum ROOM {
                    FAKE_EXIT_ID = memory_tmp(),
                }

                fun fake_exit() {
                    map_transition(castle_center, north, DIRECTION.SOUTH);
                }

                @install()
                @async()
                fun fake_exit_scanner() {
                    attach_to_script(ROOM.FAKE_EXIT_ID);

                    while(True) {
                        arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                        arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
                        arg[0x04] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
                        arg[0x06] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

                        if(arg[0x00] < arg[0x04]) {
                            arg[0x08] = arg[0x04] - arg[0x00];
                        } else {
                            arg[0x08] = arg[0x00] - arg[0x04];
                        }

                        if(arg[0x02] < arg[0x06]) {
                            arg[0x0a] = arg[0x06] - arg[0x02];
                        } else {
                            arg[0x0a] = arg[0x02] - arg[0x06];
                        }

                        if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                            fake_exit();
                            end();
                        }

                        yield();
                    }
                }

                fun trigger_enter() {
                    fade_in();

                    add_enemy(ENEMY.PLACEHOLDER, 0x31, 0x21);
                    ROOM.FAKE_EXIT_ID = <CHARACTER.LAST_ENTITY>;
                    sleep(0x10);
                    fake_exit_scanner();
                }
            };

            map castle_fire_pit(0x3a) {
                enum entrance {
                    west = entrance(0x05, 0x1b, DIRECTION.EAST),

                    cutscene_landing = entrance(0x0b, 0x1b, DIRECTION.NONE),
                }

                enum stepon_trigger {
                    b_trigger_0 = @install() fun test() {
                        subtext(string("exit? 0 [END]"));
                    },
                    exit_west = @install() fun test() {
                        map_transition(market_west, east, DIRECTION.WEST);
                    },
                }

                fun trigger_enter() {
                    fade_in();
                }
            };

            map castle_bridges(0x70) {
                enum entrance {
                    east = entrance(0x8b, 0x28, DIRECTION.WEST),
                    west = entrance(0x01, 0x29, DIRECTION.EAST),

                    door_east = entrance(0x5f, 0x28, DIRECTION.EAST),
                    door_west = entrance(0x2d, 0x29, DIRECTION.WEST),

                    balcony_east_1 = entrance(0x4f, 0x0f, DIRECTION.EAST),
                    balcony_east_2 = entrance(0x4f, 0x19, DIRECTION.EAST),
                    balcony_east_3 = entrance(0x4f, 0x23, DIRECTION.EAST),

                    balcony_west_1 = entrance(0x3f, 0x23, DIRECTION.WEST),
                    balcony_west_2 = entrance(0x3f, 0x19, DIRECTION.WEST),
                    balcony_west_3 = entrance(0x3f, 0x0f, DIRECTION.WEST),
                }

                enum stepon_trigger {
                    exit_door_east = @install() fun test() {
                        subtext(string("exit? 0 [END]"));
                    },
                    exit_door_west = @install() fun test() {
                        map_transition(castle_balconies, stairs_west, DIRECTION.EAST);
                    },
                    exit_east = @install() fun test() {
                        subtext(string("exit? 2 [END]"));
                    },
                    balcony_east_3 = @install() fun test() {
                        subtext(string("exit? 3 [END]"));
                    },
                    balcony_east_2 = @install() fun test() {
                        subtext(string("exit? 4 [END]"));
                    },
                    balcony_east_1 = @install() fun test() {
                        subtext(string("exit? 5 [END]"));
                    },
                    exit_west = @install() fun test() {
                        map_transition(castle_center, south_1, DIRECTION.WEST);
                    },
                    balcony_west_1 = @install() fun test() {
                        map_transition(castle_balconies, balcony_west_1, DIRECTION.EAST);
                    },
                    balcony_west_2 = @install() fun test() {
                        map_transition(castle_balconies, balcony_west_2, DIRECTION.EAST);
                    },
                    balcony_west_3 = @install() fun test() {
                        map_transition(castle_balconies, balcony_west_3, DIRECTION.EAST);
                    },
                }

                fun trigger_enter() {
                    init_map(0x00, 0x00, 0x3c, 0x74);
                    
                    fade_in();
                }
            };

            map castle_balconies(0x72) {
                enum entrance {
                    balcony_east_1 = entrance(0x75, 0x1a, DIRECTION.WEST),
                    balcony_east_2 = entrance(0x75, 0x3c, DIRECTION.WEST),
                    balcony_east_3 = entrance(0x75, 0x5e, DIRECTION.WEST),

                    balcony_west_1 = entrance(0x05, 0x5e, DIRECTION.EAST),
                    balcony_west_2 = entrance(0x05, 0x3c, DIRECTION.EAST),
                    balcony_west_3 = entrance(0x05, 0x1a, DIRECTION.EAST),

                    stairs_east = entrance(0x45, 0x39, DIRECTION.EAST),
                    stairs_west = entrance(0x35, 0x39, DIRECTION.WEST),

                    vent_east_1 = entrance(0x67, 0x23, DIRECTION.NONE),
                    vent_east_2 = entrance(0x67, 0x67, DIRECTION.NONE),

                    vent_west_1 = entrance(0x13, 0x67, DIRECTION.NONE),
                    vent_west_2 = entrance(0x13, 0x45, DIRECTION.NONE),
                    vent_west_3 = entrance(0x13, 0x23, DIRECTION.NONE),
                }

                enum stepon_trigger {
                    door_west_3 = @install() fun test() {
                        subtext(string("exit? 0 [END]"));
                    },
                    door_west_2 = @install() fun test() {
                        subtext(string("exit? 1 [END]"));
                    },
                    door_west_1 = @install() fun test() {
                        subtext(string("exit? 2 [END]"));
                    },
                    door_east_3 = @install() fun test() {
                        subtext(string("exit? 3 [END]"));
                    },
                    door_east_2 = @install() fun test() {
                        subtext(string("exit? 4 [END]"));
                    },
                    door_east_1 = @install() fun test() {
                        subtext(string("exit? 5 [END]"));
                    },
                    vent_west_2 = @install() fun test() {
                        subtext(string("exit? 6 [END]"));
                    },
                    vent_west_1 = @install() fun test() {
                        subtext(string("exit? 7 [END]"));
                    },
                    vent_west_1 = @install() fun test() {
                        subtext(string("exit? 8 [END]"));
                    },
                    vent_west_2 = @install() fun test() {
                        subtext(string("exit? 9 [END]"));
                    },

                    vent_west_3 = @install() fun test() {
                        subtext(string("exit? 10 [END]"));
                    },
                    stairs_east = @install() fun test() {
                        subtext(string("exit? 11 [END]"));
                    },
                    stairs_west = @install() fun test() {
                        map_transition(castle_bridges, door_west, DIRECTION.EAST);
                    },
                    balcony_east_3 = @install() fun test() {
                        subtext(string("exit? 13 [END]"));
                    },
                    balcony_east_2 = @install() fun test() {
                        subtext(string("exit? 14 [END]"));
                    },
                    balcony_east_1 = @install() fun test() {
                        subtext(string("exit? 15 [END]"));
                    },
                    balcony_west_1 = @install() fun test() {
                        map_transition(castle_bridges, balcony_west_1, DIRECTION.WEST);
                    },
                    balcony_west_2 = @install() fun test() {
                        map_transition(castle_bridges, balcony_west_2, DIRECTION.WEST);
                    },
                    balcony_west_3 = @install() fun test() {
                        map_transition(castle_bridges, balcony_west_3, DIRECTION.WEST);
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() fun test() {
                        subtext(string("b? 0 [END]"));
                    },
                    b_trigger_1 = @install() fun test() {
                        subtext(string("b? 1 [END]"));
                    },
                    b_trigger_2 = @install() fun test() {
                        subtext(string("b? 2 [END]"));
                    },
                    b_trigger_3 = @install() fun test() {
                        subtext(string("b? 3 [END]"));
                    },
                    b_trigger_4 = @install() fun test() {
                        subtext(string("b? 4 [END]"));
                    },
                    b_trigger_5 = @install() fun test() {
                        subtext(string("b? 5 [END]"));
                    },
                    b_trigger_6 = @install() fun test() {
                        subtext(string("b? 6 [END]"));
                    },
                    b_trigger_7 = @install() fun test() {
                        subtext(string("b? 7 [END]"));
                    },
                    b_trigger_8 = @install() fun test() {
                        subtext(string("b? 8 [END]"));
                    },
                    b_trigger_9 = @install() fun test() {
                        subtext(string("b? 9 [END]"));
                    },

                    b_trigger_10 = @install() fun test() {
                        subtext(string("b? 10 [END]"));
                    },
                    b_trigger_11 = @install() fun test() {
                        subtext(string("b? 11 [END]"));
                    },
                    b_trigger_12 = @install() fun test() {
                        subtext(string("b? 12 [END]"));
                    },
                    b_trigger_13 = @install() fun test() {
                        subtext(string("b? 13 [END]"));
                    },
                    b_trigger_14 = @install() fun test() {
                        subtext(string("b? 14 [END]"));
                    },
                    b_trigger_15 = @install() fun test() {
                        subtext(string("b? 15 [END]"));
                    },
                    b_trigger_16 = @install() fun test() {
                        subtext(string("b? 16 [END]"));
                    },
                    b_trigger_17 = @install() fun test() {
                        subtext(string("b? 17 [END]"));
                    },
                }

                fun trigger_enter() {
                    object[0x00] = 0x7e;
                    object[0x01] = 0x7e;
                    object[0x02] = 0x7e;

                    fade_in();
                }
            };
        };
    };
};

area northwest_inbetwixx() {
    map northwest_inbetwixx(0x07) {
        enum entrance {
            east = entrance(0x44, 0x44, DIRECTION.WEST),
            west = entrance(0x01, 0x3d, DIRECTION.EAST),
            cave = entrance(0x41, 0x0b, DIRECTION.SOUTH)
        }

        enum soundtrack {
            default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum stepon_trigger {
            lift_west = @install() fun test() {
                subtext(string("step-on? 0 [END]"));
            },
            lift_east = @install() fun test() {
                subtext(string("step-on? 1 [END]"));
            },
            exit_west = @install() fun test() {
                map_transition(volcano, east, DIRECTION.WEST);
            },
            bridge_east = @install() fun test() {
                // pit_act2_between(0x0250);

                subtext(string("step-on? 3 [END]"));
            },
            bridge_west = @install() fun test() {
                subtext(string("step-on? 4 [END]"));
            },
            stepon_5 = @install() fun test() {
                subtext(string("step-on? 5 [END]"));
            },
            stepon_6 = @install() fun test() {
                map_transition(northern_waterfall, south, DIRECTION.NORTH);
            },
            stepon_7 = @install() fun test() {
                subtext(string("step-on? 7 [END]"));
            },
            stepon_8 = @install() fun test() {
                subtext(string("step-on? 8 [END]"));
            },
            exit_west = @install() fun test() {
                map_transition(inbetwixx, west_2, DIRECTION.EAST);
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                _axe2_wall(0x00);
            }
        }

        enum ROOM {
            DEBUG = False,

            SECRET_PASSAGE_TRIGGER = memory_tmp(),
            SECRET_PASSAGE_DISTANCE = 0x10,
        }

        @install()
        @async()
        fun hidden_exit_check() {
            while(True) {
                arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
                arg[0x04] = ROOM.SECRET_PASSAGE_TRIGGER[ATTRIBUTE.X];
                arg[0x06] = ROOM.SECRET_PASSAGE_TRIGGER[ATTRIBUTE.Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= ROOM.SECRET_PASSAGE_DISTANCE) && (arg[0x0a] <= ROOM.SECRET_PASSAGE_DISTANCE)) {
                    map_transition(river, right, DIRECTION.NORTH);
                    end();
                }
                yield();

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }
            }
        }
        
        fun trigger_enter() {
            default_init_room(True, True);

            subtext(string("North West Inbetwixx[END]"));

            add_enemy(ENEMY.PLACEHOLDER, 0x17, 0x00);
            ROOM.SECRET_PASSAGE_TRIGGER = <CHARACTER.LAST_ENTITY>;

            hidden_exit_check();
        }
    };

    map northern_waterfall(0x6b) {
        enum entrance {
            south = entrance(0x11, 0x3f, DIRECTION.NORTH)
        }

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                subtext(string("step-on? 0 [END]"));
            },
            stepon_1 = @install() fun test() {
                subtext(string("step-on? 1 [END]"));
            },
            stepon_2 = @install() fun test() {
                subtext(string("step-on? 2 [END]"));
            },
            stepon_3 = @install() fun test() {
                subtext(string("step-on? 3 [END]"));
            },
            stepon_4 = @install() fun test() {
                subtext(string("step-on? 4 [END]"));
            },
            stepon_5 = @install() fun test() {
                subtext(string("step-on? 5 [END]"));
            },
            stepon_6 = @install() fun test() {
                map_transition(northwest_inbetwixx, cave, DIRECTION.SOUTH);
            }
        }

        fun trigger_enter() {
            default_init_room(True, True);
        }
    };
};

area east_inbetwixx() {
    map east_inbetwixx(0x59) {
        enum entrance {
            east = entrance(0x73, 0x22, DIRECTION.WEST),
            cave = entrance(0x42, 0x1a, DIRECTION.SOUTH),
            south_1 = entrance(0x44, 0x9e, DIRECTION.NORTH),
            south_2 = entrance(0x33, 0x9e, DIRECTION.NORTH),
            west_1 = entrance(0x01, 0x2a, DIRECTION.EAST),
            west_2 = entrance(0x01, 0x22, DIRECTION.EAST),
            west_3 = entrance(0x01, 0x15, DIRECTION.EAST)
        }

        enum soundtrack {
            default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            BRANCH_USED = flag(),
        }

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                subtext(string("step-on? 0 [END]"));
            },
            stepon_1 = @install() fun test() {
                subtext(string("step-on? 1 [END]"));
            },
            stepon_2 = @install() fun test() {
                subtext(string("step-on? 2 [END]"));
            },
            stepon_3 = @install() fun test() {
                subtext(string("step-on? 3 [END]"));
            },
            stepon_4 = @install() fun test() {
                subtext(string("step-on? 4 [END]"));
            },
            stepon_5 = @install() fun test() {
                subtext(string("step-on? 5 [END]"));
            },
            stepon_6 = @install() fun test() {
                subtext(string("step-on? 6 [END]"));
            },
            stepon_7 = @install() fun test() {
                subtext(string("step-on? 7 [END]"));
            },
            stepon_8 = @install() fun test() {
                subtext(string("step-on? 8 [END]"));
            },
            stepon_9 = @install() fun test() {
                subtext(string("step-on? 9 [END]"));
            },

            stepon_10 = @install() fun test() {
                subtext(string("step-on? 10 [END]"));
            },
            stepon_11 = @install() fun test() {
                subtext(string("step-on? 11 [END]"));
            },
            stepon_12 = @install() fun test() {
                subtext(string("step-on? 12 [END]"));
            },
            stepon_13 = @install() fun test() {
                subtext(string("step-on? 13 [END]"));
            },
            stepon_14 = @install() fun test() {
                subtext(string("step-on? 14 [END]"));
            },
            stepon_15 = @install() fun test() {
                subtext(string("step-on? 15 [END]"));
            },
            stepon_16 = @install() fun test() {
                subtext(string("step-on? 16 [END]"));
            },
            stepon_17 = @install() fun test() {
                subtext(string("step-on? 17 [END]"));
            },
            stepon_18 = @install() fun test() {
                subtext(string("step-on? 18 [END]"));
            },
            stepon_19 = @install() fun test() {
                subtext(string("step-on? 19 [END]"));
            },

            stepon_20 = @install() fun test() {
                subtext(string("step-on? 20 [END]"));
            },
            stepon_21 = @install() fun test() {
                subtext(string("step-on? 21 [END]"));
            },
            stepon_22 = @install() fun test() {
                subtext(string("step-on? 22 [END]"));
            },
            stepon_23 = @install() fun test() {
                subtext(string("step-on? 23 [END]"));
            },
            exit_west_1 = @install() fun test() {
                map_transition(east_inbetwixx, west_3, DIRECTION.WEST);
            },
            exit_cave = @install() fun test() {
                subtext(string("step-on? 25 [END]"));
            },
            exit_south_1 = @install() fun test() {
                map_transition(east_crossing, crash, DIRECTION.SOUTH);
            },
            exit_south_2 = @install() fun test() {
                map_transition(east_crossing, north, DIRECTION.SOUTH);
            },
            exit_west_2 = @install() fun test() {
                map_transition(inbetwixx, east, DIRECTION.WEST);
            },
            exit_west_3 = @install() fun test() {
                map_transition(east_inbetwixx, west_1, DIRECTION.WEST);
            },

            stepon_30 = @install() fun test() {
                subtext(string("step-on? 30 [END]"));
            },
            stepon_31 = @install() fun test() {
                subtext(string("step-on? 31 [END]"));
            },
            stepon_32 = @install() fun test() {
                subtext(string("step-on? 32 [END]"));
            },
            stepon_33 = @install() fun test() {
                subtext(string("step-on? 33 [END]"));
            },
            stepon_34 = @install() fun test() {
                subtext(string("step-on? 34 [END]"));
            },
            stepon_35 = @install() fun test() {
                subtext(string("step-on? 35 [END]"));
            },
            stepon_36 = @install() fun test() {
                subtext(string("step-on? 36 [END]"));
            },
            stepon_37 = @install() fun test() {
                subtext(string("step-on? 37 [END]"));
            },
            stepon_38 = @install() fun test() {
                subtext(string("step-on? 38 [END]"));
            },
            stepon_39 = @install() fun test() {
                subtext(string("step-on? 39 [END]"));
            },

            stepon_40 = @install() fun test() {
                subtext(string("step-on? 40 [END]"));
            },
            stepon_41 = @install() fun test() {
                subtext(string("step-on? 41 [END]"));
            },
            stepon_42 = @install() fun test() {
                subtext(string("step-on? 42 [END]"));
            },
            stepon_43 = @install() fun test() {
                subtext(string("step-on? 43 [END]"));
            },
            stepon_44 = @install() fun test() {
                subtext(string("step-on? 44 [END]"));
            },
            stepon_45 = @install() fun test() {
                subtext(string("step-on? 45 [END]"));
            },
            stepon_46 = @install() fun test() {
                subtext(string("step-on? 46 [END]"));
            },
            stepon_47 = @install() fun test() {
                subtext(string("step-on? 47 [END]"));
            },
            stepon_48 = @install() fun test() {
                subtext(string("step-on? 48 [END]"));
            },
            stepon_49 = @install() fun test() {
                subtext(string("step-on? 49 [END]"));
            },

            stepon_50 = @install() fun test() {
                subtext(string("step-on? 50 [END]"));
            },
            stepon_51 = @install() fun test() {
                subtext(string("step-on? 51 [END]"));
            },
            stepon_52 = @install() fun test() {
                subtext(string("step-on? 52 [END]"));
            },
            stepon_53 = @install() fun test() {
                subtext(string("step-on? 53 [END]"));
            },
            stepon_54 = @install() fun test() {
                subtext(string("step-on? 54 [END]"));
            },
            stepon_55 = @install() fun test() {
                subtext(string("step-on? 55 [END]"));
            },
            stepon_56 = @install() fun test() {
                subtext(string("step-on? 56 [END]"));
            },
            stepon_57 = @install() fun test() {
                subtext(string("step-on? 57 [END]"));
            },
            stepon_58 = @install() fun test() {
                subtext(string("step-on? 58 [END]"));
            },
            stepon_59 = @install() fun test() {
                subtext(string("step-on? 59 [END]"));
            },

            stepon_60 = @install() fun test() {
                subtext(string("step-on? 60 [END]"));
            },
            stepon_61 = @install() fun test() {
                subtext(string("step-on? 61 [END]"));
            },
            stepon_62 = @install() fun test() {
                subtext(string("step-on? 62 [END]"));
            },
            stepon_63 = @install() fun test() {
                subtext(string("step-on? 63 [END]"));
            },
            exit_east = @install() fun test() {
                map_transition(eastern_barrier, west, DIRECTION.EAST);
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            b_trigger_16 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
            b_trigger_17 = @install() fun test() {
                subtext(string("b? 17 [END]"));
            },
            b_trigger_18 = @install() fun test() {
                subtext(string("b? 18 [END]"));
            },
            b_trigger_19 = @install() fun test() {
                subtext(string("b? 19 [END]"));
            },
            b_trigger_20 = @install() fun test() {
                subtext(string("b? 20 [END]"));
            },
            b_trigger_21 = @install() fun test() {
                subtext(string("b? 21 [END]"));
            },
            b_trigger_22 = @install() fun test() {
                subtext(string("b? 22 [END]"));
            },
            b_trigger_23 = @install() fun test() {
                subtext(string("b? 23 [END]"));
            },
            b_trigger_24 = @install() fun test() {
                subtext(string("b? 24 [END]"));
            },
            b_trigger_25 = @install() fun test() {
                subtext(string("b? 25 [END]"));
            },
            b_trigger_26 = @install() fun test() {
                subtext(string("b? 26 [END]"));
            },
            b_trigger_27 = @install() fun test() {
                subtext(string("b? 27 [END]"));
            }
        }

        @install()
        fun branch_triggered() {
            if(MEMORY.SPOON & 0xff > 0x00) {
                question(string("[0x96]Use Spoon[LF][0x8b]Yes[LF][0x8b]No[END]"));

                if(MEMORY.QUESTION_ANSWER == 0x00) {
                    MEMORY.SPOON & 0xff = MEMORY.SPOON & 0xff - 0x01;
                    set(ROOM.BRANCH_USED);

                    <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.PALETTE] = 0x0800;
                    control_enemy(CHARACTER.SCRIPT_OWNER, False);
                }
            } else {
                dialog(string("...[0x80][0x19][0x81][END]"));
            }
        }

        fun open_sandpits() {
            object[0x03] = 0x04; // 9
            object[0x04] = 0x04; // 10

            object[0x05] = 0x04; // 8
            object[0x06] = 0x04; // 7
            
            object[0x07] = 0x04; // 6

            object[0x08] = 0x04; // 5
            object[0x09] = 0x04; // 4

            object[0x0a] = 0x04; // 3 <- bottleneck
            object[0x0b] = 0x04; // 2

            object[0x0c] = 0x04; // 1_1
            object[0x0d] = 0x04; // 1_2
            object[0x0e] = 0x04; // 1_3
        }

        fun init_room() {
            default_init_room(True, True);
        }

        fun trigger_enter() {
            open_sandpits();

            if!(ROOM.BRANCH_USED) {
                branch_lady(0x4e, 0x2c, reference(branch_triggered));
            }

            add_enemy(ENEMY.MEGATAUR, 0x38, 0x44);
            animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_ENTER);

            init_room();

        }
    };

    map east_crossing(0x4f) {
        enum entrance {
            north = entrance(0x27, 0x01, DIRECTION.SOUTH),
            cave = entrance(0x15, 0x1a, DIRECTION.SOUTH),
            east = entrance(0x3f, 0x4b, DIRECTION.WEST),
            west = entrance(0x01, 0x4b, DIRECTION.EAST),

            crash = entrance(0x32, 0x1e, DIRECTION.NONE),

            elevator_top = entrance(0x0d, 0x2b, DIRECTION.SOUTH),
            elevator_bottom = entrance(0x1b, 0x47, DIRECTION.SOUTH),
        }

        enum ROOM {
            DEBUG = False,

            STONE_TRIGGERED = flag(),
            STONE_DOOR_TRIGGERED = flag(),

            ID_STONE = memory_tmp(),
            ID_STONE_BOMB = memory_tmp(),
            ID_STONE_HOLE = memory_tmp(),
        }

        @install()
        fun ravine_triggered() {
            pit_act2_between(0x00d0);

            sleep(0xd0);

            damage(CHARACTER.BOTH, 0x50, True);
            sleep(0x60);
            yield();

            if(<CHARACTER.BOY>[ATTRIBUTE.HP] > 0x00) {
                map_transition(radahn_arena, center, DIRECTION.NONE);
            }
        }

        enum stepon_trigger {
            ravine_1 = ravine_triggered(),
            ravine_2 = ravine_triggered(),
            ravine_3 = ravine_triggered(),
            ravine_4 = ravine_triggered(),
            ravine_5 = ravine_triggered(),
            ravine_6 = ravine_triggered(),
            ravine_7 = ravine_triggered(),
            ravine_8 = ravine_triggered(),
            ravine_9 = ravine_triggered(),
            ravine_10 = ravine_triggered(),

            ravine_11 = ravine_triggered(),
            ravine_12 = ravine_triggered(),
            ravine_13 = ravine_triggered(),
            ravine_14 = ravine_triggered(),
            ravine_15 = ravine_triggered(),
            ravine_16 = ravine_triggered(),
            ravine_17 = ravine_triggered(),
            ravine_18 = ravine_triggered(),
            ravine_19 = ravine_triggered(),
            exit_east = @install() fun test() {
                map_transition(ship, west, DIRECTION.EAST);
            },

            exit_cave = @install() fun test() {
                if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                    subtext(string("Does not open from this side.[END]"));
                } else {
                    map_transition(radahn_exit, room_nw_west, DIRECTION.NORTH);
                }
            },
            exit_west = @install() fun test() {
                map_transition(eastern_river, east, DIRECTION.WEST);
            },
            elevator_bottom = @install() fun test() {
                map_transition(dungeon_volcano, south_2, DIRECTION.NORTH);
            },
            elevator_top = @install() fun test() {
                map_transition(dungeon_volcano, south_1, DIRECTION.NORTH);
            },
            exit_north = @install() fun test() {
                map_transition(east_inbetwixx, south_2, DIRECTION.NORTH);
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            }
        }

        @install()
        fun stone_triggered() {
            if(<CHARACTER.ACTIVE> == <CHARACTER.BOY>) {
                animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_ALL.SLASH_2);

                <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.JUMP_HEIGHT] = 0x30;
                sleep(0x50);

                object[0x00] = 0x01;
                destroy(CHARACTER.SCRIPT_OWNER);

                set(ROOM.STONE_TRIGGERED);
            }
        }

        @install()
        fun stone_door_triggered() {
            subtext(string("Does not open from this side.[END]"));
        }

        fun tiny_bridge(connected) {
            if(connected) {
                object[0x11] = 0x01;
            } else {
                object[0x11] = 0x00;
            }
        }

        @install()
        fun stone_hole_triggered() {
            set(ROOM.STONE_DOOR_TRIGGERED);

            destroy(ROOM.ID_STONE);
            destroy(ROOM.ID_STONE_BOMB);
            destroy(ROOM.ID_STONE_HOLE);

            tiny_bridge(True);
        }

        @install()
        @async()
        fun stack_stone_bomb() {
            while!(dead(ROOM.ID_STONE)) {
                ROOM.ID_STONE[ATTRIBUTE.X] = ROOM.ID_STONE_BOMB[ATTRIBUTE.X];
                ROOM.ID_STONE[ATTRIBUTE.Y] = ROOM.ID_STONE_BOMB[ATTRIBUTE.Y];
                yield();
            }
        }
        
        @install()
        @async()
        fun stone_hole_scanner() {
            while(True) {
                arg[0x00] = ROOM.ID_STONE[ATTRIBUTE.X];
                arg[0x02] = ROOM.ID_STONE[ATTRIBUTE.Y];
                arg[0x04] = ROOM.ID_STONE_HOLE[ATTRIBUTE.X];
                arg[0x06] = ROOM.ID_STONE_HOLE[ATTRIBUTE.Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x0a) && (arg[0x0a] <= 0x0a)) {
                    stone_hole_triggered();
                    end();
                }

                yield();

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }
            }
        }
        
        fun init_room() {
            default_init_room(True, True);
        }

        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            if!(ROOM.STONE_TRIGGERED) {
                add_enemy(ENEMY.STONE_ROUND, 0x24, 0x18);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(stone_triggered));
            } else {
                object[0x00] = 0x01;
            }

            bonfire(0x2d, 0x44, reference(bonfire_triggered));

            if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                add_enemy(ENEMY.STONE_ROUND, 0x15, 0x1b);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(stone_door_triggered));
            } else if!(ROOM.STONE_DOOR_TRIGGERED) {
                add_enemy(ENEMY.STONE_ROUND, 0x00, 0x00);
                ROOM.ID_STONE = <CHARACTER.LAST_ENTITY>;

                add_enemy(ENEMY.BOMB, 0x15, 0x22);
                ROOM.ID_STONE_BOMB = <CHARACTER.LAST_ENTITY>;
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);

                stack_stone_bomb();

                add_enemy(ENEMY.PLACEHOLDER, 0x2f, 0x2e);
                ROOM.ID_STONE_HOLE = <CHARACTER.LAST_ENTITY>;

                stone_hole_scanner();
            } else {
                tiny_bridge(True);
            }

            init_room();
        }
    };

    map arena_ravine() {
        map radahn_exit(0x3c) {
            enum entrance {
                main_north = entrance(0xd3, 0x3d, DIRECTION.SOUTH),
                main_east = entrance(0xf7, 0x5b, DIRECTION.WEST),
                main_south = entrance(0xd5, 0x95, DIRECTION.NORTH),
                main_west = entrance(0xbb, 0x5d, DIRECTION.EAST),

                cave_outside = entrance(0x54, 0xb1, DIRECTION.NORTH),

                room_nw_north = entrance(0x20, 0x85, DIRECTION.SOUTH),
                room_nw_west = entrance(0x01, 0xa3, DIRECTION.EAST),

                room_es_east = entrance(0x67, 0x1c, DIRECTION.WEST),
                room_es_south = entrance(0x4c, 0x39, DIRECTION.NORTH),

                room_nss_north = entrance(0x9e, 0x05, DIRECTION.SOUTH),
                room_nss_south_1 = entrance(0x9e, 0x37, DIRECTION.NORTH),
                room_nss_south_2 = entrance(0x84, 0x37, DIRECTION.NORTH),

                room_s_south = entrance(0x9e, 0x7b, DIRECTION.NORTH),

                room_alchemist = entrance(0xd0, 0x05, DIRECTION.SOUTH),

                room_ns_north = entrance(0x1c, 0x3d, DIRECTION.SOUTH),
                room_ns_south = entrance(0x22, 0x7b, DIRECTION.NORTH),

                room_nne_north_1 = entrance(0x4c, 0x36, DIRECTION.SOUTH),
                room_nne_north_2 = entrance(0x60, 0x39, DIRECTION.SOUTH),
                room_nne_east = entrance(0x7f, 0x60, DIRECTION.WEST),

                room_sw_south = entrance(0x1c, 0x3b, DIRECTION.NORTH),
                room_sw_west = entrance(0x01, 0x24, DIRECTION.EAST),
            }

            enum stepon_trigger {
                exit_room_nw_north = @install() fun test() {
                    map_transition(radahn_arena, south, DIRECTION.NORTH);
                },
                exit_room_nw_west = @install() fun test() {
                    map_transition(east_crossing, cave, DIRECTION.WEST);
                },
                stepon_2 = @install() fun test() {
                    subtext(string("step-on? 2 [END]"));
                },
                stepon_3 = @install() fun test() {
                    subtext(string("step-on? 3 [END]"));
                },
                stepon_4 = @install() fun test() {
                    subtext(string("step-on? 4 [END]"));
                },
                stepon_5 = @install() fun test() {
                    subtext(string("step-on? 5 [END]"));
                },
                stepon_6 = @install() fun test() {
                    subtext(string("step-on? 6 [END]"));
                },
                stepon_7 = @install() fun test() {
                    subtext(string("step-on? 7 [END]"));
                },
                stepon_8 = @install() fun test() {
                    subtext(string("step-on? 8 [END]"));
                },
                stepon_9 = @install() fun test() {
                    subtext(string("step-on? 9 [END]"));
                },

                stepon_10 = @install() fun test() {
                    subtext(string("step-on? 10 [END]"));
                },
                stepon_11 = @install() fun test() {
                    subtext(string("step-on? 11 [END]"));
                },
                stepon_12 = @install() fun test() {
                    subtext(string("step-on? 12 [END]"));
                },
                stepon_13 = @install() fun test() {
                    subtext(string("step-on? 13 [END]"));
                },
                stepon_14 = @install() fun test() {
                    subtext(string("step-on? 14 [END]"));
                },
                stepon_15 = @install() fun test() {
                    subtext(string("step-on? 15 [END]"));
                },
                stepon_16 = @install() fun test() {
                    subtext(string("step-on? 16 [END]"));
                },
                stepon_17 = @install() fun test() {
                    subtext(string("step-on? 17 [END]"));
                },
                stepon_18 = @install() fun test() {
                    subtext(string("step-on? 18 [END]"));
                },
                stepon_19 = @install() fun test() {
                    subtext(string("step-on? 19 [END]"));
                },

                stepon_20 = @install() fun test() {
                    subtext(string("step-on? 20 [END]"));
                },
            }
            
            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                b_trigger_2 = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
                b_trigger_3 = @install() fun test() {
                    subtext(string("b? 3 [END]"));
                },
                b_trigger_4 = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                b_trigger_5 = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                b_trigger_7 = @install() fun test() {
                    subtext(string("b? 7 [END]"));
                },
                b_trigger_8 = @install() fun test() {
                    subtext(string("b? 8 [END]"));
                },
                b_trigger_9 = @install() fun test() {
                    subtext(string("b? 9 [END]"));
                },

                b_trigger_10 = @install() fun test() {
                    subtext(string("b? 10 [END]"));
                },
                b_trigger_11 = @install() fun test() {
                    subtext(string("b? 11 [END]"));
                },
                b_trigger_12 = @install() fun test() {
                    subtext(string("b? 12 [END]"));
                },
                b_trigger_13 = @install() fun test() {
                    subtext(string("b? 13 [END]"));
                },
                b_trigger_14 = @install() fun test() {
                    subtext(string("b? 14 [END]"));
                },
                b_trigger_15 = @install() fun test() {
                    subtext(string("b? 15 [END]"));
                },
                b_trigger_16 = @install() fun test() {
                    subtext(string("b? 16 [END]"));
                },
                b_trigger_17 = @install() fun test() {
                    subtext(string("b? 17 [END]"));
                },
                b_trigger_18 = @install() fun test() {
                    subtext(string("b? 18 [END]"));
                },
                b_trigger_19 = @install() fun test() {
                    subtext(string("b? 19 [END]"));
                },

                b_trigger_20 = @install() fun test() {
                    subtext(string("b? 20 [END]"));
                },
                b_trigger_21 = @install() fun test() {
                    subtext(string("b? 21 [END]"));
                },
                b_trigger_22 = @install() fun test() {
                    subtext(string("b? 22 [END]"));
                },
                b_trigger_23 = @install() fun test() {
                    subtext(string("b? 23 [END]"));
                },
                b_trigger_24 = @install() fun test() {
                    subtext(string("b? 24 [END]"));
                },
            }

            fun trigger_enter() {
                default_init_room(False, False);
            }
        };
    };

    map eastern_barrier(0x13) {
        enum entrance {
            north = entrance(0x17, 0x01, DIRECTION.SOUTH),
            east = entrance(0x2b, 0x11, DIRECTION.WEST),
            west = entrance(0x06, 0x18, DIRECTION.EAST),
        }

        enum soundtrack {
            default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum stepon_trigger {
            exit_west = @install() fun test() {
                map_transition(east_inbetwixx, east, DIRECTION.WEST);
            },
            stepon_1 = @install() fun test() {
                subtext(string("step-on? 1 [END]"));
            },
            exit_north = @install() fun test() {
                map_transition(graveyard, south, DIRECTION.NORTH);
            },
            exit_east = @install() fun test() {
                map_transition(pipe_entrance, pipe_west, DIRECTION.EAST);
            },
        }

        enum b_trigger {
            barrier = @install() fun test() {
                _axe2_wall(0x00);
            },
        }

        fun trigger_enter() {
            default_init_room(True, True);
        }
    };

    map eastern_river(0x2f) {
        enum entrance {
            north = entrance(0x53, 0x04, DIRECTION.SOUTH),
            east = entrance(0x81, 0x31, DIRECTION.WEST),
            south = entrance(0x55, 0x6e, DIRECTION.NORTH),
        }

        enum ROOM {
            WATER_REMOVED = flag()
        } 

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                subtext(string("step-on? 0 [END]"));
            },
            stepon_1 = @install() fun test() {
                subtext(string("step-on? 1 [END]"));
            },
            stepon_2 = @install() fun test() {
                subtext(string("step-on? 2 [END]"));
            },
            exit_north = @install() fun test() {
                map_transition(eastern_waterfall, south, DIRECTION.NORTH);
            },
            exit_east = @install() fun test() {
                map_transition(east_crossing, west, DIRECTION.EAST);
            },
            exit_south = @install() fun test() {
                map_transition(pyramid, north, DIRECTION.SOUTH);
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            b_trigger_16 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
            b_trigger_17 = @install() fun test() {
                subtext(string("b? 17 [END]"));
            },
            b_trigger_18 = @install() fun test() {
                subtext(string("b? 18 [END]"));
            },
            b_trigger_19 = @install() fun test() {
                subtext(string("b? 19 [END]"));
            },
        }

        fun remove_water(remove) {
            if(remove) {
                object[0x00] = 0x01;
                object[0x01] = 0x01;
            } else {
                object[0x00] = 0x00;
                object[0x01] = 0x00;
            }
        }

        @install()
        fun revealer_triggered() {
            destroy(CHARACTER.SCRIPT_OWNER);

            remove_water(True);

            set(ROOM.WATER_REMOVED);
        }

        fun trigger_enter() {
            // object[0x00] = 0x01;
            // object[0x01] = 0x01;
            
            if!(ROOM.WATER_REMOVED) {
                add_enemy(ENEMY.REVEALER_TARGET_ENTITY, 0x52, 0x26);
                special_script(SPECIAL_SCRIPTS.REVEALER, reference(revealer_triggered));
            } else {
                remove_water(True);
            }

            default_init_room(True, True);
        }
    };

    map graveyard(0x27) {
        enum entrance {
            north = entrance(0x32, 0x0f, DIRECTION.SOUTH),
            south = entrance(0x2f, 0x5f, DIRECTION.NORTH)
        }

        enum soundtrack {
            default = soundtrack(0x24, 0xff)
        }

        enum BOSS {
            DEBUG = False,
            IN_PROGRESS = memory_tmp(),

            RIDER_ID = memory_tmp(),
            MOUNT_ID = memory_tmp(),

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            HP = 0x03e8, // 1000

            COUNTDOWN = 0x03,

            STOMP_ENTITY = memory_tmp(),
            STOMP_DISTANCE = 0x20,
            STOMP_COOL_DOWN_TIMER = memory_tmp(),
            STOMP_COOL_DOWN = 0x100,
            STOMP_DAMAGE_CLOSE = 0x50,
            STOMP_DAMAGE = 0x10,
            STOMP_EXPLOSION_DISTANCE = 0x30,

            // p1

            P1_THRESHOLD = 0x320, // 800
            P1_TIME_BEFORE_SALVAGE = 0x500,

            // p2

            P2_THRESHOLD = 0x1f4, // 500
            P2_TIME_BEFORE_SALVAGE = 0x300,

            RANDOM_SPELL = memory_tmp(),
            TIME_BEFORE_RANDOM_SPELL = 0x300,
        }

        fun boss_killed() {
            set(SOULS_MEMORY.DEAD_STOMPY_RADAHN);
        }

        @install()
        @async()
        fun stomp() {
            BOSS.RIDER_ID[ATTRIBUTE.JUMP_HEIGHT] = 0x38;
            BOSS.MOUNT_ID[ATTRIBUTE.JUMP_HEIGHT] = 0x30;

            // attribute_bit(BOSS.MOUNT_ID, ATTRIBUTE_BITS.LOCK_IN_PLACE);
            // animate(BOSS.MOUNT_ID, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.STERLING_FLY_1);

            sleep(0x60);

            add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_GREEN_3, 0x00, 0x00);
            BOSS.STOMP_ENTITY = <CHARACTER.LAST_ENTITY>;
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x10;

            arg[0x00] = BOSS.STOMP_ENTITY[ATTRIBUTE.X];
            arg[0x02] = BOSS.STOMP_ENTITY[ATTRIBUTE.Y];
            arg[0x04] = <CHARACTER.BOY>[ATTRIBUTE.X];
            arg[0x06] = <CHARACTER.BOY>[ATTRIBUTE.Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= BOSS.STOMP_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_DISTANCE)) {
                damage(CHARACTER.BOY, BOSS.STOMP_DAMAGE_CLOSE);
            } else if((arg[0x08] <= BOSS.STOMP_EXPLOSION_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_EXPLOSION_DISTANCE)) {
                damage(CHARACTER.BOY, BOSS.STOMP_DAMAGE);
            }

            if(BOSS.DEBUG) {
                debug_memory(arg[0x08], arg[0x0a]);
                sleep(0x20);
            }

            sleep(0x30);
            destroy(BOSS.STOMP_ENTITY);
            // attribute_bit(BOSS.MOUNT_ID, ATTRIBUTE_BITS.UNLOCK);
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(BOSS.MOUNT_ID)) {
                BOSS.RIDER_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
                BOSS.RIDER_ID[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x15;
                yield();

                if(BOSS.STOMP_COOL_DOWN_TIMER == 0x0000) {
                    arg[0x00] = BOSS.MOUNT_ID[ATTRIBUTE.X];
                    arg[0x02] = BOSS.MOUNT_ID[ATTRIBUTE.Y];
                    arg[0x04] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                    arg[0x06] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];

                    if(arg[0x00] < arg[0x04]) {
                        arg[0x08] = arg[0x04] - arg[0x00];
                    } else {
                        arg[0x08] = arg[0x00] - arg[0x04];
                    }

                    if(arg[0x02] < arg[0x06]) {
                        arg[0x0a] = arg[0x06] - arg[0x02];
                    } else {
                        arg[0x0a] = arg[0x02] - arg[0x06];
                    }

                    if((arg[0x08] <= BOSS.STOMP_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_DISTANCE)) {
                        BOSS.STOMP_COOL_DOWN_TIMER = BOSS.STOMP_COOL_DOWN;

                        stomp();
                        call_async(ADDRESS.STERLING_ROAR);
                    }
                    yield();

                    // if(BOSS.DEBUG) {
                    //     debug_memory(arg[0x08], arg[0x0a]);
                    //     sleep(0x20);
                    // }
                } else {
                    BOSS.STOMP_COOL_DOWN_TIMER = BOSS.STOMP_COOL_DOWN_TIMER - 0x01;
                }
            }
        }

        fun cast_salvage(target, level) {
            animate(BOSS.RIDER_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.VERMINATOR_CAST_1);
            cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
            cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
            cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
            cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
        }

        @install()
        fun boss_damage() {
            // animate(BOSS.RIDER_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.VERMINATOR_DAMAGE);

            if(BOSS.PHASE == 0x00) {
                BOSS.TIMER = 0x00;

                if(BOSS.RIDER_ID[ATTRIBUTE.HP] < BOSS.P1_THRESHOLD) {
                    BOSS.PHASE = 0x01;
                }
            } else if(BOSS.PHASE == 0x01) {
                if(BOSS.RIDER_ID[ATTRIBUTE.HP] < BOSS.P2_THRESHOLD) {
                    BOSS.PHASE = 0x02;
                }
            } else if(BOSS.PHASE == 0x02) {
                BOSS.TIMER = BOSS.TIMER - 0x60;
            }

            if(BOSS.DEBUG) {
                MEMORY.STRING_PARAMETER_1 = BOSS.RIDER_ID[ATTRIBUTE.HP];
                MEMORY.STRING_PARAMETER_2 = BOSS.HP;

                subtext(string("Rider = [0xa1]/[0xa2][END]"));
            }
        }

        @install()
        @async()
        fun boss_watcher() {
            if(BOSS.DEBUG) {
                subtext(string("phase 0[END]"));
            }

            while(BOSS.PHASE == 0x00) {
                if(BOSS.TIMER > BOSS.P1_TIME_BEFORE_SALVAGE) {
                    cast_salvage(CHARACTER.ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[0x0b] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER = BOSS.TIMER + 0x01;
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext(string("phase 1[END]"));
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
            cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                if(BOSS.TIMER > BOSS.P2_TIME_BEFORE_SALVAGE) {
                    cast_salvage(CHARACTER.ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[ATTRIBUTE.PALETTE] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER = BOSS.TIMER + 0x01;
                }
                yield();
            }

            BOSS.TIMER = 0x0000;
            BOSS.STOMP_COOL_DOWN_TIMER = BOSS.STOMP_COOL_DOWN;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
            cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                BOSS.TIMER = BOSS.TIMER + 0x01;

                if(BOSS.TIMER > BOSS.TIME_BEFORE_RANDOM_SPELL) {
                    BOSS.TIMER = 0x0000;

                    BOSS.RANDOM_SPELL = randrange(0x03);

                    if(BOSS.RANDOM_SPELL == 0x00) {
                        cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
                        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);
                    } else if(BOSS.RANDOM_SPELL == 0x01) {
                        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.DRAIN, 0x30);
                    } else if(BOSS.RANDOM_SPELL == 0x02) {
                        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.PLAGUE, 0x01);
                    } 
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext(string("phase 2[END]"));
            }

            boss_killed();
        }

        fun spawn_boss(x, y) {
            add_enemy(ENEMY.VERMINATOR, x, y);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = BOSS.HP;
            store_last_entity(BOSS.RIDER_ID);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(boss_damage));
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.NO_CLIP);

            // add_enemy(ENEMY.STERLING, x, y);
            add_enemy(ENEMY.FORESTDRAKE, x, y);
            store_last_entity(BOSS.MOUNT_ID);
            // attach_sterling_script_to_last_entity(CHARACTER.LAST_ENTITY);
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
        }

        enum stepon_trigger {
            exit_north = @install() fun test() {
                subtext(string("step-on? 0 [END]"));
            },
            exit_south = @install() fun test() {
                map_transition(eastern_barrier, north, DIRECTION.SOUTH);
            },
            spawn_boss = @install() fun test() {
                if!(SOULS_MEMORY.DEAD_STOMPY_RADAHN) {
                    if(BOSS.IN_PROGRESS == 0x00) {
                        BOSS.IN_PROGRESS = 0x01;
                        object[0x1f] = 0x7e;
                        
                        spawn_boss(0x39, 0x23);
                        stack_t01_offset();
                        boss_watcher();
                    }
                }
            }
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            b_trigger_16 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
            b_trigger_17 = @install() fun test() {
                subtext(string("b? 17 [END]"));
            },
            b_trigger_18 = @install() fun test() {
                subtext(string("b? 18 [END]"));
            },
            b_trigger_19 = @install() fun test() {
                subtext(string("b? 19 [END]"));
            },

            b_trigger_20 = @install() fun test() {
                subtext(string("b? 20 [END]"));
            },
            b_trigger_21 = @install() fun test() {
                subtext(string("b? 21 [END]"));
            },
            b_trigger_22 = @install() fun test() {
                subtext(string("b? 22 [END]"));
            },
            b_trigger_23 = @install() fun test() {
                subtext(string("b? 23 [END]"));
            },
            b_trigger_24 = @install() fun test() {
                subtext(string("b? 24 [END]"));
            },
            b_trigger_25 = @install() fun test() {
                subtext(string("b? 25 [END]"));
            },
            b_trigger_26 = @install() fun test() {
                subtext(string("b? 26 [END]"));
            },
            b_trigger_27 = @install() fun test() {
                subtext(string("b? 27 [END]"));
            },
            b_trigger_28 = @install() fun test() {
                subtext(string("b? 28 [END]"));
            },
            b_trigger_29 = @install() fun test() {
                subtext(string("b? 29 [END]"));
            }
        }

        fun trigger_enter() {
            default_init_room(True, True);
        }
    };

    area pipes() {
        enum PIPE_MAZE {
            HIDDEN_ROOM_OPEND = flag(),
        }

        map pipe_entrance(0x3e) {
            enum entrance {
                pipe_east = entrance(0x2d, 0x17, DIRECTION.NONE),
                south = entrance(0x1a, 0x2f, DIRECTION.NORTH),
                pipe_west = entrance(0x07, 0x17, DIRECTION.NONE),
                
                room_switch = entrance(0xbf, 0x23, DIRECTION.NONE),
                room_gate = entrance(0x87, 0x1f, DIRECTION.NONE),
                gate = entrance(0x98, 0x10, DIRECTION.SOUTH),
                room_empty = entrance(0x6f, 0x1b, DIRECTION.NONE),
            }

            enum stepon_trigger {
                switch_triggered = @install() fun test() {
                    if!(PIPE_MAZE.HIDDEN_ROOM_OPEND) {
                        subtext(string("Somewhere a door has opened.[END]"));

                        set(PIPE_MAZE.HIDDEN_ROOM_OPEND);
                    }
                },
                exit_room_switch = @install() fun test() {
                    map_transition(mosquito_arena, right, DIRECTION.NORTH);
                },
                stepon_2 = @install() fun test() {
                    subtext(string("step-on? 2 [END]"));
                },
                exit_room_empty = @install() fun test() {
                    map_transition(mosquito_arena, right, DIRECTION.NORTH); // TODO: placeholder
                },
                exit_north_1 = @install() fun test() {
                    map_transition(pipe_entrance, room_switch, DIRECTION.NORTH);
                },
                exit_north_2 = @install() fun test() {
                    map_transition(pipe_maze, pipe_east, DIRECTION.NORTH);
                },
                jump_room_switch = @install() fun test() {
                    call(0x94af0d);
                },
                stepon_7 = @install() fun test() {
                    subtext(string("step-on? 7 [END]"));
                },
                exit_south = @install() fun test() {
                    map_transition(hidden_room, room_nss_north, DIRECTION.SOUTH);
                },
                jump_empty_room = @install() fun test() {
                    call(0x94af0d);
                },

                stepon_10 = @install() fun test() {
                    subtext(string("step-on? 10 [END]"));
                },
                stepon_11 = @install() fun test() {
                    subtext(string("step-on? 11 [END]"));
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                b_trigger_2 = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
                b_trigger_3 = @install() fun test() {
                    subtext(string("b? 3 [END]"));
                },
                b_trigger_4 = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                b_trigger_5 = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                b_trigger_7 = @install() fun test() {
                    subtext(string("b? 7 [END]"));
                },
                b_trigger_8 = @install() fun test() {
                    subtext(string("b? 8 [END]"));
                },
                b_trigger_9 = @install() fun test() {
                    subtext(string("b? 9 [END]"));
                },

                b_trigger_10 = @install() fun test() {
                    subtext(string("b? 10 [END]"));
                },
                b_trigger_11 = @install() fun test() {
                    subtext(string("b? 11 [END]"));
                },
                b_trigger_12 = @install() fun test() {
                    subtext(string("b? 12 [END]"));
                },
                b_trigger_13 = @install() fun test() {
                    subtext(string("b? 13 [END]"));
                },
            }

            enum ROOM {
                DEBUG = False,

                SECRET_PASSAGE_TRIGGER = memory_tmp(),
                SECRET_PASSAGE_DISTANCE = 0x20,
            }

            @install()
            @async()
            fun hidden_exit_check() {
                while(True) {
                    arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                    arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
                    arg[0x04] = ROOM.SECRET_PASSAGE_TRIGGER[ATTRIBUTE.X];
                    arg[0x06] = ROOM.SECRET_PASSAGE_TRIGGER[ATTRIBUTE.Y];

                    if(arg[0x00] < arg[0x04]) {
                        arg[0x08] = arg[0x04] - arg[0x00];
                    } else {
                        arg[0x08] = arg[0x00] - arg[0x04];
                    }

                    if(arg[0x02] < arg[0x06]) {
                        arg[0x0a] = arg[0x06] - arg[0x02];
                    } else {
                        arg[0x0a] = arg[0x02] - arg[0x06];
                    }

                    if((arg[0x08] <= ROOM.SECRET_PASSAGE_DISTANCE) && (arg[0x0a] <= ROOM.SECRET_PASSAGE_DISTANCE)) {
                        map_transition(eastern_barrier, east, DIRECTION.WEST);
                        end();
                    }
                    yield();

                    if(ROOM.DEBUG) {
                        debug_memory(arg[0x08], arg[0x0a]);
                        sleep(0x20);
                    }
                }
            }

            @install()
            fun test_triggered() {
                if(PIPE_MAZE.HIDDEN_ROOM_OPEND) {
                    map_transition(sewers, pipe, DIRECTION.EAST);
                } else {
                    subtext(string("Locked by some contraption.[END]"));
                }
            }
            
            fun trigger_enter() {
                default_init_room(True, False);

                add_enemy(ENEMY.PLACEHOLDER, 0x2d, 0x16);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(test_triggered));
                
                add_enemy(ENEMY.PLACEHOLDER, 0x05, 0x16);
                ROOM.SECRET_PASSAGE_TRIGGER = <CHARACTER.LAST_ENTITY>;

                sleep(0x10);
                hidden_exit_check();
            }
        };

        map hidden_room(0x3c) {
            enum entrance {
                main_north = entrance(0xd3, 0x3d, DIRECTION.SOUTH),
                main_east = entrance(0xf7, 0x5b, DIRECTION.WEST),
                main_south = entrance(0xd5, 0x95, DIRECTION.NORTH),
                main_west = entrance(0xbb, 0x5d, DIRECTION.EAST),

                cave_outside = entrance(0x54, 0xb1, DIRECTION.NORTH),

                room_nw_north = entrance(0x20, 0x85, DIRECTION.SOUTH),
                room_nw_west = entrance(0x01, 0xa3, DIRECTION.EAST),

                room_es_east = entrance(0x67, 0x1c, DIRECTION.WEST),
                room_es_south = entrance(0x4c, 0x39, DIRECTION.NORTH),

                room_nss_north = entrance(0x9e, 0x05, DIRECTION.SOUTH),
                room_nss_south_1 = entrance(0x9e, 0x37, DIRECTION.NORTH),
                room_nss_south_2 = entrance(0x84, 0x37, DIRECTION.NORTH),

                room_s_south = entrance(0x9e, 0x7b, DIRECTION.NORTH),

                room_alchemist = entrance(0xd0, 0x05, DIRECTION.SOUTH),

                room_ns_north = entrance(0x1c, 0x3d, DIRECTION.SOUTH),
                room_ns_south = entrance(0x22, 0x7b, DIRECTION.NORTH),

                room_nne_north_1 = entrance(0x4c, 0x36, DIRECTION.SOUTH),
                room_nne_north_2 = entrance(0x60, 0x39, DIRECTION.SOUTH),
                room_nne_east = entrance(0x7f, 0x60, DIRECTION.WEST),

                room_sw_south = entrance(0x1c, 0x3b, DIRECTION.NORTH),
                room_sw_west = entrance(0x01, 0x24, DIRECTION.EAST),
            }

            enum stepon_trigger {
                stepon_0 = @install() fun test() {
                    subtext(string("step-on? 0 [END]"));
                },
                stepon_1 = @install() fun test() {
                    subtext(string("step-on? 1 [END]"));
                },
                stepon_2 = @install() fun test() {
                    subtext(string("step-on? 2 [END]"));
                },
                stepon_3 = @install() fun test() {
                    subtext(string("step-on? 3 [END]"));
                },
                stepon_4 = @install() fun test() {
                    subtext(string("step-on? 4 [END]"));
                },
                stepon_5 = @install() fun test() {
                    subtext(string("step-on? 5 [END]"));
                },
                stepon_6 = @install() fun test() {
                    subtext(string("step-on? 6 [END]"));
                },
                stepon_7 = @install() fun test() {
                    subtext(string("step-on? 7 [END]"));
                },
                stepon_8 = @install() fun test() {
                    subtext(string("step-on? 8 [END]"));
                },
                stepon_9 = @install() fun test() {
                    subtext(string("step-on? 9 [END]"));
                },

                stepon_10 = @install() fun test() {
                    subtext(string("step-on? 10 [END]"));
                },
                stepon_11 = @install() fun test() {
                    subtext(string("step-on? 11 [END]"));
                },
                stepon_12 = @install() fun test() {
                    subtext(string("step-on? 12 [END]"));
                },
                exit_room_nss_south_2 = @install() fun test() {
                    if!(SOULS_MEMORY.DEAD_ARENA_MOSQUITO) {
                        subtext(string("Does not open from this side.[END]"));
                    } else {
                        map_transition(mosquito_arena, north, DIRECTION.SOUTH);
                    }
                },
                exit_room_nss_south_1 = @install() fun test() {
                    map_transition(hidden_room, room_alchemist, DIRECTION.SOUTH);
                },
                exit_room_nss_north = @install() fun test() {
                    map_transition(pipe_entrance, south, DIRECTION.NORTH);
                },
                stepon_16 = @install() fun test() {
                    map_transition(hidden_room, room_nss_south_1, DIRECTION.NORTH);
                },
                stepon_17 = @install() fun test() {
                    subtext(string("step-on? 17 [END]"));
                },
                stepon_18 = @install() fun test() {
                    subtext(string("step-on? 18 [END]"));
                },
                stepon_19 = @install() fun test() {
                    subtext(string("step-on? 19 [END]"));
                },

                stepon_20 = @install() fun test() {
                    subtext(string("step-on? 20 [END]"));
                },
            }
            
            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                b_trigger_2 = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
                b_trigger_3 = @install() fun test() {
                    subtext(string("b? 3 [END]"));
                },
                b_trigger_4 = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                b_trigger_5 = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                b_trigger_7 = @install() fun test() {
                    subtext(string("b? 7 [END]"));
                },
                b_trigger_8 = @install() fun test() {
                    subtext(string("b? 8 [END]"));
                },
                b_trigger_9 = @install() fun test() {
                    subtext(string("b? 9 [END]"));
                },

                b_trigger_10 = @install() fun test() {
                    subtext(string("b? 10 [END]"));
                },
                b_trigger_11 = @install() fun test() {
                    subtext(string("b? 11 [END]"));
                },
                b_trigger_12 = @install() fun test() {
                    subtext(string("b? 12 [END]"));
                },
                b_trigger_13 = @install() fun test() {
                    subtext(string("b? 13 [END]"));
                },
                b_trigger_14 = @install() fun test() {
                    subtext(string("b? 14 [END]"));
                },
                b_trigger_15 = @install() fun test() {
                    subtext(string("b? 15 [END]"));
                },
                b_trigger_16 = @install() fun test() {
                    subtext(string("b? 16 [END]"));
                },
                b_trigger_17 = @install() fun test() {
                    subtext(string("b? 17 [END]"));
                },
                b_trigger_18 = @install() fun test() {
                    subtext(string("b? 18 [END]"));
                },
                b_trigger_19 = @install() fun test() {
                    subtext(string("b? 19 [END]"));
                },

                b_trigger_20 = @install() fun test() {
                    subtext(string("b? 20 [END]"));
                },
                b_trigger_21 = @install() fun test() {
                    subtext(string("b? 21 [END]"));
                },
                b_trigger_22 = @install() fun test() {
                    subtext(string("b? 22 [END]"));
                },
                b_trigger_23 = @install() fun test() {
                    subtext(string("b? 23 [END]"));
                },
                b_trigger_24 = @install() fun test() {
                    subtext(string("b? 24 [END]"));
                },
            }
            
            fun trigger_enter() {
                default_init_room(False, False);

                add_enemy(ENEMY.STONE_ROUND, 0xdd, 0x27);
            }
        };

        map sewers(0x7a) {
            enum entrance {
                west = entrance(0x05, 0x0b, DIRECTION.EAST),
                pipe = entrance(0x05, 0x15, DIRECTION.NONE),

                cinematic_east = entrance(0x2d, 0x7, DIRECTION.NONE),
            }

            enum stepon_trigger {
                pipe = @install() fun test() {
                    pit_act3_sewers();
                },
                exit_west = @install() fun test() {
                    map_transition(hidden_room, room_nss_south_2, DIRECTION.WEST);
                },
            }
            
            fun trigger_enter() {
                default_init_room(True, True);
            }
        };

        map pipe_maze(0x3d) {
            enum entrance {
                pipe_east = entrance(0x67, 0x94, DIRECTION.NONE),
                pipe_west = entrance(0x5b, 0x94, DIRECTION.NONE),
            }

            fun pit_1_triggered() {
                map_transition(town_center, crash, DIRECTION.NONE);
            }
            fun pit_2_triggered() {
                map_transition(town_market, crash, DIRECTION.NONE);
            }
            fun pit_3_triggered() {
                map_transition(town_level_1, crash, DIRECTION.NONE);
            }
            fun pit_4_triggered() {
                map_transition(town_level_2, crash, DIRECTION.NONE);
            }
            fun pit_5_triggered() {
                map_transition(town_level_3, crash, DIRECTION.NONE);
            }

            enum stepon_trigger {
                stepon_0 = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_room_nw_west = @install() fun test() {
                    subtext(string("exit? 1 [END]"));
                },
                crossing_pit_3_2 = @install() fun test() {
                    object[0x06] = 0x00;
                },
                crossing_pit_1_3 = @install() fun test() {
                    object[0x06] = 0x01;
                },
                stepon_4 = @install() fun test() {
                    subtext(string("exit? 4 [END]"));
                },
                stepon_5 = @install() fun test() {
                    subtext(string("exit? 5 [END]"));
                },
                stepon_6 = @install() fun test() {
                    subtext(string("exit? 6 [END]"));
                },
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                stepon_8 = @install() fun test() {
                    subtext(string("exit? 8 [END]"));
                },
                stepon_9 = @install() fun test() {
                    subtext(string("exit? 9 [END]"));
                },

                stepon_10 = @install() fun test() {
                    subtext(string("exit? 10 [END]"));
                },
                stepon_11 = @install() fun test() {
                    subtext(string("exit? 11 [END]"));
                },
                stepon_12 = @install() fun test() {
                    subtext(string("exit? 12 [END]"));
                },
                stepon_13 = @install() fun test() {
                    subtext(string("exit? 13 [END]"));
                },
                stepon_14 = @install() fun test() {
                    subtext(string("exit? 14 [END]"));
                },
                stepon_15 = @install() fun test() {
                    subtext(string("exit? 15 [END]"));
                },
                stepon_16 = @install() fun test() {
                    subtext(string("exit? 16 [END]"));
                },
                stepon_17 = @install() fun test() {
                    subtext(string("exit? 17 [END]"));
                },
                crossing_pit_1_2 = @install() fun test() {
                    object[0x07] = 0x01;
                },
                stepon_19 = @install() fun test() {
                    subtext(string("exit? 19 [END]"));
                },

                stepon_20 = @install() fun test() {
                    subtext(string("exit? 20 [END]"));
                },
                stepon_21 = @install() fun test() {
                    subtext(string("exit? 21 [END]"));
                },
                stepon_22 = @install() fun test() {
                    subtext(string("exit? 22 [END]"));
                },
                stepon_23 = @install() fun test() {
                    subtext(string("exit? 23 [END]"));
                },
                stepon_24 = @install() fun test() {
                    subtext(string("exit? 24 [END]"));
                },
                stepon_25 = @install() fun test() {
                    subtext(string("exit? 25 [END]"));
                },
                stepon_26 = @install() fun test() {
                    subtext(string("exit? 26 [END]"));
                },
                stepon_27 = @install() fun test() {
                    subtext(string("exit? 27 [END]"));
                },
                stepon_28 = @install() fun test() {
                    subtext(string("exit? 28 [END]"));
                },
                stepon_29 = @install() fun test() {
                    subtext(string("exit? 29 [END]"));
                },

                stepon_30 = @install() fun test() {
                    subtext(string("exit? 30 [END]"));
                },
                pit_1_north = @install() fun test() {
                    <0x24b3> = 0x0002;
                    <0x24b5> = 0x002d;
                    <0x24b7> = 0x0000;

                    call(0x94ac56);

                    pit_1_triggered();
                },
                pit_1_south = @install() fun test() {
                    <0x24b3> = 0x002a;
                    <0x24b5> = 0x0023;
                    <0x24b7> = 0x0000;
                    
                    call(0x94ac56);

                    pit_1_triggered();
                },
                pit_5_north = @install() fun test() {
                    <0x24c3> = 0x0008;
                    <0x24b3> = 0x0002;
                    <0x24b5> = 0x002d;
                    <0x24b7> = 0x0000;
                    call(0x94ac56);

                    pit_5_triggered();
                },
                pit_4_south = @install() fun test() {
                    <0x24c3> = 0x0007;
                    <0x24b3> = 0x002a;
                    <0x24b5> = 0x0023;
                    <0x24b7> = 0x0000;
                    call(0x94ac56);

                    pit_4_triggered();
                },
                pit_3_north = @install() fun test() {
                    <0x24c3> = 0x0009;
                    <0x24b3> = 0x0002;
                    <0x24b5> = 0x002d;
                    <0x24b7> = 0x0000;
                    call(0x94ac56);

                    pit_3_triggered();
                },
                pit_3_west = @install() fun test() {
                    <0x24c3> = 0x0009;
                    <0x24b3> = 0x0002;
                    <0x24b5> = 0x0022;
                    <0x24b7> = 0x0016;
                    call(0x94ac56);

                    pit_3_triggered();
                },
                pit_2_north = @install() fun test() {
                    <0x24c3> = 0x000a;
                    <0x24b3> = 0x0002;
                    <0x24b5> = 0x002d;
                    <0x24b7> = 0x0000;
                    call(0x94ac56);

                    pit_2_triggered();
                },
                pit_2_east = @install() fun test() {
                    <0x24c3> = 0x000a;
                    <0x24b3> = 0x0002;
                    <0x24b5> = 0x0022;
                    <0x24b7> = -0x0011;
                    call(0x94ac56);

                    pit_2_triggered();
                },
            }

            fun trigger_enter() {
                default_init_room(True, False);
            }
        };
    };
};

area southern_jungle() {
    map eastern_waterfall(0x6b) {
        enum entrance {
            south = entrance(0x11, 0x3f, DIRECTION.NORTH)
        }

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                subtext(string("step-on? 0 [END]"));
            },
            stepon_1 = @install() fun test() {
                subtext(string("step-on? 1 [END]"));
            },
            stepon_2 = @install() fun test() {
                subtext(string("step-on? 2 [END]"));
            },
            stepon_3 = @install() fun test() {
                subtext(string("step-on? 3 [END]"));
            },
            stepon_4 = @install() fun test() {
                subtext(string("step-on? 4 [END]"));
            },
            stepon_5 = @install() fun test() {
                subtext(string("step-on? 5 [END]"));
            },
            stepon_6 = @install() fun test() {
                map_transition(eastern_river, north, DIRECTION.SOUTH);
            }
        }

        fun trigger_enter() {
            default_init_room(True, True);
        }
    };

    map pyramid(0x06) {
        enum entrance {
            north = entrance(0x66, 0x04, DIRECTION.SOUTH),
            east = entrance(0xa3, 0x71, DIRECTION.WEST),

            cave_tiny = entrance(0x87, 0x84, DIRECTION.SOUTH),

            pyramid_1_1 = entrance(0x4c, 0x6b, DIRECTION.SOUTH),
            pyramid_2_1 = entrance(0x46, 0x4e, DIRECTION.SOUTH),
            pyramid_2_2 = entrance(0x5e, 0x4e, DIRECTION.SOUTH),
            pyramid_3_1 = entrance(0x52, 0x38, DIRECTION.SOUTH),
            pyramid_3_2 = entrance(0x5b, 0x33, DIRECTION.EAST),

            wings = entrance(0x3d, 0x71, DIRECTION.NONE),
        }

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                subtext(string("exit? 0 [END]"));
            },
            door_tiny = @install() fun test() {
                subtext(string("exit? 1 [END]"));
            },
            pit_1 = @install() fun test() {
                subtext(string("exit? 2 [END]"));
            },
            pit_2 = @install() fun test() {
                subtext(string("exit? 3 [END]"));
            },
            pit_3 = @install() fun test() {
                subtext(string("exit? 4 [END]"));
            },
            stairs_bottom = @install() fun test() {
                subtext(string("exit? 5 [END]"));
            },
            switch_left = @install() fun test() {
                subtext(string("exit? 6 [END]"));
            },
            switch_right = @install() fun test() {
                subtext(string("exit? 7 [END]"));
            },
            switch_bottom_south = @install() fun test() {
                subtext(string("exit? 8 [END]"));
            },
            switch_bottom_west = @install() fun test() {
                subtext(string("exit? 9 [END]"));
            },

            pit_4 = @install() fun test() {
                subtext(string("exit? 10 [END]"));
            },
            pit_5 = @install() fun test() {
                subtext(string("exit? 11 [END]"));
            },
            pit_6 = @install() fun test() {
                subtext(string("exit? 12 [END]"));
            },
            pit_7 = @install() fun test() {
                subtext(string("exit? 13 [END]"));
            },
            pit_8 = @install() fun test() {
                subtext(string("exit? 14 [END]"));
            },
            exit_east = @install() fun test() {
                map_transition(flowers, west, DIRECTION.EAST);
            },
            stepon_16 = @install() fun test() {
                subtext(string("exit? 16 [END]"));
            },
            door_2_1 = @install() fun test() {
                subtext(string("exit? 17 [END]"));
            },
            door_2_2 = @install() fun test() {
                subtext(string("exit? 18 [END]"));
            },
            door_3_2 = @install() fun test() {
                subtext(string("exit? 19 [END]"));
            },

            switch_bottom = @install() fun test() {
                subtext(string("exit? 20 [END]"));
            },
            stepon_21 = @install() fun test() {
                subtext(string("exit? 21 [END]"));
            },
            switch_left_west = @install() fun test() {
                subtext(string("exit? 22 [END]"));
            },
            switch_left_south = @install() fun test() {
                subtext(string("exit? 23 [END]"));
            },
            switch_right_east = @install() fun test() {
                subtext(string("exit? 24 [END]"));
            },
            switch_right_south = @install() fun test() {
                subtext(string("exit? 25 [END]"));
            },
            exit_north = @install() fun test() {
                map_transition(eastern_river, south, DIRECTION.NORTH);
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            b_trigger_16 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
            b_trigger_17 = @install() fun test() {
                subtext(string("b? 17 [END]"));
            },
            b_trigger_18 = @install() fun test() {
                subtext(string("b? 18 [END]"));
            },
            b_trigger_19 = @install() fun test() {
                subtext(string("b? 19 [END]"));
            },
        }

        fun trigger_enter() {
            object[0x04] = 0x01;
            object[0x05] = 0x01;
            object[0x06] = 0x01;
            object[0x07] = 0x01;
            object[0x08] = 0x01;
            object[0x09] = 0x01;
            object[0x0a] = 0x01;

            fade_in();
        }
    };

    map flowers(0x38) {
        enum entrance {
            north = entrance(0x62, 0x0b, DIRECTION.SOUTH),
            west = entrance(0x04, 0x1f, DIRECTION.EAST),
        }

        enum stepon_trigger {
            exit_north = @install() fun test() {
                map_transition(northern_jungle, south, DIRECTION.NORTH);
            },
            exit_south = @install() fun test() {
                map_transition(pyramid, east, DIRECTION.WEST);
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            b_trigger_16 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
            b_trigger_17 = @install() fun test() {
                subtext(string("b? 17 [END]"));
            },
            b_trigger_18 = @install() fun test() {
                subtext(string("b? 18 [END]"));
            },
            b_trigger_19 = @install() fun test() {
                subtext(string("b? 19 [END]"));
            },

            b_trigger_20 = @install() fun test() {
                subtext(string("b? 20 [END]"));
            },
            b_trigger_21 = @install() fun test() {
                subtext(string("b? 21 [END]"));
            },
            b_trigger_22 = @install() fun test() {
                subtext(string("b? 22 [END]"));
            },
            b_trigger_23 = @install() fun test() {
                subtext(string("b? 23 [END]"));
            },
            b_trigger_24 = @install() fun test() {
                subtext(string("b? 24 [END]"));
            },
            b_trigger_25 = @install() fun test() {
                subtext(string("b? 25 [END]"));
            },
            b_trigger_26 = @install() fun test() {
                subtext(string("b? 26 [END]"));
            },
            b_trigger_27 = @install() fun test() {
                subtext(string("b? 27 [END]"));
            },
            b_trigger_28 = @install() fun test() {
                subtext(string("b? 28 [END]"));
            },
            b_trigger_29 = @install() fun test() {
                subtext(string("b? 29 [END]"));
            },

            b_trigger_30 = @install() fun test() {
                subtext(string("b? 30 [END]"));
            },
        }
        
        fun trigger_enter() {
            fade_in();
        }
    };

    map northern_jungle(0x41) {
        enum entrance {
            north = entrance(0x56, 0x05, DIRECTION.SOUTH),
            south = entrance(0x07, 0x4d, DIRECTION.NORTH),

            cave_1 = entrance(0x08, 0x0f, DIRECTION.SOUTH),
            cave_2 = entrance(0x48, 0x13, DIRECTION.SOUTH),

            wings = entrance(0x0f, 0x3f, DIRECTION.NONE),
        }

        enum stepon_trigger {
            exit_north = @install() fun test() {
                map_transition(jungle_firepit, south, DIRECTION.NORTH);
            },
            cave_2 = @install() fun test() {
                subtext(string("exit? 1 [END]"));
            },
            cave_1 = @install() fun test() {
                subtext(string("exit? 2 [END]"));
            },
            exit_south = @install() fun test() {
                map_transition(flowers, north, DIRECTION.SOUTH);
            },
        }
        
        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            b_trigger_16 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
            b_trigger_17 = @install() fun test() {
                subtext(string("b? 17 [END]"));
            },
            b_trigger_18 = @install() fun test() {
                subtext(string("b? 18 [END]"));
            },
            b_trigger_19 = @install() fun test() {
                subtext(string("b? 19 [END]"));
            },

            b_trigger_20 = @install() fun test() {
                subtext(string("b? 20 [END]"));
            },
            b_trigger_21 = @install() fun test() {
                subtext(string("b? 21 [END]"));
            },
            b_trigger_22 = @install() fun test() {
                subtext(string("b? 22 [END]"));
            },
        }
        
        fun trigger_enter() {
            init_map(0x00, 0x00, 0x63, 0x4f);

            fade_in();
        }
    };

    map jungle_firepit(0x36) {
        enum entrance {
            south = entrance(0x17, 0x2c, DIRECTION.NORTH),
        }

        enum stepon_trigger {
            exit_south = @install() fun test() {
                map_transition(northern_jungle, north, DIRECTION.SOUTH);
            },
            windwalker = @install() fun test() {
                subtext(string("exit? 1 [END]"));
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
        }

        fun trigger_enter() {
            fade_in();
        }
    };
};

area town() {
    enum AREA_TOWN_TEMPLE {
        SECRET_PASSAGE_OPENED = flag(),
    }

    map town_market_alley(0x4e) {
        enum entrance {
            north = entrance(0x2a, 0x01, DIRECTION.SOUTH),
            east = entrance(0x39, 0xc3, DIRECTION.WEST),
        }

        enum stepon_trigger {
            exit_north = @install() fun test() {
                map_transition(town_temple, south, DIRECTION.NORTH);
            },
            exit_east = @install() fun test() {
                map_transition(town_center, west_2, DIRECTION.EAST);
            },
        }

        fun trigger_enter() {
            fade_in();
        }
    };

    area temple() {
        map town_temple(0x29) {
            enum entrance {
                north = entrance(0x29, 0x03, DIRECTION.SOUTH),
                east_1 = entrance(0x4b, 0x3f, DIRECTION.WEST),
                east_2 = entrance(0x49, 0x5d, DIRECTION.WEST),
                south = entrance(0x29, 0x8b, DIRECTION.NORTH),
                west_1 = entrance(0x09, 0x5d, DIRECTION.EAST),
                west_2 = entrance(0x09, 0x3f, DIRECTION.EAST),

                elevator = entrance(0x29, 0x49, DIRECTION.NONE),
            }

            enum stepon_trigger {
                stepon_0 = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                stepon_1 = @install() fun test() {
                    subtext(string("exit? 1 [END]"));
                },
                stepon_2 = @install() fun test() {
                    subtext(string("exit? 2 [END]"));
                },
                stepon_3 = @install() fun test() {
                    subtext(string("exit? 3 [END]"));
                },
                stepon_4 = @install() fun test() {
                    subtext(string("exit? 4 [END]"));
                },
                stepon_5 = @install() fun test() {
                    subtext(string("exit? 5 [END]"));
                },
                exit_south = @install() fun test() {
                    map_transition(town_market_alley, north, DIRECTION.SOUTH);
                },
                door_west_2 = @install() fun test() {
                    map_transition(town_temple_north_west, east, DIRECTION.WEST);
                },
                door_west_1 = @install() fun test() {
                    subtext(string("exit? 8 [END]"));
                },
                door_east_2 = @install() fun test() {
                    if(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                        map_transition(town_level_2, west, DIRECTION.EAST);
                    } else {
                        contraption_trigger();
                    }
                },

                door_east_1 = @install() fun test() {
                    map_transition(town_temple_switch, west, DIRECTION.EAST);
                },
                stepon_11 = @install() fun test() {
                    subtext(string("exit? 11 [END]"));
                },
                switch_triggered = @install() fun test() {
                    subtext(string("exit? 12 [END]"));
                },
                stepon_13 = @install() fun test() {
                    subtext(string("exit? 13 [END]"));
                },
                stepon_14 = @install() fun test() {
                    subtext(string("exit? 14 [END]"));
                },
                stepon_15 = @install() fun test() {
                    subtext(string("exit? 15 [END]"));
                },
                stepon_16 = @install() fun test() {
                    subtext(string("exit? 16 [END]"));
                },
                stepon_17 = @install() fun test() {
                    subtext(string("exit? 17 [END]"));
                },
                stepon_18 = @install() fun test() {
                    subtext(string("exit? 18 [END]"));
                },
                stepon_19 = @install() fun test() {
                    subtext(string("exit? 19 [END]"));
                },

                stepon_20 = @install() fun test() {
                    subtext(string("exit? 20 [END]"));
                },
                stepon_21 = @install() fun test() {
                    subtext(string("exit? 21 [END]"));
                },
                stepon_22 = @install() fun test() {
                    subtext(string("exit? 22 [END]"));
                },
                stepon_23 = @install() fun test() {
                    subtext(string("exit? 23 [END]"));
                },
                stepon_24 = @install() fun test() {
                    subtext(string("exit? 24 [END]"));
                },
                stepon_25 = @install() fun test() {
                    subtext(string("exit? 25 [END]"));
                },
                stepon_26 = @install() fun test() {
                    subtext(string("exit? 26 [END]"));
                },
                stepon_27 = @install() fun test() {
                    subtext(string("exit? 27 [END]"));
                },
                stepon_28 = @install() fun test() {
                    subtext(string("exit? 28 [END]"));
                },
                stepon_29 = @install() fun test() {
                    subtext(string("exit? 29 [END]"));
                },

                stepon_30 = @install() fun test() {
                    subtext(string("exit? 30 [END]"));
                },
                elevator = @install() fun test() {
                    subtext(string("exit? 31 [END]"));
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
            }

            fun open_doors(open) {
                if(open) {
                    object[0x03] = 0x01; // NE

                    object[0x07] = 0x01; // SW
                    object[0x08] = 0x01; // SE

                    object[0x09] = 0x01; // NW
                } else {
                    object[0x03] = 0x00; // NE

                    object[0x07] = 0x00; // SW
                    object[0x08] = 0x00; // SE

                    object[0x09] = 0x00; // NW
                }
            }

            fun trigger_enter() {
                open_doors();

                fade_in();
            }
        };

        map town_temple_north_west(0x23) {
            enum entrance {
                north = entrance(0x24, 0x2e, DIRECTION.SOUTH),
                east = entrance(0x3b, 0x3f, DIRECTION.WEST),
            }

            enum stepon_trigger {
                exit_east = @install() fun test() {
                    map_transition(town_temple, west_2, DIRECTION.EAST);
                },
                stepon_1 = @install() fun test() {
                    subtext(string("exit? 1 [END]"));
                },
                switch_2 = @install() fun test() {
                    subtext(string("exit? 2 [END]"));
                },
                switch_1 = @install() fun test() {
                    subtext(string("exit? 3 [END]"));
                },
                switch_3 = @install() fun test() {
                    subtext(string("exit? 4 [END]"));
                },
                exit_north = @install() fun test() {
                    map_transition(town_temple_boss, south, DIRECTION.NORTH);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                b_trigger_2 = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
            }

            fun trigger_enter() {
                object[0x03] = 0x03; // gate 1
                object[0x04] = 0x02; // gate 2
                object[0x05] = 0x03; // gate 3

                object[0x00] = 0x7e; // activate switch_1
                object[0x01] = 0x7e; // activate switch_2
                object[0x02] = 0x7e; // activate switch_3

                fade_in();
            }
        };

        map town_temple_boss(0x2a) {
            enum entrance {
                south = entrance(0x41, 0x53, DIRECTION.NORTH)
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    map_transition(town_temple_north_west, north, DIRECTION.SOUTH);
                }
            }

            fun trigger_enter() {
                fade_in();
            }
        };

        map town_temple_switch(0x2c) {
            enum entrance {
                west = entrance(0x01, 0x1b, DIRECTION.EAST),
            }

            enum BOSS {
                DEBUG = True,

                RIDER_ID = memory_tmp(),
                MOUNT_ID = memory_tmp(),
                TMP_ID = memory_tmp(),

                PHASE = memory_tmp(),
                TIMER = memory_tmp(),

                DISMOUNT = memory_tmp(),

                COUNTDOWN = 0x03,
            }

            fun show_switch(show) {
                if(show) {
                    object[0x00] = 0x0a;
                } else {
                    object[0x00] = 0x00;
                }
            }

            @install()
            fun boss_defeated() {
                set(SOULS_MEMORY.DEAD_TEMPLE_MINITAUR);
                SOULS_MEMORY.BOSSES_DEFEATED_COUNTER = SOULS_MEMORY.BOSSES_DEFEATED_COUNTER + 0x01;
                SOULS_MEMORY.PROGRESS_COUNTER = SOULS_MEMORY.PROGRESS_COUNTER + 0x01;

                show_switch(True);
            }
            fun switch_activated() {
                if!(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                    set(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED);

                    // debug_memory(BOSS.DISMOUNT, BOSS.DISMOUNT);
                    object[0x00] = 0x0b;
                }
            }

            enum stepon_trigger {
                exit_west = @install() fun test() {
                    map_transition(town_temple, east_1, DIRECTION.WEST);
                },
                switch = @install() fun test() {
                    switch_activated();
                }
            }

            @install()
            @async()
            fun stack_t01_offset() {
                while!(dead(BOSS.MOUNT_ID)) {
                    if(BOSS.DISMOUNT == 0x00) {
                        BOSS.RIDER_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
                        BOSS.RIDER_ID[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x1d;
                    }
                    yield();
                }
            }

            @install()
            fun rider_damage() {
                if(BOSS.PHASE == 0x00) {
                    BOSS.DISMOUNT = BOSS.DISMOUNT + 0x100;
                    // attribute_bit(BOSS.RIDER_ID, ATTRIBUTE_BITS.CLIP);
                } else if(BOSS.PHASE == 0x01) {
                    if(dead(BOSS.MOUNT_ID)) { // TODO: doesn't trigger if minitaur dies last
                        BOSS.PHASE = 0x02;
                        end();
                    }
                }
            }
            @install()
            fun mount_damage() {
                if(BOSS.PHASE == 0x00) {
                    if(BOSS.MOUNT_ID[ATTRIBUTE.HP] < 0x012c) {
                        BOSS.PHASE = 0x01;
                        end();
                    }
                    nop();
                } if(BOSS.PHASE == 0x01) {
                    BOSS.DISMOUNT = BOSS.DISMOUNT + 0x100;
                    // attribute_bit(BOSS.RIDER_ID, ATTRIBUTE_BITS.CLIP);
                    animate(BOSS.MOUNT_ID, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
                }
            }

            @install()
            @async()
            fun boss_watcher() {
                if(BOSS.DEBUG) {
                    subtext(string("phase 0[END]"));
                }

                while(BOSS.PHASE == 0x00) {
                    if(BOSS.DISMOUNT == 0x05) {
                        _heel(BOSS.RIDER_ID, BOSS.MOUNT_ID[ATTRIBUTE.X], BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x1d);
                        // attribute_bit(BOSS.RIDER_ID, ATTRIBUTE_BITS.NO_CLIP);
                        animate(BOSS.RIDER_ID, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_EXIT);
                    } else if(BOSS.DISMOUNT == 0x01) {
                        BOSS.RIDER_ID[ATTRIBUTE.Z] = BOSS.MOUNT_ID[ATTRIBUTE.Z];
                    }
                
                    if(BOSS.DISMOUNT > 0x00) { // TODO: buggy, since menu resets paletts
                        BOSS.DISMOUNT = BOSS.DISMOUNT - 0x01;
                    }

                    yield();
                }

                if(BOSS.DEBUG) {
                    subtext(string("phase 1[END]"));
                }

                BOSS.TMP_ID = BOSS.RIDER_ID;
                BOSS.RIDER_ID = BOSS.MOUNT_ID;
                BOSS.MOUNT_ID = BOSS.TMP_ID;

                yield();

                BOSS.DISMOUNT = 0x100;
                _heel(BOSS.RIDER_ID, BOSS.MOUNT_ID[ATTRIBUTE.X], BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x1d);
                BOSS.RIDER_ID[ATTRIBUTE.Z] = BOSS.MOUNT_ID[ATTRIBUTE.Z];
                animate(BOSS.MOUNT_ID, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);

                while(BOSS.PHASE == 0x01) {
                    if(BOSS.DISMOUNT == 0x05) {
                        _heel(BOSS.RIDER_ID, BOSS.MOUNT_ID[ATTRIBUTE.X], BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x1d);
                        // attribute_bit(BOSS.RIDER_ID, ATTRIBUTE_BITS.NO_CLIP);
                        animate(BOSS.RIDER_ID, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_EXIT);
                    } else if(BOSS.DISMOUNT == 0x01) {
                        BOSS.RIDER_ID[ATTRIBUTE.Z] = BOSS.MOUNT_ID[ATTRIBUTE.Z];
                    }
                
                    if(BOSS.DISMOUNT > 0x00) { // TODO: buggy, since menu resets paletts
                        BOSS.DISMOUNT = BOSS.DISMOUNT - 0x01;
                    }

                    yield();
                }

                if(BOSS.DEBUG) {
                    subtext(string("yatta[END]"));
                }

                boss_defeated();
            }

            fun spawn_boss() {
                add_enemy(ENEMY.MINITAUR, 0x20, 0x20);
                BOSS.MOUNT_ID = <CHARACTER.LAST_ENTITY>;
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(mount_damage));
                add_enemy(ENEMY.MEGATAUR, 0x20, 0x20);
                BOSS.RIDER_ID = <CHARACTER.LAST_ENTITY>;
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(rider_damage));

                animate(BOSS.RIDER_ID, ANIMATION_MODE.FREEZE, ANIMATION_ENEMY.MEGATAUR_ENTER);
                
                stack_t01_offset();
                boss_watcher();
            }

            fun trigger_enter() {
                if!(SOULS_MEMORY.DEAD_TEMPLE_MINITAUR) {
                    show_switch(False);

                    spawn_boss();
                } else {
                    if(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                        object[0x00] = 0x0b;
                    } else {
                        show_switch(True);
                    }
                }

                fade_in();
            }
        };
    };

    map town_center(0x08) {
        enum entrance {
            north = entrance(0x2c, 0x03, DIRECTION.SOUTH),
            east = entrance(0x5b, 0x37, DIRECTION.WEST),
            west_1 = entrance(0x01, 0x40, DIRECTION.EAST),
            west_2 = entrance(0x01, 0x14, DIRECTION.EAST),

            door = entrance(0x08, 0x5d, DIRECTION.SOUTH),

            crash = entrance(0x2c, 0x39, DIRECTION.NONE),
        }

        enum stepon_trigger {
            exit_east = @install() fun test() {
                map_transition(town_market, west, DIRECTION.EAST);
            },
            exit_door = @install() fun test() {
                map_transition(town_room, ship_tavern, DIRECTION.NORTH);
            },
            exit_north = @install() fun test() {
                map_transition(town_level_1, south, DIRECTION.NORTH);
            },
            exit_west_1 = @install() fun test() {
                map_transition(town_bridge, east, DIRECTION.WEST);
            },
            exit_west_2 = @install() fun test() {
                map_transition(town_market_alley, east, DIRECTION.WEST);
            },
        }

        enum b_trigger {
            guard_south = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            guard_center_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            guard_center_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            guard_north = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
        }

        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            fade_in();

            object[0x0d] = 0x02;

            // object[0x0e] = 0x01;
        }
    };

    map town_room(0x30) {
        enum entrance {
            cave_hammock = entrance(0x0f, 0x29, DIRECTION.NORTH),
            cave_crates = entrance(0x0f, 0x5b, DIRECTION.NORTH),
            ship_small = entrance(0x47, 0x51, DIRECTION.NORTH),
            ship_tavern = entrance(0x6f, 0x51, DIRECTION.NORTH),
            cave_monk = entrance(0x4f, 0x23, DIRECTION.NORTH),
        }

        enum stepon_trigger {
            monk = @install() fun test() {
                subtext(string("exit? 0 [END]"));
            },
            monk_trigger_west = @install() fun test() {
                subtext(string("exit? 1 [END]"));
            },
            monk_trigger_south = @install() fun test() {
                subtext(string("exit? 2 [END]"));
            },
            exit_cave_hammock = @install() fun test() {
                subtext(string("exit? 3 [END]"));
            },
            exit_ship_tavern = @install() fun test() {
                map_transition(town_center, door, DIRECTION.SOUTH);
            },
            exit_ship_small = @install() fun test() {
                subtext(string("exit? 5 [END]"));
            },
            exit_cave_crates = @install() fun test() {
                subtext(string("exit? 6 [END]"));
            },
            exit_cave_monk = @install() fun test() {
                subtext(string("exit? 7 [END]"));
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
        }

        enum ROOM {
            RIDER_1_ID = memory_tmp(),
            MOUNT_1_ID = memory_tmp(),
            RIDER_2_ID = memory_tmp(),
            MOUNT_2_ID = memory_tmp(),
            RIDER_3_ID = memory_tmp(),
            MOUNT_3_ID = memory_tmp(),

            HITS_BOXER_1 = memory_tmp(),
            HITS_BOXER_2 = memory_tmp(),
            HITS_BOXER_3 = memory_tmp(),

            HITS_THRESHOLD = 0x05,

            BOXERS_BEATEN = memory_tmp(),

            BOXERS_BEATEN_THRESHOLD = 0x03,
        }

        @install()
        @async()
        fun stack_boxer1() {
            while!(dead(ROOM.RIDER_1_ID)) {
                ROOM.RIDER_1_ID[ATTRIBUTE.X] = ROOM.MOUNT_1_ID[ATTRIBUTE.X];
                ROOM.RIDER_1_ID[ATTRIBUTE.Y] = ROOM.MOUNT_1_ID[ATTRIBUTE.Y];
                yield();
            }
        }
        @install()
        @async()
        fun stack_boxer2() {
            while!(dead(ROOM.RIDER_2_ID)) {
                ROOM.RIDER_2_ID[ATTRIBUTE.X] = ROOM.MOUNT_2_ID[ATTRIBUTE.X];
                ROOM.RIDER_2_ID[ATTRIBUTE.Y] = ROOM.MOUNT_2_ID[ATTRIBUTE.Y];
                yield();
            }
        }
        @install()
        @async()
        fun stack_boxer3() {
            while!(dead(ROOM.RIDER_3_ID)) {
                ROOM.RIDER_3_ID[ATTRIBUTE.X] = ROOM.MOUNT_3_ID[ATTRIBUTE.X];
                ROOM.RIDER_3_ID[ATTRIBUTE.Y] = ROOM.MOUNT_3_ID[ATTRIBUTE.Y];
                yield();
            }
        }

        fun boxer_hit(rider_id, mount_id, hit_counter) { // TODO: buggy
            hit_counter = hit_counter + 0x01;

            debug_memory(hit_counter, ROOM.HITS_THRESHOLD);

            if(hit_counter >= ROOM.HITS_THRESHOLD) {
                add_enemy(ENEMY.PLACEHOLDER, 0x00, 0x00);
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = rider_id[ATTRIBUTE.X];
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = rider_id[ATTRIBUTE.Y];

                destroy(mount_id);
                destroy(rider_id);

                ROOM.BOXERS_BEATEN = ROOM.BOXERS_BEATEN + 0x01;
                
            }
        }

        fun boxer_killed() {
            ROOM.BOXERS_BEATEN = ROOM.BOXERS_BEATEN + 0x01;

            if(ROOM.BOXERS_BEATEN >= ROOM.BOXERS_BEATEN_THRESHOLD) {
                subtext(string("yatta[END]"));

                SOULS_MEMORY.PROGRESS_COUNTER = SOULS_MEMORY.PROGRESS_COUNTER + 0x01;
                SOULS_MEMORY.BOSSES_DEFEATED_COUNTER = SOULS_MEMORY.BOSSES_DEFEATED_COUNTER + 0x01;

                set(SOULS_MEMORY.DEAD_TAVERN_BOXERS);
            }
        }

        @install()
        fun boxer1dead() {
            // boxer_hit(ROOM.RIDER_1_ID, ROOM.MOUNT_1_ID ,ROOM.HITS_BOXER_1);

            ROOM.HITS_BOXER_1 = ROOM.HITS_BOXER_1 + 0x01;

            if(ROOM.HITS_BOXER_1 >= ROOM.HITS_THRESHOLD) {
                add_enemy(ENEMY.PLACEHOLDER, 0x00, 0x00);
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = ROOM.RIDER_1_ID[ATTRIBUTE.X];
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = ROOM.RIDER_1_ID[ATTRIBUTE.Y];

                destroy(ROOM.MOUNT_1_ID);
                destroy(ROOM.RIDER_1_ID);

                boxer_killed();
            }
        }
        @install()
        fun boxer2dead() {
            // boxer_hit(ROOM.RIDER_2_ID, ROOM.MOUNT_2_ID ,ROOM.HITS_BOXER_2);

            ROOM.HITS_BOXER_2 = ROOM.HITS_BOXER_2 + 0x01;

            if(ROOM.HITS_BOXER_2 >= ROOM.HITS_THRESHOLD) {
                add_enemy(ENEMY.PLACEHOLDER, 0x00, 0x00);
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = ROOM.RIDER_2_ID[ATTRIBUTE.X];
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = ROOM.RIDER_2_ID[ATTRIBUTE.Y];

                destroy(ROOM.RIDER_2_ID);
                destroy(ROOM.MOUNT_2_ID);

                boxer_killed();
            }
        }
        @install()
        fun boxer3dead() {
            // boxer_hit(ROOM.RIDER_3_ID, ROOM.MOUNT_3_ID ,ROOM.HITS_BOXER_3);

            ROOM.HITS_BOXER_3 = ROOM.HITS_BOXER_3 + 0x01;

            if(ROOM.HITS_BOXER_3 >= ROOM.HITS_THRESHOLD) {
                add_enemy(ENEMY.PLACEHOLDER, 0x00, 0x00);
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = ROOM.RIDER_3_ID[ATTRIBUTE.X];
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = ROOM.RIDER_3_ID[ATTRIBUTE.Y];

                destroy(ROOM.RIDER_3_ID);
                destroy(ROOM.MOUNT_3_ID);

                boxer_killed();
            }
        }

        fun trigger_enter() {
            if!(SOULS_MEMORY.DEAD_TAVERN_BOXERS) {
                add_enemy(ENEMY.BOXER_1, 0x5c, 0x49);
                ROOM.RIDER_1_ID = <CHARACTER.LAST_ENTITY>;
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = SYSTEM.HP_MAX;
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(boxer1dead));
                add_enemy(ENEMY.MAGGOT_RED, 0x5c, 0x49);
                ROOM.MOUNT_1_ID = <CHARACTER.LAST_ENTITY>;
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

                add_enemy(ENEMY.BOXER_2, 0x80, 0x3d);
                ROOM.RIDER_2_ID = <CHARACTER.LAST_ENTITY>;
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = SYSTEM.HP_MAX;
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(boxer2dead));
                add_enemy(ENEMY.MAGGOT_RED, 0x80, 0x3d);
                ROOM.MOUNT_2_ID = <CHARACTER.LAST_ENTITY>;
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

                add_enemy(ENEMY.BOXER_2, 0x80, 0x45);
                ROOM.RIDER_3_ID = <CHARACTER.LAST_ENTITY>;
                <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = SYSTEM.HP_MAX;
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(boxer3dead));
                add_enemy(ENEMY.MAGGOT_RED, 0x80, 0x45);
                ROOM.MOUNT_3_ID = <CHARACTER.LAST_ENTITY>;
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

                stack_boxer1();
                stack_boxer2();
                stack_boxer3();
            }

            fade_in();
        }
    };

    map town_market(0x0a) {
        enum entrance {
            north_1 = entrance(0x0f, 0x08, DIRECTION.SOUTH),
            north_2 = entrance(0x30, 0x08, DIRECTION.SOUTH),
            north_3 = entrance(0x54, 0x08, DIRECTION.SOUTH),
            east_1 = entrance(0x5f, 0x18, DIRECTION.WEST),
            east_2 = entrance(0x5f, 0x46, DIRECTION.WEST),
            west = entrance(0x05, 0x4b, DIRECTION.EAST),

            door_1 = entrance(0x5c, 0x3a, DIRECTION.SOUTH),
            door_2 = entrance(0x5a, 0x72, DIRECTION.SOUTH),

            crash = entrance(0x45, 0x7b, DIRECTION.NONE),
        }

        enum stepon_trigger {
            prophet_south = @install() fun test() {
                subtext(string("exit? 0 [END]"));
            },
            prophet_east = @install() fun test() {
                subtext(string("exit? 1 [END]"));
            },
            prophet_north = @install() fun test() {
                subtext(string("exit? 2 [END]"));
            },
            exit_north_2 = @install() fun test() {
                subtext(string("exit? 3 [END]"));
            },
            exit_north_3 = @install() fun test() {
                subtext(string("exit? 4 [END]"));
            },
            exit_north_1 = @install() fun test() {
                subtext(string("exit? 5 [END]"));
            },
            exit_east_1 = @install() fun test() {
                subtext(string("exit? 6 [END]"));
            },
            exit_east_2 = @install() fun test() {
                subtext(string("exit? 7 [END]"));
            },
            exit_west = @install() fun test() {
                map_transition(town_center, east, DIRECTION.WEST);
            },
            door_1 = @install() fun test() {
                subtext(string("Does not open from this side.[END]"));
            },

            door_2 = @install() fun test() {
                map_transition(town_market, door_1, DIRECTION.NORTH);
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            // TODO: 3a b-trigger
        }

        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            fade_in();
        }
    };

    map town_level_1(0x7c) {
        enum entrance {
            north = entrance(0x40, 0x0b, DIRECTION.SOUTH),
            south = entrance(0x20, 0x77, DIRECTION.NORTH),

            door_1_1_left = entrance(0x2c, 0x63, DIRECTION.SOUTH),
            door_1_1_right = entrance(0x44, 0x63, DIRECTION.SOUTH),
            door_1_2 = entrance(0x74, 0x63, DIRECTION.SOUTH),
            door_1_3 = entrance(0xa2, 0x63, DIRECTION.SOUTH),
            door_1_3_back = entrance(0x92, 0x4b, DIRECTION.WEST),
            door_2_1 = entrance(0x8e, 0x29, DIRECTION.SOUTH),
            door_2_1_back = entrance(0xb7, 0x1f, DIRECTION.EAST),

            crash = entrance(0x5d, 0x5d, DIRECTION.NONE),
        }

        enum stepon_trigger {
            gate = @install() fun test() {
                subtext(string("exit? 0 [END]"));
            },
            door_1_1_left = @install() fun test() {
                subtext(string("exit? 1 [END]"));
            },
            door_1_1_right = @install() fun test() {
                subtext(string("exit? 2 [END]"));
            },
            door_1_2 = @install() fun test() {
                subtext(string("exit? 3 [END]"));
            },
            door_1_3 = @install() fun test() {
                subtext(string("exit? 4 [END]"));
            },
            door_2_1 = @install() fun test() {
                subtext(string("exit? 5 [END]"));
            },
            exit_south = @install() fun test() {
                map_transition(town_center, north, DIRECTION.SOUTH);
            },
            stepon_7 = @install() fun test() {
                subtext(string("exit? 7 [END]"));
            },
            exit_north = @install() fun test() {
                map_transition(town_level_2, south, DIRECTION.NORTH);
            },
            door_2_1_back = @install() fun test() {
                subtext(string("exit? 9 [END]"));
            },

            door_1_3_back = @install() fun test() {
                subtext(string("exit? 10 [END]"));
            },
        }

        fun trigger_enter() {
            object[0x00] = 0x7e;

            fade_in();

            if!(FLAG.IN_ANIMATION) {
                <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] - 0x20;
                <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y];
                crash_land(CHARACTER.BOTH);
            }
        }
    };

    map town_level_2(0x7b) {
        enum entrance {
            north = entrance(0x20, 0x01, DIRECTION.SOUTH),
            south = entrance(0x1c, 0x5f, DIRECTION.NORTH),
            west = entrance(0x01, 0x3e, DIRECTION.EAST),

            door_1 = entrance(0x2a, 0x01, DIRECTION.SOUTH),
            door_2 = entrance(0x2a, 0x01, DIRECTION.SOUTH),
            door_3 = entrance(0x2a, 0x01, DIRECTION.SOUTH),
            door_4 = entrance(0x2a, 0x01, DIRECTION.SOUTH),
            door_5 = entrance(0x2a, 0x01, DIRECTION.SOUTH),

            crash = entrance(0x6d, 0x41, DIRECTION.NONE),
        }

        enum stepon_trigger {
            door_1_1_back = @install() fun test() {
                subtext(string("exit? 0 [END]"));
            },
            exit_west = @install() fun test() {
                map_transition(town_temple, east_2, DIRECTION.WEST);
            },
            exit_north = @install() fun test() {
                map_transition(town_level_3, south, DIRECTION.NORTH);
            },
            exit_south = @install() fun test() {
                map_transition(town_level_1, north, DIRECTION.SOUTH);
            },
            door_1_1 = @install() fun test() {
                subtext(string("exit? 4 [END]"));
            },
            door_2_1 = @install() fun test() {
                subtext(string("exit? 5 [END]"));
            },
            door_2_2 = @install() fun test() {
                subtext(string("exit? 6 [END]"));
            },
            door_2_3 = @install() fun test() {
                subtext(string("exit? 7 [END]"));
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
        }

        fun block_market(block) {
            if(block) {
                object[0x1a] = 0x01;
            }  else {
                object[0x1a] = 0x00;
            }
        }

        fun trigger_enter() {
            if!(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                block_market(True);
            }

            fade_in();

            if!(FLAG.IN_ANIMATION) {
                <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] - 0x20;
                <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y];
                crash_land(CHARACTER.BOTH);
            }
        }
    };

    map town_level_3(0x0b) {
        enum entrance {
            north = entrance(0x56, 0x1f, DIRECTION.SOUTH),
            south = entrance(0x56, 0x45, DIRECTION.NORTH),

            crash = entrance(0x98, 0x15, DIRECTION.NONE),
        }

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                subtext(string("exit? 0 [END]"));
            },
            exit_south = @install() fun test() {
                map_transition(town_level_2, north, DIRECTION.SOUTH);
            },
            stepon_2 = @install() fun test() {
                subtext(string("exit? 2 [END]"));
            },
            exit_north = @install() fun test() {
                subtext(string("exit? 3 [END]"));
            },
            stepon_4 = @install() fun test() {
                subtext(string("exit? 4 [END]"));
            },
            stepon_5 = @install() fun test() {
                subtext(string("exit? 5 [END]"));
            },
            stepon_6 = @install() fun test() {
                subtext(string("exit? 6 [END]"));
            },
            stepon_7 = @install() fun test() {
                subtext(string("exit? 7 [END]"));
            },
            stepon_8 = @install() fun test() {
                subtext(string("exit? 8 [END]"));
            },
            stepon_9 = @install() fun test() {
                subtext(string("exit? 9 [END]"));
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
        }

        fun open_gate(open) {
            if(open) {
                object[0x00] = 0x7e;
            } else {
                object[0x00] = 0x00;
            }
        }

        enum BOSS {
            DEBUG = False,

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            BOSS_1_ID = memory_tmp(),
            BOSS_2_ID = memory_tmp(),
            BOSS_REMAINING_ID = memory_tmp(),

            LAST_DAMAGED = memory_tmp(),
            RNG = memory_tmp(),

            P1_SPELL = CAST.DISRUPT,
            P1_SPELL_LEVEL = 0x30,

            P2_TIMER_THRARSHOLD = 0x258, // 600
        }

        fun puppet_damaged(self, other, boss_id, dance_animation) {
            if(BOSS.PHASE == 0x00) {
                BOSS.PHASE = 0x01;

                // if(<CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.HP] > 0x00) {
                    cast(CHARACTER.SCRIPT_OWNER, CHARACTER.SCRIPT_OWNER, CAST.FORCEFIELD, 0x00);
                // }
            } else if(BOSS.PHASE == 0x01) {
                if(BOSS.LAST_DAMAGED == boss_id) {
                    sleep(0x05);
                    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.LOOP, dance_animation);
                    sleep(0x20);
                    cast(CHARACTER.SCRIPT_OWNER, CHARACTER.BOY, BOSS.P1_SPELL, BOSS.P1_SPELL_LEVEL);
                    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
                }
                
                BOSS.LAST_DAMAGED = boss_id;

                if(dead(<CHARACTER.SCRIPT_OWNER>)) {
                    BOSS.BOSS_REMAINING_ID = other;
                    BOSS.PHASE = 0x02;
                }
            }
        }

        @install()
        fun damage_1() {
            puppet_damaged(BOSS.BOSS_1_ID, BOSS.BOSS_2_ID, 0x11, ANIMATION_ENEMY.PUPPET_1_DANCE);
        }
        @install()
        fun damage_2() {
            puppet_damaged(BOSS.BOSS_2_ID, BOSS.BOSS_1_ID, 0x22, ANIMATION_ENEMY.PUPPET_2_DANCE);
        }

        @install()
        @async()
        fun boss_ai() {
            if(BOSS.DEBUG) {
                subtext(string("phase 0[END]"));
            }
            
            while(BOSS.PHASE == 0x00) {
                yield();
            }

            if(BOSS.DEBUG) {
                subtext(string("phase 1[END]"));
            }
            
            while(BOSS.PHASE == 0x01) {
                yield();
            }

            if(BOSS.DEBUG) {
                subtext(string("phase 2[END]"));
            }

            BOSS.TIMER = 0x0000;

            while!(dead(BOSS.BOSS_REMAINING_ID)) {
                if(BOSS.TIMER > BOSS.P2_TIMER_THRARSHOLD) {
                    BOSS.TIMER = 0x0000;
                    BOSS.RNG = randrange(0x03);

                    if(BOSS.BOSS_REMAINING_ID == BOSS.BOSS_1_ID) {
                        if(BOSS.RNG == 0x00) {
                            animate(BOSS.BOSS_REMAINING_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.PUPPET_1_DANCE);

                            cast(BOSS.BOSS_REMAINING_ID, CHARACTER.BOY, CAST.COROSION, 0x10);
                            cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, CAST.FORCEFIELD, 0x00);
                        } else if(BOSS.RNG == 0x01) {
                            animate(BOSS.BOSS_REMAINING_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.PUPPET_1_DANCE);

                            cast(BOSS.BOSS_REMAINING_ID, CHARACTER.BOY, CAST.CONFOUND, 0x10);
                        } else if(BOSS.RNG == 0x02) {
                            cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, CAST.FORCEFIELD, 0x00);
                            animate(BOSS.BOSS_REMAINING_ID, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.PUPPET_1_DANCE);
                        }
                    } else {
                        if(BOSS.RNG == 0x00) {
                            animate(BOSS.BOSS_REMAINING_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.PUPPET_2_DANCE);

                            cast(CHARACTER.BOY, CHARACTER.BOY, CAST.COROSION, 0x10);
                            cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, CAST.FORCEFIELD, 0x00);
                        } else if(BOSS.RNG == 0x01) {
                            animate(BOSS.BOSS_REMAINING_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.PUPPET_2_DANCE);

                            cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, CAST.HEAL, 0x10);
                        } else if(BOSS.RNG == 0x02) {
                            cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, CAST.FORCEFIELD, 0x00);
                            animate(BOSS.BOSS_REMAINING_ID, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.PUPPET_2_DANCE);
                        }
                    }
                } else {
                    BOSS.TIMER = BOSS.TIMER + 0x01;
                }

                yield();
            }

            if(BOSS.DEBUG) {
                subtext(string("yatta[END]"));
            }
        }

        fun puppet_1(x, y) {
            add_enemy(ENEMY.PUPPET_1, x, y);
            animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.PUPPET_1_DANGLING);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
        }
        fun puppet_2(x, y) {
            add_enemy(ENEMY.PUPPET_2, x, y);
            animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.PUPPET_2_DANGLING);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
        }

        fun trigger_enter() {
            open_gate(True);

            fade_in();

            if!(FLAG.IN_ANIMATION) {
                <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] - 0x20;
                <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y];
                crash_land(CHARACTER.BOTH);
            }

            // puppet_1(0x40, 0x29);
            // puppet_1(0x6c, 0x29);
            // puppet_2(0x56, 0x30);


            puppet_1(0x4b, 0x29);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(damage_1));
            BOSS.BOSS_1_ID = <CHARACTER.LAST_ENTITY>;

            puppet_2(0x61, 0x29);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(damage_2));
            BOSS.BOSS_2_ID = <CHARACTER.LAST_ENTITY>;

            boss_ai();
        }
    };
};

map town_bridge(0x1f) {
    enum entrance {
        east = entrance(0x63, 0x1d, DIRECTION.WEST),
        west = entrance(0x01, 0x21, DIRECTION.EAST)
    }

    enum stepon_trigger {
        exit_east = @install() fun test() {
            map_transition(town_center, west_1, DIRECTION.EAST);
        },
        exit_west = @install() fun test() {
            map_transition(bog_curve, east, DIRECTION.WEST);
        }
    }

    fun open_east_exit(open) {
        if(open) {
           object[0x00] = 0x00; 
        } else {
            object[0x00] = 0x7e;
        }
    }
    fun open_bridge(open) {
        if(open) {
           object[0x07] = 0x07e; 
        } else {
            object[0x07] = 0x00;
        }
    }

    fun trigger_enter() {
        // open_east_exit(True);

        // object[0x01] = 0x7e;
        object[0x02] = 0x7e;
        // object[0x03] = 0x7e;

        object[0x04] = 0x7e;
        // object[0x05] = 0x7e;
        object[0x06] = 0x7e;
        
        open_bridge(True);

        fade_in();
    }
};

map bog_curve(0x20) {
    enum entrance {
        east = entrance(0x2b, 0x15, DIRECTION.WEST),
        south = entrance(0x1b, 0x29, DIRECTION.NORTH)
    }

    enum stepon_trigger {
        exit_east = @install() fun test() {
            map_transition(town_bridge, west, DIRECTION.EAST);
        },
        exit_south = @install() fun test() {
            map_transition(bog_bridges, north, DIRECTION.SOUTH);
        }
    }

    fun boss_defeated() {
        SOULS_MEMORY.BOSSES_DEFEATED_COUNTER = SOULS_MEMORY.BOSSES_DEFEATED_COUNTER + 0x01;
        SOULS_MEMORY.PROGRESS_COUNTER = SOULS_MEMORY.PROGRESS_COUNTER + 0x01;

        set(SOULS_MEMORY.DEAD_NARIS);
    }

    enum BOSS {
        DEBUG = True,

        RIDER_ID = memory_tmp(),
        MOUNT_ID = memory_tmp(),

        BOSS_HP = 0x07d0, // 0d2000

        GUESS_RNG = memory_tmp(),
        ANGER_LEVEL = 0x0000,

        P1_THRESHOLD = 0x00,
    }

    @install()
    fun naris_opening() {
        dialog(string("[0x96]Hi![PAUSE:29] I'm Naris, the smartest boy in Ebon Keep.[PAUSE:51] I bet you're not as smart as me![0x86][END]"));
    }

    // @install()
    fun spawn_enemies(enemy_id) {
        add_enemy(enemy_id, 0x00, 0x00);
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y];
        add_enemy(enemy_id, 0x00, 0x00);
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y];
    }

    @install()
    fun young_naris_question() {
        control_enemy(BOSS.MOUNT_ID, True);
        MEMORY.STRING_PARAMETER_1 = 0x00;
        MEMORY.STRING_PARAMETER_2 = 0x01;

        question(string("Guess the number of marbles in my hand and I'll give you something.[0x86]What's your guess?[LF][PAUSE:3d][0x8b][0xa1].[LF][0x8b][0xa2].[END]"));

        BOSS.GUESS_RNG = randrange(0x02);

        if(MEMORY.QUESTION_ANSWER == BOSS.GUESS_RNG) {
            if(BOSS.DEBUG) {
                subtext(string("yay[END]"));
            }

            damage(BOSS.MOUNT_ID, 0x29a);
        } else if(MEMORY.QUESTION_ANSWER == 0x00) {
            if(BOSS.DEBUG) {
                subtext(string("nay 0[END]"));
            }

            spawn_enemies(ENEMY.MAGGOT);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) {
            if(BOSS.DEBUG) {
                subtext(string("nay 1[END]"));
            }

            spawn_enemies(ENEMY.MOSQUITO);
        }

        if(BOSS.DEBUG) {
            sleep(0x30);
            debug_memory(MEMORY.QUESTION_ANSWER, BOSS.GUESS_RNG);
        }

        control_enemy(BOSS.MOUNT_ID, False);
    }
    @install()
    fun old_naris_question() {
        control_enemy(BOSS.MOUNT_ID, True);
        MEMORY.STRING_PARAMETER_1 = 0x00;
        MEMORY.STRING_PARAMETER_2 = 0x01;
        MEMORY.STRING_PARAMETER_3 = 0x02;

        question(string("Guess the number of marbles in my hand and I'll give you something.[0x86]What's your guess?[LF][PAUSE:3d][0x8b][0xa1].[LF][0x8b][0xa2].[LF][0x8b][0xa3].[END]"));

        BOSS.GUESS_RNG = randrange(0x03);

        if(MEMORY.QUESTION_ANSWER == BOSS.GUESS_RNG) {
            if(BOSS.DEBUG) {
                subtext(string("yay[END]"));
            }

            damage(BOSS.MOUNT_ID, 0x29a);
        } else if(MEMORY.QUESTION_ANSWER == 0x00) {
            if(BOSS.DEBUG) {
                subtext(string("nay 0[END]"));
            }

            spawn_enemies(ENEMY.MAGGOT);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) {
            if(BOSS.DEBUG) {
                subtext(string("nay 1[END]"));
            }

            spawn_enemies(ENEMY.MOSQUITO);
        } else if(MEMORY.QUESTION_ANSWER == 0x02) {
            if(BOSS.DEBUG) {
                subtext(string("nay 2[END]"));
            }

            spawn_enemies(ENEMY.SKELESNAIL);
        }

        if(BOSS.DEBUG) {
            sleep(0x30);
            debug_memory(MEMORY.QUESTION_ANSWER, BOSS.GUESS_RNG);
        }

        control_enemy(BOSS.MOUNT_ID, False);
    }
    
    fun spawn_young_naris() {
        add_enemy(ENEMY.NARIS_YOUNG, 0x14, 0x14);
        BOSS.MOUNT_ID = <CHARACTER.LAST_ENTITY>;
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(naris_opening));
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = BOSS.BOSS_HP;
    }

    fun spawn_old_naris() {
        add_enemy(ENEMY.VILLAGER_3_4, 0x00, 0x00);
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y];
        BOSS.MOUNT_ID = <CHARACTER.LAST_ENTITY>;
    }

    @install()
    @async()
    fun boss_watcher() {
        if(DEBUG) {
            subtext(string("phase 0[END]"));
        }

        while(BOSS.RIDER_ID[ATTRIBUTE.HP] >= SYSTEM.HP_MAX) {
            yield();
        }

        attach_script(BOSS.RIDER_ID, SCRIPT_TRIGGER.DAMAGE, reference(young_naris_question));

        if(DEBUG) {
            subtext(string("phase 1[END]"));
        }

        while!(dead(BOSS.MOUNT_ID)) {
            yield();
        }

        spawn_old_naris();
        attach_script(BOSS.RIDER_ID, SCRIPT_TRIGGER.DAMAGE, reference(old_naris_question));

        if(DEBUG) {
            subtext(string("phase 2[END]"));
        }

        while!(dead(BOSS.MOUNT_ID)) {
            yield();
        }

        destroy(BOSS.RIDER_ID);

        if(DEBUG) {
            subtext(string("yatta[END]"));
        }

        boss_defeated();
    }

    @install()
    @async()
    fun stack_t01() {
        while!(dead(BOSS.RIDER_ID)) {
            BOSS.RIDER_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
            BOSS.RIDER_ID[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y];
            yield();
        }
    }

    fun trigger_enter() {
        // object[0x00] = 0x7e;
        object[0x01] = 0x7e;

        if!(SOULS_MEMORY.DEAD_NARIS) {
            add_enemy_with_flags(ENEMY.LIZARD, 0x14, 0x14, FLAG_ENEMY.INACTIVE_INVISIBLE);
            BOSS.RIDER_ID = <CHARACTER.LAST_ENTITY>;
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = SYSTEM.HP_MAX;

            spawn_young_naris();

            boss_watcher();
            stack_t01();
        }

        fade_in();
    }
};

map bog_bridges(0x40) {
    enum entrance {
        north = entrance(0x0b, 0x01, DIRECTION.SOUTH),
        south = entrance(0x1b, 0x53, DIRECTION.NORTH)
    }

    enum stepon_trigger {
        exit_north = @install() fun test() {
            map_transition(bog_curve, south, DIRECTION.NORTH);
        },
        exit_south = @install() fun test() {
            map_transition(bog_crossing, north_short, DIRECTION.SOUTH);
        }
    }

    fun trigger_enter() {
        fade_in();
    }
};

map bog_crossing(0x05) {
    enum entrance {
        north = entrance(0x2d, 0x01, DIRECTION.SOUTH),
        east = entrance(0x5f, 0x4d, DIRECTION.WEST),
        west_1 = entrance(0x04, 0x71, DIRECTION.EAST),
        west_2 = entrance(0x04, 0x2f, DIRECTION.EAST),

        north_short = entrance(0x24, 0x1f, DIRECTION.SOUTH),
    }

    enum ROOM {
        FAKE_EXIT_ID = memory_tmp()
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        exit_east = @install() fun test() {
            map_transition(bog_crossing_firepit, west, DIRECTION.EAST);
        },
        exit_north = @install() fun test() {
            map_transition(bog_bridges, south, DIRECTION.NORTH);
        },

        exit_west_2_east = @install() fun test() {
            map_transition(bog_crossing_gourds, east, DIRECTION.WEST);
        },
        exit_west_1_exit = @install() fun test() {
            map_transition(ship, east, DIRECTION.WEST);
        },
        stepon_12 = @install() fun test() {
            subtext(string("exit? 12 [END]"));
        },
        stepon_13 = @install() fun test() {
            subtext(string("exit? 13 [END]"));
        },
        stepon_14 = @install() fun test() {
            subtext(string("exit? 14 [END]"));
        },
        stepon_15 = @install() fun test() {
            subtext(string("exit? 15 [END]"));
        },
        stepon_16 = @install() fun test() {
            subtext(string("exit? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("exit? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("exit? 18 [END]"));
        },
        stepon_19 = @install() fun test() {
            subtext(string("exit? 19 [END]"));
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        },
    }

    fun fake_exit() {
        map_transition(bog_bridges, south, DIRECTION.NORTH);
    }

    @install()
    @async()
    fun fake_exit_scanner() {
        attach_to_script(ROOM.FAKE_EXIT_ID);

        while(True) {
            arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
            arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
            arg[0x04] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
            arg[0x06] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= 0x15) && (arg[0x0a] <= 0x15)) {
                fake_exit();
                end();
            }

            yield();
        }
    }
    
    fun trigger_enter() {
        init_map(0x00, 0x1e, 0xff, 0xff);

        object[0x03] = 0x01;
        object[0x04] = 0x01;

        add_enemy(ENEMY.PLACEHOLDER, 0x24, 0x1f);
        ROOM.FAKE_EXIT_ID = <CHARACTER.LAST_ENTITY>;

        fade_in();

        sleep(0x10);
        fake_exit_scanner();
    }
};

map bog_crossing_firepit(0x04) {
    enum entrance {
        west = entrance(0x03, 0x1f, DIRECTION.EAST),
    }

    enum stepon_trigger {
        exit_east = @install() fun test() {
            map_transition(bog_crossing, east, DIRECTION.WEST);
        },
        windwalker = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
    }

    fun trigger_enter() {
        fade_in();
    }
};

map bog_crossing_gourds(0x26) {
    enum entrance {
        east = entrance(0x26, 0x13, DIRECTION.WEST),
    }

    enum stepon_trigger {
        exit_east = @install() fun test() {
            map_transition(bog_crossing, west_2, DIRECTION.EAST);
        },
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
    }
    
    fun trigger_enter() {
        fade_in();
    }
};

map ship(0x68) {
    enum entrance {
        east = entrance(0x5f, 0x5b, DIRECTION.WEST),
        west = entrance(0x05, 0x59, DIRECTION.EAST),

        door_1_1 = entrance(0x59, 0x2d, DIRECTION.SOUTH),
        door_2_1 = entrance(0x30, 0x24, DIRECTION.SOUTH),
        door_2_2 = entrance(0x32, 0x40, DIRECTION.SOUTH),
        door_3_1 = entrance(0x13, 0x0d, DIRECTION.SOUTH),
        door_3_2 = entrance(0x4b, 0x0d, DIRECTION.SOUTH),
    }

    enum stepon_trigger {
        door_3_1_stairs = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        door_3_2_stairs = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        door_2_2_stairs = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        door_1_1_stairs = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        lift_top = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        exit_west = @install() fun test() {
            map_transition(east_crossing, east, DIRECTION.WEST);
        },
        door_3_1 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        door_2_2 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        door_2_1 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        door_1_1 = @install() fun test() {
            subtext(string("exit? 9 [END]"));
        },

        door_3_2 = @install() fun test() {
            subtext(string("exit? 10 [END]"));
        },
        exit_east = @install() fun test() {
            map_transition(bog_crossing, west_1, DIRECTION.EAST);
        },
        lift_bottom = @install() fun test() {
            subtext(string("exit? 12 [END]"));
        },
    }

    fun trigger_enter() {
        add_enemy(ENEMY.STONE_ROUND, 0x54, 0x52);
        
        fade_in();
    }
};

// dungeons

area dungeon_isaac() {
    enum AREA_BASEMENT {
        DEBUG = True,

        // ENABLE_DOORS = memory_tmp(),

        ENEMY_COUNT_TOTAL = memory_tmp(),
        ENEMY_COUNT = memory_tmp(),
    }

    fun prepare_room(index) {
        if(index == 0x01) {
            init_map(0x00, 0x00, 0x34, 0x1e); // room_1
        } else if(index == 0x02) {
            init_map(0x38, 0x00, 0x6e, 0x1e); // room 2
        } else if(index == 0x03) {
            init_map(0x4c, 0x24, 0x6e, 0x54); // room_3
        } else if(index == 0x04) {
            init_map(0x26, 0x24, 0x48, 0x54); // room_4
        } else if(index == 0x05) {
            init_map(0x00, 0x24, 0x22, 0x54); // room_5
        }
    }

    @install()
    fun enemies_alive() {
        MEMORY.STRING_PARAMETER_1 = AREA_BASEMENT.ENEMY_COUNT;
        MEMORY.STRING_PARAMETER_2 = AREA_BASEMENT.ENEMY_COUNT_TOTAL;

        subtext(string("[0xa1]/[0xa2] enemies alive.[END]"));
    }

    fun check_exits(clear_flag) {
        if(AREA_BASEMENT.ENEMY_COUNT > 0x00) {
            enemies_alive();

            end();
        } else {
            set(clear_flag);
        }
    }

    @install()
    fun shoot(entity) {
        code(0xb5, param(THROWABLE.ONION), calculate(entity), calculate(entity[ATTRIBUTE.X]), calculate(entity[ATTRIBUTE.Y]), param(0xff), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
    }
    @install()
    fun shoot_plus(entity) {
        code(0xb5, param(THROWABLE.ONION), calculate(entity), calculate(entity[ATTRIBUTE.X]), calculate(entity[ATTRIBUTE.Y]), param(0xff), calculate(entity[ATTRIBUTE.X]), calculate(entity[ATTRIBUTE.Y] - 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
        code(0xb5, param(THROWABLE.ONION), calculate(entity), calculate(entity[ATTRIBUTE.X]), calculate(entity[ATTRIBUTE.Y]), param(0xff), calculate(entity[ATTRIBUTE.X] + 0x80), calculate(entity[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
        code(0xb5, param(THROWABLE.ONION), calculate(entity), calculate(entity[ATTRIBUTE.X]), calculate(entity[ATTRIBUTE.Y]), param(0xff), calculate(entity[ATTRIBUTE.X]), calculate(entity[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
        code(0xb5, param(THROWABLE.ONION), calculate(entity), calculate(entity[ATTRIBUTE.X]), calculate(entity[ATTRIBUTE.Y]), param(0xff), calculate(entity[ATTRIBUTE.X] - 0x80), calculate(entity[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
    }
    @install()
    fun shoot_bomb(entity) {
        code(0xb5, param(THROWABLE.ONION), calculate(entity), calculate(entity[ATTRIBUTE.X]), calculate(entity[ATTRIBUTE.Y]), param(0x1a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x2a), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
        arg[0x02] = <CHARACTER.BOY>[ATTRIBUTE.X];
        arg[0x04] = <CHARACTER.BOY>[ATTRIBUTE.Y];

        sleep(0x50);
        code(0xb5, param(THROWABLE.BOMB_EXPLOSION), calculate(entity), calculate(arg[0x02]), calculate(arg[0x04]), param(0x00), param(0x60), param(0x60), param(0x00), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
        add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_GREEN_1, 0x00, 0x00);
        arg[0x06] = <CHARACTER.LAST_ENTITY>;

        arg[0x06][ATTRIBUTE.X] = arg[0x02];
        arg[0x06][ATTRIBUTE.Y] = arg[0x04];
        sleep(0x20);
        _destroy(arg[0x06]);
    }
    @install()
    fun explode(entity) {
        code(0xb5, param(THROWABLE.BOMB_EXPLOSION), calculate(entity), calculate(entity[ATTRIBUTE.X]), calculate(entity[ATTRIBUTE.Y]), param(0x00), param(0x70), param(0x70), param(0x00), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
        add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_GREEN_1, 0x00, 0x00);
        arg[0x02] = <CHARACTER.LAST_ENTITY>;

        arg[0x02][ATTRIBUTE.X] = entity[ATTRIBUTE.X];
        arg[0x02][ATTRIBUTE.Y] = entity[ATTRIBUTE.Y];
        sleep(0x20);
        _destroy(arg[0x02]);
    }

    @install()
    fun jump(entity) {
        entity[ATTRIBUTE.JUMP_HEIGHT] = 0x30;
        
        while(arg[0x02] <= 0x30) {
            arg[0x02] = arg[0x02] + 0x01;

            if(entity[ATTRIBUTE.X] > <CHARACTER.BOY>[ATTRIBUTE.X]) {
                entity[ATTRIBUTE.X] = entity[ATTRIBUTE.X] - 0x01;
            } else if(entity[ATTRIBUTE.X] < <CHARACTER.BOY>[ATTRIBUTE.X]) {
                entity[ATTRIBUTE.X] = entity[ATTRIBUTE.X] + 0x01;
            }

            if(entity[ATTRIBUTE.Y] > <CHARACTER.BOY>[ATTRIBUTE.Y]) {
                entity[ATTRIBUTE.Y] = entity[ATTRIBUTE.Y] - 0x01;
            } else if(entity[ATTRIBUTE.Y] < <CHARACTER.BOY>[ATTRIBUTE.Y]) {
                entity[ATTRIBUTE.Y] = entity[ATTRIBUTE.Y] + 0x01;
            }

            sleep(0x02);
        }
    }

    @install()
    @async()
    fun isaac_ai_shooting(enemy) {
        sleep(0x60);

        while!(dead(enemy)) {
            shoot(enemy);
            // shoot_plus(enemy);
            // shoot_bomb(enemy);

            sleep(0xa0);
        }
    }
    @install()
    @async()
    fun isaac_ai_shooting_plus(enemy) {
        sleep(0x60);

        while!(dead(enemy)) {
            // shoot(enemy);
            shoot_plus(enemy);
            // shoot_bomb(enemy);

            sleep(0xf0);
        }
    }
    @install()
    @async()
    fun isaac_ai_jumping(enemy) {
        sleep(0x60);

        while!(dead(enemy)) {
            // _control_enemy(enemy, False);
            jump(enemy);
            // _control_enemy(enemy, True);

            sleep(0xf0);
        }
    }

    @install()
    fun isaac_enemy_death() {
        AREA_BASEMENT.ENEMY_COUNT = AREA_BASEMENT.ENEMY_COUNT - 0x01;

        // if(AREA_BASEMENT.ENEMY_COUNT == 0x00) {
        //     AREA_BASEMENT.ENABLE_DOORS = 0x01;
        // }

        if(AREA_BASEMENT.DEBUG) {
            MEMORY.STRING_PARAMETER_1 = AREA_BASEMENT.ENEMY_COUNT;
            MEMORY.STRING_PARAMETER_2 = AREA_BASEMENT.ENEMY_COUNT_TOTAL;

            subtext(string("[0xa1] / [0xa2][END]"));
        }
    }
    @install()
    fun isaac_enemy_death_shoot_plus() {
        isaac_enemy_death();

        shoot_plus(<CHARACTER.SCRIPT_OWNER>);
    }
    @install()
    fun isaac_enemy_death_shoot_bomb() {
        isaac_enemy_death();

        shoot_bomb(<CHARACTER.SCRIPT_OWNER>);
    }
    @install()
    fun isaac_enemy_death_explode() {
        isaac_enemy_death();

        explode(<CHARACTER.SCRIPT_OWNER>);
    }

    fun add_isaac_enemy() {
        AREA_BASEMENT.ENEMY_COUNT_TOTAL = AREA_BASEMENT.ENEMY_COUNT_TOTAL + 0x01;
        AREA_BASEMENT.ENEMY_COUNT = AREA_BASEMENT.ENEMY_COUNT + 0x01;
    }
    fun add_isaac_enemy_fly_shooting(x, y) {
        add_isaac_enemy();

        add_enemy(ENEMY.MOSQUITO, x, y);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(isaac_enemy_death));
        isaac_ai_shooting(<CHARACTER.LAST_ENTITY>);
    }
    fun add_isaac_enemy_fly_exploding(x, y) {
        add_isaac_enemy();

        add_enemy(ENEMY.MOSQUITO, x, y);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(isaac_enemy_death_shoot_bomb));
    }
    fun add_isaac_enemy_maggot(x, y) {
        add_isaac_enemy();

        add_enemy(ENEMY.MAGGOT, x, y);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(isaac_enemy_death));
    }
    fun add_isaac_enemy_slime(x, y) {
        add_isaac_enemy();

        add_enemy(ENEMY.SLIME_GREEN, x, y);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(isaac_enemy_death));
        isaac_ai_shooting_plus(<CHARACTER.LAST_ENTITY>);
    }
    fun add_isaac_enemy_frippo(x, y) {
        add_isaac_enemy();

        // add_enemy(ENEMY.DANCING_DEVIL_1, x, y);
        // add_enemy(ENEMY.MUMMY, x, y);
        add_enemy(ENEMY.FRIPPO, x, y);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(isaac_enemy_death));
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
        isaac_ai_jumping(<CHARACTER.LAST_ENTITY>);
    }
    fun add_isaac_enemy_spider(x, y) {
        add_isaac_enemy();

        add_enemy(ENEMY.SPIDER, x, y);
        <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = 0x01;
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(isaac_enemy_death_explode));
        // isaac_ai_jumping(<CHARACTER.LAST_ENTITY>);
    }

    area level_0() {
        map basement_0_start(0x22) { // center "+"
            enum entrance {
                north = entrance(0x11, 0x25, DIRECTION.SOUTH),
                east = entrance(0x22, 0x38, DIRECTION.WEST),
                south = entrance(0x11, 0x55, DIRECTION.NORTH),
                west = entrance(0x00, 0x38, DIRECTION.EAST),

                center = entrance(0x12, 0x38, DIRECTION.NONE),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_west = @install() fun test() {
                    map_transition(basement_0_4, east, DIRECTION.WEST);
                },
                exit_east = @install() fun test() {
                    map_transition(basement_0_2, west, DIRECTION.EAST);
                },

                exit_north = @install() fun test() {
                    map_transition(basement_0_1, south, DIRECTION.NORTH);
                },
                exit_south = @install() fun test() {
                    map_transition(basement_0_3, north, DIRECTION.SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);

                // add_isaac_enemy_fly_shooting(0x1a, 0x30);
                // add_isaac_enemy_fly_exploding(0x15, 0x30);
                // add_isaac_enemy_maggot(0x15, 0x30);
                // add_isaac_enemy_slime(0x15, 0x30);
                // add_isaac_enemy_frippo(0x15, 0x30);
                // add_isaac_enemy_spider(0x15, 0x30);

                isaac_init(True, False);

                if!(FLAG.IN_ANIMATION) {
                    // teleport(CHARACTER.DOG, 0x19, 0x1d);
                    <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] + 0x20;
                    <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] + 0x20;
                    crash_land(CHARACTER.BOTH);

                    subtext(string("Basement Level 1[END]"));
                }
            }
        };

        map basement_0_2(0x22) { // east "->"
            enum entrance {
                north = entrance(0x5f, 0x25, DIRECTION.SOUTH),
                west = entrance(0x4b, 0x4c, DIRECTION.EAST),
                south = entrance(0x5a, 0x55, DIRECTION.NORTH),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() fun test() {
                    subtext(string("exit? 13 [END]"));
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, east, DIRECTION.WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x5b, 0x2d);
                    add_isaac_enemy_maggot(0x5d, 0x2f);
                }

                isaac_init(True, False);
            }
        };

        map basement_0_3(0x22) { // south "v"
            enum entrance {
                north = entrance(0x5f, 0x25, DIRECTION.SOUTH),
                west = entrance(0x4b, 0x4c, DIRECTION.EAST),
                south = entrance(0x5a, 0x55, DIRECTION.NORTH),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, south, DIRECTION.NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() fun test() {
                    subtext(string("exit? 15 [END]"));
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x59, 0x47);
                    add_isaac_enemy_maggot(0x5b, 0x49);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_0_4(0x22) { // east "<-"
            enum entrance {
                east = entrance(0x6f, 0x17, DIRECTION.WEST),
                south_1 = entrance(0x65, 0x1f, DIRECTION.NORTH),
                south_2 = entrance(0x46, 0x1f, DIRECTION.NORTH),
                west = entrance(0x38, 0x18, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() fun test() {
                    subtext(string("exit? 5 [END]"));
                },
                east = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, west, DIRECTION.EAST);
                },
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() fun test() {
                    subtext(string("exit? 16 [END]"));
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 8 [END]"));
                },
            }

            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                // object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x51, 0x12);
                    add_isaac_enemy_maggot(0x53, 0x15);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_0_1(0x22) { // north "|"
            enum entrance {
                north = entrance(0x5f, 0x25, DIRECTION.SOUTH),
                west = entrance(0x4b, 0x4c, DIRECTION.EAST),
                south = entrance(0x5a, 0x55, DIRECTION.NORTH),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, north, DIRECTION.SOUTH);
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_door, south, DIRECTION.NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x5d, 0x2d);
                    add_isaac_enemy_maggot(0x5f, 0x2e);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_0_door(0x20) { // north-north "drake-south"
            enum entrance {
                east = entrance(0x2b, 0x15, DIRECTION.WEST),
                south = entrance(0x1b, 0x29, DIRECTION.NORTH)
            }

            enum stepon_trigger {
                exit_east = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_south = @install() fun test() {
                    map_transition(basement_0_1, north, DIRECTION.SOUTH);
                }
            }

            @install()
            fun trap_door_interacted() {
                map_transition(basement_1_start, center, DIRECTION.NONE);
            }

            fun trigger_enter() {
                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x10, 0x13);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(trap_door_interacted));

                isaac_init(True, False);

                // object[0x00] = 0x01; // close south
                // object[0x01] = 0x01; // open east
            }
        };
    };

    area level_1() {
        map basement_1_start(0x22) { // center "+"
            enum entrance {
                north = entrance(0x11, 0x25, DIRECTION.SOUTH),
                east = entrance(0x22, 0x38, DIRECTION.WEST),
                south = entrance(0x11, 0x55, DIRECTION.NORTH),
                west = entrance(0x00, 0x38, DIRECTION.EAST),

                center = entrance(0x12, 0x38, DIRECTION.NONE),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_west = @install() fun test() {
                    map_transition(basement_1_5, east, DIRECTION.WEST);
                },
                exit_east = @install() fun test() {
                    map_transition(basement_1_2, west, DIRECTION.EAST);
                },

                exit_north = @install() fun test() {
                    map_transition(basement_1_4, south_1, DIRECTION.NORTH);
                },
                exit_south = @install() fun test() {
                    map_transition(basement_1_6, north, DIRECTION.SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x05);

                object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                isaac_init(True, False);

                if!(FLAG.IN_ANIMATION) {
                    // teleport(CHARACTER.DOG, 0x19, 0x1d);
                    <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] + 0x20;
                    <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] + 0x20;
                    crash_land(CHARACTER.BOTH);

                    subtext(string("Basement Level 2[END]"));
                }
            }
        };

        map basement_1_2(0x22) { // east "--"
            enum entrance {
                east = entrance(0x35, 0x16, DIRECTION.WEST),
                north = entrance(0x18, 0x1f, DIRECTION.NORTH),
                west = entrance(0x00, 0x15, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, east, DIRECTION.WEST);
                },
                exit_east = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_3, west, DIRECTION.EAST);
                },
                exit_south = @install() fun test() {
                    subtext(string("exit? 4 [END]"));
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                sign = @install() fun test() {
                    subtext(string("b? 3 [END]"));
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                sniff = @install() fun test() {
                    subtext(string("b? 7 [END]"));
                },
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x01);

                // object[0x00] = 0x01; // opens room_1_south
                // object[0x01] = 0x01; // closes room_1_east
                // object[0x12] = 0x01; // hides room_1_sign
                // object[0x09] = 0x01; // shows room_1_decoration (stone)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x24, 0x12);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_1_3(0x22) { // east-east "-^"
            enum entrance {
                north = entrance(0x5f, 0x25, DIRECTION.SOUTH),
                west = entrance(0x4b, 0x4c, DIRECTION.EAST),
                south = entrance(0x5a, 0x55, DIRECTION.NORTH),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() fun test() {
                    subtext(string("exit? 13 [END]"));
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_2, east, DIRECTION.WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x5d, 0x31);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_1_4(0x22) { // north "/\"
            enum entrance {
                east = entrance(0x6f, 0x17, DIRECTION.WEST),
                south_1 = entrance(0x65, 0x1f, DIRECTION.NORTH),
                south_2 = entrance(0x46, 0x1f, DIRECTION.NORTH),
                west = entrance(0x38, 0x18, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_5, north, DIRECTION.SOUTH);
                },
                east = @install() fun test() {
                    subtext(string("exit? 6 [END]"));
                },
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, north, DIRECTION.SOUTH);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 8 [END]"));
                },
            }

            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                // object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x53, 0x13);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_1_5(0x22) { // west "L"
            enum entrance {
                north = entrance(0x39, 0x24, DIRECTION.SOUTH),
                east = entrance(0x48, 0x4b, DIRECTION.WEST),
                west = entrance(0x26, 0x4e, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() fun test() {
                    subtext(string("exit? 1 [END]"));
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_4, south_2, DIRECTION.NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, west, DIRECTION.EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                // object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x37, 0x37);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_1_6(0x22) { // south "_|_"
            enum entrance {
                north = entrance(0x39, 0x24, DIRECTION.SOUTH),
                east = entrance(0x48, 0x4b, DIRECTION.WEST),
                west = entrance(0x26, 0x4e, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_door, east, DIRECTION.WEST);
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, south, DIRECTION.NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_9, west, DIRECTION.EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x37, 0x3b);
                    add_isaac_enemy_maggot(0x3d, 0x4a);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_1_door(0x1f) { // south-west "badboy-east"
            enum entrance {
                east = entrance(0x63, 0x1d, DIRECTION.WEST),
                west = entrance(0x01, 0x21, DIRECTION.EAST)
            }

            enum stepon_trigger {
                exit_east = @install() fun test() {
                    map_transition(basement_1_6, west, DIRECTION.EAST);
                },
                exit_west = @install() fun test() {
                    map_transition(basement_1_9, east, DIRECTION.WEST);
                }
            }

            fun open_east_exit(open) {
                if(open) {
                object[0x00] = 0x00; 
                } else {
                    object[0x00] = 0x7e;
                }
            }
            fun open_bridge(open) {
                if(open) {
                object[0x07] = 0x07e; 
                } else {
                    object[0x07] = 0x00;
                }
            }

            @install()
            fun trap_door_interacted() {
                map_transition(basement_2_start, center, DIRECTION.NONE);
            }

            fun trigger_enter() {
                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x59, 0x1d);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(trap_door_interacted));

                fade_in();
            }
        };

        map basement_1_9(0x22) { // south-east "->"
            enum entrance {
                east = entrance(0x35, 0x16, DIRECTION.WEST),
                north = entrance(0x18, 0x1f, DIRECTION.NORTH),
                west = entrance(0x00, 0x15, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_6, east, DIRECTION.WEST);
                },
                exit_east = @install() fun test() {
                    subtext(string("exit? 3 [END]"));
                },
                exit_south = @install() fun test() {
                    subtext(string("exit? 4 [END]"));
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                sign = @install() fun test() {
                    subtext(string("b? 3 [END]"));
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                sniff = @install() fun test() {
                    subtext(string("b? 7 [END]"));
                },
                room_2_sniff = nop(),
            }

            fun prepare_room(index) {
                if(index == 0x01) {
                    init_map(0x00, 0x00, 0x34, 0x1e); // room_1
                } else if(index == 0x02) {
                    init_map(0x38, 0x00, 0x6e, 0x1e); // room 2
                } else if(index == 0x03) {
                    init_map(0x4c, 0x24, 0x6e, 0x54); // room_3
                } else if(index == 0x04) {
                    init_map(0x26, 0x24, 0x48, 0x54); // room_4
                } else if(index == 0x05) {
                    init_map(0x00, 0x24, 0x22, 0x54); // room_5
                }
            }

            fun trigger_enter() {
                prepare_room(0x01);

                // object[0x00] = 0x01; // opens room_1_south
                object[0x01] = 0x01; // closes room_1_east
                // object[0x12] = 0x01; // hides room_1_sign
                // object[0x09] = 0x01; // shows room_1_decoration (stone)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x20, 0x15);
                }
                
                isaac_init(True, False);
            }
        };
    };

    area level_2() {
        map basement_2_start(0x22) { // center "+"
            enum entrance {
                north = entrance(0x11, 0x25, DIRECTION.SOUTH),
                east = entrance(0x22, 0x38, DIRECTION.WEST),
                south = entrance(0x11, 0x55, DIRECTION.NORTH),
                west = entrance(0x00, 0x38, DIRECTION.EAST),

                center = entrance(0x12, 0x38, DIRECTION.NONE),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_west = @install() fun test() {
                    subtext(string("exit? 8 [END]"));
                },
                exit_east = @install() fun test() {
                    map_transition(basement_2_4, west, DIRECTION.EAST);
                },

                exit_north = @install() fun test() {
                    map_transition(basement_2_1, south, DIRECTION.NORTH);
                },
                exit_south = @install() fun test() {
                    map_transition(basement_2_2, north, DIRECTION.SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x05);

                // object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                isaac_init(True, False);

                if!(FLAG.IN_ANIMATION) {
                    // teleport(CHARACTER.DOG, 0x19, 0x1d);
                    <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] + 0x20;
                    <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] + 0x20;
                    crash_land(CHARACTER.BOTH);

                    subtext(string("Basement Level 3[END]"));
                }
            }
        };

        map basement_2_1(0x22) { // north "^"
            enum entrance {
                north = entrance(0x5f, 0x25, DIRECTION.SOUTH),
                west = entrance(0x4b, 0x4c, DIRECTION.EAST),
                south = entrance(0x5a, 0x55, DIRECTION.NORTH),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_start, north, DIRECTION.SOUTH);
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() fun test() {
                    subtext(string("exit? 13 [END]"));
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() fun test() {
                    subtext(string("exit? 15 [END]"));
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);
                
                object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x5b, 0x32);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_2_2(0x22) { // south "L"
            enum entrance {
                north = entrance(0x39, 0x24, DIRECTION.SOUTH),
                east = entrance(0x48, 0x4b, DIRECTION.WEST),
                west = entrance(0x26, 0x4e, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() fun test() {
                    subtext(string("exit? 1 [END]"));
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_start, south, DIRECTION.NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_3, west, DIRECTION.EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                // object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x3c, 0x3c);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_2_3(0x22) { // south-east, east-south "_|"
            enum entrance {
                north = entrance(0x5f, 0x25, DIRECTION.SOUTH),
                west = entrance(0x4b, 0x4c, DIRECTION.EAST),
                south = entrance(0x5a, 0x55, DIRECTION.NORTH),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_4, south, DIRECTION.NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_2, east, DIRECTION.WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x5d, 0x3b);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_2_4(0x22) { // east "-,-"
            enum entrance {
                east = entrance(0x35, 0x16, DIRECTION.WEST),
                south = entrance(0x18, 0x1f, DIRECTION.NORTH),
                west = entrance(0x00, 0x15, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_start, east, DIRECTION.WEST);
                },
                exit_east = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_5, west, DIRECTION.EAST);
                },
                exit_south = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_3, north, DIRECTION.SOUTH);
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                sign = @install() fun test() {
                    subtext(string("b? 3 [END]"));
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                sniff = @install() fun test() {
                    subtext(string("b? 7 [END]"));
                },
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x01);

                object[0x00] = 0x01; // opens room_1_south
                // object[0x01] = 0x01; // closes room_1_east
                // object[0x12] = 0x01; // hides room_1_sign
                // object[0x09] = 0x01; // shows room_1_decoration (stone)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x26, 0x15);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_2_5(0x22) { // east-east "-|"
            enum entrance {
                north = entrance(0x11, 0x25, DIRECTION.SOUTH),
                east = entrance(0x22, 0x38, DIRECTION.WEST),
                south = entrance(0x11, 0x55, DIRECTION.NORTH),
                west = entrance(0x00, 0x38, DIRECTION.EAST),

                center = entrance(0x12, 0x38, DIRECTION.NONE),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_4, east, DIRECTION.WEST);
                },
                exit_east = @install() fun test() {
                    subtext(string("exit? 9 [END]"));
                },

                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_boss, south, DIRECTION.NORTH);
                },
                exit_south = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_6, north, DIRECTION.SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x05);

                object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x10, 0x38);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_2_6(0x22) { // east-east-south "v"
            enum entrance {
                north = entrance(0x5f, 0x25, DIRECTION.SOUTH),
                west = entrance(0x4b, 0x4c, DIRECTION.EAST),
                south = entrance(0x5a, 0x55, DIRECTION.NORTH),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_5, south, DIRECTION.NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() fun test() {
                    subtext(string("exit? 15 [END]"));
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x59, 0x47);
                    add_isaac_enemy_maggot(0x5b, 0x49);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_2_boss(0x20) { // east-east-north "drake-south"
            enum entrance {
                east = entrance(0x2b, 0x15, DIRECTION.WEST),
                south = entrance(0x1b, 0x29, DIRECTION.NORTH)
            }

            enum stepon_trigger {
                exit_east = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_south = @install() fun test() {
                    map_transition(basement_2_5, north, DIRECTION.SOUTH);
                }
            }

            enum BOSS {
                ID = memory_tmp(),

                FOLLOWING = memory_tmp(),

                PUKE_HELPER = memory_tmp(),

                MOVE_RNG = memory_tmp(),

                CANNONBALL_X = memory_tmp(),
                CANNONBALL_Y = memory_tmp(),
                CANNONBALL_COUNT = memory_tmp(),
            }

            @install()
            fun flop() {
                BOSS.PUKE_HELPER = 0x20;

                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + 0x20 + randrange(0x20)), calculate(BOSS.ID[ATTRIBUTE.Y] + 0x20 + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + 0x20 + randrange(0x20)), calculate(BOSS.ID[ATTRIBUTE.Y] + 0x20 + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - 0x20 - randrange(0x20)), calculate(BOSS.ID[ATTRIBUTE.Y] + 0x20 + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - 0x20 - randrange(0x20)), calculate(BOSS.ID[ATTRIBUTE.Y] + 0x20 + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - 0x20 - randrange(0x20)), calculate(BOSS.ID[ATTRIBUTE.Y] - 0x20 - randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - 0x20 - randrange(0x20)), calculate(BOSS.ID[ATTRIBUTE.Y] - 0x20 - randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + 0x20 + randrange(0x20)), calculate(BOSS.ID[ATTRIBUTE.Y] - 0x20 - randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + 0x20 + randrange(0x20)), calculate(BOSS.ID[ATTRIBUTE.Y] - 0x20 - randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }

            @install()
            fun puke() {
                // sleep(0x20);
                
                BOSS.PUKE_HELPER = 0x20;
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x02);
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x02);
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x05);
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }

            @async()
            @install()
            fun following() {
                while(True) {
                    if(BOSS.FOLLOWING > 0x00) {
                        if(BOSS.ID[ATTRIBUTE.X] > <CHARACTER.BOY>[ATTRIBUTE.X]) {
                            BOSS.ID[ATTRIBUTE.X] = BOSS.ID[ATTRIBUTE.X] - BOSS.FOLLOWING;
                        } else if(BOSS.ID[ATTRIBUTE.X] < <CHARACTER.BOY>[ATTRIBUTE.X]) {
                            BOSS.ID[ATTRIBUTE.X] = BOSS.ID[ATTRIBUTE.X] + BOSS.FOLLOWING;
                        }

                        if(BOSS.ID[ATTRIBUTE.Y] > <CHARACTER.BOY>[ATTRIBUTE.Y]) {
                            BOSS.ID[ATTRIBUTE.Y] = BOSS.ID[ATTRIBUTE.Y] - BOSS.FOLLOWING;
                        } else if(BOSS.ID[ATTRIBUTE.Y] < <CHARACTER.BOY>[ATTRIBUTE.Y]) {
                            BOSS.ID[ATTRIBUTE.Y] = BOSS.ID[ATTRIBUTE.Y] + BOSS.FOLLOWING;
                        }
                    }

                    yield();
                }
            }

            @install()
            fun yeet() {
                BOSS.ID[ATTRIBUTE.JUMP_HEIGHT] = 0x55;
                
                BOSS.FOLLOWING = 0x01;
                sleep(0xa0);
                BOSS.FOLLOWING = 0x00;

                flop();
            }

            @install()
            fun hop() {
                BOSS.ID[ATTRIBUTE.JUMP_HEIGHT] = 0x20;

                BOSS.FOLLOWING = 0x01;
                sleep(0x40);
                BOSS.FOLLOWING = 0x00;
            }

            fun move() {
                BOSS.MOVE_RNG = randrange(0x05);

                if(BOSS.MOVE_RNG == 0x00) {
                    puke();
                    sleep(0x50);
                } else if(BOSS.MOVE_RNG == 0x01) {
                    yeet();
                    sleep(0x60);
                } else {
                    hop();
                    sleep(0x20);
                }
            }

            @async()
            @install()
            fun move_logic() {
                sleep(0x80);
                
                while(True) {
                    move();
                }
            }

            @install()
            fun monstro_damage() {
                yield();
                animate(BOSS.ID, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
            }

            fun spawn_boss(x, y) {
                add_enemy(ENEMY.MAGMAR, x, y);
                BOSS.ID = <CHARACTER.LAST_ENTITY>;
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(monstro_damage));
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);

                following();
                move_logic();
            }

            fun intro() {
                subtext(string("Isaac vs. Monstro[END]"));
            }

            @install()
            fun trap_door_interacted() {
                map_transition(basement_3_start, center, DIRECTION.NONE);
            }

            fun trigger_enter() {
                spawn_boss(0x10, 0x13);

                // available(CHARACTER.BOY);
                // destroy(CHARACTER.DOG); // teleport(CHARACTER.BOY, 0x00, 0x00);

                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x10, 0x13);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(trap_door_interacted));

                isaac_init(True, False);

                intro();
            }
        };
    };

    area level_3() {
        map basement_3_start(0x22) { // start "-|"
            enum entrance {
                north = entrance(0x11, 0x25, DIRECTION.SOUTH),
                east = entrance(0x22, 0x38, DIRECTION.WEST),
                south = entrance(0x11, 0x55, DIRECTION.NORTH),
                west = entrance(0x00, 0x38, DIRECTION.EAST),

                center = entrance(0x12, 0x38, DIRECTION.NONE),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_west = @install() fun test() {
                    map_transition(basement_3_1, east, DIRECTION.WEST);
                },
                exit_east = @install() fun test() {
                    subtext(string("exit? 9 [END]"));
                },

                exit_north = @install() fun test() {
                    map_transition(basement_3_4, south_2, DIRECTION.NORTH);
                },
                exit_south = @install() fun test() {
                    map_transition(basement_3_3, north, DIRECTION.SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);
                isaac_init(True, False);

                if!(FLAG.IN_ANIMATION) {
                    // teleport(CHARACTER.DOG, 0x19, 0x1d);
                    <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] + 0x20;
                    <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] + 0x20;
                    crash_land(CHARACTER.BOTH);

                    subtext(string("Basement Level 5[END]"));
                }
            }
        };

        map basement_3_1(0x22) { // west ",-"
            enum entrance {
                east = entrance(0x6f, 0x17, DIRECTION.WEST),
                south_1 = entrance(0x65, 0x1f, DIRECTION.NORTH),
                south_2 = entrance(0x46, 0x1f, DIRECTION.NORTH),
                west = entrance(0x38, 0x18, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_2, north, DIRECTION.SOUTH);
                },
                east = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_start, west, DIRECTION.EAST);
                },
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() fun test() {
                    subtext(string("exit? 16 [END]"));
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 8 [END]"));
                },
            }


            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                // object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                // object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x57, 0x16);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_3_2(0x22) { // west-south "L"
            enum entrance {
                north = entrance(0x39, 0x24, DIRECTION.SOUTH),
                east = entrance(0x48, 0x4b, DIRECTION.WEST),
                west = entrance(0x26, 0x4e, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() fun test() {
                    subtext(string("exit? 1 [END]"));
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_1, south_2, DIRECTION.NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_3, west, DIRECTION.EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                // object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x3c, 0x3c);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_3_3(0x22) { // south, west-south-east "_|"
            enum entrance {
                north = entrance(0x5f, 0x25, DIRECTION.SOUTH),
                west = entrance(0x4b, 0x4c, DIRECTION.EAST),
                south = entrance(0x5a, 0x55, DIRECTION.NORTH),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_start, south, DIRECTION.NORTH);
                },
                exit_room_4_east = nop(),
                exit_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_2, east, DIRECTION.WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x59, 0x47);
                    add_isaac_enemy_maggot(0x5b, 0x49);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_3_4(0x22) { // north "/\"
            enum entrance {
                east = entrance(0x6f, 0x17, DIRECTION.WEST),
                south_1 = entrance(0x65, 0x1f, DIRECTION.NORTH),
                south_2 = entrance(0x46, 0x1f, DIRECTION.NORTH),
                west = entrance(0x38, 0x18, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_start, north, DIRECTION.SOUTH);
                },
                east = @install() fun test() {
                    subtext(string("exit? 6 [END]"));
                },
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_5, north, DIRECTION.SOUTH);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = @install() fun test() {
                    subtext(string("b? 2 [END]"));
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 8 [END]"));
                },
            }

            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                // object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x53, 0x13);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_3_5(0x22) { // north-south2 "|-"
            enum entrance {
                north = entrance(0x11, 0x25, DIRECTION.SOUTH),
                east = entrance(0x22, 0x38, DIRECTION.WEST),
                south = entrance(0x11, 0x55, DIRECTION.NORTH),
                west = entrance(0x00, 0x38, DIRECTION.EAST),

                center = entrance(0x12, 0x38, DIRECTION.NONE),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_west = @install() fun test() {
                    subtext(string("exit? 8 [END]"));
                },
                exit_east = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_6, west, DIRECTION.EAST);
                },

                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_4, south_1, DIRECTION.NORTH);
                },
                exit_south = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_7, north, DIRECTION.SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                // object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);
                isaac_init(True, False);

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x12, 0x36);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_3_6(0x22) { // north-south2-east "-^"
            enum entrance {
                north = entrance(0x5f, 0x25, DIRECTION.SOUTH),
                west = entrance(0x4b, 0x4c, DIRECTION.EAST),
                south = entrance(0x5a, 0x55, DIRECTION.NORTH),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() fun test() {
                    subtext(string("exit? 13 [END]"));
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_5, east, DIRECTION.WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x5d, 0x31);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_3_7(0x22) { // north-south2-south "|"
            enum entrance {
                north = entrance(0x11, 0x25, DIRECTION.SOUTH),
                east = entrance(0x22, 0x38, DIRECTION.WEST),
                south = entrance(0x11, 0x55, DIRECTION.NORTH),
                west = entrance(0x00, 0x38, DIRECTION.EAST),

                center = entrance(0x12, 0x38, DIRECTION.NONE),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_west = @install() fun test() {
                    subtext(string("exit? 8 [END]"));
                },
                exit_east = @install() fun test() {
                    subtext(string("exit? 9 [END]"));
                },

                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_5, south, DIRECTION.NORTH);
                },
                exit_south = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_8, north, DIRECTION.SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 5 [END]"));
                },
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                // object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);
                isaac_init(True, False);

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x12, 0x36);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_3_8(0x22) { // north-south2-south-south "_|"
            enum entrance {
                north = entrance(0x5f, 0x25, DIRECTION.SOUTH),
                west = entrance(0x4b, 0x4c, DIRECTION.EAST),
                south = entrance(0x5a, 0x55, DIRECTION.NORTH),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_south = @install() fun test() {
                    subtext(string("exit? 0 [END]"));
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_7, south, DIRECTION.NORTH);
                },
                exit_room_4_east = nop(),
                exit_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_9, east, DIRECTION.WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() fun test() {
                    subtext(string("b? 4 [END]"));
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x59, 0x47);
                    add_isaac_enemy_maggot(0x5b, 0x49);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_3_9(0x22) { // north-south2-south-south-east "--"
            enum entrance {
                east = entrance(0x35, 0x16, DIRECTION.WEST),
                north = entrance(0x18, 0x1f, DIRECTION.NORTH),
                west = entrance(0x00, 0x15, DIRECTION.EAST),
            }

            enum ROOM {
                CLEAR_FLAG = flag(),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_boss, east, DIRECTION.WEST);
                },
                exit_east = @install() fun test() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_8, west, DIRECTION.EAST);
                },
                exit_south = @install() fun test() {
                    subtext(string("exit? 4 [END]"));
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() fun test() {
                    subtext(string("exit? 7 [END]"));
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() fun test() {
                    subtext(string("b? 0 [END]"));
                },
                b_trigger_1 = @install() fun test() {
                    subtext(string("b? 1 [END]"));
                },
                room_2_sign = nop(),
                sign = @install() fun test() {
                    subtext(string("b? 3 [END]"));
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() fun test() {
                    subtext(string("b? 6 [END]"));
                },
                sniff = @install() fun test() {
                    subtext(string("b? 7 [END]"));
                },
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x01);

                object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x23, 0x15);
                }
                
                isaac_init(True, False);
            }
        };

        map basement_3_boss(0x20) { // north-south2-south-south-east-east "drake-east"
            enum entrance {
                east = entrance(0x2b, 0x15, DIRECTION.WEST),
                south = entrance(0x1b, 0x29, DIRECTION.NORTH)
            }

            enum stepon_trigger {
                exit_east = @install() fun test() {
                    map_transition(basement_3_9, west, DIRECTION.EAST);
                },
                exit_south = @install() fun test() {
                    subtext(string("exit? 1 [END]"));
                }
            }

            enum BOSS {
                MOUNT_ID = memory_tmp(),
                RIDER_ID = memory_tmp(),

                FOLLOWING = memory_tmp(),

                PUKE_HELPER = memory_tmp(),

                MOVE_RNG = memory_tmp(),

                CANNONBALL_X = memory_tmp(),
                CANNONBALL_Y = memory_tmp(),
                CANNONBALL_COUNT = memory_tmp(),
            }

            @install()
            fun flop() {
                BOSS.PUKE_HELPER = 0x20;

                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x20 + randrange(0x20)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x20 + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x20 + randrange(0x20)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x20 + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x20 - randrange(0x20)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x20 + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x20 - randrange(0x20)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x20 + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x20 - randrange(0x20)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x20 - randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x20 - randrange(0x20)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x20 - randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x20 + randrange(0x20)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x20 - randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x20 + randrange(0x20)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x20 - randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }

            @install()
            fun puke() {
                // sleep(0x20);
                
                BOSS.PUKE_HELPER = 0x20;
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x02);
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x02);
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x05);
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + randrange(0x05)), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(BOSS.PUKE_HELPER + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }

            @async()
            @install()
            fun following() {
                while(True) {
                    if(BOSS.FOLLOWING > 0x00) {
                        if(BOSS.MOUNT_ID[ATTRIBUTE.X] > <CHARACTER.BOY>[ATTRIBUTE.X]) {
                            BOSS.MOUNT_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X] - BOSS.FOLLOWING;
                        } else if(BOSS.MOUNT_ID[ATTRIBUTE.X] < <CHARACTER.BOY>[ATTRIBUTE.X]) {
                            BOSS.MOUNT_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X] + BOSS.FOLLOWING;
                        }

                        if(BOSS.MOUNT_ID[ATTRIBUTE.Y] > <CHARACTER.BOY>[ATTRIBUTE.Y]) {
                            BOSS.MOUNT_ID[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y] - BOSS.FOLLOWING;
                        } else if(BOSS.MOUNT_ID[ATTRIBUTE.Y] < <CHARACTER.BOY>[ATTRIBUTE.Y]) {
                            BOSS.MOUNT_ID[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y] + BOSS.FOLLOWING;
                        }
                    }

                    yield();
                }
            }

            @install()
            fun yeet() {
                BOSS.MOUNT_ID[ATTRIBUTE.JUMP_HEIGHT] = 0x55;
                
                BOSS.FOLLOWING = 0x01;
                sleep(0xa0);
                BOSS.FOLLOWING = 0x00;

                flop();
            }

            @install()
            fun hop() {
                BOSS.MOUNT_ID[ATTRIBUTE.JUMP_HEIGHT] = 0x20;

                BOSS.FOLLOWING = 0x01;
                sleep(0x40);
                BOSS.FOLLOWING = 0x00;
            }

            @install()
            fun shoot_x() {
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x80), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x80), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x80), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x80), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }

            @install()
            fun shoot_plus() {
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x80), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x80), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            }

            @install()
            fun shoot_star() {
                // shoot_x();
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x60), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x60), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x60), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x60), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x60), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x60), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x60), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x60), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                shoot_plus();
            }

            @install()
            fun charge_right() {
                face(BOSS.MOUNT_ID, DIRECTION.EAST);
                animate(BOSS.MOUNT_ID, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.LIZARD_ROLL);

                BOSS.CANNONBALL_COUNT = 0x0000;

                while(BOSS.CANNONBALL_COUNT <= 0x02) {
                    if(BOSS.MOUNT_ID[ATTRIBUTE.X] > 0x200) {
                        BOSS.CANNONBALL_COUNT = BOSS.CANNONBALL_COUNT + 0x01;

                        BOSS.MOUNT_ID[ATTRIBUTE.X] = 0x00;
                        BOSS.MOUNT_ID[ATTRIBUTE.Y] = <CHARACTER.BOY>[ATTRIBUTE.Y];
                    }

                    BOSS.MOUNT_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x08;
                    code(0xb5, param(THROWABLE.BOMB_EXPLOSION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x00), param(0x10), param(0x10), param(0x00), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                    yield();
                }

                BOSS.CANNONBALL_X = <CHARACTER.BOY>[ATTRIBUTE.X];
                BOSS.CANNONBALL_Y = <CHARACTER.BOY>[ATTRIBUTE.Y];

                BOSS.MOUNT_ID[ATTRIBUTE.X] = 0x00;
                BOSS.MOUNT_ID[ATTRIBUTE.Y] = BOSS.CANNONBALL_Y;

                while(BOSS.MOUNT_ID[ATTRIBUTE.X] < BOSS.CANNONBALL_X) {
                    BOSS.MOUNT_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x08;
                    code(0xb5, param(THROWABLE.BOMB_EXPLOSION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0x00), param(0x10), param(0x10), param(0x00), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                    yield();
                }

                animate(BOSS.MOUNT_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.LIZARD_DUCK_1);

                BOSS.CANNONBALL_X = BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x10;

                while(BOSS.MOUNT_ID[ATTRIBUTE.X] > BOSS.CANNONBALL_X) {
                    BOSS.MOUNT_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x01;

                    sleep(0x02);
                }

                animate(BOSS.MOUNT_ID, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
            }

            @install()
            fun monstro_damage() {
                yield();
                // animate(BOSS.MOUNT_ID, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);

                // animate(BOSS.MOUNT_ID, ANIMATION_MODE.LOOP, ANIMATION_ALL.DEFAULT);
            }

            @install()
            @async()
            fun stack_t01() {
                while!(dead(<CHARACTER.BOY>)) {
                    BOSS.RIDER_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
                    BOSS.RIDER_ID[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y];
                    yield();

                    // <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.BOY>[ATTRIBUTE.X] - 0x05;
                    // <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.BOY>[ATTRIBUTE.Y];
                    // yield();
                }
            }

            fun move() {
                attribute_bit(BOSS.MOUNT_ID, ATTRIBUTE_BITS.LOCK_IN_PLACE);
                animate(BOSS.MOUNT_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.LIZARD_DUCK_2);
                control(BOSS.MOUNT_ID, True);
                animate(BOSS.MOUNT_ID, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.LIZARD_DUCK_1);
                sleep(0x20);

                BOSS.MOVE_RNG = randrange(0x03);

                if(BOSS.MOVE_RNG == 0x00) {
                    shoot_x();
                    sleep(0x50);
                    shoot_plus();
                } else if(BOSS.MOVE_RNG == 0x01) {
                    shoot_star();
                } else {
                    charge_right();
                }

                animate(BOSS.MOUNT_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.LIZARD_DUCK_2);
                sleep(0x20);
                animate(BOSS.MOUNT_ID, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
                attribute_bit(BOSS.MOUNT_ID, ATTRIBUTE_BITS.UNLOCK);
                control(BOSS.MOUNT_ID, False);
            }

            @async()
            @install()
            fun move_logic() {
                sleep(0x80);
                
                while(True) {
                    move();
                    
                    sleep(0x60);
                }
            }

            fun spawn_boss(x, y) {
                add_enemy(ENEMY.MAGMAR, x, y);
                BOSS.RIDER_ID = <CHARACTER.LAST_ENTITY>;
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(monstro_damage));
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
                attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

                // add_enemy_with_flags(ENEMY.DRAKE, x, y, FLAG_ENEMY.INACTIVE);
                // add_enemy_with_flags(ENEMY.FOOTKNIGHT, x, y, FLAG_ENEMY.INACTIVE);
                add_enemy_with_flags(ENEMY.LIZARD_BLACK, x, y, 0x00);
                BOSS.MOUNT_ID = <CHARACTER.LAST_ENTITY>;

                following();
                move_logic();
                stack_t01();
            }

            fun intro() {
                subtext(string("Isaac vs. Dark One[END]"));
            }

            @install()
            fun trap_door_interacted() {
                map_transition(west_hut_outside, hut, DIRECTION.NONE);
            }

            fun trigger_enter() {
                object[0x00] = 0x01; // close south
                object[0x01] = 0x7e; // open east

                spawn_boss(0x10, 0x13);

                // available(CHARACTER.BOY);
                // destroy(CHARACTER.DOG); // teleport(CHARACTER.BOY, 0x00, 0x00);

                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x10, 0x13);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(trap_door_interacted));

                isaac_init(True, False);

                intro();
            }
        };
    };
};

area dungeon_volcano() {
    map dungeon_volcano(0x3b) {
        enum entrance {
            north_1 = entrance(0x2e, 0x05, DIRECTION.SOUTH),
            north_2 = entrance(0x76, 0x06, DIRECTION.SOUTH),
            south_1 = entrance(0x7d, 0xb1, DIRECTION.NORTH),
            south_2 = entrance(0x51, 0xb1, DIRECTION.NORTH),
        }

        enum ROOM {
            ID_STONE = memory_tmp(),

            Z_UPSTAIRS = 0x10,
            Z_DOWNSTAIRS = 0x20,
        }

        enum BOSS {
            DEBUG = True,

            HEAD_1_ID = memory_tmp(),
            HEAD_2_ID = memory_tmp(),
            HEAD_3_ID = memory_tmp(),

            PHASE = memory_tmp(),
        }

        enum stepon_trigger {
            exit_north_1 = @install() fun test() {
                map_transition(squidmar, south, DIRECTION.NORTH);
            },
            exit_north_2 = @install() fun test() {
                map_transition(aquagoth, south, DIRECTION.NORTH);
            },
            exit_south_1 = @install() fun test() {
                map_transition(east_crossing, elevator_top, DIRECTION.SOUTH);
            },
            exit_south_2 = @install() fun test() {
                map_transition(east_crossing, elevator_bottom, DIRECTION.SOUTH);
            },
        }

        enum b_trigger {
            b_trigger_0 = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            b_trigger_1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            b_trigger_2 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            b_trigger_3 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            b_trigger_4 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            b_trigger_5 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            b_trigger_6 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            b_trigger_7 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            b_trigger_8 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            b_trigger_9 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            b_trigger_10 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            b_trigger_11 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            b_trigger_12 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            b_trigger_13 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            b_trigger_14 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            b_trigger_15 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            b_trigger_16 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
            b_trigger_17 = @install() fun test() {
                subtext(string("b? 17 [END]"));
            },
            b_trigger_18 = @install() fun test() {
                subtext(string("b? 18 [END]"));
            },
            b_trigger_19 = @install() fun test() {
                subtext(string("b? 19 [END]"));
            },

            b_trigger_20 = @install() fun test() {
                subtext(string("b? 20 [END]"));
            },
            b_trigger_21 = @install() fun test() {
                subtext(string("b? 21 [END]"));
            },
            stepon_22 = @install() fun test() {
                subtext(string("step-on? 22 [END]"));
            },
            stepon_23 = @install() fun test() {
                subtext(string("step-on? 23 [END]"));
            },
            stepon_24 = @install() fun test() {
                subtext(string("step-on? 24 [END]"));
            },
            stepon_25 = @install() fun test() {
                subtext(string("step-on? 25 [END]"));
            },
            stepon_26 = @install() fun test() {
                subtext(string("step-on? 26 [END]"));
            },
            stepon_27 = @install() fun test() {
                subtext(string("step-on? 27 [END]"));
            },
            stepon_28 = @install() fun test() {
                subtext(string("step-on? 28 [END]"));
            },
            stepon_29 = @install() fun test() {
                subtext(string("step-on? 29 [END]"));
            },

            stepon_30 = @install() fun test() {
                subtext(string("step-on? 30 [END]"));
            },
            stepon_31 = @install() fun test() {
                subtext(string("step-on? 31 [END]"));
            },
            stepon_32 = @install() fun test() {
                subtext(string("step-on? 32 [END]"));
            },
            stepon_33 = @install() fun test() {
                subtext(string("step-on? 33 [END]"));
            },
        }

        fun boss_defeated() {
            SOULS_MEMORY.BOSSES_DEFEATED_COUNTER = SOULS_MEMORY.BOSSES_DEFEATED_COUNTER + 0x01;
            SOULS_MEMORY.PROGRESS_COUNTER = SOULS_MEMORY.PROGRESS_COUNTER + 0x01;

            set(SOULS_MEMORY.DEAD_VOLCANO_HYDRA);

            animate(ROOM.ID_STONE, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_PLACEHOLDER.EXPLOSION_1);
        }

        fun spawn_snake(x, y) {
            add_enemy(ENEMY.BONE_SNAKE, x, y);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Z] = ROOM.Z_UPSTAIRS;
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(head_killed));
        }
        fun spawn_salabog(x, y) {
            add_enemy(ENEMY.SALABOG, x, y);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.Z] = ROOM.Z_UPSTAIRS;
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(head_killed));
        }

        fun spawn_1_head() {
            spawn_snake(0x47, 0x74);
        }
        fun spawn_2_head() {
            spawn_snake(0x47, 0x74);
            spawn_snake(0x48, 0x74);
        }
        fun spawn_big_head() {
            spawn_salabog(0x47, 0x74);
        }

        @install()
        fun head_killed() {
            if(BOSS.PHASE == 0x00) {
                spawn_2_head();
            } else if(BOSS.PHASE == 0x02) {
                spawn_big_head();
            } else if(BOSS.PHASE > 0x02) {
                boss_defeated();
            }

            BOSS.PHASE = BOSS.PHASE + 0x01;
        }

        fun trigger_enter() {
            if!(SOULS_MEMORY.DEAD_VOLCANO_HYDRA) {
                if(<CHARACTER.BOY>[ATTRIBUTE.Z] == ROOM.Z_UPSTAIRS) {
                    spawn_1_head();
                    // add_enemy(ENEMY.OGLIN, 0x44, 0x65);
                    add_enemy(ENEMY.SLIME_PINK, 0x44, 0x65);
                    add_enemy(ENEMY.SLIME_PINK, 0x51, 0x6d);
                } else {
                    spawn_1_head();
                    attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);
                }

                add_enemy(ENEMY.STONE_ROUND, 0x44, 0x85);
                ROOM.ID_STONE = <CHARACTER.LAST_ENTITY>;
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(contraption_trigger));
            }

            default_init_room(True, False);
        }
    };

    map squidmar(0x6d) {
        enum entrance {
            south = entrance(0x1b, 0x51, DIRECTION.NORTH)
        }

        enum ROOM {
            FAKE_EXIT_ID = memory_tmp()
        }

        fun fake_exit() {
            map_transition(dungeon_volcano, north_1, DIRECTION.NORTH);
        }

        @install()
        @async()
        fun fake_exit_scanner() {
            attach_to_script(ROOM.FAKE_EXIT_ID);

            while(True) {
                arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
                arg[0x04] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
                arg[0x06] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    fake_exit();
                    end();
                }

                yield();
            }
        }

        @install()
        fun squidmar_dialog() {
            dialog(string("I'm Squidmar.[0x80][0x19][0x81][END]"));
        }
        @install()
        fun squidmar_combat() {
            dialog(string("...[0x80][0x19][0x81][END]"));
        }

        fun trigger_enter() {
            add_enemy(ENEMY.AQUAGOTH_ENTITY, 0x1a, 0x34);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(squidmar_combat));
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(squidmar_dialog));

            default_init_room(True, False);

            add_enemy(ENEMY.PLACEHOLDER, 0x1b, 0x52);
            ROOM.FAKE_EXIT_ID = <CHARACTER.LAST_ENTITY>;
            sleep(0x10);
            fake_exit_scanner();
        }
    };

    map aquagoth(0x6d) {
        enum entrance {
            south = entrance(0x1b, 0x51, DIRECTION.NORTH)
        }

        enum ROOM {
            FAKE_EXIT_ID = memory_tmp(),
        }

        fun fake_exit() {
            map_transition(dungeon_volcano, north_2, DIRECTION.NORTH);
        }

        @install()
        @async()
        fun fake_exit_scanner() {
            attach_to_script(ROOM.FAKE_EXIT_ID);

            while(True) {
                arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
                arg[0x04] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
                arg[0x06] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    fake_exit();
                    end();
                }

                yield();
            }
        }

        @install()
        fun aquagoth_dialog() {
            dialog(string("I'm Aquagoth.[0x80][0x19][0x81][END]"));
        }
        @install()
        fun aquagoth_combat() {
            dialog(string("...[0x80][0x19][0x81][END]"));
        }

        fun init_room() {
            if(SOULS_MEMORY.WITH_WEATHER) {
                sfx_effect(SFX_EFFECT.SEPIA, True);
            }
            
            default_init_room(False, False);
        }

        fun trigger_enter() {
            add_enemy(ENEMY.AQUAGOTH_ENTITY, 0x1a, 0x34);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(aquagoth_combat));
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(aquagoth_dialog));

            init_room();

            add_enemy(ENEMY.PLACEHOLDER, 0x1b, 0x52);
            ROOM.FAKE_EXIT_ID = <CHARACTER.LAST_ENTITY>;
            sleep(0x10);
            fake_exit_scanner();

            subtext(string("A fould stench is in the air.[END]"));
        }
    };
};

// experimental

area experimental_area() {
    map metro(0x48) {
        enum entrance {
            south = entrance(0x3a, 0x4e, DIRECTION.NONE)
        }

        enum ROOM {
            ROW_1 = 0x12,
            ROW_2 = 0x3e,
            ROW_3 = 0x6a,
            ROW_4 = 0x96,

            COLUMN_1 = 0x12,
            COLUMN_2 = 0x52,
            COLUMN_3 = 0x92,
            COLUMN_4 = 0xd2,
        }

        fun demo_room() {
            map_transition(bomb_arena, right, DIRECTION.NONE);
        }

        enum stepon_trigger {
            stepon_0 = @install() fun test() {
                subtext(string("exit? 0 [END]"));
            },
            stepon_1 = @install() fun test() {
                subtext(string("exit? 1 [END]"));
            },
            stepon_2 = @install() fun test() {
                subtext(string("exit? 2 [END]"));
            },
            stepon_3 = @install() fun test() {
                subtext(string("exit? 3 [END]"));
            },
            stepon_4 = @install() fun test() {
                subtext(string("exit? 4 [END]"));
            },
            stepon_5 = @install() fun test() {
                subtext(string("exit? 5 [END]"));
            },
            stepon_6 = @install() fun test() {
                subtext(string("exit? 6 [END]"));
            },
            stepon_7 = @install() fun test() {
                subtext(string("exit? 7 [END]"));
            },
            stepon_8 = @install() fun test() {
                subtext(string("exit? 8 [END]"));
            },
            stepon_9 = @install() fun test() {
                subtext(string("exit? 9 [END]"));
            },

            stepon_10 = @install() fun test() {
                subtext(string("exit? 10 [END]"));
            },
            stepon_11 = @install() fun test() {
                subtext(string("exit? 11 [END]"));
            },
            stepon_12 = @install() fun test() {
                subtext(string("exit? 12 [END]"));
            },
            stepon_13 = @install() fun test() {
                subtext(string("exit? 13 [END]"));
            },
            stepon_14 = @install() fun test() {
                subtext(string("exit? 14 [END]"));
            },
            stepon_15 = @install() fun test() {
                subtext(string("exit? 15 [END]"));
            },
            stepon_16 = @install() fun test() {
                subtext(string("exit? 16 [END]"));
            },
            stepon_17 = @install() fun test() {
                subtext(string("exit? 17 [END]"));
            },
            stepon_18 = @install() fun test() {
                subtext(string("exit? 18 [END]"));
            },
            stepon_19 = @install() fun test() {
                subtext(string("exit? 19 [END]"));
            },

            stepon_20 = @install() fun test() {
                subtext(string("exit? 20 [END]"));
            },
            stepon_21 = @install() fun test() {
                subtext(string("exit? 21 [END]"));
            },
            stepon_22 = @install() fun test() {
                subtext(string("exit? 22 [END]"));
            },
            stepon_23 = @install() fun test() {
                subtext(string("exit? 23 [END]"));
            },
            stepon_24 = @install() fun test() {
                subtext(string("exit? 24 [END]"));
            },
            stepon_25 = @install() fun test() {
                subtext(string("exit? 25 [END]"));
            },
            stepon_26 = @install() fun test() {
                subtext(string("exit? 26 [END]"));
            },
            stepon_27 = @install() fun test() {
                subtext(string("exit? 27 [END]"));
            },
            stepon_28 = @install() fun test() {
                subtext(string("exit? 28 [END]"));
            },
            stepon_29 = @install() fun test() {
                subtext(string("exit? 29 [END]"));
            },

            stepon_30 = @install() fun test() {
                subtext(string("exit? 30 [END]"));
            },
            stepon_31 = @install() fun test() {
                subtext(string("exit? 31 [END]"));
            },
            stepon_32 = @install() fun test() {
                subtext(string("exit? 32 [END]"));
            },
            stepon_33 = @install() fun test() {
                subtext(string("exit? 33 [END]"));
            },
            stepon_34 = @install() fun test() {
                subtext(string("exit? 34 [END]"));
            },
            stepon_35 = @install() fun test() {
                subtext(string("exit? 35 [END]"));
            },
            stepon_36 = @install() fun test() {
                subtext(string("exit? 36 [END]"));
            },
            stepon_37 = @install() fun test() {
                subtext(string("exit? 37 [END]"));
            },
            stepon_38 = @install() fun test() {
                subtext(string("exit? 38 [END]"));
            },
            stepon_39 = @install() fun test() {
                subtext(string("exit? 39 [END]"));
            },

            stepon_40 = @install() fun test() {
                subtext(string("exit? 40 [END]"));
            },
            stepon_41 = @install() fun test() {
                subtext(string("exit? 41 [END]"));
            },
            stepon_42 = @install() fun test() {
                subtext(string("exit? 42 [END]"));
            },
            stepon_43 = @install() fun test() {
                subtext(string("exit? 43 [END]"));
            },
            stepon_44 = @install() fun test() {
                subtext(string("exit? 44 [END]"));
            },
            stepon_45 = @install() fun test() {
                subtext(string("exit? 45 [END]"));
            },
            stepon_46 = @install() fun test() {
                subtext(string("exit? 46 [END]"));
            },
            stepon_47 = @install() fun test() {
                subtext(string("exit? 47 [END]"));
            },
            stepon_48 = @install() fun test() {
                subtext(string("exit? 48 [END]"));
            },
            stepon_49 = @install() fun test() {
                subtext(string("exit? 49 [END]"));
            },

            stepon_50 = @install() fun test() {
                subtext(string("exit? 50 [END]"));
            },
            stepon_51 = @install() fun test() {
                subtext(string("exit? 51 [END]"));
            },
            stepon_52 = @install() fun test() {
                subtext(string("exit? 52 [END]"));
            },
            stepon_53 = @install() fun test() {
                subtext(string("exit? 53 [END]"));
            },
            stepon_54 = @install() fun test() {
                subtext(string("exit? 54 [END]"));
            },
            stepon_55 = @install() fun test() {
                subtext(string("exit? 55 [END]"));
            },
        }

        enum b_trigger {
            door_center = @install() fun test() {
                subtext(string("b? 0 [END]"));
            },
            dog_door_in_d1 = @install() fun test() {
                subtext(string("b? 1 [END]"));
            },
            dog_door_out_d1 = @install() fun test() {
                subtext(string("b? 2 [END]"));
            },
            dog_door_out_d2 = @install() fun test() {
                subtext(string("b? 3 [END]"));
            },
            dog_door_in_d2 = @install() fun test() {
                subtext(string("b? 4 [END]"));
            },
            dog_door_out_d3 = @install() fun test() {
                subtext(string("b? 5 [END]"));
            },
            dog_door_in_d3 = @install() fun test() {
                subtext(string("b? 6 [END]"));
            },
            dog_door_out_d4 = @install() fun test() {
                subtext(string("b? 7 [END]"));
            },
            dog_door_in_d4 = @install() fun test() {
                subtext(string("b? 8 [END]"));
            },
            dog_door_out_c4 = @install() fun test() {
                subtext(string("b? 9 [END]"));
            },

            dog_door_in_c4 = @install() fun test() {
                subtext(string("b? 10 [END]"));
            },
            dog_door_out_c3 = @install() fun test() {
                subtext(string("b? 11 [END]"));
            },
            dog_door_in_c3 = @install() fun test() {
                subtext(string("b? 12 [END]"));
            },
            dog_door_out_c2 = @install() fun test() {
                subtext(string("b? 13 [END]"));
            },
            dog_door_in_c2 = @install() fun test() {
                subtext(string("b? 14 [END]"));
            },
            dog_door_out_c1 = @install() fun test() {
                subtext(string("b? 15 [END]"));
            },
            dog_door_in_c1 = @install() fun test() {
                subtext(string("b? 16 [END]"));
            },
            dog_door_out_b1 = @install() fun test() {
                subtext(string("b? 17 [END]"));
            },
            dog_door_in_b1 = @install() fun test() {
                subtext(string("b? 18 [END]"));
            },
            dog_door_out_b2 = @install() fun test() {
                subtext(string("b? 19 [END]"));
            },

            dog_door_in_b2 = @install() fun test() {
                subtext(string("b? 20 [END]"));
            },
            dog_door_out_b3 = @install() fun test() {
                subtext(string("b? 21 [END]"));
            },
            dog_door_in_b3 = @install() fun test() {
                subtext(string("b? 22 [END]"));
            },
            dog_door_out_b4 = @install() fun test() {
                subtext(string("b? 23 [END]"));
            },
            dog_door_in_b4 = @install() fun test() {
                subtext(string("b? 24 [END]"));
            },
            dog_door_out_a4 = @install() fun test() {
                subtext(string("b? 25 [END]"));
            },
            dog_door_in_a4 = @install() fun test() {
                subtext(string("b? 26 [END]"));
            },
            dog_door_out_a3 = @install() fun test() {
                subtext(string("b? 27 [END]"));
            },
            dog_door_in_a3 = @install() fun test() {
                subtext(string("b? 28 [END]"));
            },
            dog_door_out_a2 = @install() fun test() {
                subtext(string("b? 29 [END]"));
            },

            dog_door_in_a2 = @install() fun test() {
                subtext(string("b? 30 [END]"));
            },
            dog_door_out_a1 = @install() fun test() {
                subtext(string("b? 31 [END]"));
            },
            dog_door_in_a1 = @install() fun test() {
                subtext(string("b? 32 [END]"));
            },
            door_d4 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_4, ROOM.ROW_4, object[0x14]);

                demo_room();
            },
            door_d3 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_3, ROOM.ROW_4, object[0x15]);

                demo_room();
            },
            door_b3 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_3, ROOM.ROW_2, object[0x0f]);

                demo_room();
            },
            door_c4 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_4, ROOM.ROW_3, object[0x13]);

                demo_room();
            },
            door_b4 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_4, ROOM.ROW_2, object[0x0e]);

                demo_room();
            },
            door_a4 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_4, ROOM.ROW_1, object[0x0d]);

                demo_room();
            },
            door_a3 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_3, ROOM.ROW_1, object[0x0c]);

                demo_room();
            },

            door_b2 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_2, ROOM.ROW_2, object[0x10]);

                demo_room();
            },
            door_a2 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_2, ROOM.ROW_1, object[0x00]);

                demo_room();
            },
            door_a1 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_1, ROOM.ROW_1, object[0x0b]);

                demo_room();
            },
            door_d1 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_1, ROOM.ROW_4, object[0x16]);

                demo_room();
            },
            door_c1 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_1, ROOM.ROW_3, object[0x11]);

                demo_room();
            },
            door_c2 = @install() fun test() {
                door_act4_airlock(ROOM.COLUMN_2, ROOM.ROW_3, object[0x12]);

                demo_room();
            },
            b_trigger_46 = @install() fun test() {
                subtext(string("b? 46 [END]"));
            },
            b_trigger_47 = @install() fun test() {
                subtext(string("b? 47 [END]"));
            },
            b_trigger_48 = @install() fun test() {
                subtext(string("b? 48 [END]"));
            },
            b_trigger_49 = @install() fun test() {
                subtext(string("b? 49 [END]"));
            },

            b_trigger_50 = @install() fun test() {
                subtext(string("b? 50 [END]"));
            },
            b_trigger_51 = @install() fun test() {
                subtext(string("b? 51 [END]"));
            },
            b_trigger_52 = @install() fun test() {
                subtext(string("b? 52 [END]"));
            },
        }
        
        fun trigger_enter() {
            fade_in();
        }
    };
};

area experimental_room() {
    fun character_selection(character) {
        if(character == CHARACTER.BOY) {
            available(CHARACTER.BOY);
            destroy(CHARACTER.DOG); // teleport(CHARACTER.BOY, 0x00, 0x00);

            attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.INVINCIBLE);
        } if(character == CHARACTER.DOG) {
            available(CHARACTER.DOG);
            teleport(CHARACTER.BOY, 0x00, 0x00);

            MEMORY.DOG = DOG.TOASTER;

            attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.INVINCIBLE);

            attach_script(CHARACTER.DOG, SCRIPT_TRIGGER.DEATH, reference(boy_death));
        }
    }

    fun general_boss_defeated() {
        attribute_bit(CHARACTER.ACTIVE, ATTRIBUTE_BITS.INVINCIBLE);

        subtext(string("Yatta![END]"));

        sleep(0xff);
        sleep(0xff);
    }

    fun countdown(countdown) {
        if(countdown >= 0x03) {
            subtext(string("3...[END]"));
            sleep(0x3c);
        }
        if(countdown >= 0x02) {
            subtext(string("2...[END]"));
            sleep(0x3c);
        }
        if(countdown >= 0x01) {
            subtext(string("1...[END]"));
            sleep(0x3c);
        }
        if(countdown >= 0x00) {
            subtext(string("GO[END]"));
        }
    }

    map arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum stepon_trigger {
            exit_north = @install() fun test() {
                subtext(string("step-on? 0 [END]"));
            },
            exit_south = @install() fun test() {
                subtext(string("step-on? 1 [END]"));
            },
            center = @install() fun test() {
                subtext(string("step-on? 2 [END]"));
            }
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            if!(FLAG.IN_ANIMATION) {

                // teleport(CHARACTER.DOG, 0x19, 0x1d);
                <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] + 0x20;
                <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] + 0x20;
                crash_land(CHARACTER.BOTH);
            }
        }
    };

    map radahn_arena(0x5c) {
        enum entrance {
            north = entrance(0x1b, 0x03, DIRECTION.SOUTH),
            south = entrance(0x1d, 0x33, DIRECTION.NORTH),

            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum soundtrack {
            default = soundtrack(0x32, 0xff)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = @install() fun test() {
                map_transition(radahn_exit, room_nw_north, DIRECTION.SOUTH);
            },
            center = nop(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        enum BOSS {
            DEBUG = False,

            RIDER_ID = memory_tmp(),
            MOUNT_ID = memory_tmp(),

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            HP = 0x03e8, // 1000

            COUNTDOWN = 0x03,

            // p1

            P1_THRESHOLD = 0x320, // 800
            P1_TIME_BEFORE_SALVAGE = 0x200,

            // p2

            P2_THRESHOLD = 0x1f4, // 500
            P2_TIME_BEFORE_SALVAGE = 0x300,

            RANDOM_SPELL = memory_tmp(),
            TIME_BEFORE_RANDOM_SPELL = 0x300,
        }

        fun boss_killed() {
            set(SOULS_MEMORY.DEAD_ARENA_RADAHN);
            SOULS_MEMORY.BOSSES_DEFEATED_COUNTER = SOULS_MEMORY.BOSSES_DEFEATED_COUNTER + 0x01;
            SOULS_MEMORY.PROGRESS_COUNTER = SOULS_MEMORY.PROGRESS_COUNTER + 0x01;

            fanfare();

            object[0x04] = 0x00;
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(BOSS.MOUNT_ID)) {
                BOSS.RIDER_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
                BOSS.RIDER_ID[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x15;
                yield();
            }
        }

        fun cast_salvage(target, level) {
            animate(BOSS.RIDER_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.VERMINATOR_CAST_1);
            cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
            cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
            cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
            cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
        }

        @install()
        fun boss_damage() {
            // animate(BOSS.RIDER_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.VERMINATOR_DAMAGE);

            if(BOSS.PHASE == 0x00) {
                BOSS.TIMER = 0x00;

                if(BOSS.RIDER_ID[ATTRIBUTE.HP] < BOSS.P1_THRESHOLD) {
                    BOSS.PHASE = 0x01;
                }
            } else if(BOSS.PHASE == 0x01) {
                if(BOSS.RIDER_ID[ATTRIBUTE.HP] < BOSS.P2_THRESHOLD) {
                    BOSS.PHASE = 0x02;
                }
            } else if(BOSS.PHASE == 0x02) {
                BOSS.TIMER = BOSS.TIMER - 0x60;
            }

            if(BOSS.DEBUG) {
                MEMORY.STRING_PARAMETER_1 = BOSS.RIDER_ID[ATTRIBUTE.HP];
                MEMORY.STRING_PARAMETER_2 = BOSS.HP;

                subtext(string("Rider = [0xa1]/[0xa2][END]"));
            }
        }

        @install()
        @async()
        fun boss_watcher() {
            if(BOSS.DEBUG) {
                subtext(string("phase 0[END]"));
            }

            while(BOSS.PHASE == 0x00) {
                if(BOSS.TIMER > BOSS.P1_TIME_BEFORE_SALVAGE) {
                    cast_salvage(CHARACTER.ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[0x0b] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER = BOSS.TIMER + 0x01;
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext(string("phase 1[END]"));
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
            cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                if(BOSS.TIMER > BOSS.P2_TIME_BEFORE_SALVAGE) {
                    cast_salvage(CHARACTER.ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[ATTRIBUTE.PALETTE] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER = BOSS.TIMER + 0x01;
                }
                yield();
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
            cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                BOSS.TIMER = BOSS.TIMER + 0x01;

                if(BOSS.TIMER > BOSS.TIME_BEFORE_RANDOM_SPELL) {
                    BOSS.TIMER = 0x0000;

                    BOSS.RANDOM_SPELL = randrange(0x03);

                    if(BOSS.RANDOM_SPELL == 0x00) {
                        cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
                        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);
                    } else if(BOSS.RANDOM_SPELL == 0x01) {
                        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.DRAIN, 0x30);
                    } else if(BOSS.RANDOM_SPELL == 0x02) {
                        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.PLAGUE, 0x01);
                    } 
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext(string("phase 2[END]"));
            }

            boss_killed();
        }

        fun spawn_boss(x, y) {
            add_enemy(ENEMY.VERMINATOR, x, y);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = BOSS.HP;
            store_last_entity(BOSS.RIDER_ID);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(boss_damage));
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);

            add_enemy(ENEMY.RAPTOR_BLACK, x, y);
            store_last_entity(BOSS.MOUNT_ID);
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
        }

        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            default_init_room(True, False);

            if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                close_exits(True);

                spawn_boss(0x10, 0x13);
                stack_t01_offset();
                boss_watcher();

                character_selection(CHARACTER.BOY);
                countdown(BOSS.COUNTDOWN);
                attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);
            }
        }
    };

    map toaster_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum soundtrack {
            default = soundtrack(0x3e, 0xff)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        enum BOSS {
            HEAL_AMOUNT = 0x0f,

            HIT_COUNT_MEMORY = <0x2834>,
            HIT_COUNT = 0x0a,

            COUNTDOWN = 0x03
        }

        fun boss_defeated() {
            general_boss_defeated();

            map_transition(toaster_arena, center, DIRECTION.NONE);
        }

        fun boss_hit() {
            BOSS.HIT_COUNT_MEMORY = BOSS.HIT_COUNT_MEMORY - 0x01;

            if(BOSS.HIT_COUNT_MEMORY <= 0x00) {
                boss_defeated();
            } else {
                MEMORY.STRING_PARAMETER_1 = BOSS.HIT_COUNT_MEMORY;
                MEMORY.STRING_PARAMETER_2 = BOSS.HIT_COUNT;

                subtext(string("[0xa1]/[0xa2][END]"));
            }
        }

        @install()
        fun guardbot_down() {
            boss_hit();

            yield();
            attribute_bit(CHARACTER.SCRIPT_OWNER, ATTRIBUTE_BITS.INVINCIBLE);

            animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.GATE_BOT_DEAD);

            sleep(0xff);
            sleep(0xff);

            cast(CHARACTER.SCRIPT_OWNER, CHARACTER.SCRIPT_OWNER, CAST.HEAL, BOSS.HEAL_AMOUNT);
            sleep(0xff);

            animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
            attribute_bit(CHARACTER.SCRIPT_OWNER, ATTRIBUTE_BITS.VINCIBLE);
        }

        fun spawn_guardbot(x, y) {
            add_enemy(ENEMY.GATE_BOT, x, y);
            attribute(CHARACTER.LAST_ENTITY, ATTRIBUTE.HP, SYSTEM.HP_MAX);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(guardbot_down));
        }

        fun trigger_enter() {
            default_init_room(True, False);
            character_selection(CHARACTER.DOG);

            close_exits(True);

            BOSS.HIT_COUNT_MEMORY = BOSS.HIT_COUNT;

            spawn_guardbot(0x29, 0x2b);
            spawn_guardbot(0x13, 0x29);
            spawn_guardbot(0x29, 0x1b);
            spawn_guardbot(0x13, 0x19);

            countdown(BOSS.COUNTDOWN);
            attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.VINCIBLE);
        }
    };

    map bomb_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum BOSS {
            ID = memory_tmp(),
        }

        @install()
        fun boss_defeated() {
            general_boss_defeated();

            map_transition(bomb_arena, right, DIRECTION.NONE);
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        fun memscan() {
            // animate(BOSS.ID, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.VIGOR_FLEX);
            // yield();

            debug_memory(BOSS.ID[0x36], BOSS.ID[ATTRIBUTE.HP]);

            if(BOSS.ID[ATTRIBUTE.WEAPON_HIT] > 0x00) {
                heal(CHARACTER.SCRIPT_OWNER, 0x00, False);
            }

            sleep(0x50);

            debug_memory(BOSS.ID[0x36], BOSS.ID[ATTRIBUTE.HP]);
        }

        fun trigger_enter() {
            close_exits(True);
            character_selection(CHARACTER.BOY);

            add_enemy(ENEMY.VIGOR, 0x15, 0x1e);
            BOSS.ID = <CHARACTER.LAST_ENTITY>;
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(boss_defeated));
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(memscan));

            default_init_room(True, False);
            SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.BOMBS;

            countdown(0x03);
            // attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);

            set(SOULS_MEMORY.BOMB_ENABLED);
            unlock(ITEM.ENERGY_CORE);
            subtext(string("Start = Bomb[END]"));

            sleep(0x50);
        }
    };

    map mosquito_arena(0x5c) {
        enum entrance {
            north = entrance(0x1b, 0x03, DIRECTION.SOUTH),
            south = entrance(0x1d, 0x33, DIRECTION.NORTH),

            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum stepon_trigger {
            exit_north = @install() fun test() {
                map_transition(hidden_room, room_nss_south_2, DIRECTION.NORTH);
            },
            exit_south = nop(),
            center = nop(),
        }

        enum BOSS {
            BOSS_ID = memory_tmp(),

            BOSS_START_X = memory_tmp(),
            BOSS_START_Y = memory_tmp(),
            BOSS_START_TIMER = memory_tmp(),

            MOSQUITO_1_ID = memory_tmp(),
            MOSQUITO_1_X = 0x13,
            MOSQUITO_1_Y = 0x19,
            MOSQUITO_2_ID = memory_tmp(),
            MOSQUITO_2_X = 0x29,
            MOSQUITO_2_Y = 0x1b,
            MOSQUITO_3_ID = memory_tmp(),
            MOSQUITO_3_X = 0x13,
            MOSQUITO_3_Y = 0x29,
            MOSQUITO_4_ID = memory_tmp(),
            MOSQUITO_4_X = 0x29,
            MOSQUITO_4_Y = 0x2b,
        }

        @install()
        fun boss_defeated() {
            general_boss_defeated();

            SOULS_MEMORY.BOSSES_DEFEATED_COUNTER = SOULS_MEMORY.BOSSES_DEFEATED_COUNTER + 0x01;
            SOULS_MEMORY.PROGRESS_COUNTER = SOULS_MEMORY.PROGRESS_COUNTER + 0x01;
            set(SOULS_MEMORY.DEAD_ARENA_MOSQUITO);

            close_exits(False);
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        fun mosquito_dead(id, x, y) {
            // yield();
            animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.GORE);
            attribute_bit(CHARACTER.SCRIPT_OWNER, ATTRIBUTE_BITS.INVINCIBLE);

            cast(id, BOSS.BOSS_ID, CAST.FIREBALL, 0xff);

            sleep(0x20);
            animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ALL.INVISIBLE);
            teleport(id, x, y);
            sleep(0x60);

            // full_heal(CHARACTER.SCRIPT_OWNER, 0x10, False);
            animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
            <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.PALETTE] = 0x0a00;
            attribute_bit(CHARACTER.SCRIPT_OWNER, ATTRIBUTE_BITS.VINCIBLE);
        }

        @install()
        fun mosquito_1_dead() {
            mosquito_dead(BOSS.MOSQUITO_1_ID, BOSS.MOSQUITO_1_X, BOSS.MOSQUITO_1_Y);
        }
        @install()
        fun mosquito_2_dead() {
            mosquito_dead(BOSS.MOSQUITO_2_ID, BOSS.MOSQUITO_2_X, BOSS.MOSQUITO_2_Y);
        }
        @install()
        fun mosquito_3_dead() {
            mosquito_dead(BOSS.MOSQUITO_3_ID, BOSS.MOSQUITO_3_X, BOSS.MOSQUITO_3_Y);
        }
        @install()
        fun mosquito_4_dead() {
            mosquito_dead(BOSS.MOSQUITO_4_ID, BOSS.MOSQUITO_4_X, BOSS.MOSQUITO_4_Y);
        }

        fun spawn_mosquito(id, x, y, script_id) {
            add_enemy(ENEMY.MOSQUITO, x, y);
            store_last_entity(id);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, script_id);
        }

        @install()
        @async()
        fun lock_temporary() {
            BOSS.BOSS_START_X = BOSS.BOSS_ID[ATTRIBUTE.X];
            BOSS.BOSS_START_Y = BOSS.BOSS_ID[ATTRIBUTE.Y];

            while(BOSS.BOSS_START_TIMER < 0x78) {
                BOSS.BOSS_START_TIMER = BOSS.BOSS_START_TIMER + 0x01;

                BOSS.BOSS_ID[ATTRIBUTE.X] = BOSS.BOSS_START_X;
                BOSS.BOSS_ID[ATTRIBUTE.Y] = BOSS.BOSS_START_Y;

                yield();
            }
        }

        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            default_init_room(True, False);
            
            if!(SOULS_MEMORY.DEAD_ARENA_MOSQUITO) {
                close_exits(True);

                add_enemy(ENEMY.MAGMAR, 0x1e, 0x21);
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
                store_last_entity(BOSS.BOSS_ID);
                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(boss_defeated));
                lock_temporary();

                character_selection(CHARACTER.BOY);

                countdown(0x03);
                attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);

                spawn_mosquito(BOSS.MOSQUITO_1_ID, BOSS.MOSQUITO_1_X, BOSS.MOSQUITO_1_Y, reference(mosquito_1_dead));
                sleep(0x40);
                spawn_mosquito(BOSS.MOSQUITO_2_ID, BOSS.MOSQUITO_2_X, BOSS.MOSQUITO_2_Y, reference(mosquito_2_dead));
                sleep(0x20);
                spawn_mosquito(BOSS.MOSQUITO_3_ID, BOSS.MOSQUITO_3_X, BOSS.MOSQUITO_3_Y, reference(mosquito_3_dead));
                sleep(0x20);
                spawn_mosquito(BOSS.MOSQUITO_4_ID, BOSS.MOSQUITO_4_X, BOSS.MOSQUITO_4_Y, reference(mosquito_4_dead));
            } else {
                object[0x04] = 0x04;
                object[0x05] = 0x04;
            }
        }
    };

    map invisible_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum ROOM {
            REVEALER_ID = memory_tmp(),
        }

        enum BOSS {
            BOSS_ID = memory_tmp(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        fun boss_defeated4() {
            general_boss_defeated();

            map_transition(invisible_arena, right, DIRECTION.NONE);
        }

        @install()
        fun revealer_triggered() {
            destroy(ROOM.REVEALER_ID);

            attribute_bit(BOSS.BOSS_ID, ATTRIBUTE_BITS.VISIBLE);
        }

        @install()
        @async()
        fun stack_revealer_boss() {
            while!(dead(ROOM.REVEALER_ID)) {
                ROOM.REVEALER_ID[ATTRIBUTE.X] = BOSS.BOSS_ID[ATTRIBUTE.X];
                ROOM.REVEALER_ID[ATTRIBUTE.Y] = BOSS.BOSS_ID[ATTRIBUTE.Y];
                yield();
            }
        }

        fun trigger_enter() {
            close_exits(True);

            add_enemy(ENEMY.MAGMAR, 0x1e, 0x21);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
            store_last_entity(BOSS.BOSS_ID);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(boss_defeated4));

            default_init_room(True, False);

            add_enemy(ENEMY.REVEALER_TARGET_ENTITY, 0x1e, 0x21);
            store_last_entity(ROOM.REVEALER_ID);

            special_script(SPECIAL_SCRIPTS.REVEALER, reference(revealer_triggered));
            stack_revealer_boss();

            countdown(0x03);
            attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);

        }
    };

    map abomination_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum soundtrack {
            default = soundtrack(MUSIC.BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        enum BOSS {
            ID_CARLTRON = memory_tmp(),
            ID_LEFT = memory_tmp(),
            ID_RIGHT = memory_tmp(),
            ID_BACK = memory_tmp(),

            PHASE = memory_tmp(),

            COUNTDOWN = 0x03,
        }

        @install()
        fun abomination_triggered() {
            if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_CARLTRON) {
                // subtext(string("c[END]"));

                
                attribute_bit(BOSS.ID_CARLTRON, ATTRIBUTE_BITS.NO_CLIP);
                control(CHARACTER.NONE);
                face(CHARACTER.ACTIVE, DIRECTION.NORTH);
                animate(CHARACTER.ACTIVE, ANIMATION_MODE.ONCE, ANIMATION_ALL.KNOCKBACK);
                damage(CHARACTER.BOY, 0x05);
                sleep(0x01);
                attribute_bit(BOSS.ID_CARLTRON, ATTRIBUTE_BITS.CLIP);

                animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_TALK);
                sleep(0x50);
                animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);

                control(CHARACTER.BOTH);

                if(BOSS.PHASE == 0x00) {
                    BOSS.PHASE = 0x01;
                }
            } else if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_LEFT) {
                // subtext(string("l[END]"));

                if(BOSS.PHASE == 0x01) {
                    if(dead(<CHARACTER.SCRIPT_OWNER>)) {
                        BOSS.PHASE = 0x02;
                    }
                }
            } else if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_RIGHT) {
                if(BOSS.PHASE >= 0x02) {
                    if(dead(<CHARACTER.SCRIPT_OWNER>)) {
                        BOSS.PHASE = BOSS.PHASE + 0x01;
                    }
                }
            } else if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_BACK) {
                if(BOSS.PHASE >= 0x02) {
                    if(dead(<CHARACTER.SCRIPT_OWNER>)) {
                        BOSS.PHASE = BOSS.PHASE + 0x01;
                    }
                }
            }
        }

        @install()
        @async()
        fun abomination_watcher() {
            subtext(string("phase 0[END]"));

            while(BOSS.PHASE == 0x00) {
                yield();
            }

            subtext(string("phase 1[END]"));

            animate(BOSS.ID_CARLTRON, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_SMUG);

            add_enemy(ENEMY.THRAXX_LEFT_ARM, 0x00, 0x00);
            store_last_entity(BOSS.ID_LEFT);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

            sleep(0x50);

            while(BOSS.PHASE == 0x01) {
                yield();
            }

            subtext(string("phase 2[END]"));

            animate(BOSS.ID_CARLTRON, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_SMUG);

            add_enemy(ENEMY.THRAXX2_LEFT_ARM, 0x00, 0x00);
            store_last_entity(BOSS.ID_LEFT);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

            sleep(0x50);

            add_enemy(ENEMY.THRAXX_RIGHT_ARM, 0x00, 0x00);
            store_last_entity(BOSS.ID_RIGHT);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

            sleep(0x50);

            add_enemy(ENEMY.BONE_SNAKE, 0x00, 0x00);
            store_last_entity(BOSS.ID_BACK);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

            sleep(0x50);

            while(BOSS.PHASE == 0x02) {
                yield();
            }

            subtext(string("phase 3[END]"));

            while(BOSS.PHASE == 0x03) {
                yield();
            }

            subtext(string("phase 4[END]"));

            while(BOSS.PHASE == 0x04) {
                yield();
            }

            subtext(string("phase 5[END]"));

            add_enemy(ENEMY.SALABOG, 0x00, 0x00);
            store_last_entity(BOSS.ID_BACK);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

            while(BOSS.PHASE == 0x05) {
                yield();
            }

            control_enemy(BOSS.ID_CARLTRON, True);
            attribute_bit(BOSS.ID_CARLTRON, ATTRIBUTE_BITS.INVINCIBLE);
            face(BOSS.ID_CARLTRON, DIRECTION.SOUTH);
            animate(BOSS.ID_CARLTRON, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_DROPPING);
            sleep(0x80);

            animate(BOSS.ID_CARLTRON, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.CARLTRON_LYING);
            destroy(BOSS.ID_LEFT);
            destroy(BOSS.ID_RIGHT);
            destroy(BOSS.ID_BACK);
            sleep(0xff);

            // destroy(BOSS.ID_CARLTRON);

            subtext(string("yatta![END]"));
        }

        @install()
        @async()
        fun stack_t0123() {
            while!(dead(BOSS.ID_CARLTRON)) {
                BOSS.ID_LEFT[ATTRIBUTE.X] = BOSS.ID_CARLTRON[ATTRIBUTE.X] - 0x05;
                BOSS.ID_LEFT[ATTRIBUTE.Y] = BOSS.ID_CARLTRON[ATTRIBUTE.Y] - 0x1a;

                // sleep(0x02);
                yield();

                BOSS.ID_RIGHT[ATTRIBUTE.X] = BOSS.ID_CARLTRON[ATTRIBUTE.X] + 0x05;
                BOSS.ID_RIGHT[ATTRIBUTE.Y] = BOSS.ID_CARLTRON[ATTRIBUTE.Y] - 0x1a;

                // sleep(0x0);
                yield();

                BOSS.ID_BACK[ATTRIBUTE.X] = BOSS.ID_CARLTRON[ATTRIBUTE.X];
                BOSS.ID_BACK[ATTRIBUTE.Y] = BOSS.ID_CARLTRON[ATTRIBUTE.Y] - 0x20;

                // sleep(0x02);
                yield();
            }
        }

        fun abomination() {
            add_enemy(ENEMY.CARLTRON, 0x10, 0x13);
            store_last_entity(BOSS.ID_CARLTRON);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = SYSTEM.HP_MAX;
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

            abomination_watcher();
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            character_selection(CHARACTER.BOY);
            
            abomination();
            stack_t0123();

            countdown(BOSS.COUNTDOWN);
            attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);
        }
    };

    map drone_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum BOSS {
            RIDER_1_ID = memory_tmp(),
            MOUNT_1_ID = memory_tmp(),

            RIDER_2_ID = memory_tmp(),
            MOUNT_2_ID = memory_tmp(),

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            COUNTDOWN = 0x03,
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        @async()
        fun stack_t01_t23() {
            while(True) {
                if!(dead(BOSS.RIDER_1_ID)) {
                    BOSS.RIDER_1_ID[ATTRIBUTE.X] = BOSS.MOUNT_1_ID[ATTRIBUTE.X];
                    BOSS.RIDER_1_ID[ATTRIBUTE.Y] = BOSS.MOUNT_1_ID[ATTRIBUTE.Y] - 0x15;
                    yield();
                }
                if!(dead(BOSS.RIDER_2_ID)) {
                    BOSS.RIDER_2_ID[ATTRIBUTE.X] = BOSS.MOUNT_2_ID[ATTRIBUTE.X];
                    BOSS.RIDER_2_ID[ATTRIBUTE.Y] = BOSS.MOUNT_2_ID[ATTRIBUTE.Y] - 0x15;
                    yield();
                }

                yield();
            }
        }

        fun turret(id_1, id_2, x, y, mount_type) {
            add_enemy(ENEMY.GATE_BOT, x, y);
            store_last_entity(id_1);

            add_enemy(mount_type, x, y);
            store_last_entity(id_2);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);
        }

        fun spawn_boss(x, y) {
            turret(BOSS.RIDER_1_ID, BOSS.MOUNT_1_ID, x, y, ENEMY.MOSQUITO);
            turret(BOSS.RIDER_2_ID, BOSS.MOUNT_2_ID, x, y, ENEMY.BEE);
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            spawn_boss(0x10, 0x20);
            stack_t01_t23();
            // boss_watcher();

            character_selection(CHARACTER.BOY);
            // character_selection(CHARACTER.DOG);
            countdown(BOSS.COUNTDOWN);
            attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);
            // attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.VINCIBLE);
        }
    };

    map rats_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum soundtrack {
            default = soundtrack(0x30, 0x30)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum BOSS {
            RAT_1_ID = memory_tmp(),
            RAT_1_X = 0x13,
            RAT_1_Y = 0x19,
            RAT_2_ID = memory_tmp(),
            RAT_2_X = 0x29,
            RAT_2_Y = 0x1b,
            RAT_3_ID = memory_tmp(),
            RAT_3_X = 0x13,
            RAT_3_Y = 0x25,
            RAT_4_ID = memory_tmp(),
            RAT_4_X = 0x29,
            RAT_4_Y = 0x27,

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            COUNTDOWN = 0x03,
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        fun rat_dead(x, y, death_trigger) {
            add_enemy(ENEMY.RAT, x, y);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, death_trigger);
            attribute(CHARACTER.LAST_ENTITY, ATTRIBUTE.HP, 0x0001);

            sleep(0x20);
            destroy(CHARACTER.SCRIPT_OWNER);
        }

        @install()
        fun rat_1_dead() {
            rat_dead(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));
        }
        @install()
        fun rat_2_dead() {
            rat_dead(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));
        }
        @install()
        fun rat_3_dead() {
            rat_dead(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));
        }
        @install()
        fun rat_4_dead() {
            rat_dead(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
        }

        fun spawn_rat(x, y, death_trigger) {
            add_enemy(ENEMY.RAT, x, y);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, death_trigger);
            attribute(CHARACTER.LAST_ENTITY, ATTRIBUTE.HP, 0x0001);
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            character_selection(CHARACTER.DOG);
            // character_selection(CHARACTER.DOG);
            // countdown(BOSS.COUNTDOWN);
            attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.VINCIBLE);
            // attribute_bit(CHARACTER.DOG, ATTRIBUTE_BITS.VINCIBLE);

            spawn_rat(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));
            spawn_rat(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));

            sleep(0x40);

            spawn_rat(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));
            spawn_rat(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));

            sleep(0x20);

            spawn_rat(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));
            spawn_rat(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));

            sleep(0x20);

            spawn_rat(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
            spawn_rat(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
        }
    };

    map radahn3_arena(0x5c) {
        enum entrance {
            north = entrance(0x1b, 0x03, DIRECTION.SOUTH),
            south = entrance(0x1d, 0x33, DIRECTION.NORTH),

            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum soundtrack {
            default = soundtrack(0x32, 0xff)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        enum BOSS {
            DEBUG = True,

            RIDER_ID = memory_tmp(),
            MOUNT_ID = memory_tmp(),

            PHASE = memory_tmp(),
            TIMER = memory_tmp(),

            HP = 0x03e8, // 1000

            COUNTDOWN = 0x03,

            STOMP_ENTITY = memory_tmp(),
            STOMP_DISTANCE = 0x20,
            STOMP_COOL_DOWN_TIMER = memory_tmp(),
            STOMP_COOL_DOWN = 0x100,
            STOMP_DAMAGE_CLOSE = 0x50,
            STOMP_DAMAGE = 0x10,
            STOMP_EXPLOSION_DISTANCE = 0x30,

            // p1

            P1_THRESHOLD = 0x320, // 800
            P1_TIME_BEFORE_SALVAGE = 0x500,

            // p2

            P2_THRESHOLD = 0x1f4, // 500
            P2_TIME_BEFORE_SALVAGE = 0x300,

            RANDOM_SPELL = memory_tmp(),
            TIME_BEFORE_RANDOM_SPELL = 0x300,
        }

        fun boss_killed() {
            nop();
        }

        @install()
        @async()
        fun grab() {
            <0x283d> = BOSS.MOUNT_ID;

            if(dead(<0x283d>)) {
                subtext(string("dead 1[END]"));
                end();
            }
            control(CHARACTER.NONE);
            attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
            attribute_bit(<0x283d>, ATTRIBUTE_BITS.LOCK_IN_PLACE);

            <0x249d> = <CHARACTER.BOY>[ATTRIBUTE.X];
            <0x249f> = <CHARACTER.BOY>[ATTRIBUTE.Y];
            <0x24ab> = 0x01d8;
            <0x24af> = 0x00f8;

            if(<0x249d> < <0x24ab>) {
                arg[0x00] = 0x01;
            }
            animate(0x283d, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.STERLING_FLY_2);

            <0x249d> = <0x283d>[ATTRIBUTE.X];
            <0x249f> = <0x283d>[ATTRIBUTE.Y];

            <0x24a1> = <CHARACTER.BOY>[ATTRIBUTE.X] - 0x06;
            <0x24a1> = <CHARACTER.BOY>[ATTRIBUTE.Y] - 0x1f;

            <0x2847> = 0x1e;
            <0x249f> = <0x249f> - 0x10;

            _teleport(<0x283d>, <0x249d>, <0x249f>);

            <0x283f> = <0x24a1> - <0x249d>;
            <0x2841> = <0x24a3> - <0x249f>;

            <0x2843> = (<0x283f> lshift 0x04) / <0x2847>;
            <0x2845> = (<0x2841> lshift 0x04) / <0x2847>;

            <0x23b9> = <0x249d> lshift 0x04;
            <0x23bb> = <0x24bb> lshift 0x04;

            <0x283d>[ATTRIBUTE.JUMP_HEIGHT] = <0x2847> / 0x02;
            arg[0x02] = 0x00;

            while(arg[0x02] <= <0x2847>) {
                <0x23b9> = <0x23b9> + <0x2843>;
                <0x23bb> = <0x23bb> + <0x2845>;
                <0x23db> = 0x0000;
                _teleport(<0x283d>, <0x23b9> rshift 0x04, <0x23bb> rshift 0x04);
                yield();
                arg[0x02] = arg[0x02] + 0x01;

                sleep(0x30);
                debug_memory(<0x23b9> rshift 0x04, <0x23bb> rshift 0x04);
            }

            // if(dead(<0x283d>)) {
            //     subtext(string("dead 2[END]"));
            //     end();
            // }

            // call(0x99988a);

            debug_memory(<0x2843>, <0x2845>);
            // subtext(string("test 2[END]"));
            end();

            <0x249d> = <CHARACTER.BOY>[ATTRIBUTE.X];
            <0x249f> = <CHARACTER.BOY>[ATTRIBUTE.Y];

            if(arg[0x00] == 0x01) {
                <0x24a1> = 0x00f8;
                <0x24a3> = 0x00e8;
                face(CHARACTER.BOY, DIRECTION.WEST);
                face(0x283d, DIRECTION.WEST);
            } else {
                <0x24a1> = 0x02d8;
                <0x24a3> = 0x00e8;
                face(CHARACTER.BOY, DIRECTION.EAST);
                face(0x283d, DIRECTION.EAST);
            }

            yield();

            animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.FALL_2);
            <0x2847> = 0x004b;
            <0x249f> = <0x249f> - 0x10;
            <0x23db> = 0x0010;
            _teleport(<CHARACTER.BOY>, <0x249d>, <0x249f>);

            <0x23db> = 0x0000;
            _teleport(<0x283d>, <0x249d> - 0x06, <0x249f> - 0x1f);

            <0x283f> = <0x24a1> - <0x249d>;
            <0x2841> = <0x24a3> - <0x249f>;

            <0x2843> = (<0x283f> lshift 0x04) / <0x2847>;
            <0x2845> = (<0x2841> lshift 0x04) / <0x2847>;

            <0x23b9> = <0x249d> lshift 0x04;
            <0x23bb> = <0x249f> lshift 0x04;

            <CHARACTER.BOY>[ATTRIBUTE.JUMP_HEIGHT] = <0x2847> / 0x02;
            <0x283d>[ATTRIBUTE.JUMP_HEIGHT] = <0x2847> / 0x02;

            arg[0x02] = 0x00;

            while(arg[0x02] <= <0x2847>) {
                <0x23b9> = <0x23b9> + <0x2843>;
                <0x23bb> = <0x23bb> + <0x2845>;
                <0x23db> = 0x0010;
                _teleport(<CHARACTER.BOY>, <0x23b9> rshift 0x04, <0x23bb> rshift 0x04);
                <0x23db> = 0x0000;
                _teleport(<0x283d>, (<0x23b9> rshift 0x04) - 0x06, (<0x23bb> rshift 0x04) - 0x1f);
                yield();
                arg[0x02] = arg[0x02] + 0x01;
            }

            sleep(0x1d);
            call(0x99988a);

            <0x249d> = <CHARACTER.BOY>[ATTRIBUTE.X];
            <0x249f> = <CHARACTER.BOY>[ATTRIBUTE.Y];

            if(arg[0x00] == 0x01) {
                <0x24a1> = 0x00f8;
                <0x24a3> = 0x01e8;
            } else {
                <0x24a1> = 0x02d8;
                <0x24a3> = 0x0258;
            }

            animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.FALL_2);
            _teleport(<CHARACTER.BOY>, <0x249d>, <0x249f>);

            while(<0x249f> < <0x24a3>) {
                _teleport(<CHARACTER.BOY>, <0x249d>, <0x249f>);
                yield();
                <0x249f> = <0x249f> + 0x04;
            }

            sfx_effect(SFX_EFFECT.SHAKING, True);

            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.FALL_1);
            <0x23d7> = 0x0001;
            damage(CHARACTER.BOY, 0x5a);
            sleep(0x0e);

            sfx_effect(SFX_EFFECT.SHAKING, False);

            attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.UNLOCK);
            control(CHARACTER.BOY);

            <0x24ab> = 0x0158;
            <0x24af> = 0x00e8;

            _teleport(<0x283d>, <0x24ab>, <0x24af>);
            yield();
            attribute_bit(<0x283d>, ATTRIBUTE_BITS.UNLOCK);

        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(BOSS.MOUNT_ID)) {
                BOSS.RIDER_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
                BOSS.RIDER_ID[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y] - 0x15;
                yield();

                if(BOSS.STOMP_COOL_DOWN_TIMER == 0x0000) {
                    arg[0x00] = BOSS.MOUNT_ID[ATTRIBUTE.X];
                    arg[0x02] = BOSS.MOUNT_ID[ATTRIBUTE.Y];
                    arg[0x04] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                    arg[0x06] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];

                    if(arg[0x00] < arg[0x04]) {
                        arg[0x08] = arg[0x04] - arg[0x00];
                    } else {
                        arg[0x08] = arg[0x00] - arg[0x04];
                    }

                    if(arg[0x02] < arg[0x06]) {
                        arg[0x0a] = arg[0x06] - arg[0x02];
                    } else {
                        arg[0x0a] = arg[0x02] - arg[0x06];
                    }

                    if((arg[0x08] <= BOSS.STOMP_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_DISTANCE)) {
                        BOSS.STOMP_COOL_DOWN_TIMER = BOSS.STOMP_COOL_DOWN;

                        grab();
                        call_async(ADDRESS.STERLING_ROAR);
                    }
                    yield();

                    // if(BOSS.DEBUG) {
                    //     debug_memory(arg[0x08], arg[0x0a]);
                    //     sleep(0x20);
                    // }
                } else {
                    BOSS.STOMP_COOL_DOWN_TIMER = BOSS.STOMP_COOL_DOWN_TIMER - 0x01;
                }
            }
        }

        fun cast_salvage(target, level) {
            animate(BOSS.RIDER_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.VERMINATOR_CAST_1);
            cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
            cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
            cast(BOSS.RIDER_ID, target, CAST.FIREBALL, level);
            cast(BOSS.RIDER_ID, target, CAST.FLASH, level);
        }

        @install()
        fun boss_damage() {
            // animate(BOSS.RIDER_ID, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.VERMINATOR_DAMAGE);

            if(BOSS.PHASE == 0x00) {
                BOSS.TIMER = 0x00;

                if(BOSS.RIDER_ID[ATTRIBUTE.HP] < BOSS.P1_THRESHOLD) {
                    BOSS.PHASE = 0x01;
                }
            } else if(BOSS.PHASE == 0x01) {
                if(BOSS.RIDER_ID[ATTRIBUTE.HP] < BOSS.P2_THRESHOLD) {
                    BOSS.PHASE = 0x02;
                }
            } else if(BOSS.PHASE == 0x02) {
                BOSS.TIMER = BOSS.TIMER - 0x60;
            }

            if(BOSS.DEBUG) {
                MEMORY.STRING_PARAMETER_1 = BOSS.RIDER_ID[ATTRIBUTE.HP];
                MEMORY.STRING_PARAMETER_2 = BOSS.HP;

                subtext(string("Rider = [0xa1]/[0xa2][END]"));
            }
        }

        @install()
        @async()
        fun boss_watcher() {
            if(BOSS.DEBUG) {
                subtext(string("phase 0[END]"));
            }

            while(BOSS.PHASE == 0x00) {
                if(BOSS.TIMER > BOSS.P1_TIME_BEFORE_SALVAGE) {
                    cast_salvage(CHARACTER.ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[0x0b] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER = BOSS.TIMER + 0x01;
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext(string("phase 1[END]"));
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
            cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                if(BOSS.TIMER > BOSS.P2_TIME_BEFORE_SALVAGE) {
                    cast_salvage(CHARACTER.ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[ATTRIBUTE.PALETTE] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER = BOSS.TIMER + 0x01;
                }
                yield();
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
            cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                BOSS.TIMER = BOSS.TIMER + 0x01;

                if(BOSS.TIMER > BOSS.TIME_BEFORE_RANDOM_SPELL) {
                    BOSS.TIMER = 0x0000;

                    BOSS.RANDOM_SPELL = randrange(0x03);

                    if(BOSS.RANDOM_SPELL == 0x00) {
                        cast(BOSS.RIDER_ID, BOSS.RIDER_ID, CAST.FORCEFIELD, 0x05);
                        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.CONFOUND, 0x05);
                    } else if(BOSS.RANDOM_SPELL == 0x01) {
                        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.DRAIN, 0x30);
                    } else if(BOSS.RANDOM_SPELL == 0x02) {
                        cast(BOSS.RIDER_ID, CHARACTER.ACTIVE, CAST.PLAGUE, 0x01);
                    } 
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext(string("phase 2[END]"));
            }

            boss_killed();
        }

        fun spawn_boss(x, y) {
            add_enemy(ENEMY.VERMINATOR, x, y);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = BOSS.HP;
            store_last_entity(BOSS.RIDER_ID);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(boss_damage));
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);

            add_enemy(ENEMY.STERLING, x, y);
            store_last_entity(BOSS.MOUNT_ID);
            // attach_sterling_script_to_last_entity(CHARACTER.LAST_ENTITY);
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
        }

        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            default_init_room(True, False);

            if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                close_exits(True);

                spawn_boss(0x10, 0x13);
                stack_t01_offset();
                boss_watcher();

                character_selection(CHARACTER.BOY);
                countdown(BOSS.COUNTDOWN);
                attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.VINCIBLE);
            }
        }
    };

    map isaac3_arena(0x5c) { // unused
        enum entrance {
            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum stepon_trigger {
            exit_north = @install() fun test() {
                subtext(string("step-on? 0 [END]"));
            },
            exit_south = @install() fun test() {
                subtext(string("step-on? 1 [END]"));
            },
            center = @install() fun test() {
                subtext(string("step-on? 2 [END]"));
            }
        }

        enum BOSS {
            MOUNT_ID = memory_tmp(),
            RIDER_ID = memory_tmp(),

            FOLLOWING = memory_tmp(),

            PUKE_HELPER = memory_tmp(),

            MOVE_RNG = memory_tmp(),

            CANNONBALL_X = memory_tmp(),
            CANNONBALL_Y = memory_tmp(),
            CANNONBALL_COUNT = memory_tmp(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        fun shoot_w() {
            code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

            code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x20), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

            code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x20), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
        }

        @install()
        fun shoot_line() {
            code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            sleep(0x0a);
            code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            sleep(0x0a);
            code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            sleep(0x0a);
            code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            sleep(0x0a);
            code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            sleep(0x0a);
            code(0xb5, param(THROWABLE.ONION), entity_t(BOSS.MOUNT_ID), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y]), param(0xff), calculate(BOSS.MOUNT_ID[ATTRIBUTE.X]), calculate(BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x80), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
        }

        @async()
        @install()
        fun fly_left_right() {
            while(True) {
                while(BOSS.MOUNT_ID[ATTRIBUTE.X] < 0x150) {
                    BOSS.MOUNT_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X] + 0x01;
                    yield();
                }
                while(BOSS.MOUNT_ID[ATTRIBUTE.X] > 0x50) {
                    BOSS.MOUNT_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X] - 0x01;
                    yield();
                }
            }
        }

        @install()
        fun monstro_damage() {
            yield();
            // animate(BOSS.MOUNT_ID, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);

            // animate(BOSS.MOUNT_ID, ANIMATION_MODE.LOOP, ANIMATION_ALL.DEFAULT);
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(<CHARACTER.BOY>)) {
                BOSS.RIDER_ID[ATTRIBUTE.X] = BOSS.MOUNT_ID[ATTRIBUTE.X];
                BOSS.RIDER_ID[ATTRIBUTE.Y] = BOSS.MOUNT_ID[ATTRIBUTE.Y] + 0x50;
                yield();

                // <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.BOY>[ATTRIBUTE.X] - 0x05;
                // <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.BOY>[ATTRIBUTE.Y];
                // yield();
            }
        }

        fun move() {
            // control(BOSS.MOUNT_ID, True);
            sleep(0x20);

            BOSS.MOVE_RNG = randrange(0x03);

            if(BOSS.MOVE_RNG == 0x00) {
                shoot_w();
            } else if(BOSS.MOVE_RNG == 0x01) {
                shoot_line();
            } else {
                nop();
            }

            sleep(0x20);
            // control(BOSS.MOUNT_ID, False);
        }

        @async()
        @install()
        fun move_logic() {
            sleep(0x80);
            
            while(True) {
                move();
                
                sleep(0x60);
            }
        }

        fun spawn_boss(x, y) {
            add_enemy(ENEMY.RIMSALA_BOSS_1, x, y);
            BOSS.RIDER_ID = <CHARACTER.LAST_ENTITY>;
            // animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(monstro_damage));
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

            // add_enemy_with_flags(ENEMY.DRAKE, x, y, FLAG_ENEMY.INACTIVE);
            // add_enemy_with_flags(ENEMY.FOOTKNIGHT, x, y, FLAG_ENEMY.INACTIVE);
            add_enemy(ENEMY.RIMSALA_BOSS_2, x, y);
            BOSS.MOUNT_ID = <CHARACTER.LAST_ENTITY>;
            // <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = 0x100;
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

            fly_left_right();
            move_logic();
            stack_t01_offset();
        }

        fun trigger_enter() {
            spawn_boss(0x10, 0x08);

            available(CHARACTER.BOY);
            destroy(CHARACTER.DOG); // teleport(CHARACTER.BOY, 0x00, 0x00);

            default_init_room(True, False);
            SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.ISAAC;

            close_exits(True);

            if!(FLAG.IN_ANIMATION) {
                // teleport(CHARACTER.DOG, 0x19, 0x1d);
                <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] + 0x20;
                <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] + 0x20;
                crash_land(CHARACTER.BOTH);
            }
        }
    };

    map barrier_check_arena(0x5c) {
        enum entrance {
            left = entrance(0x15, 0x1c, DIRECTION.NONE),
            center = entrance(0x1e, 0x21, DIRECTION.NONE),
            right = entrance(0x2a, 0x23, DIRECTION.NONE)
        }

        enum stepon_trigger {
            exit_north = @install() fun test() {
                subtext(string("step-on? 0 [END]"));
            },
            exit_south = @install() fun test() {
                subtext(string("step-on? 1 [END]"));
            },
            center = @install() fun test() {
                subtext(string("step-on? 2 [END]"));
            }
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @async()
        @install()
        fun barrier_check() {
            // code(0xb5, param(THROWABLE.LIGHTNING), entity_t(CHARACTER.LAST_ENTITY), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.X]), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y]), param(0x00), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.X]), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] + 0x80), param(0xff), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            
            add_enemy_with_flags(ENEMY.AQUAGOTH_ENTITY, 0x15, 0x1c, 0x00);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.NO_CLIP);
            attach_to_script(CHARACTER.LAST_ENTITY);
            <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Z] = 0xff;

            face(CHARACTER.LAST_ENTITY, DIRECTION.EAST);

            while(True) {
                code(0xb5, param(THROWABLE.ONION), entity_t(CHARACTER.LAST_ENTITY), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.X]), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y]), param(0x00), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.X]), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] + 0x30), param(0x05), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                sleep(0x1);

                // if(<CHARACTER.DOG>[ATTRIBUTE.HP] <= 0x00) {
                //     <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] + 0x01;
                // }

                arg[0x00] = <CHARACTER.BOY>[ATTRIBUTE.X];
                arg[0x02] = <CHARACTER.BOY>[ATTRIBUTE.Y];
                arg[0x04] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
                arg[0x06] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    <CHARACTER.BOY>[ATTRIBUTE.X] = <CHARACTER.BOY>[ATTRIBUTE.X] + 0x01;
                }

                arg[0x00] = <CHARACTER.DOG>[ATTRIBUTE.X];
                arg[0x02] = <CHARACTER.DOG>[ATTRIBUTE.Y];
                arg[0x04] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X];
                arg[0x06] = <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] + 0x01;
                }
            }
        }

        @async()
        @install()
        fun barrier_check_2() {
            add_enemy_with_flags(ENEMY.AQUAGOTH_ENTITY, 0x15, 0x1c, 0x00);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.NO_CLIP);
            attach_to_script(CHARACTER.LAST_ENTITY);
            <CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Z] = 0xff;

            face(CHARACTER.LAST_ENTITY, DIRECTION.EAST);

            while(True) {
                code(0xb5, param(THROWABLE.LIGHTNING), entity_t(CHARACTER.LAST_ENTITY), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.X]), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y]), param(0x00), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.X]), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] + 0x30), param(0x30), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x20);

                code(0xb5, param(THROWABLE.LIGHTNING), entity_t(CHARACTER.LAST_ENTITY), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.X]), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] + 0x50), param(0x00), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.X]), calculate(<CHARACTER.LAST_ENTITY>[ATTRIBUTE.Y] + 0x20), param(0x30), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x20);
            }
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            if!(FLAG.IN_ANIMATION) {
                // teleport(CHARACTER.DOG, 0x19, 0x1d);
                <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.DOG>[ATTRIBUTE.X] + 0x20;
                <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.DOG>[ATTRIBUTE.Y] + 0x20;
                crash_land(CHARACTER.BOTH);
            }

            // <CHARACTER.DOG>[ATTRIBUTE.HP] = 0x0;

            // barrier_check();
            barrier_check_2();
        }
    };

    map river(0x53) {
        enum entrance {
            center = entrance(0x32, 0x10, DIRECTION.NONE),
            right = entrance(0x64, 0x10, DIRECTION.WEST),
        }

        enum ROOM {
            DEBUG = False,

            SHIP_ID = memory_tmp(),

            ROCK_1 = memory_tmp(),
            ROCK_2 = memory_tmp(),
            ROCK_3 = memory_tmp(),
            ROCK_CRASH_SIZE = 0x0a,

            CRASH = memory_tmp(),
        }

        enum BOSS {
            ID = memory_tmp(),

            X = 0x52,
            Y = 0x07,

            HIDDEN = True,
        }

        fun yeet() {
            // source: call(0x94e9d8);
            
            control(CHARACTER.NONE);

            // <0x24ab> = <CHARACTER.BOY>[ATTRIBUTE.X];
            // <0x24af> = <CHARACTER.BOY>[ATTRIBUTE.Y];

            // <0x24cf> = 0x0228;
            // <0x24d1> = 0x0058;

            // <0x24cf> = <0x24cf> + 0x05;
            // sleep(0x17);

            animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.FALL_1);
            // sleep(0x03);
            // animate(CHARACTER.DOG, ANIMATION_MODE.LOOP, ANIMATION_DOG.ACT1_ANGRY);
            sleep(0x05);

            // call_async(0x94eb06);
            // call_async(0x94eb0c);

            animate(CHARACTER.BOY, ANIMATION_MODE.LOOP, ANIMATION_BOY.FALL_2);
            <CHARACTER.BOY>[ATTRIBUTE.JUMP_HEIGHT] = 0x20;

            while(<CHARACTER.BOY>[ATTRIBUTE.X] > 0x70) {
                // _teleport(<CHARACTER.BOY>, <0x24ab>, <0x24af>);
                <CHARACTER.BOY>[ATTRIBUTE.X] = <CHARACTER.BOY>[ATTRIBUTE.X] - 0x01;
                // _teleport(CHARACTER.DOG, <0x24ab>, <0x24af>);
                // _teleport(0x2838, 0x24ab, 0x24af - 0x01);

                // <0x24ab> = <0x24ab> - 0x01;
                yield();

                // debug_memory(<0x24ab>, <0x24cf>);
                // sleep(0x20);
            }

            while(<CHARACTER.BOY>[ATTRIBUTE.Y] < 0xd0) {
                // _teleport(<CHARACTER.BOY>, <0x24ab>, <0x24af>);
                <CHARACTER.BOY>[ATTRIBUTE.Y] = <CHARACTER.BOY>[ATTRIBUTE.Y] + 0x03;
                // _teleport(CHARACTER.DOG, <0x24ab>, <0x24af>);
                // _teleport(0x2838, 0x24ab, 0x24af - 0x01);

                // <0x24ab> = <0x24ab> - 0x01;
                yield();

                // debug_memory(<0x24ab>, <0x24cf>);
                // sleep(0x20);
            }
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(<CHARACTER.BOY>)) {
                if(ROOM.CRASH) {
                    damage(CHARACTER.BOY, 0xff, True);
                    yield();
                } else {
                    <CHARACTER.BOY>[ATTRIBUTE.X] = <CHARACTER.BOY>[ATTRIBUTE.X] - 0x02;

                    ROOM.SHIP_ID[ATTRIBUTE.X] = <CHARACTER.BOY>[ATTRIBUTE.X];
                    ROOM.SHIP_ID[ATTRIBUTE.Y] = <CHARACTER.BOY>[ATTRIBUTE.Y] - 0x03;
                    yield();
                    
                    if(<CHARACTER.BOY>[ATTRIBUTE.Y] < 0x40) {
                        <CHARACTER.BOY>[ATTRIBUTE.Y] = 0x40;
                    } else if(<CHARACTER.BOY>[ATTRIBUTE.Y] > 0xd0) {
                        <CHARACTER.BOY>[ATTRIBUTE.Y] = 0xd0;
                    }
                    // yield();

                    if(<CHARACTER.BOY>[ATTRIBUTE.X] < 0xb0) {
                        yeet();

                        map_transition(inbetwixx, start, DIRECTION.NONE);
                    } 
                    yield();
                }
            }
        }

        @install()
        @async()
        fun boss_watcher() {
            while!(dead(BOSS.ID)) {
                sleep(0xff);
                sleep(0xff);
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_ENEMY.SALABOG_DUCK);
                attribute_bit(BOSS.ID, ATTRIBUTE_BITS.INVINCIBLE);
                sleep(0xff);
                animate(CHARACTER.LAST_ENTITY, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);
                attribute_bit(BOSS.ID, ATTRIBUTE_BITS.VINCIBLE);
            }
        }

        fun spawn_boss() {
            add_enemy(ENEMY.SALABOG, BOSS.X, BOSS.Y);
            BOSS.ID = <CHARACTER.LAST_ENTITY>;

            boss_watcher();
        }

        @install()
        fun revealer_triggered() {
            destroy(CHARACTER.SCRIPT_OWNER);

            spawn_boss();
        }

        @install()
        fun crash() {
            ROOM.CRASH = 0x01;

            control(CHARACTER.NONE);

            damage(CHARACTER.BOY, 0xff, True);
            destroy(ROOM.SHIP_ID);

            
        }

        fun rock_check() {
            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= ROOM.ROCK_CRASH_SIZE) && (arg[0x0a] <= ROOM.ROCK_CRASH_SIZE)) {
                crash();
                end();
            }
            sleep(0x05);

            if(ROOM.DEBUG) {
                debug_memory(arg[0x08], arg[0x0a]);
                sleep(0x20);
            }
        }

        @install()
        @async()
        fun rock_1_check() {
            while(True) {
                arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
                arg[0x04] = ROOM.ROCK_1[ATTRIBUTE.X] + 0x0a;
                arg[0x06] = ROOM.ROCK_1[ATTRIBUTE.Y];

                rock_check();
            }
        }

        @install()
        @async()
        fun rock_2_check() {
            while(True) {
                arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
                arg[0x04] = ROOM.ROCK_2[ATTRIBUTE.X] + 0x0a;
                arg[0x06] = ROOM.ROCK_2[ATTRIBUTE.Y];

                rock_check();
            }
        }
        @install()
        @async()
        fun rock_3_check() {
            while(True) {
                arg[0x00] = <CHARACTER.ACTIVE>[ATTRIBUTE.X];
                arg[0x02] = <CHARACTER.ACTIVE>[ATTRIBUTE.Y];
                arg[0x04] = ROOM.ROCK_3[ATTRIBUTE.X] + 0x0a;
                arg[0x06] = ROOM.ROCK_3[ATTRIBUTE.Y];

                rock_check();
            }
        }

        fun add_rock(x, y, id) {
            add_enemy_with_flags(ENEMY.STONE, x, y, FLAG_ENEMY.INVISBLE_INVINCIBLE_INACTIVE);
            id = <CHARACTER.LAST_ENTITY>;
        }

        fun trigger_enter() {
            available(CHARACTER.BOY);
            destroy(CHARACTER.DOG); // teleport(CHARACTER.BOY, 0x00, 0x00);

            add_placeholder(ANIMATION_PLACEHOLDER.SHELL_BOAT, 0x00, 0x00);
            ROOM.SHIP_ID = <CHARACTER.LAST_ENTITY>;

            stack_t01_offset();

            if(BOSS.HIDDEN) {
                add_enemy(ENEMY.REVEALER_TARGET_ENTITY, BOSS.X, BOSS.Y);
                special_script(SPECIAL_SCRIPTS.REVEALER, reference(revealer_triggered));
            } else {
                spawn_boss();
            }
            
            fade_in();

            add_rock(0x45, 0x10, ROOM.ROCK_1);
            rock_1_check();
            yield();
            add_rock(0x2d, 0x16, ROOM.ROCK_2);
            rock_2_check();
            yield();
            add_rock(0x19, 0x10, ROOM.ROCK_3);
            rock_3_check();

            add_enemy(ENEMY.TENTACLE_WHIP, 0x21, 0x0c);
            // add_enemy(ENEMY.TENTACLE_SPIKE, 0x1e, 0x0b);
            add_enemy(ENEMY.TENTACLE_SPIKE, 0x1b, 0x0e);
        }
    };

    map windwalker_sidescroller(0x50) {
        enum entrance {
            west = entrance(0x06, 0x0f, DIRECTION.NONE),
            south = entrance(0x10, 0x19, DIRECTION.NONE),
        }

        enum ROOM {
            SHIP_ID = memory_tmp(),

            START_HEIGHT = 0x1fff,

            LANE_1 = 0x05,
            LANE_2 = 0x0c,
            LANE_3 = 0x15,
        }

        enum BOSS {
            DEBUG = True,
            
            ID = memory_tmp(),
            PHASE = memory_tmp(),

            HP = 0x05,

            TURN_TIME = 0x30,

            P1_THRESHOLD = 0x04,

            RING_TIMER = memory_tmp(),
            RING_X = memory_tmp(),
            RING_Y = memory_tmp(),
            RING_PROJECTILE = THROWABLE.CITRON,
            RING_SLEEP = 0x05,
            RING_STEP = 0x40,
            RING_RADIUS = 0x100,

            RING_DOUBLE = False,
        }

        @install()
        @async()
        fun ring() {
            BOSS.RING_X = 0x0100;
            BOSS.RING_Y = 0x0000;

            while(BOSS.RING_TIMER > 0x00) {
                face(BOSS.ID, DIRECTION.EAST);

                while(BOSS.RING_Y < BOSS.RING_RADIUS) {
                    code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] + BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    if(BOSS.RING_DOUBLE) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] - BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    }
                    sleep(BOSS.RING_SLEEP);
                    BOSS.RING_Y = BOSS.RING_Y + BOSS.RING_STEP;
                }
                while(BOSS.RING_X > 0x00) {
                    code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] + BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    if(BOSS.RING_DOUBLE) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] - BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    }
                    sleep(BOSS.RING_SLEEP);
                    BOSS.RING_X = BOSS.RING_X - BOSS.RING_STEP;
                }

                face(BOSS.ID, DIRECTION.SOUTH);
                while(BOSS.RING_X < BOSS.RING_RADIUS) {
                    code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] + BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    if(BOSS.RING_DOUBLE) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] - BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    }
                    sleep(BOSS.RING_SLEEP);
                    BOSS.RING_X = BOSS.RING_X + BOSS.RING_STEP;
                }
                while(BOSS.RING_Y > 0x00) {
                    code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] + BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    if(BOSS.RING_DOUBLE) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] - BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    }
                    sleep(BOSS.RING_SLEEP);
                    BOSS.RING_Y = BOSS.RING_Y - BOSS.RING_STEP;
                }

                face(BOSS.ID, DIRECTION.WEST);
                while(BOSS.RING_Y < BOSS.RING_RADIUS) {
                    code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] - BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    if(BOSS.RING_DOUBLE) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] + BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    }
                    sleep(BOSS.RING_SLEEP);
                    BOSS.RING_Y = BOSS.RING_Y + BOSS.RING_STEP;
                }
                while(BOSS.RING_X > 0x00) {
                    code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] - BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    if(BOSS.RING_DOUBLE) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] + BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    }
                    sleep(BOSS.RING_SLEEP);
                    BOSS.RING_X = BOSS.RING_X - BOSS.RING_STEP;
                }

                face(BOSS.ID, DIRECTION.NORTH);
                while(BOSS.RING_X < BOSS.RING_RADIUS) {
                    code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] - BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    if(BOSS.RING_DOUBLE) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] + BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    }
                    sleep(BOSS.RING_SLEEP);
                    BOSS.RING_X = BOSS.RING_X + BOSS.RING_STEP;
                }
                while(BOSS.RING_Y > 0x00) {
                    code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] + BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] - BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    if(BOSS.RING_DOUBLE) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(BOSS.ID), calculate(BOSS.ID[ATTRIBUTE.X]), calculate(BOSS.ID[ATTRIBUTE.Y]), param(0x0a), calculate(BOSS.ID[ATTRIBUTE.X] - BOSS.RING_X), calculate(BOSS.ID[ATTRIBUTE.Y] + BOSS.RING_Y), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    }
                    sleep(BOSS.RING_SLEEP);
                    BOSS.RING_Y = BOSS.RING_Y - BOSS.RING_STEP;
                }
            }
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while!(dead(<CHARACTER.BOY>)) {
                ROOM.SHIP_ID[ATTRIBUTE.X] = <CHARACTER.BOY>[ATTRIBUTE.X];
                ROOM.SHIP_ID[ATTRIBUTE.Y] = <CHARACTER.BOY>[ATTRIBUTE.Y] + 0x05;
                yield();

                // <CHARACTER.DOG>[ATTRIBUTE.X] = <CHARACTER.BOY>[ATTRIBUTE.X] - 0x05;
                // <CHARACTER.DOG>[ATTRIBUTE.Y] = <CHARACTER.BOY>[ATTRIBUTE.Y];
                // yield();
            }
        }

        fun enemy(enemy, y) {
            add_enemy(enemy, 0x20, y);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = 0x01;
            face(CHARACTER.LAST_ENTITY, DIRECTION.WEST);
            
            // attach_to_script(CHARACTER.LAST_ENTITY);
            // walk(WALK_TYPE.ABSOLUTE, CHARACTER.LAST_ENTITY, 0x00, y, True);
            // destroy(CHARACTER.SCRIPT_OWNER);
        }

        fun shooting_mosquito(enemy, y) {
            add_enemy(enemy, 0x20, y);
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = 0x01;
            face(CHARACTER.LAST_ENTITY, DIRECTION.WEST);
            
            attach_to_script(CHARACTER.LAST_ENTITY);
            walk(WALK_TYPE.ABSOLUTE, CHARACTER.LAST_ENTITY, 0x00, y, False);

            while!(dead(<CHARACTER.SCRIPT_OWNER>)) {
                if(<CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X] <= 0x00) {
                    destroy(CHARACTER.SCRIPT_OWNER);
                    end();
                }
                code(0xb5, param(THROWABLE.CITRON), entity_t(CHARACTER.SCRIPT_OWNER), calculate(<CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X]), calculate(<CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y]), param(0xff), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x80);
            }
        }

        @install()
        @async()
        fun shooting_mosquito_1() {
            shooting_mosquito(ENEMY.MOSQUITO, ROOM.LANE_1);
        }
        @install()
        @async()
        fun shooting_mosquito_2() {
            shooting_mosquito(ENEMY.MOSQUITO, ROOM.LANE_2);
        }
        @install()
        @async()
        fun shooting_mosquito_3() {
            shooting_mosquito(ENEMY.MOSQUITO, ROOM.LANE_3);
        }

        @install()
        @async()
        fun shooting_fan_2() {
            attach_to_script(BOSS.ID);

            while!(dead(<CHARACTER.SCRIPT_OWNER>)) {
                if(BOSS.RING_TIMER == 0x00) {
                    code(0xb5, param(THROWABLE.CITRON), entity_t(CHARACTER.SCRIPT_OWNER), calculate(<CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.X]), calculate(<CHARACTER.SCRIPT_OWNER>[ATTRIBUTE.Y]), param(0xff), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x10), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                }
                sleep(0x40);
                BOSS.ID[ATTRIBUTE.JUMP_HEIGHT] = 0x05;
                sleep(0x40);
                BOSS.ID[ATTRIBUTE.JUMP_HEIGHT] = 0x05;
            }
        }

        @install()
        fun fan_damage() {
            if(BOSS.PHASE == 0x00) {
                if(BOSS.ID[ATTRIBUTE.HP] <= BOSS.P1_THRESHOLD) {
                    BOSS.PHASE = 0x01;
                    BOSS.RING_TIMER = 0x200;
                }
            }
        }

        @install()
        @async()
        fun shooting_fan() {
            add_enemy(ENEMY.FAN_BOT, 0x20, ROOM.LANE_2);
            control_enemy(CHARACTER.LAST_ENTITY, True);
            BOSS.ID = <CHARACTER.LAST_ENTITY>;
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.HP] = BOSS.HP;
            face(CHARACTER.LAST_ENTITY, DIRECTION.WEST);
            // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.LOCK_IN_PLACE);
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(fan_damage));
            
            attach_to_script(CHARACTER.LAST_ENTITY);

            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);
            walk(WALK_TYPE.ABSOLUTE, CHARACTER.SCRIPT_OWNER, 0x17, ROOM.LANE_2, True);
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.VINCIBLE);
            shooting_fan_2();

            while!(dead(<CHARACTER.SCRIPT_OWNER>)) {
                if(BOSS.RING_TIMER == 0x00) {
                    walk(WALK_TYPE.ABSOLUTE, CHARACTER.SCRIPT_OWNER, 0x17, ROOM.LANE_1, True);
                }
                if(BOSS.RING_TIMER == 0x00) {
                    sleep(BOSS.TURN_TIME);
                }

                if(BOSS.RING_TIMER == 0x00) {
                    walk(WALK_TYPE.ABSOLUTE, CHARACTER.SCRIPT_OWNER, 0x17, ROOM.LANE_3, True);
                }
                if(BOSS.RING_TIMER == 0x00) {
                    sleep(BOSS.TURN_TIME);
                } else {
                    attribute_bit(BOSS.ID, ATTRIBUTE_BITS.INVINCIBLE);
                    BOSS.ID[ATTRIBUTE.JUMP_HEIGHT] = 0x30;
                    walk(WALK_TYPE.ABSOLUTE, CHARACTER.SCRIPT_OWNER, 0x10, 0x10, True);

                    attribute_bit(BOSS.ID, ATTRIBUTE_BITS.VINCIBLE);
                    attribute_bit(BOSS.ID, ATTRIBUTE_BITS.LOCK_IN_PLACE);
                    ring();
                    while(BOSS.RING_TIMER > 0x00) {
                        BOSS.RING_TIMER = BOSS.RING_TIMER - 0x01;

                        yield();
                    }
                    attribute_bit(BOSS.ID, ATTRIBUTE_BITS.UNLOCK);
                }
            }
        }

        fun trigger_enter() {
            available(CHARACTER.BOY);
            teleport(CHARACTER.DOG, 0xff, 0xff);
            face(CHARACTER.BOY, DIRECTION.EAST);

            <CHARACTER.BOY>[ATTRIBUTE.FALLING_HEIGHT] = ROOM.START_HEIGHT;
            <0x0A47> = 0x0001;
            <0x4F2F> = 0x0020;

            fade_in();
            SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.AIRSHIP;

            add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0x10, 0x10);
            ROOM.SHIP_ID = <CHARACTER.LAST_ENTITY>;
            <CHARACTER.LAST_ENTITY>[ATTRIBUTE.FALLING_HEIGHT] = ROOM.START_HEIGHT;

            stack_t01_offset();

            subtext(string("go![END]"));

            sleep(0xff);

            if(False) {
                enemy(ENEMY.MOSQUITO, 0x10);

                sleep(0xff);

                enemy(ENEMY.MOSQUITO, 0x05);
                enemy(ENEMY.MOSQUITO, 0x15);

                sleep(0xff);

                enemy(ENEMY.MOSQUITO, 0x05);
                enemy(ENEMY.MOSQUITO, 0x15);

                sleep(0xff);

                enemy(ENEMY.BUZZARD_1, 0x10);

                sleep(0xff);
            }

            if(False) {
                shooting_mosquito_2();

                sleep(0xff);

                shooting_mosquito_1();
                shooting_mosquito_3();

                sleep(0xff);

                shooting_mosquito_1();
                shooting_mosquito_2();
                shooting_mosquito_3();

                sleep(0xff);
            }

            if(True) {
                shooting_fan();
                sleep(0x60);

                if(BOSS.DEBUG) {
                    subtext(string("boss start[END]"));
                }
                while!(dead(BOSS.ID)) {
                    yield();
                }
                if(BOSS.DEBUG) {
                    subtext(string("boss end[END]"));
                }


                sleep(0xff);
            }

            if(True) {
                <CHARACTER.BOY>[ATTRIBUTE.JUMP_HEIGHT] = 0x20;
                ROOM.SHIP_ID[ATTRIBUTE.JUMP_HEIGHT] = 0xa0;
                sleep(0x30);

                <CHARACTER.BOY>[ATTRIBUTE.JUMP_HEIGHT] = 0xff;
                ROOM.SHIP_ID[ATTRIBUTE.JUMP_HEIGHT] = 0xff;
                sleep(0x50);

                map_transition(well, crash, DIRECTION.NONE);
            }
        }
    };

    map projectile_test(0x1d) {
        enum entrance {
            north_cinematic = entrance(0x20, 0x07, DIRECTION.NONE),
            south = entrance(0x22, 0x69, DIRECTION.NORTH) // 0x22, 0x6a
        }

        enum BOSS {
            RING_PROJECTILE = THROWABLE.CITRON,
            RING_SLEEP = 0x05,
            RING_STEP = 0x40,
            RING_RADIUS = 0x100,

            RING_DOUBLE = False,
        }

        @install()
        fun puke() {
            sleep(0x20);
            
            <0x2837> = 0x20;
            code(0xb5, param(THROWABLE.ONION), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), calculate(<0x2837> + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            code(0xb5, param(THROWABLE.ONION), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X] + randrange(0x05)), calculate(<0x2835>[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(<0x2837> + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            sleep(0x02);
            code(0xb5, param(THROWABLE.ONION), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X] + randrange(0x05)), calculate(<0x2835>[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(<0x2837> + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            code(0xb5, param(THROWABLE.ONION), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X] + randrange(0x05)), calculate(<0x2835>[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(<0x2837> + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            code(0xb5, param(THROWABLE.ONION), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X] + randrange(0x05)), calculate(<0x2835>[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(<0x2837> + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            sleep(0x02);
            code(0xb5, param(THROWABLE.ONION), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X] + randrange(0x05)), calculate(<0x2835>[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(<0x2837> + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            code(0xb5, param(THROWABLE.ONION), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X] + randrange(0x05)), calculate(<0x2835>[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(<0x2837> + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            sleep(0x05);
            code(0xb5, param(THROWABLE.ONION), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X] + randrange(0x05)), calculate(<0x2835>[ATTRIBUTE.Y] + randrange(0x05)), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X] + randrange(0x40)), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y] + randrange(0x20)), calculate(<0x2837> + randrange(0x10)), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
        }

        fun trigger_enter() {
            fade_in();

            // attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.INVINCIBLE);

            if(False) {
                add_enemy_with_flags(ENEMY.VIGOR, 0x13, 0x49, FLAG_ENEMY.INACTIVE);
                <0x2835> = <CHARACTER.LAST_ENTITY>;
                call(ADDRESS.RNG2849);
                unset(<0x2834, 0x02>);
                call(0x99e8d6);

                // eval("b5 8d 15 00 8d 01 00 88 1f 02 88 21 02 ba 92 04 92 06 e4");
                // code(0xb5, entity_t(0x2849), entity_t(0x2835), entity_t(0x2477), entity_t(0x2479), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                sleep(0x60);

                <0x2849> = 0x000c;

                while(True) {
                    code(0xb5, entity_t(0x2849), entity_t(0x2835), entity_t(0x2477), entity_t(0x2479), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    sleep(0x10);
                }
            }
            if(False) {
                add_enemy_with_flags(ENEMY.MOSQUITO, 0x00, 0x00, FLAG_ENEMY.INACTIVE);
                <0x2837> = <CHARACTER.LAST_ENTITY>;
                add_enemy_with_flags(ENEMY.MOSQUITO, 0x13, 0x49, 0x00);
                <0x2835> = <CHARACTER.LAST_ENTITY>;
                call(ADDRESS.RNG2849);
                unset(<0x2834, 0x02>);
                call(0x99e8d6);

                // eval("b5 8d 15 00 8d 01 00 88 1f 02 88 21 02 ba 92 04 92 06 e4");
                // code(0xb5, entity_t(0x2849), entity_t(0x2835), entity_t(0x2477), entity_t(0x2479), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                sleep(0x60);

                <0x2849> = 0x0000;
                // <0x2835> = <CHARACTER.DOG>;

                while(True) {
                    // face(0x2835, DIRECTION.NORTH);
                    code(0xb5, param(0x04), entity_t(0x2837), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x30), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                    sleep(0x20);
                }
            }
            if(False) {
                add_enemy_with_flags(ENEMY.VIGOR, 0x13, 0x49, FLAG_ENEMY.INACTIVE);
                <0x2835> = <CHARACTER.LAST_ENTITY>;
                call(ADDRESS.RNG2849);
                unset(<0x2834, 0x02>);
                call(0x99e8d6);

                // eval("b5 8d 15 00 8d 01 00 88 1f 02 88 21 02 ba 92 04 92 06 e4");
                // code(0xb5, entity_t(0x2849), entity_t(0x2835), entity_t(0x2477), entity_t(0x2479), param(0x0a), calculate(<CHARACTER.BOY>[ATTRIBUTE.X]), calculate(<CHARACTER.BOY>[ATTRIBUTE.Y]), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                sleep(0x60);

                <0x2849> = THROWABLE.ONION;

                <0x2837> = 0x0100;
                <0x2839> = 0x0000;

                while(True) {
                    face(0x2835, DIRECTION.EAST);

                    while(<0x2839> < BOSS.RING_RADIUS) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] + <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] + <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        if(BOSS.RING_DOUBLE) {
                            code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] - <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] - <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        }
                        sleep(BOSS.RING_SLEEP);
                        <0x2839> = <0x2839> + BOSS.RING_STEP;
                    }
                    while(<0x2837> > 0x00) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] + <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] + <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        if(BOSS.RING_DOUBLE) {
                            code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] - <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] - <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        }
                        sleep(BOSS.RING_SLEEP);
                        <0x2837> = <0x2837> - BOSS.RING_STEP;
                    }

                    face(0x2835, DIRECTION.SOUTH);
                    while(<0x2837> < BOSS.RING_RADIUS) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] - <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] + <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        if(BOSS.RING_DOUBLE) {
                            code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] + <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] - <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        }
                        sleep(BOSS.RING_SLEEP);
                        <0x2837> = <0x2837> + BOSS.RING_STEP;
                    }
                    while(<0x2839> > 0x00) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] - <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] + <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        if(BOSS.RING_DOUBLE) {
                            code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] + <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] - <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        }
                        sleep(BOSS.RING_SLEEP);
                        <0x2839> = <0x2839> - BOSS.RING_STEP;
                    }

                    face(0x2835, DIRECTION.WEST);
                    while(<0x2839> < BOSS.RING_RADIUS) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] - <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] - <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        if(BOSS.RING_DOUBLE) {
                            code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] + <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] + <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        }
                        sleep(BOSS.RING_SLEEP);
                        <0x2839> = <0x2839> + BOSS.RING_STEP;
                    }
                    while(<0x2837> > 0x00) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] - <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] - <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        if(BOSS.RING_DOUBLE) {
                            code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] + <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] + <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        }
                        sleep(BOSS.RING_SLEEP);
                        <0x2837> = <0x2837> - BOSS.RING_STEP;
                    }

                    face(0x2835, DIRECTION.NORTH);
                    while(<0x2837> < BOSS.RING_RADIUS) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] + <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] - <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        if(BOSS.RING_DOUBLE) {
                            code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] - <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] + <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        }
                        sleep(BOSS.RING_SLEEP);
                        <0x2837> = <0x2837> + BOSS.RING_STEP;
                    }
                    while(<0x2839> > 0x00) {
                        code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] + <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] - <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        if(BOSS.RING_DOUBLE) {
                            code(0xb5, param(BOSS.RING_PROJECTILE), entity_t(0x2835), calculate(<0x2835>[ATTRIBUTE.X]), calculate(<0x2835>[ATTRIBUTE.Y]), param(0x0a), calculate(<0x2835>[ATTRIBUTE.X] - <0x2837>), calculate(<0x2835>[ATTRIBUTE.Y] + <0x2839>), param(0x14), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                        }
                        sleep(BOSS.RING_SLEEP);
                        <0x2839> = <0x2839> - BOSS.RING_STEP;
                    }
                }
            }
            if(True) {
                add_enemy_with_flags(ENEMY.VIGOR, 0x13, 0x49, FLAG_ENEMY.INACTIVE);
                <0x2835> = <CHARACTER.LAST_ENTITY>;

                attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(puke));
            }
        }
    };
};
