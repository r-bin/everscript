#memory(
    string_key(0x0546)..string_key(0x232b), // last half of string keys
    function_key(0x0000)..function_key(0x1716), // 0x1719 seems to be used by the engine

    0x300000..0x3fffff, // extension

    <0x2265>..<0x22D9>, // vanilla sniff spots
    <0x236D>..<0x2378>, // act4 codes
    // <0x2379>..<0x237C>, // landing spots
    <0x253d>..<0x2558>, // sliver extension "save_file_growth" (excluded string params)

    <0x2834>..<0x2884>
    // <0x2834>..<0x28fb> // 199 room specific bytes
)
#include("in/core.evs")

#patch(
    // "skip_intro",
    "assassin_silversheath",
    "assassin_bazooka_ammo",
    "assassin_bazooka_charge",
    "save_file_growth",
    "no_alchemy_xp",

    // asm
    "temp_jaguar_ring(!ROM_EXTENSION=$FE6000)",
    "debug_menu__generic(!ROM_EXTENSION=$FE0000)",
    "_hook_input(!ROM_EXTENSION=$FE5000)",
        "hotkeys(!ROM_EXTENSION=$FD0000, !ROM_HOOK=$FE5000, !WITH_HOTKEY_B=0)",
        // "room_timer(!ROM_EXTENSION=$F00000, !ROM_HOOK=$FE5000)",
    // "_hook_trigger",
    "menu_close",
    "five_status_effects_fix(!ROM_EXTENSION=$FE7000)",
    "scale_enemies(!ROM_EXTENSION=$FE8000, !WITH_DEBUG_PALETTE=0)",
    "scale_boy(!BOY_HP_INCREMENT=3, !DOG_HP_INCREMENT=3)",
)

group non_maps() {
    group strings() {
        @install(0x4713f, False)
        fun string_revealer_entity_name() {
            'SECRET[END]'; // "Bridge"
        }

        @install(0x92c98b) // originally script id 0x51
        fun currency_name() {
            text("Souls");
        }
    };

    group enemy_properties() {
        @install(CHARACTER_DATA.POINTER + (CHARACTER_INDEX.BOY * CHARACTER_DATA.SIZE) + CHARACTER_DATA.ATTACK_PROC, False)
        fun boy_proc() {
            code(ATTACK_PROC.DEFAULT, "// boy proc"); // disables weapon xp
        }
        @install(CHARACTER_DATA.POINTER + (CHARACTER_INDEX.DOG * CHARACTER_DATA.SIZE) + CHARACTER_DATA.ATTACK_PROC, False)
        fun dog_proc() {
            code(ATTACK_PROC.DEFAULT, "// dog proc"); // disables weapon xp
        }

        @install(CHARACTER_DATA.POINTER + (CHARACTER_INDEX.FLOWER_PURPLE * CHARACTER_DATA.SIZE) + CHARACTER_DATA.ATTACK_PROC, False)
        fun flower_purple_proc() {
            code(ATTACK_PROC.VORE, "// flower purple proc");
        }

        // @install(CHARACTER_DATA.POINTER + (CHARACTER_INDEX.TUMBLING_WEED * CHARACTER_DATA.SIZE) + CHARACTER_DATA.ATTACK_PROC, False)
        // fun tumbling_weed_proc() {
        //     code(ATTACK_PROC.VORE, "// flower purple proc value");
        // }
        
        // @install(CHARACTER_DATA.POINTER + (CHARACTER_INDEX.THRAXX * CHARACTER_DATA.SIZE) + CHARACTER_DATA.HIT_RATE, False)
        // fun thraxx_hit() {
        //     code(0d110, "// thraxx hit");
        // }
        // @install(CHARACTER_DATA.POINTER + (CHARACTER_INDEX.THRAXX * CHARACTER_DATA.SIZE) + CHARACTER_DATA.ATTACK, False)
        // fun thraxx_hit() {
        //     code(0d10, "// thraxx damage");
        // }
    };

    // group alchemy_ingredients() {
    //     @install(ARMOR_DATA.POINTER + ALCHEMY_COST_DATA.SIZE * (ALCHEMY_INDEX.BARRIER / 0d02))
    //     fun barrier() {
    //         code(INGREDIENT.DRY_ICE, INGREDIENT.DRY_ICE, 0d01, 0d01, "// barrier ingredients");
    //     }
    // };

    group alchemy_target() {
        @install(ALCHEMY_TARGET.POINTER + ALCHEMY_TARGET.SIZE * (ALCHEMY_INDEX.HEAL / 0d02))
        fun barrier() {
            code(ALCHEMY_TARGET.BOY_DOG_ALL_ENEMY, "// heal (boy, dog, enemy or all)");
        }
    };

    group armor() {
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_1_1 - 0d01))
        fun armor_chest_1_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_1_2 - 0d01))
        fun armor_chest_1_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_1_3 - 0d01))
        fun armor_chest_1_3() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_2_1 - 0d01))
        fun armor_chest_2_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_2_2 - 0d01))
        fun armor_chest_2_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_2_3 - 0d01))
        fun armor_chest_2_3() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_3_1 - 0d01))
        fun armor_chest_3_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_3_2 - 0d01))
        fun armor_chest_3_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_3_3 - 0d01))
        fun armor_chest_3_3() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_4_1 - 0d01))
        fun armor_chest_4_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_4_2 - 0d01))
        fun armor_chest_4_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.CHEST_4_3 - 0d01))
        fun armor_chest_4_3() {
            code(0d0000, 0d0000, "// armor");
        }

        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_1_1 - 0d01))
        fun armor_helm_1_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_1_2 - 0d01))
        fun armor_helm_1_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_1_3 - 0d01))
        fun armor_helm_1_3() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_2_1 - 0d01))
        fun armor_helm_2_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_2_2 - 0d01))
        fun armor_helm_2_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_2_3 - 0d01))
        fun armor_helm_2_3() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_3_1 - 0d01))
        fun armor_helm_3_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_3_2 - 0d01))
        fun armor_helm_3_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_3_3 - 0d01))
        fun armor_helm_3_3() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_4_1 - 0d01))
        fun armor_helm_4_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_4_2 - 0d01))
        fun armor_helm_4_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.HELM_4_3 - 0d01))
        fun armor_helm_4_3() {
            code(0d0000, 0d0000, "// armor");
        }

        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_1_1 - 0d01))
        fun armor_glove_1_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_1_2 - 0d01))
        fun armor_glove_1_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_1_3 - 0d01))
        fun armor_glove_1_3() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_2_1 - 0d01))
        fun armor_glove_2_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_2_2 - 0d01))
        fun armor_glove_2_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_2_3 - 0d01))
        fun armor_glove_2_3() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_3_1 - 0d01))
        fun armor_glove_3_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_3_2 - 0d01))
        fun armor_glove_3_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_3_3 - 0d01))
        fun armor_glove_3_3() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_4_1 - 0d01))
        fun armor_glove_4_1() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_4_2 - 0d01))
        fun armor_glove_4_2() {
            code(0d0000, 0d0000, "// armor");
        }
        @install(ARMOR_DATA.POINTER + ARMOR_DATA.SIZE * (ARMOR_INDEX.GLOVE_4_3 - 0d01))
        fun armor_glove_4_3() {
            code(0d0000, 0d0000, "// armor");
        }
    };

    group weapon() {
        @install(WEAPON_DATA.POINTER + WEAPON_DATA.SIZE * (WEAPON_INDEX.SWORD_1 / 0d02 - 0d01), False)
        fun bone_crusher_attack() {
            code(0d0010 + 0d2, "// bone crusher attack"); // compensates for fixed silver sheath
        }
    };

    group helper() {
        fun add_pillar(x, y) {
            add_enemy(LIZARD, x, y, INACTIVE_IMORTAL);
            animate(LAST_ENTITY, LOOP, ANIMATION_PLACEHOLDER.PILLAR_VIGOR);
        }

        fun press_start() {
            subtext("Press the [START] Button");
        }

        fun notification_door_opened() {
            subtext("Somewhere a door has opened.");
        }

        @install()
        fun enemy_triggered_invincible() {
            heal(SCRIPT_OWNER, 0x00, False);
        }

        @install()
        fun enemy_triggered_invincible_with_knockback() {
            heal(SCRIPT_OWNER, 0x00, False);
            yield();
            damage(SCRIPT_OWNER, 0x00, True);
        }

        fun guard_boy_damage() {
            if(<ACTIVE> == <DOG>) {
                end();
            }
            if(<SCRIPT_OWNER>[DAMAGE_TYPE] == DAMAGE_TYPE.DOG_ATTACK) {
                end();
            }
        }
    };

    group souls_helper() {
        enum BUTTON_MAP {
            NORMAL = 0x00,

            BOMBS = 0x01,
            AIRSHIP = 0x02,
            PUPPER = 0x03,

            ISAAC = 0x10,

            MARIO = 0x20,
            MARIO_FIREFLOWER = 0x21,
        }
        enum DEBUG_MENU_ENTRY {
            BOMBS = 0x01,
            ISAAC = 0x02,
            MARIO = 0x03,
            PUPPER = 0x04,
        }

        enum CUSTOM_ITEM {
            NO_ITEM = 0x0000,

            // weapons
            SWORD_ORB = 0xf000, // available: 2
            SPEAR_ORB = 0xf001, // available: 3
            AXE_ORB = 0xf002, // available: 3

            // quest items
            SMITH_KEY = 0xf100, // unlocks orb upgrades
            BIG_MUSHROOM = 0xf101, // unlocks jumping in the sewers
            ISAAC_LETTER = 0xf102, // unlocks isaac wanted poster
            ISAAC_WANTED_POSTER = 0xf103, // unlocks ?
            BUG_CATCHER = 0xf104, // unlocks bee collecting

            // active abilities
            ZELDA_POWER_GLOVE = 0xf200, // unlocks levitate stones
            ISAAC_TEARS = 0xf201,
            ISAAC_BOMB = 0xf202,
            MARIO_YUMP = 0xf203,
            ROCKET_JUMP = 0xf204,

            // fake items
            TUNIC_GREEN = 0xf300,
            TUNIC_RED = 0xf301,
        }
        enum SOULS_MEMORY {
            INIT = memory(FLAG, SRAM),
            INTRO_WATCHED = memory(FLAG, SRAM),
            // debug
            DEBUG = True,
            DEBUG_BOMBABLE_WALLS = False,

            // features
            WITH_OPENING = False, // doesn't work?
            WITH_SAVESTATE_LOAD = True, // after splash screen
            WITH_SAVESTATE_SAVE = True, // bonfire menu
            // souls specific features
            WITH_INTRO = True,
            WITH_STARTING_CLASS = False,
            WITH_SHRINE_INTRO = True,
            WITH_SOULS_ON_DEATH = True,
            WITH_RETURN_TO_BONFIRE_ON_DEATH = True,
            WITH_TRASH_ENEMIES = True,
            WITH_FOG_WALL = True,
            WITH_FOGWALL_WALKBACK = False,
            WITH_SIDE_QUESTS = True,
            WITH_CHEAP_SWORD2 = True,
            WITH_WEATHER = False, // TODO: has to be persistent to be playable
            WITH_COLOR_FILTER = True, // produces lag, requires an ASM to not change the filter during menus
            // cheats
            WITH_DEBUG_ENTITIES = True,
            WITH_DEBUG_ENTITY_ALCHEMY_SELECTION = False,
            WITH_CHEATS = True, // fixes no clip after screen transitions
            WITH_CHEATS_ALL_BONFIRES = False,
            WITH_CHEATS_MARIO_YUMP = True,
            // areas
            WITH_ENDBOSS = True,
            WITH_BOAT_RIDE = False,

            // boy dust
            DUST_ENTITY = memory(WORD, TEMP_RESERVED),
            DUST_DROP_X = memory(WORD, SRAM),
            DUST_DROP_Y = memory(WORD, SRAM),
            DUST_DROP_MAP = memory(BYTE, SRAM),
            DUST_DROP_VARIANT = memory(BYTE, SRAM),
            DUST_UNREACHABLE = memory(FLAG, SRAM),

            // wings
            WINGS_BLOCKED = memory(FLAG, SRAM),
            
            // custom items
            ESTUS_CHARGES = memory(BYTE, SRAM),
            ESTUS_SHARDS = memory(BYTE, SRAM),
            ESTUS_CHARGES_INIT = 0d1,

            ORB_USED = memory(FLAG, SRAM),
            ORB_SWORD = memory(BYTE, SRAM),
            ORB_AXE = memory(BYTE, SRAM),
            ORB_SPEAR = memory(BYTE, SRAM),

            BEES = memory(BYTE, SRAM),
            ISAAC_BOMBS = memory(BYTE, SRAM),
            
            SMITH_KEY = memory(FLAG, SRAM),
            BIG_MUSHROOM = memory(FLAG, SRAM),
            ISAAC_LETTER = memory(FLAG, SRAM),
            ISAAC_WANTED_POSTER = memory(FLAG, SRAM),
            BUG_CATCHER = memory(FLAG, SRAM),

            // button map
            BUTTON_MAP = memory(BYTE, SRAM), // TODO: should be memory(WORD, TEMP)
            MENU_CHOICE = memory(BYTE, SRAM),
            
            DEBUG_MENU_BUTTON_1 = memory(BYTE, SRAM),
            DEBUG_MENU_BUTTON_2 = memory(BYTE, SRAM),
            DEBUG_MENU_BUTTON_3 = memory(BYTE, SRAM),
            DEBUG_MENU_BUTTON_4 = memory(BYTE, SRAM),

            BOMB_ENABLED = memory(FLAG, SRAM),
            MARIO_YUMP_ENABLED = memory(FLAG, SRAM),
            PUPPER_ENABLED = memory(FLAG, SRAM),
            ISAAC_TEARS_ENABLED = memory(FLAG, SRAM),
            ROCKET_JUMP_ENABLED = memory(FLAG, SRAM),

            ///////////////////////////////////////////////////////
            // bonfire
            ///////////////////////////////////////////////////////

            BONFIRE_FIRST_TRIGGER = memory(FLAG, SRAM),
            BONFIRE_X = memory(WORD, SRAM),
            BONFIRE_Y = memory(WORD, SRAM),
            BONFIRE_Z = memory(BYTE, SRAM),
            BONFIRE_MAP = memory(BYTE, SRAM),
            BONFIRE_VARIANT = memory(BYTE, SRAM),
            BONFIRE_TELEPORT_REQUIRED = memory(FLAG, SRAM),
            BONFIRE_TELEPORT_BIND = memory(FLAG, SRAM),

            // center
            BONFIRE_INBETWIXX = memory(FLAG, SRAM),

            // east
            BONFIRE_EAST_CROSSING = memory(FLAG, SRAM),
            BONFIRE_PIPES = memory(FLAG, SRAM),
            BONFIRE_TOWN_CENTER = memory(FLAG, SRAM),
            BONFIRE_TEMPLE_PIT = memory(FLAG, SRAM),

            // west
            BONFIRE_ISAAC_DUNGEON = memory(FLAG, SRAM),
            BONFIRE_VOLCANO_TOWER = memory(FLAG, SRAM),

            // south
            BONFIRE_JUNGLE_PIT = memory(FLAG, SRAM),

            BONFIRE_DESERT_BUG = memory(FLAG, SRAM),

            // altus
            BONFIRE_ALTUS_WELL = memory(FLAG, SRAM),
            BONFIRE_CASTLE_PIT = memory(FLAG, SRAM),

            // omnitopia
            
            ///////////////////////////////////////////////////////
            // bosses
            ///////////////////////////////////////////////////////

            PROGRESS_COUNTER = memory(BYTE, SRAM),
            BOSSES_DEFEATED_COUNTER = memory(BYTE, SRAM),
            COLLECTIBLE_COUNTER = memory(BYTE, SRAM),

            // west
            DEAD_OWL_BOY = memory(FLAG, SRAM), // t0+
            REWARD_OWL_BOY = CUSTOM_ITEM.TUNIC_RED,

            DEAD_MONSTRO = memory(FLAG, SRAM), // t0
            REWARD_MONSTRO = CUSTOM_ITEM.SWORD_ORB,
            DEAD_DARK_ONE = memory(FLAG, SRAM), // t2
            REWARD_DARK_ONE = CUSTOM_ITEM.ISAAC_BOMB,

            // altus
            DEAD_SIDESCROLLER = memory(FLAG, SRAM), // t0
            REWARD_SIDESCROLLER = CUSTOM_ITEM.SPEAR_ORB,

            DEAD_CHESS = memory(FLAG, SRAM), // t0
            REWARD_CHESS = CUSTOM_ITEM.AXE_ORB,

            DEAD_UNNAMED_STAIRWELL_BOSS = memory(FLAG, SRAM), // TODO
            REWARD_UNNAMED_STAIRWELL_BOSS = CUSTOM_ITEM.ROCKET_JUMP,

            // east
            DEAD_PIT_EGG = memory(FLAG, SRAM), // t0
            REWARD_PIT_EGG = ITEM.WINGS,

            DEAD_ARENA_RADAHN = memory(FLAG, SRAM), // t?
            REWARD_ARENA_RADAHN = CUSTOM_ITEM.SPEAR_ORB,
            DEAD_STOMPY_RADAHN = memory(FLAG, SRAM), // t?
            REWARD_STOMPY_RADAHN = ITEM.NECTAR, // TODO
            
            DEAD_ARENA_MOSQUITO = memory(FLAG, SRAM), // t0
            REWARD_ARENA_MOSQUITO = ITEM.PIXIE_DUST,

            DEAD_BOWSER = memory(FLAG, SRAM), // t?
            REWARD_BOWSER = CUSTOM_ITEM.MARIO_YUMP,

            DEAD_TAVERN_BOXERS = memory(FLAG, SRAM), // t0
            REWARD_TAVERN_BOXERS = ITEM.TICKET_FOR_EXHIBITION,
            DEAD_TOWN_PUPPETS = memory(FLAG, SRAM),
            REWARD_TOWN_PUPPETS = ITEM.NECTAR, // TODO

            DEAD_TEMPLE_MINITAUR = memory(FLAG, SRAM),
            REWARD_TEMPLE_MINITAUR = CUSTOM_ITEM.SPEAR_ORB,
            DEAD_TEMPLE_SQUAD = memory(FLAG, SRAM), // t2 (nerfed from t3+) - locked: spear2
            REWARD_TEMPLE_SQUAD = CUSTOM_ITEM.AXE_ORB,
            DEAD_WALL = memory(FLAG, SRAM), // t2
            REWARD_WALL = ITEM.NECTAR, // TODO
            DEAD_NARIS = memory(FLAG, SRAM), // TODO
            REWARD_NARIS = CUSTOM_ITEM.ZELDA_POWER_GLOVE,

            DEAD_HEART = memory(FLAG, SRAM), // t0
            REWARD_HEART = CUSTOM_ITEM.SWORD_ORB,

            DEAD_AQUAGOTH = memory(FLAG, SRAM), // t0
            REWARD_AQUAGOTH = ITEM.NO_ITEM,
            DEAD_SQUIDMAR = memory(FLAG, SRAM), // t2 (nerfed from t3+) - locked: axe2
            REWARD_SQUIDMAR = CUSTOM_ITEM.SPEAR_ORB,

            // north

            DEAD_GIDEON = memory(FLAG, SRAM), // t?
            REWARD_GIDEON = ITEM.NOTHING,

            // southern jungle

            DEAD_UNNAMED_SOUTHERN_JUNGLE_BOSS = memory(FLAG, SRAM), // TODO
            REWARD_UNNAMED_SOUTHERN_JUNGLE_BOSS = ITEM.NECTAR, // TODO

            DEAD_DOUBLE_THRAXX = memory(FLAG, SRAM),
            REWARD_DOUBLE_THRAXX = CUSTOM_ITEM.ZELDA_POWER_GLOVE,
            PROGRESS_DOUBLE_THRAXX = memory(FLAG, SRAM),

            DEAD_UNNAMED_DESERT_TEMPLE_BOSS = memory(FLAG, SRAM),
            REWARD_UNNAMED_DESERT_TEMPLE_BOSS = ITEM.NECTAR, // TODO

            ///////////////////////////////////////////////////////
            // quests
            ///////////////////////////////////////////////////////

            REWARD_ARENA_BOMB_1 = ITEM.LEVITATE,
            REWARD_ARENA_BOMB_2 = ITEM.NECTAR, // TODO
            REWARD_ARENA_BOMB_3 = ITEM.NECTAR, // TODO
            REWARD_ARENA_BOMB_4 = ITEM.NECTAR, // TODO

            REWARD_ARENA_DUEL = ITEM.ATLAS,

            REWARD_BEE_BOY_QUEST_1 = ITEM.FLASH,
            REWARD_BEE_BOY_QUEST_2 = ITEM.NECTAR, // TODO
            REWARD_BEE_BOY_QUEST_3 = ITEM.NECTAR, // TODO
            REWARD_BEE_BOY_QUEST_4 = ITEM.NECTAR, // TODO

            REWARD_SQUIDMAR_QUEST = ITEM.NECTAR, // TODO

            REWARD_MARIO_QUEST = ITEM.NECTAR, // TODO

            REWARD_ISAAC_QUEST = CUSTOM_ITEM.ISAAC_TEARS,
        }

        fun asign_debug_button_function(flag, feature) {
            if(flag) {
                arg[0x00]++;

                if(
                    (SOULS_MEMORY.DEBUG_MENU_BUTTON_1 != feature)
                    && (SOULS_MEMORY.DEBUG_MENU_BUTTON_2 != feature)
                    && (SOULS_MEMORY.DEBUG_MENU_BUTTON_3 != feature)
                    && (SOULS_MEMORY.DEBUG_MENU_BUTTON_4 != feature)
                ) {
                    if(SOULS_MEMORY.DEBUG_MENU_BUTTON_1 == 0x0000) {
                        SOULS_MEMORY.DEBUG_MENU_BUTTON_1 = feature;
                    } else if(SOULS_MEMORY.DEBUG_MENU_BUTTON_2 == 0x0000) {
                        SOULS_MEMORY.DEBUG_MENU_BUTTON_2 = feature;
                    } else if(SOULS_MEMORY.DEBUG_MENU_BUTTON_3 == 0x0000) {
                        SOULS_MEMORY.DEBUG_MENU_BUTTON_3 = feature;
                    } else if(SOULS_MEMORY.DEBUG_MENU_BUTTON_4 == 0x0000) {
                        SOULS_MEMORY.DEBUG_MENU_BUTTON_4 = feature;
                    }
                }
            }
        }

        @install()
        fun update_debug_menu() {
            if(False) {
                SOULS_MEMORY.DEBUG_MENU_BUTTON_1 = 0x0000;
                SOULS_MEMORY.DEBUG_MENU_BUTTON_2 = 0x0000;
                SOULS_MEMORY.DEBUG_MENU_BUTTON_3 = 0x0000;
                SOULS_MEMORY.DEBUG_MENU_BUTTON_4 = 0x0000;
            }

            asign_debug_button_function(SOULS_MEMORY.BOMB_ENABLED, DEBUG_MENU_ENTRY.BOMBS);
            asign_debug_button_function(SOULS_MEMORY.ISAAC_TEARS_ENABLED, DEBUG_MENU_ENTRY.ISAAC);
            asign_debug_button_function(SOULS_MEMORY.MARIO_YUMP_ENABLED, DEBUG_MENU_ENTRY.MARIO);
            asign_debug_button_function(SOULS_MEMORY.PUPPER_ENABLED, DEBUG_MENU_ENTRY.PUPPER);

            MEMORY.RING_MENU_DEBUG = arg[0x00];
        }
        @install()
        fun debug_menu_select(index) {
            nop();
        }

        @install()
        fun orb_helper_dialog() {
            if!(SOULS_MEMORY.ORB_USED) {
                dialog("I should bring the orb to the black smith.[B]", True);
            }
        }
        fun custom_reward(item:CUSTOM_ITEM) {
            if(item < 0xf000) {
                reward(item);
            } else if(item == CUSTOM_ITEM.SWORD_ORB) { // weapons
                subtext("Sword Orb");
                    
                fanfare_item();

                SOULS_MEMORY.ORB_SWORD++;

                orb_helper_dialog();
            } else if(item == CUSTOM_ITEM.SPEAR_ORB) {
                subtext("Spear Orb");
                    
                fanfare_item();

                SOULS_MEMORY.ORB_SPEAR++;

                orb_helper_dialog();
            } else if(item == CUSTOM_ITEM.AXE_ORB) {
                subtext("Axe Orb");
                    
                fanfare_item();

                SOULS_MEMORY.ORB_AXE++;

                orb_helper_dialog();
            } else if(item == CUSTOM_ITEM.SMITH_KEY) { // quest items
                subtext("Gained Smith Key");
                    
                fanfare_item(True);

                SOULS_MEMORY.SMITH_KEY = True;
            } else if(item == CUSTOM_ITEM.BIG_MUSHROOM) {
                subtext("Gained Big Mushroom");
                    
                fanfare_item(True);

                SOULS_MEMORY.BIG_MUSHROOM = True;
            } else if(item == CUSTOM_ITEM.ISAAC_LETTER) {
                subtext("Gained Letter to Maggy");
                    
                fanfare_item(True);

                SOULS_MEMORY.ISAAC_LETTER = True;
            } else if(item == CUSTOM_ITEM.ISAAC_WANTED_POSTER) {
                subtext("Gained Article `Wanted: Maggy´");
                    
                fanfare_item(True);

                SOULS_MEMORY.ISAAC_WANTED_POSTER = True;
            } else if(item == CUSTOM_ITEM.BUG_CATCHER) {
                subtext("Gained Bug Catcher");
                    
                fanfare_item(True);

                SOULS_MEMORY.BUG_CATCHER = True;
            } else if(item == CUSTOM_ITEM.ISAAC_BOMB) { // active abilties
                subtext("Unlocked Bombs");
                    
                fanfare_item(True);

                SOULS_MEMORY.BOMB_ENABLED = True;
                update_debug_menu();

                dialog("[SLOW]Press [START] to drop a bomb.[B]");
            } else if(item == CUSTOM_ITEM.MARIO_YUMP) {
                subtext("Unlocked Yump");
                    
                fanfare_item(True);

                SOULS_MEMORY.MARIO_YUMP_ENABLED = True;
                update_debug_menu();

                dialog("[SLOW]Press [START] to yump.");
            } else if(item == CUSTOM_ITEM.ISAAC_TEARS) {
                subtext("Unlocked Tears");
                    
                fanfare_item(True);

                SOULS_MEMORY.ISAAC_TEARS_ENABLED = True;
            } else if(item == CUSTOM_ITEM.ROCKET_JUMP) {
                subtext("Unlocked Rocket Jump");
                    
                fanfare_item(True);

                SOULS_MEMORY.ROCKET_JUMP_ENABLED = True;
            } else if(item == CUSTOM_ITEM.ZELDA_POWER_GLOVE) { // passive abilties
                if(MEMORY.GLOVE_2_3 == 0d0) {
                    subtext("Gained Power Gloves");
                    unlock(GLOVE_2_3);

                    fanfare_item(True);
                } else if(MEMORY.GLOVE_2_2 == 0d0) {
                    subtext("Gained Golden Power Gloves");
                    unlock(GLOVE_2_2);

                    fanfare_item(True);
                }
            } else if(item == CUSTOM_ITEM.TUNIC_GREEN) {
                subtext("Gained Green Tunic");
                unlock(CHEST_1_1);
                    
                fanfare_item(True);
            } else if(item == CUSTOM_ITEM.TUNIC_RED) {
                subtext("Gained Red Tunic");
                unlock(CHEST_2_3);
                    
                fanfare_item(True);
            } 
        }
        @install()
        fun trade_custom_items(out_type:CUSTOM_ITEM, out_count, in_1_type:ITEM, in_1_count, in_2_type:ITEM, in_2_count, in_3_type:ITEM, in_3_count) {
            trade_items(out_type, out_count, in_1_type, in_1_count, in_2_type, in_2_count, in_3_type, in_3_count);

            if(CUSTOM_MEMORY.RETURN > 0d0) {
                if(out_type != ITEM.NO_ITEM) {
                    MEMORY.STRING_PARAMETER_1 = out_count;

                    if(out_type == CUSTOM_ITEM.AXE_ORB) {
                        SOULS_MEMORY.ORB_AXE += out_count;
                        subtext("Gained [MEM1] axe orbs");
                    } else {
                        MEMORY.STRING_PARAMETER_1 = out_type;
                        debug_subtext("unknown custom item #[MEM1]");
                    }
                }
            }
        }

        @install()
        fun _souls_boss_defeated() {
            // if!(ITEM.NO_ITEM) {
            //     reward(reward_item);
            // }

            SOULS_MEMORY.BOSSES_DEFEATED_COUNTER++;
            SOULS_MEMORY.PROGRESS_COUNTER++;

            subtext("Enemy Felled");

            fanfare_boss();

            if(SOULS_MEMORY.BOSSES_DEFEATED_COUNTER >= 0d02) {
                if!(FLAG.JAGUAR_RING) {
                    reward(JAGUAR_RING);
                }
            }
        }
        fun souls_boss_defeated(flag:SOULS_MEMORY, reward_item:SOULS_MEMORY) {
            attribute(BOY, INVINCIBLE_TEMP, True);
            attribute(DOG, INVINCIBLE_TEMP, True);

            if(flag is Memory) {
                set(flag);
            }

            _souls_boss_defeated();

            if(reward_item != ITEM.NO_ITEM) {
                if(reward_item < 0xf000) {
                    reward(reward_item);
                } else {
                    custom_reward(reward_item);
                }
            }

            // subtext("Enemy Felled");

            pop_music();

            attribute(BOY, INVINCIBLE_TEMP, False);
            attribute(DOG, INVINCIBLE_TEMP, False);
        }

        fun fog_wall_outside(condition:SOULS_MEMORY, exit_direction:DIRECTION) {
            if(SOULS_MEMORY.WITH_FOG_WALL) {
                if(condition) {
                    question("[SLOW]A wall of white light[CHOICE]traverse…[CHOICE]leave…");

                    if(MEMORY.QUESTION_ANSWER != 0d00) {
                        error_walk_back(exit_direction);
                        end();
                    }
                }
            }
        }
        fun fog_wall_inside(condition:SOULS_MEMORY, exit_direction:DIRECTION) {
            if(SOULS_MEMORY.WITH_FOG_WALL) {
                if(condition) {
                    subtext("Fog wall active…");

                    if(SOULS_MEMORY.WITH_FOGWALL_WALKBACK) {
                        error_walk_back(exit_direction);
                    }

                    end();
                }
            }
        }

        @install()
        fun update_armor_effects() {
            // if(CUSTOM_MEMORY.CURRENT_ARMOR_CHEST == ARMOR_STATS.CHEST_2_3) { subtext("1"); }

            <BOY>[BOOST_HIT] = 0d0;
            if(CUSTOM_MEMORY.CURRENT_ARMOR_CHEST == ARMOR_STATS.CHEST_1_1) {
                <BOY>[BOOST_HIT] += 0d5;
            }
            if(CUSTOM_MEMORY.CURRENT_ARMOR_HELM == ARMOR_STATS.HELM_1_1) {
                <BOY>[BOOST_HIT] += 0d5;
            }
            if(CUSTOM_MEMORY.CURRENT_ARMOR_ARMLET == ARMOR_STATS.GLOVE_1_1) {
                <BOY>[BOOST_HIT] += 0d5;
            }
        }

        @install()
        @async()
        fun bonfire_wakeup(offset_boy_x, offset_boy_y, offset_dog_x, offset_dog_y) {
            if!(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED) {
                // if(SOULS_MEMORY.BONFIRE_X == 0d0 && SOULS_MEMORY.BONFIRE_Y == 0d0 && SOULS_MEMORY.BONFIRE_Z == 0d0) {
                    <BOY>[X] += signed arg[0x00];
                    <BOY>[Y] += signed arg[0x02];

                    <DOG>[X] += signed arg[0x04];
                    <DOG>[Y] += signed arg[0x06];
                // }
            }

            attribute(BOY, INVINCIBLE_TEMP, True);
            attribute(DOG, INVINCIBLE_TEMP, True);

            animate(DOG, ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);

            animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

            animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
            sleep(0d30);
            animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
            sleep(0d40);

            animate(BOY, ONCE, ANIMATION_BOY.KNEEL);

            sleep(0d20);
            animate(DOG, ONCE, DEFAULT);

            attribute(BOY, INVINCIBLE_TEMP, False);
            attribute(DOG, INVINCIBLE_TEMP, False);
        }

        fun dust_unreachable(x, y) {
            SOULS_MEMORY.DUST_UNREACHABLE = True;

            SOULS_MEMORY.DUST_DROP_X = x * 0x0008;
            SOULS_MEMORY.DUST_DROP_Y = y * 0x0008;
        }

        fun refresh_flask() {
            MEMORY.PETAL = SOULS_MEMORY.ESTUS_CHARGES;
        }

        @install()
        fun dust_loot() {
            unset(SOULS_MEMORY.DUST_UNREACHABLE);

            SOULS_MEMORY.DUST_DROP_MAP = 0xffff;
            SOULS_MEMORY.DUST_DROP_VARIANT = 0xffff;

            // attach_script(SCRIPT_OWNER, LOOT, 0x172b);

            // subtext("Reclaimed souls");

            currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.TALONS);

            // <0x2391> = 0x0000;
            // <0x2395> = 0x0000;
            // call_id(0x3d);
            animate(BOY, ONCE, ANIMATION_BOY.LOOT);

            destroy(SOULS_MEMORY.DUST_ENTITY);

            // sleep(0x80);

            if!(CUSTOM_FLAG.NO_CURRENCY_DISPLAY) {
                show_currency(True);
                sleep(0x40);
                show_currency(False);
            }
        }

        @install()
        fun dust_drop() {
            unset(SOULS_MEMORY.DUST_UNREACHABLE);

            // subtext("Souls in reach...");

            attach_script(SCRIPT_OWNER, B, reference(dust_loot));

            animate_eternal_dust();
        }

        @install()
        fun return_to_bonfire() {
            refresh_flask();

            // SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED = True;

            if(SOULS_MEMORY.BONFIRE_MAP == MAP.CROSSING) { // center
                map_transition(inbetwixx, bonfire, NONE);
            } else if(SOULS_MEMORY.BONFIRE_MAP == MAP.BLIMP_EXTERIOR) { // east
                map_transition(east_crossing, bonfire, NONE);
            } else if(SOULS_MEMORY.BONFIRE_MAP == MAP.PIPEMAZE_ROOMS) {
                map_transition(pipe_entrance, bonfire, NONE);
            } else if(SOULS_MEMORY.BONFIRE_MAP == MAP.NOBILIA_SQUARE) {
                map_transition(town_center, bonfire, NONE);
            } else if(SOULS_MEMORY.BONFIRE_MAP == MAP.DARK_FOREST) { // west
                map_transition(basement_0_start, bonfire, NONE);
            } else if(SOULS_MEMORY.BONFIRE_MAP == MAP.STERLING) {
                map_transition(volcano_tower, bonfire, NONE);
            } else if(SOULS_MEMORY.BONFIRE_MAP == MAP.FIREPIT_JUNGLE) { // south
                map_transition(jungle_firepit, bonfire, NONE);
            } else if(SOULS_MEMORY.BONFIRE_MAP == MAP.WELL) { // altus
                map_transition(well, bonfire, NONE);
            } else if(SOULS_MEMORY.BONFIRE_MAP == MAP.FIREPIT_NOBILIA) {
                map_transition(castle_fire_pit, bonfire, NONE);
            } else if(SOULS_MEMORY.BONFIRE_MAP != 0x0000){
                fade_in();
                sleep(0d30);
                
                MEMORY.STRING_PARAMETER_1 = SOULS_MEMORY.BONFIRE_MAP;

                subtext("Game could not find bonfire map #[MEM1]");
                sleep(0d200);
            }

            map_transition(inbetwixx, center, NONE);
        }

        @install()
        fun wings_used() {
            return_to_bonfire();
        }

        fun refresh_both(with_animation) {
            if(False) {
                // TODO: set confound timer to 30s to avaid perma confound
                if((<BOY>[STATUS_ID_1] & 0xff) == STATUS_ID.CONFOUND) {
                    <BOY>[STATUS_TIMER_1] = 0d1800;
                } else if((<BOY>[STATUS_ID_2] & 0xff) == STATUS_ID.CONFOUND) {
                    <BOY>[STATUS_TIMER_2] = 0d1800;
                } else if((<BOY>[STATUS_ID_3] & 0xff) == STATUS_ID.CONFOUND) {
                    <BOY>[STATUS_TIMER_3] = 0d1800;
                } else if((<BOY>[STATUS_ID_4] & 0xff) == STATUS_ID.CONFOUND) {
                    <BOY>[STATUS_TIMER_4] = 0d1800;
                }

                if((<DOG>[STATUS_ID_1] & 0xff) == STATUS_ID.CONFOUND) {
                    <DOG>[STATUS_TIMER_1] = 0d1800;
                } else if((<DOG>[STATUS_ID_2] & 0xff) == STATUS_ID.CONFOUND) {
                    <DOG>[STATUS_TIMER_2] = 0d1800;
                } else if((<DOG>[STATUS_ID_3] & 0xff) == STATUS_ID.CONFOUND) {
                    <DOG>[STATUS_TIMER_3] = 0d1800;
                } else if((<DOG>[STATUS_ID_4] & 0xff) == STATUS_ID.CONFOUND) {
                    <DOG>[STATUS_TIMER_4] = 0d1800;
                }
            } else {
                <BOY>[FLAGS_5] = 0x0000;
                <DOG>[FLAGS_5] = 0x0000;
            }

            yield();

            cure();
            full_heal(BOTH, with_animation);
        }

        @install()
        fun boy_death() {
            if(<BOY>[HP] > 0d0) {
                CUSTOM_FLAG.START_MARIO_FIREFLOWER = False;

                end();
            }

            if(<SCRIPT_OWNER>[PIXIE_DUST] > 0d0) {
                if!(SOULS_MEMORY.DUST_UNREACHABLE) {
                    while(<SCRIPT_OWNER>[HP] <= 0d0) {
                        yield();
                    }
                    attach_script(BOY, DEATH, reference(boy_death));
                    end();
                } else {
                    <SCRIPT_OWNER>[PIXIE_DUST] = False;
                }
            }

            control(NONE);
            enable_subtext(False);
            attribute(BOY, INVINCIBLE_TEMP, True);
            attribute(DOG, INVINCIBLE_TEMP, True);

            yield();
            
            animate(BOY, ONCE, ANIMATION_ENEMY.DUST);
            animate(DOG, ONCE, ANIMATION_ENEMY.DUST);

            if(SOULS_MEMORY.WITH_SOULS_ON_DEATH) {
                if!(CUSTOM_FLAG.NO_CURRENCY_DISPLAY) {
                    show_currency(True);
                }

                sleep(0d120);
                
                currency_convert(0d1, JEWELES, 0d1, GOLD_COINS);
                currency_convert(0d1, TALONS, 0d1, JEWELES);

                if((SOULS_MEMORY.DUST_DROP_MAP == MEMORY.CURRENT_MAP) && (SOULS_MEMORY.DUST_DROP_VARIANT == MEMORY.CURRENT_MAP_VARIANT)) {
                    destroy(SOULS_MEMORY.DUST_ENTITY);
                }

                if!(SOULS_MEMORY.DUST_UNREACHABLE) {
                    SOULS_MEMORY.DUST_DROP_X = <SCRIPT_OWNER>[X];
                    SOULS_MEMORY.DUST_DROP_Y = <SCRIPT_OWNER>[Y];
                }
                unset(SOULS_MEMORY.DUST_UNREACHABLE);

                // <0x2503> = MEMORY.CURRENT_MAP;
                SOULS_MEMORY.DUST_DROP_MAP = MEMORY.CURRENT_MAP;
                SOULS_MEMORY.DUST_DROP_VARIANT = MEMORY.CURRENT_MAP_VARIANT;

                if!(CUSTOM_FLAG.NO_CURRENCY_DISPLAY) {
                    currency_get(CURRENCY.CREDITS, 0d1);

                    show_currency(True);
                }
            }

            sleep(0d160);

            fade_out();

            show_currency(False);
            yield();

            sleep(0d80);

            refresh_both(False);

            return_to_bonfire();

            control(BOTH);
        }

        @install()
        fun bonfire_triggered() {
            guard_boy_damage();

            if(True) {
                SOULS_MEMORY.BONFIRE_X = <ACTIVE>[X];
                SOULS_MEMORY.BONFIRE_Y = <ACTIVE>[Y];
                SOULS_MEMORY.BONFIRE_Z = <ACTIVE>[Z_LEVEL];
            }

            if(SOULS_MEMORY.WINGS_BLOCKED) {
                unset(SOULS_MEMORY.WINGS_BLOCKED);
                special_script(WINGS, reference(wings_used));
            }

            // animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_WATER);
            
            refresh_flask();
            refresh_both(True);

            if!(SOULS_MEMORY.WITH_SAVESTATE_SAVE) {
                question("[SLOW]Bonfire:[CHOICE]Return to shrine.[CHOICE]Attune Spell.");
            } else {
                question("[SLOW]Bonfire:[CHOICE]Return to shrine.[CHOICE]Attune Spell.[CHOICE]Save.");
            }

            if(MEMORY.QUESTION_ANSWER == 0d00) {
                map_transition(shrine, crash, NONE);
            } else if(MEMORY.QUESTION_ANSWER == 0d01) {
                select_alchemy();
            } else if(MEMORY.QUESTION_ANSWER == 0d02) {
                if(MEMORY.CURRENT_MAP == MAP.CROSSING) { // center
                    save("Inbetwixx");
                } else if(MEMORY.CURRENT_MAP == MAP.BLIMP_EXTERIOR) { // east
                    save("East Inbetwixx");
                } else if(MEMORY.CURRENT_MAP == MAP.PIPEMAZE_ROOMS) {
                    save("Sewers");
                } else if(MEMORY.CURRENT_MAP == MAP.NOBILIA_SQUARE) {
                    save("Town Center");
                } else if((MEMORY.CURRENT_MAP == MAP.FIREPIT_NOBILIA) && (MEMORY.CURRENT_MAP_VARIANT == 0d1)) {
                    save("Temple Lvl.2");
                } else if(MEMORY.CURRENT_MAP == MAP.DARK_FOREST) { // west
                    save("Basement Lvl.1");
                } else if(MEMORY.CURRENT_MAP == MAP.STERLING) {
                    save("Volcano Tower");
                } else if(MEMORY.CURRENT_MAP == MAP.WELL) {
                    save("Plateau");
                } else if((MEMORY.CURRENT_MAP == MAP.FIREPIT_NOBILIA) && (MEMORY.CURRENT_MAP_VARIANT == 0d0)) {
                    save("Castle");
                } else if(MEMORY.CURRENT_MAP != 0x0000){
                    subtext("Game could not find bonfire #[MEM1]");
                }

                // TODO
            }

            // animate(BOY, ONCE, DEFAULT);
        }

        fun replace_bonfire(entity, trigger) {
            _add_enemy(LANTERN_LIGHT_RED, entity[X], entity[Y], INACTIVE);
            <LAST_ENTITY>[Z_LEVEL] = entity[Z_LEVEL];
            attach_script(LAST_ENTITY, DAMAGE, trigger);

            attribute(LAST_ENTITY, ROOT, True);
            <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;

            destroy(entity);
        }

        @install()
        fun bonfire_bond() {
            guard_boy_damage();

            // replace_bonfire(<SCRIPT_OWNER>, reference(bonfire_triggered));

            if(True) {
                SOULS_MEMORY.BONFIRE_X = <ACTIVE>[X];
                SOULS_MEMORY.BONFIRE_Y = <ACTIVE>[Y];
                SOULS_MEMORY.BONFIRE_Z = <ACTIVE>[Z_LEVEL];
            }

            SOULS_MEMORY.BONFIRE_MAP = MEMORY.CURRENT_MAP;
            SOULS_MEMORY.BONFIRE_VARIANT = MEMORY.CURRENT_MAP_VARIANT;

            bonfire_triggered();
        }

        @install()
        fun shrine_intro() {
            control(NONE);

            sound(TESLA);

            if(False) {
                add_enemy(FIRE_EYES, 0d0, 0d0, INACTIVE_INVISIBLE);
                yield();
            }
            _add_placeholder(FIRE_EYES_CAST, <BOY>[X], <BOY>[Y] - 0d20);
            attach_to_script(LAST_ENTITY);

            wait(LAST_ENTITY);

            face_target(BOY, SCRIPT_OWNER);
            yield();

            map_transition(shrine, crash, NONE);
        }

        @install()
        fun bonfire_lit() {
            guard_boy_damage();

            if(MEMORY.CURRENT_MAP == MAP.CROSSING) { // center
                set(SOULS_MEMORY.BONFIRE_INBETWIXX);
            } else if(MEMORY.CURRENT_MAP == MAP.BLIMP_EXTERIOR) { // east
                set(SOULS_MEMORY.BONFIRE_EAST_CROSSING);
            } else if(MEMORY.CURRENT_MAP == MAP.PIPEMAZE_ROOMS) {
                set(SOULS_MEMORY.BONFIRE_PIPES);
            } else if(MEMORY.CURRENT_MAP == MAP.NOBILIA_SQUARE) {
                set(SOULS_MEMORY.BONFIRE_TOWN_CENTER);
            } else if(MEMORY.CURRENT_MAP == MAP.DARK_FOREST) { // west
                set(SOULS_MEMORY.BONFIRE_ISAAC_DUNGEON);
            } else if(MEMORY.CURRENT_MAP == MAP.STERLING) {
                set(SOULS_MEMORY.BONFIRE_VOLCANO_TOWER);
            } else if(MEMORY.CURRENT_MAP == MAP.WELL) {
                set(SOULS_MEMORY.BONFIRE_ALTUS_WELL);
            } else if(MEMORY.CURRENT_MAP == MAP.VOLCANO_ROOMS) {
                SOULS_MEMORY.BONFIRE_DESERT_BUG = True;
            } else if(MEMORY.CURRENT_MAP != 0x0000){
                subtext("Game could not find bonfire #[MEM1]");
            }

            replace_bonfire(<SCRIPT_OWNER>, reference(bonfire_bond));

            subtext("Bonfire Lit");

            if(SOULS_MEMORY.WITH_SHRINE_INTRO) {
                if!(SOULS_MEMORY.BONFIRE_FIRST_TRIGGER) {
                    SOULS_MEMORY.BONFIRE_FIRST_TRIGGER = True;

                    shrine_intro();
                }
            } else {
                SOULS_MEMORY.BONFIRE_FIRST_TRIGGER = True;
            }
        }

        fun bonfire(x, y, flag) {
            // add_enemy(LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE_IMORTAL);
            // attach_script(LAST_ENTITY, B, 0x181e);
            // entity_script_controlled(LAST_ENTITY);

            if(flag) {
                if((SOULS_MEMORY.BONFIRE_MAP == MEMORY.CURRENT_MAP) && (SOULS_MEMORY.BONFIRE_VARIANT == MEMORY.CURRENT_MAP_VARIANT)) {
                    add_enemy(LANTERN_LIGHT_RED, x, y, INACTIVE);
                    attach_script(LAST_ENTITY, DAMAGE, reference(bonfire_triggered));
                } else {
                    add_enemy(LANTERN_LIGHT_RED, x, y, INACTIVE);
                    attach_script(LAST_ENTITY, DAMAGE, reference(bonfire_bond));
                }
            } else {
                add_enemy(LANTERN_LIGHT, x, y, INACTIVE);
                attach_script(LAST_ENTITY, DAMAGE, reference(bonfire_lit));
            }
            
            attribute(LAST_ENTITY, ROOT, True);
            <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
        }

        fun choose_starting_class() {
            question("Starting Class:[CHOICE]Warrior[CHOICE]Explorer[CHOICE]Alchemist[CHOICE]Cleric", 0d05);

            if(MEMORY.QUESTION_ANSWER == 0d0) { // warrior
                subtext("todo");
            } else if(MEMORY.QUESTION_ANSWER == 0d1) { // explorer
                subtext("todo");
            } else if(MEMORY.QUESTION_ANSWER == 0d2) { // alchemist
                subtext("todo");
            } else if(MEMORY.QUESTION_ANSWER == 0d3) { // cleric
                subtext("todo");
            }
        }
        fun choose_starting_item() {
            question("Starting Item:[CHOICE]Chocobo Egg[CHOICE]Nectar[CHOICE]Wings[CHOICE]Queen's Key", 0d05);

            if(MEMORY.QUESTION_ANSWER == 0d0) { // chocobo egg
                set(FLAG.CHOCOBO_EGG);
            } else if(MEMORY.QUESTION_ANSWER == 0d1) { // nectar
                MEMORY.NECTAR++;
            } else if(MEMORY.QUESTION_ANSWER == 0d2) { // wings
                MEMORY.WINGS++;
            } else if(MEMORY.QUESTION_ANSWER == 0d3) {// queens key
                set(FLAG.QUEENS_KEY);
            }
        }

        @install()
        @async()
        fun _init_souls() {
            if(False) { // TODO: the hit% bonus is being calculated during fade_in() and the temp-copies aren't ready at that point
                while(FLAG.IN_ANIMATION) {
                    yield();
                }
                yield();
            } else {
                sleep(0d120);
            }

            if(True) {
                update_armor_effects();
            }
        }
        @install()
        fun init_souls() {
            if(SOULS_MEMORY.DEBUG) {
                FLAG.DEBUG = True;
            }

            if!(SOULS_MEMORY.INIT) {
                SOULS_MEMORY.INIT = True;

                SOULS_MEMORY.ESTUS_CHARGES = SOULS_MEMORY.ESTUS_CHARGES_INIT;
                refresh_flask();

                SOULS_MEMORY.DUST_DROP_MAP = 0xffff;
                SOULS_MEMORY.DUST_DROP_VARIANT = 0xffff;

                MEMORY.ALCHEMY_LEVEL_ATLAS = 0d10;
                MEMORY.ALCHEMY_LEVEL_DEFEND = 0d3;
                // MEMORY.ALCHEMY_LEVEL_SPEED = 0d1;

                SOULS_MEMORY.MENU_CHOICE = 0xffff;

                // CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.BOMBS;

                if(SOULS_MEMORY.WITH_CHEATS && SOULS_MEMORY.WITH_CHEATS_MARIO_YUMP) {
                    if(FLAG.DEBUG) {
                        SOULS_MEMORY.MENU_CHOICE = 0x01;
                        
                        SOULS_MEMORY.MARIO_YUMP_ENABLED = True;
                        // SOULS_MEMORY.BUTTON_MAP = BUTTON_MAP.MARIO;

                        update_debug_menu();
                    }
                }

                if(SOULS_MEMORY.WITH_CHEATS && SOULS_MEMORY.WITH_CHEATS_ALL_BONFIRES) {
                    // center
                    SOULS_MEMORY.BONFIRE_INBETWIXX = True;

                    // east
                    SOULS_MEMORY.BONFIRE_EAST_CROSSING = True;
                    SOULS_MEMORY.BONFIRE_PIPES = True;
                    SOULS_MEMORY.BONFIRE_TOWN_CENTER = True;

                    // west
                    SOULS_MEMORY.BONFIRE_ISAAC_DUNGEON = True;
                    SOULS_MEMORY.BONFIRE_VOLCANO_TOWER = True;

                    // south
                    SOULS_MEMORY.BONFIRE_JUNGLE_PIT = True;
                    SOULS_MEMORY.BONFIRE_DESERT_BUG = True;

                    // altus
                    SOULS_MEMORY.BONFIRE_ALTUS_WELL = True;
                    SOULS_MEMORY.BONFIRE_CASTLE_PIT = True;
                }
            }

            if((SOULS_MEMORY.DUST_DROP_MAP == MEMORY.CURRENT_MAP) && (SOULS_MEMORY.DUST_DROP_VARIANT == MEMORY.CURRENT_MAP_VARIANT)) {
                _add_enemy(ENEMY.BEE, SOULS_MEMORY.DUST_DROP_X, SOULS_MEMORY.DUST_DROP_Y);
                SOULS_MEMORY.DUST_ENTITY = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DEATH, reference(dust_drop));
                
                attribute(LAST_ENTITY, MUTE, True);
                damage(LAST_ENTITY, 0d999, False);
            }

            if((<ACTIVE>[X] == 0x00) && (<ACTIVE>[Y] == 0x00)) {
                set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED); // TODO
            }

            if(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED) {
                if(
                    // (SOULS_MEMORY.BONFIRE_MAP == 0x00) ||
                    // (SOULS_MEMORY.BONFIRE_VARIANT == 0x00) ||
                    (SOULS_MEMORY.BONFIRE_X == 0x00) ||
                    (SOULS_MEMORY.BONFIRE_Y == 0x00)
                ) {
                    if(False) {
                        _fade_in();
                        debug_subtext("Failed to teleport player to bonfire");
                        sleep(0d200);
                    }
                } else {
                    <BOY>[X] = SOULS_MEMORY.BONFIRE_X;
                    <BOY>[Y] = SOULS_MEMORY.BONFIRE_Y;
                    <BOY>[Z_LEVEL] = SOULS_MEMORY.BONFIRE_Z;

                    <DOG>[X] = SOULS_MEMORY.BONFIRE_X;
                    <DOG>[Y] = SOULS_MEMORY.BONFIRE_Y;
                    <DOG>[Z_LEVEL] = SOULS_MEMORY.BONFIRE_Z;
                }
                

                unset(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
            }

            // cure();
            // cast(BOY, BOTH, CURE, 0x01);

            if(SOULS_MEMORY.WITH_RETURN_TO_BONFIRE_ON_DEATH) {
                attach_script(BOY, DEATH, reference(boy_death));
            }

            if!(SOULS_MEMORY.WINGS_BLOCKED) {
                special_script(WINGS, reference(wings_used));
            }

            MEMORY.BOY_XP_REQUIRED = SYSTEM.HP_MAX;
            MEMORY.DOG_XP_REQUIRED = SYSTEM.HP_MAX;

            if!(SOULS_MEMORY.WITH_CHEATS) {
                attribute(BOY, NO_CLIP, False);
                attribute(DOG, NO_CLIP, False);
            }

            _init_souls();
        }

        fun add_frippo_switch(x, y, trigger) {
            add_enemy(FRIPPO, x, y, INACTIVE);
            <LAST_ENTITY>[HP] = 0d1;

            attach_script(LAST_ENTITY, DEATH, trigger);
        }

        fun add_bee(x, y, collected_trigger) {
            add_enemy(BEE, x, y);
            attach_script(LAST_ENTITY, B, collected_trigger);
        }
        fun bee_collected(flag) {
            if(
                (!SOULS_MEMORY.BUG_CATCHER)
                || (MEMORY.CURRENT_WEAPON != WEAPON_INDEX.SWORD_1)
                || (<ACTIVE> == <DOG>)
            ) {
                damage(ACTIVE, 0d5, True);

                end();
            }

            set(flag);

            control(SCRIPT_OWNER, True);

            fake_b();
            wait(BOY);
            fake_loot();

            SOULS_MEMORY.PROGRESS_COUNTER++;
            SOULS_MEMORY.BEES++;
            
            destroy(SCRIPT_OWNER);

            MEMORY.STRING_PARAMETER_1 = SOULS_MEMORY.BEES;
            subtext("Bees: [MEM1]");
        }

        fun collectible_collected() {
            fake_loot();

            SOULS_MEMORY.PROGRESS_COUNTER++;
            SOULS_MEMORY.COLLECTIBLE_COUNTER++;

            destroy(SCRIPT_OWNER);

            MEMORY.STRING_PARAMETER_1 = SOULS_MEMORY.COLLECTIBLE_COUNTER;
            subtext("Collectibles: [MEM1]");
        }
        fun add_collectible(type, x, y, collected_trigger) {
            if(type == 0d0) {
                add_placeholder(SCEPTER, x, y);
            } else if(type == 0d1) {
                add_placeholder(CROWN, x, y);
            }
            attach_script(LAST_ENTITY, B, collected_trigger);
        }

        fun player_message(x, y, trigger) {
            add_placeholder(LEAVES_FALLING_2, x, y, ONCE_FREEZE);

            attach_script(LAST_ENTITY, B, trigger);
        }

        fun player_message_triggered() {
            fake_loot();

            // destroy(SCRIPT_OWNER);
        }

        group player_messages() {
            @install()
            fun message_try_rolling() {
                player_message_triggered();

                subtext("try rolling");
            }
        };

        fun add_debug_entity(x, y, debug_triggered) {
            if(SOULS_MEMORY.WITH_DEBUG_ENTITIES) {
                if(FLAG.DEBUG) {
                    add_placeholder(DOVES_1, x, y);
                    attach_script(LAST_ENTITY, B, debug_triggered);
                }
            }
        }

        fun init_hack() {
            init_souls();
        }

        fun init_weather(night, rain) {
            if(SOULS_MEMORY.WITH_WEATHER) {
                if(SOULS_MEMORY.WITH_COLOR_FILTER) {
                    if(night) {
                        sfx_effect(NIGHT, True);
                    }
                }
                if(rain) {
                    sfx_effect(RAIN, True);
                }
            }
        }

        fun default_init_room(night, rain) {
            init_hack();
            
            MEMORY.DOG_WRITE = DOG.WOLF;

            init_weather(night, rain);

            MEMORY.PACIFIED = False;

            if(CUSTOM_FLAG.NO_DOG) {
                if(False) {
                    FLAG.BOY_UNAVAILABLE = False;
                    FLAG.DOG_UNAVAILABLE = True;
                } else {
                    available(BOY);
                }

                teleport(DOG, 0d0, 0d0);
            } else if(CUSTOM_FLAG.NO_BOY) {
                if(False) {
                    FLAG.BOY_UNAVAILABLE = True;
                    FLAG.DOG_UNAVAILABLE = False;
                } else {
                    available(DOG);
                }

                teleport(BOY, 0d0, 0d0);

                attach_script(DOG, DEATH, reference(boy_death));
            } else {
                if(False) {
                    FLAG.BOY_UNAVAILABLE = False;
                    FLAG.DOG_UNAVAILABLE = False;
                } else {
                    available(BOTH);
                }
            }

            fade_in();
        }

        fun isaac_mode() {
            CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.ISAAC;
            MEMORY.PACIFIED = True;
        }

        fun isaac_init(night, rain) {
            init_hack();

            available(BOY);
            teleport(DOG, 0xff, 0xff);
            init_weather(night, rain);

            isaac_mode();

            fade_in();
        }

        fun mario_mode() {
            CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.MARIO;
            MEMORY.PACIFIED = True;
        }

        fun mario_init(night, rain) {
            init_hack();

            available(BOY);
            teleport(DOG, 0xff, 0xff);
            init_weather(night, rain);

            mario_mode();

            fade_in();
        }

        @install()
        fun start_feature_selected(index) {
            if(index == 0x01) { // TODO: "&& (FLAG.ENERGY_CORE)" doesn't work anymore
                drop_bomb(True);
            } else if(index == 0x02) {
                _isaac_tear(True);
            } else if(index == 0x03) {
                mario_yump(True);
            } else if(index == 0x04) {
                MEMORY.DOG_WRITE = DOG.PUPPER; // TODO
            }
        }

        @install()
        @async()
        fun gourd_trap(object_id, entity, x, y) {
            object[object_id] = 0x01;

            // add_placeholder(SANDPIT_OUT, 0d96, 0d95);
            // add_placeholder(0x7e, 0d96, 0d95);

            x = x * 0x08;
            y = y * 0x08;

            sleep(0x10);

            while(True) {
                arg[0x10] = entity[X];
                arg[0x12] = entity[Y];
                arg[0x14] = x;
                arg[0x16] = y;

                if(arg[0x10] < arg[0x14]) {
                    arg[0x18] = arg[0x14] - arg[0x10];
                } else {
                    arg[0x18] = arg[0x10] - arg[0x14];
                }

                if(arg[0x12] < arg[0x16]) {
                    arg[0x1a] = arg[0x16] - arg[0x12];
                } else {
                    arg[0x1a] = arg[0x12] - arg[0x16];
                }

                if(arg[0x18] < arg[0x1a]) {
                    arg[0x1c] = arg[0x1a] - arg[0x18];
                } else {
                    arg[0x1c] = arg[0x18] - arg[0x1a];
                }

                if((arg[0x18] > 0d70) || (arg[0x1a] > 0d70)) {
                    object[object_id] = 0x00;
                    end();
                } else if((arg[0x18] < 0d5) && (arg[0x1a] < 0d5)) {
                    control(NONE);
                    unset(SOULS_MEMORY.WINGS_BLOCKED);

                    if(entity == <BOY>) {
                        animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SWIRL_ENTER);
                    } else {
                        animate(DOG, ONCE_FREEZE, ANIMATION_DOG.ACT1_SWIRL_ENTER);
                    }

                    // subtext("todo");
                    sleep(0d30);
                    entity[GENERAL_PURPOSE] = 0x01;
                    end();
                }

                if(arg[0x1c] <= 0d5) {
                    if((arg[0x18] > 0x02) && (entity[X] > x)) {
                        entity[X] -= 0x02;
                    } else if((arg[0x18] > 0x02) && (entity[X] < x)) {
                        entity[X] += 0x02;
                    }

                    if((arg[0x1a] > 0x02) && (entity[Y] < y)) {
                        entity[Y] += 0x02;
                    } else if((arg[0x1a] > 0x02) && (entity[Y] > y)) {
                        entity[Y] -= 0x02;
                    }
                } else if(arg[0x18] > arg[0x1a]) {
                    if((arg[0x18] > 0x02) && (entity[X] > x)) {
                        entity[X] -= 0x02;
                    } else if((arg[0x18] > 0x02) && (entity[X] < x)) {
                        entity[X] += 0x02;
                    }
                } else {
                    if((arg[0x1a] > 0x02) && (entity[Y] < y)) {
                        entity[Y] += 0x02;
                    } else if((arg[0x1a] > 0x02) && (entity[Y] > y)) {
                        entity[Y] -= 0x02;
                    }
                }

                yield();
            }
        }

        @install()
        @async()
        fun add_palette_donor(entity, mode) {
            if(mode == 0d0) {
                add_enemy(BOY_BLACK, 0d0, 0d0, INVISBLE_INVINCIBLE_INACTIVE);
                attach_to_script(LAST_ENTITY);
            } else if(mode == 0d1) {
                attach_to_script(DOG);
            }

            arg[0x10] = entity[PALETTE];

            while(entity[FLAGS_1] & ATTRIBUTE_FLAGS.DISABLED) {
                entity[PALETTE] = <SCRIPT_OWNER>[PALETTE];
                
                sleep(0d5);
            }

            entity[PALETTE] = arg[0x10];

            if(mode == 0d0) {
                destroy(SCRIPT_OWNER);
            } 
        }
        fun guard_branch_lady(flag) {
            if(<SCRIPT_OWNER>[FLAGS_1] & ATTRIBUTE_FLAGS.DISABLED) {
                if(MEMORY.SPOON > 0d0) {
                    conversation(False, {
                        conversation_question("[SLOW]Use Spoon[CHOICE]yes…[CHOICE]no…");

                        if(MEMORY.QUESTION_ANSWER == 0d0) {
                            MEMORY.SPOON--;

                            control(SCRIPT_OWNER, False);
                        }
                    });
                } else {
                    conversation(False, {
                        dialog("[SLOW]…[B]");
                    });
                }

                if!(<SCRIPT_OWNER>[FLAGS_1] & ATTRIBUTE_FLAGS.DISABLED) {
                    flag = True;
                }

                end();
            }
        }
        fun branch_lady(x, y, direction:DIRECTION, id) {
            add_enemy(VILLAGER_2_4, x, y, INACTIVE);

            add_palette_donor(<LAST_ENTITY>, 0d1);

            face(LAST_ENTITY, direction);
            attach_script(LAST_ENTITY, B, id);
        }

        @install()
        fun bomb_wall_triggered() {
            heal(SCRIPT_OWNER, 0d0, False);
            attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, True);

            animate(SCRIPT_OWNER, ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);
            object[<SCRIPT_OWNER>[GENERAL_PURPOSE] >> 0x08] = <SCRIPT_OWNER>[GENERAL_PURPOSE] & 0xff;

            sleep(0d80);

            destroy(SCRIPT_OWNER);
        }
        fun add_bombable_entity(x, y) {
            if(SOULS_MEMORY.DEBUG_BOMBABLE_WALLS) {
                add_enemy(THRAXX2_HEART, x, y, BOMBABLE);
            } else {
                add_enemy(RIMSALA_STATUTE_ENTITY, x, y, BOMBABLE);
            }

        }
        fun bomb_wall_trigger(object, value, x, y) {
            add_bombable_entity(x, y);
            
            attach_script(LAST_ENTITY, DAMAGE_DEATH, reference(bomb_wall_triggered));
            <LAST_ENTITY>[GENERAL_PURPOSE] = 0x0000 + ((object << 0x8) + value);
            // <0x2834> = <LAST_ENTITY>;
        }

        fun guard_levitate_stone(required_strength) {
            if(CUSTOM_MEMORY.CURRENT_ARMOR_ARMLET == ARMOR_STATS.GLOVE_2_3) {
                arg[0x0e] = 0d1;
            } else if(CUSTOM_MEMORY.CURRENT_ARMOR_ARMLET == ARMOR_STATS.GLOVE_2_2) {
                arg[0x0e] = 0d2;
            }
            
            if(<BOY>[BOOST_ATTACK] > 0d0) {
                arg[0x0e]++;
            }

            if(required_strength > arg[0x0e]) {
                fake_b();
                end();
            }

            zelda_power_glove(arg[0x0e]);

            attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, True);
        }
        fun add_levitate_stone(x, y, trigger) {
            add_enemy(STONE, x, y, STONE_LEVITATE);
            
            attach_script(LAST_ENTITY, B, trigger);
        }

        fun add_heavy_stone(x, y) {
            add_enemy(STONE_ROUND, x, y);
            
            attach_script(LAST_ENTITY, B, reference(@install() {
                guard_levitate_stone(0d2);
            }));
        }

        group transforming_owls() {
            fun transform_owls(entity_1, entity_2) {
                control(entity_1, True);
                control(entity_2, True);

                destroy(entity_1);

                attribute(entity_2, INVINCIBLE, True);

                animate(entity_2, ONCE_FREEZE, ANIMATION_ENEMY.BLACK_OWL_FUSION);

                wait(entity_2);

                destroy(entity_2);
            }

            fun add_transforming_owl(x, y, active) {
                add_enemy(OWL_BLACK, x, y);
                attach_script(LAST_ENTITY, DAMAGE, reference(@install() {
                    heal(SCRIPT_OWNER, 0d00, False);
                    yield();
                    damage(SCRIPT_OWNER, 0d00, True);

                    if(<SCRIPT_OWNER>[GENERAL_PURPOSE]) {
                        sleep(0d50);
                        animate(SCRIPT_OWNER, ONCE_FREEZE, SLASH_2);
                    }
                }));

                if!(active) {
                    control(LAST_ENTITY, True);
                    <LAST_ENTITY>[GENERAL_PURPOSE] = True;
                    animate(LAST_ENTITY, ONCE_FREEZE, SLASH_2);
                    face(LAST_ENTITY, SOUTH);
                }
            }
            fun add_transforming_owls(x_1, y_1, active_1, x_2, y_2, active_2, callback2) {
                add_transforming_owl(x_1, y_1, active_1);
                arg[0x0e] = <LAST_ENTITY>;

                add_transforming_owl(x_2, y_2, active_2);
                arg[0x0c] = <LAST_ENTITY>;

                while(alive(arg[0x0e])) {
                    check_range_old(arg[0x0e], arg[0x0c], 0d20, 0d20, callback2);
                    yield();
                }
            }
        };
    };

    group hotkeys() {
        @install()
        @inject(ADDRESS.HOTKEY_START)
        @count_limit(0x20)
        fun hotkey_start() {
            // if(FLAG.DEBUG) {
            //     debug_subtext("Start");
            // }

            if(CUSTOM_MEMORY.HOTKEY_START == BUTTON_MAP.AIRSHIP) {
                windwalker_rocket();
            } else if(CUSTOM_MEMORY.HOTKEY_START == BUTTON_MAP.ISAAC) {
                isaac_tear(False);
            } else if(CUSTOM_MEMORY.HOTKEY_START == BUTTON_MAP.BOMBS) {
                drop_bomb(False);
            } else if(CUSTOM_MEMORY.HOTKEY_START == BUTTON_MAP.MARIO) {
                mario_yump(False);
            } else if(CUSTOM_MEMORY.HOTKEY_START == BUTTON_MAP.PUPPER) {
                MEMORY.DOG_WRITE = DOG.PUPPER; // TODO
            } else {
                if(False) {
                    debug_memory(SOULS_MEMORY.MENU_CHOICE, SOULS_MEMORY.DEBUG_MENU_BUTTON_1);
                }

                if(SOULS_MEMORY.MENU_CHOICE == 0x01) {
                    start_feature_selected(SOULS_MEMORY.DEBUG_MENU_BUTTON_1);
                } else if(SOULS_MEMORY.MENU_CHOICE == 0x02) {
                    start_feature_selected(SOULS_MEMORY.DEBUG_MENU_BUTTON_2);
                } else if(SOULS_MEMORY.MENU_CHOICE == 0x03) {
                    start_feature_selected(SOULS_MEMORY.DEBUG_MENU_BUTTON_3);
                } else if(SOULS_MEMORY.MENU_CHOICE == 0x04) {
                    start_feature_selected(SOULS_MEMORY.DEBUG_MENU_BUTTON_4);
                }
            }
        }
        @install()
        @inject(ADDRESS.HOTKEY_START_L)
        @count_limit(0x20)
        fun hotkey_start_l() {
            if(FLAG.DEBUG) {
                debug_subtext("Start+L");

                // return_to_bonfire();
                
                map_transition(metro, door_b3, NONE);
                
                // MEMORY.MAP_PALETTE--;
            }
        }
        @install()
        @inject(ADDRESS.HOTKEY_START_R)
        @count_limit(0x20)
        fun hotkey_start_r() {
            if(FLAG.DEBUG) {
                debug_subtext("Start+R");
                
                if(SOULS_MEMORY.WITH_CHEATS) {
                    if(True) {
                        if((<BOY>[FLAGS_2] & ATTRIBUTE_FLAGS.NO_CLIP) == 0d0) {
                            attribute(BOY, NO_CLIP, True);
                        } else {
                            attribute(BOY, NO_CLIP, False);
                        }
                    }
                    if(True) {
                        attribute(BOY, INVINCIBLE_TEMP, True);
                    }
                    <BOY>[HP] = SYSTEM.HP_MAX;
                }
                
                debug_boy();

                // MEMORY.MAP_PALETTE++;

                if(False) {
                    <0x2834>++;
                }

                // debug_tile();
            } else {
                cycle_weapon();
            }
        }
        // @install()
        // @inject(ADDRESS.HOTKEY_L)
        // @count_limit(0x20)
        // fun hotkey_l() {
        //     if(False) {
        //         debug_subtext("L");
        //     }
        // }
        @install()
        @inject(ADDRESS.HOTKEY_R)
        @count_limit(0x20)
        fun hotkey_r() {
            if(False) {
                debug_subtext("R");
            }

            if(CUSTOM_MEMORY.HOTKEY_START == BUTTON_MAP.MARIO) {
                if(CUSTOM_FLAG.START_MARIO_FIREFLOWER) {
                    mario_fireflower();
                }
            } else if(CUSTOM_MEMORY.HOTKEY_START == BUTTON_MAP.ISAAC) {
                if(SOULS_MEMORY.ISAAC_BOMBS > 0d0) {
                    SOULS_MEMORY.ISAAC_BOMBS--;

                    drop_bomb(False);
                }
            }
        }
        @install()
        @inject(ADDRESS.HOTKEY_B)
        @count_limit(0x20)
        fun hotkey_b() {
            if(CUSTOM_MEMORY.HOTKEY_START == BUTTON_MAP.AIRSHIP) {
                windwalker_rocket();
            } else if(CUSTOM_MEMORY.HOTKEY_START == BUTTON_MAP.ISAAC) {
                isaac_tear(False);
            }
        }
        @install()
        @inject(ADDRESS.HOOK_MENU_CLOSE)
        @count_limit(0x20)
        fun hook_menu_close() {
            if(False) {
                sfx_effect(NIGHT, True);
            }

            update_armor_effects();
        }

        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_1)
        fun menu_presets() {
            if(FLAG.DEBUG) {
                debug_subtext("M=1");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x01;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_2)
        fun menu_dog() {
            if(FLAG.DEBUG) {
                debug_subtext("M=2");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x02;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_3)
        fun menu_atlas() {
            if(FLAG.DEBUG) {
                debug_subtext("M=3");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x03;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_4)
        fun menu_noclip() {
            if(FLAG.DEBUG) {
                debug_subtext("M=4");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x04;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_5)
        fun menu_available() {
            if(FLAG.DEBUG) {
                debug_subtext("M=5");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x05;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_6)
        fun menu_memory_flags() {
            if(FLAG.DEBUG) {
                debug_subtext("M=6");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x06;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_7)
        fun menu_enemy() {
            if(FLAG.DEBUG) {
                debug_subtext("M=7");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x07;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_8)
        fun menu_unlock() {
            if(FLAG.DEBUG) {
                debug_subtext("M=8");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x08;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_9)
        fun menu_windwalker() {
            if(FLAG.DEBUG) {
                debug_subtext("M=9");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x09;
        }
        @install(ADDRESS.DEBUG_MENU_BUTTON_10)
        fun debug_menu_10_alchemy() {
            if(FLAG.DEBUG) {
                debug_subtext("M=10");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x0a;
        }
        @install()
        @inject(ADDRESS.DEBUG_MENU_BUTTON_11)
        fun menu_brians_room() {
            if(FLAG.DEBUG) {
                debug_subtext("M=11");
            }
            SOULS_MEMORY.MENU_CHOICE = 0x0b;
        }
    };

    group souls_npcs() {
        group npc_shrine_maiden() {
            enum NPC_SHRINE_MAIDEN {
                PROGRESS = memory(BYTE, SRAM),
                SUB_PROGRESS = memory(BYTE, SRAM),

                // ID = memory(WORD, SRAM),
                BODY = ENEMY.FIRE_EYES,
            }

            group talk_ai() {
                fun greeting_default() {
                    dialog("[SLOW]Bearer of the curse…[LF]Seek souls. Larger, more powerful souls.[LF]Seek the King, that is the only way.[LF]Lest this land swallow you whole… As it has so many others.[B]");
                }

                fun greeting_estus_shard() {
                    dialog("[SLOW]Is that a shard you've found?[LF]Here, let me see it. So that I may help you.[LF]To see light, to see hope…[LF]However faint it might be…[B]");
                }

                fun story_estus_shard() {
                    dialog("[SLOW]If you find an Estus Shard, bring it to me.[LF]So that I may ease your burden.[B]");
                }

                fun upgrade_boy() {
                    full_heal(BOTH, True);
                    yield();
                    
                    _level_up(MEMORY.STRING_PARAMETER_1, 0d3);
                    question("[SLOW]Level up for [MEM1] Souls?[CHOICE]yes…[CHOICE]no…");

                    if(MEMORY.QUESTION_ANSWER == 0d0) {
                        level_up(BOY, 0d3);

                        yield();
                        MEMORY.BOY_XP_REQUIRED = SYSTEM.HP_MAX;
                    }
                }

                fun upgrade_estus() {
                    if(SOULS_MEMORY.ESTUS_SHARDS > 0x00) {
                        question("[SLOW]estus upgrade?[CHOICE]yes[CHOICE]no");

                        if(MEMORY.QUESTION_ANSWER == 0d0) {
                            SOULS_MEMORY.ESTUS_SHARDS--;

                            SOULS_MEMORY.ESTUS_CHARGES++;
                        }
                    }
                }

                @install()
                fun shrine_maiden_triggered__first_bonfire() {
                    if(NPC_SHRINE_MAIDEN.PROGRESS == 0d0) {
                        if(NPC_SHRINE_MAIDEN.SUB_PROGRESS == 0d0) {
                            NPC_SHRINE_MAIDEN.SUB_PROGRESS++;
                        
                            dialog("[SLOW]Welcome to the bonfire, Unkindled One.[LF]I am a Fire Keeper.[LF]I tend to the flame, and tend to thee.[LF]The Lords have left their thrones, and must be deliver'd to them.[LF]To this end, I am at thy side.[B]");
                        } else if(NPC_SHRINE_MAIDEN.SUB_PROGRESS == 0d1) {
                            NPC_SHRINE_MAIDEN.SUB_PROGRESS++;
                        
                            dialog("[SLOW]Produce the coiled sword at the bonfire.[LF]The mark of ash will guide thee to the land of the Lords.[LF]To Lothric, where the homes of the Lords converge.[B]");
                        } else if(NPC_SHRINE_MAIDEN.SUB_PROGRESS == 0d2) {
                            NPC_SHRINE_MAIDEN.SUB_PROGRESS++;
                        
                            dialog("[SLOW]Understood.[LF]Then touch the darkness inside me.[LF]With your power, let us make the 'soul without a master.'[LF]Farewell, ashen one.[B]");
                        } else {
                            dialog("[SLOW]Ignite the first bonfire.[B]");
                        }
                    } else if(NPC_SHRINE_MAIDEN.PROGRESS >= 0d1) {
                        NPC_SHRINE_MAIDEN.PROGRESS = 0d2;
                        NPC_SHRINE_MAIDEN.SUB_PROGRESS = 0d0;

                        dialog("[SLOW]Bearer of the curse, seek misery.[LF]For misery will lead you to greater, stronger souls.[LF]You will never meet the King with a soul so frail and pallid.[B]");
                    }
                }
                @install()
                fun shrine_maiden_triggered() {
                    if(NPC_SHRINE_MAIDEN.PROGRESS == 0d2) {
                        if(SOULS_MEMORY.ESTUS_SHARDS > 0d00) {
                            greeting_estus_shard();
                        } else {
                            greeting_default();
                        }

                        if(SOULS_MEMORY.ESTUS_SHARDS > 0x00) {
                            question("[SLOW]How can I help you?[CHOICE]talk…[CHOICE]level up…[CHOICE]upgrade…");
                        } else {
                            question("[SLOW]How can I help you?[CHOICE]talk…[CHOICE]level up…");
                        }

                        if(MEMORY.QUESTION_ANSWER == 0d0) { // talk
                            story_estus_shard();
                        } else if(MEMORY.QUESTION_ANSWER == 0d1) { // level up
                            upgrade_boy();
                        } else if(MEMORY.QUESTION_ANSWER == 0d2) { // upgrade
                            upgrade_estus();
                        }
                    }
                }
            };

            fun add_souls_npc_shrine_maiden(x, y) {
                add_enemy(NPC_SHRINE_MAIDEN.BODY, x, y, INACTIVE);

                if(NPC_SHRINE_MAIDEN.PROGRESS < 0d2) {
                    attach_script(LAST_ENTITY, B, reference(shrine_maiden_triggered__first_bonfire));
                } else {
                    attach_script(LAST_ENTITY, B, reference(shrine_maiden_triggered));
                }
            }
        };

        group npc_mario() {
            enum NPC_MARIO {
                PROGRESS = memory(BYTE, SRAM),
                SUB_PROGRESS = memory(BYTE, SRAM),

                MARIO_TEASED = memory(FLAG, SRAM),

                // ID = memory(WORD, SRAM),
                BODY = ENEMY.VILLAGER_2_1,
            }

            @install()
            fun npc_mario_dialog_0() {
                conversation(True, {
                    if(NPC_MARIO.PROGRESS == 0d0) {
                        if(NPC_MARIO.SUB_PROGRESS == 0d0) {
                            dialog("[SLOW]Hey, you.[B]");

                            NPC_MARIO.SUB_PROGRESS++;
                        } else if(NPC_MARIO.SUB_PROGRESS == 0d1) {
                            dialog("[SLOW]Have you seen my brother? I seem to have taken a wrong turn down there.[B]");

                            NPC_MARIO.SUB_PROGRESS++;
                        } else if(NPC_MARIO.SUB_PROGRESS == 0d2) {
                            dialog("[SLOW]The three of us were traveling eastwards to the Sewers, before we were separated.[B]");

                            NPC_MARIO.SUB_PROGRESS++;
                        } else if(NPC_MARIO.SUB_PROGRESS == 0d3) {
                            dialog("[SLOW]Please look for my brother. He might be injured.[B]");

                            NPC_MARIO.PROGRESS++;
                            NPC_MARIO.SUB_PROGRESS = 0d0;
                        }
                    } else {
                        dialog("[SLOW]Please hurry![B]");
                    }
                });
            }
            @install()
            fun npc_mario_dialog_1() {
                if(NPC_MARIO.PROGRESS == 0d1) {
                    if(NPC_MARIO.SUB_PROGRESS == 0d0) {
                        if(MEMORY.MUSHROOM <= 0d0) {
                            subtext("…");
                        } else {
                            NPC_MARIO.SUB_PROGRESS++;

                            add_enemy(NPC_MARIO.BODY, 0xe5, 0x27, INACTIVE);
                            face(LAST_ENTITY, WEST);
                            init_map(0xb4, 0x04, 0xfc, 0x36); // room_alchemist

                            
                            subtext("Is that… a… Mushroom?");
                        }
                    } else if(NPC_MARIO.SUB_PROGRESS == 0d1) {
                        conversation(True, {
                            question("[SLOW]Mushroom… please…[CHOICE]give…[CHOICE]leave…");

                            if(MEMORY.QUESTION_ANSWER == 0d0) {
                                item_pay(MUSHROOM, 0d1, 0d0);
                                if(CUSTOM_MEMORY.RETURN) {
                                    if(False) {
                                        sound(PURCHASE);
                                    }

                                    dialog("[SLOW]…[B]");

                                    NPC_MARIO.SUB_PROGRESS++;
                                }
                            }
                        });
                    } else if(NPC_MARIO.SUB_PROGRESS == 0d2) {
                        conversation(True, {
                            question("[SLOW]more…[CHOICE]give…[CHOICE]leave…");

                            if(MEMORY.QUESTION_ANSWER == 0d0) {
                                item_pay(MUSHROOM, 0d1, 0d0);
                                if(CUSTOM_MEMORY.RETURN) {
                                    if(False) {
                                        sound(PURCHASE);
                                    }

                                    dialog("[SLOW]you saved me…[B]");

                                    NPC_MARIO.PROGRESS++;
                                    NPC_MARIO.SUB_PROGRESS = 0d0;
                                }
                            }
                        });
                    }
                } else {
                    dialog("[SLOW]you saved me…[B]");
                }
            }
            @install()
            fun npc_mario_dialog_2() {
                conversation(True, {
                    if(NPC_MARIO.PROGRESS == 0d2) {
                        if(NPC_MARIO.SUB_PROGRESS == 0d0) {
                            dialog("[SLOW]I followed them to the Sewers all the way from the Kingdom of Mushrooms.[B]");

                            NPC_MARIO.SUB_PROGRESS++;
                        } else if(NPC_MARIO.SUB_PROGRESS == 0d1) {
                            dialog("[SLOW]This should help you navigate within the Sewers.[B]");

                            custom_reward(BIG_MUSHROOM);
                            CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.MARIO;

                            dialog("[SLOW]Press `Start´ to use the Big Mushroom within the Sewers.[B]");

                            NPC_MARIO.PROGRESS++;
                            NPC_MARIO.SUB_PROGRESS = 0d0;
                        }
                    } else {
                        dialog("[SLOW]Use it to help me clear this place from the infestation.[B]");
                    }
                });
            }

            fun add_souls_npc_mario(x, y, flags:FLAG_ENEMY) {
                if(flags is Word) {
                    add_enemy(NPC_MARIO.BODY, x, y, flags);
                } else {
                    add_enemy(NPC_MARIO.BODY, x, y, 0d0);
                }

                if(NPC_MARIO.PROGRESS == 0d0) {
                    attach_script(LAST_ENTITY, B, reference(npc_mario_dialog_0));
                } else if(NPC_MARIO.PROGRESS == 0d1) {
                    attach_script(LAST_ENTITY, B, reference(npc_mario_dialog_1));
                } else {
                    attach_script(LAST_ENTITY, B, reference(npc_mario_dialog_2));
                }
            }
        };

        enum NPC_ISAAC {
            PROGRESS = memory(BYTE, SRAM),
        }

        group npc_cat() {
            enum NPC_CAT {
                PRICE_RING_CAT = 0d100,
            }

            group cat_ai() {
                fun response_positive() {
                    if(randrange(0x02) == 0x00) {
                        dialog("[SLOW]Satisfied?[B]");
                    } else {
                        dialog("[SLOW]I'll be around if you ever come back.[B]");
                    }
                }
                fun response_negative() {
                    if(randrange(0x02) == 0x00) {
                        dialog("[SLOW]Nothing suited you, I presume?[B]");
                    } else {
                        dialog("[SLOW]Well, that's dismaying. Hee hee hee…[B]");
                    }
                }
                fun response_cancel() {
                    dialog("[SLOW]Oh my, haste makes waste. Hee hee hee…[B]");
                }

                fun story_radahn_arena() {
                    dialog("[SLOW]You've seen that gaping hole here?[B]Well, there's nasty little vermin down there.[B]Although who you seek is even further below.[B]And has been down there for a very, very long time.[B]He's plumb Rotten by now, I'm sure! Hee hee hee…[B]");
                }

                fun purchase_ring(price) {
                    MEMORY.STRING_PARAMETER_1 = price;

                    show_currency(True);
                    question("[SLOW]Silvercat Ring?[B]`Silver ring depicting a leaping feline. Reduces damage from falling. Legend has it that when cats grow old, a force brews within them, and they are reborn as something new.´[B]Are you interested?[CHOICE][MEM1] Souls[CHOICE]no.");

                    sleep(0x10);
                    
                    if(MEMORY.QUESTION_ANSWER == 0d0) { // yes
                        if_currency(MEMORY.CURRENCY_CURRENT < price) {
                            dialog("[SLOW]…[B]");
                        } else {
                            sound(PURCHASE);
                            currency_take(TALONS, price);
                            show_currency(True);

                            reward(GLOVE_3_2);

                            response_positive();
                        }
                    } else { // no
                        response_negative();
                    }

                    show_currency(False);
                }

                @install()
                fun cat_triggered() {
                    dialog("[SLOW]Oh, yes. You can call me Shalquoir. Enchante.[B]");

                    if!(MEMORY.GLOVE_3_2) {
                        question("[SLOW]How can I help you?[CHOICE]talk…[CHOICE]buy…");
                    } else {
                        question("[SLOW]How can I help you?[CHOICE]talk…");
                    }

                    if(MEMORY.QUESTION_ANSWER == 0d0) { // talk
                        story_radahn_arena();
                    } else if(MEMORY.QUESTION_ANSWER == 0d1) { // purchase
                        purchase_ring(NPC_CAT.PRICE_RING_CAT);
                    } else {
                        response_negative();
                    }
                }
            };

            enum CAT_VARIANT {
                LOOKING = 0x00,
                CLEANING = 0x01,
            }

            fun add_souls_npc_cat(variant:CAT_VARIANT, x, y) {
                if(variant == CAT_VARIANT.LOOKING) {
                    add_placeholder(CAT_LOOKING, x, y);
                } else {
                    add_placeholder(CAT_CLEANING_1, x, y);
                }

                attach_script(LAST_ENTITY, B, reference(cat_triggered));
            }
        };

        group npc_smith() {
            enum NPC_SMITH {
                PROGRESS = memory(BYTE, SRAM),

                BODY = ENEMY.TINY,
            }
            
            group smith_ai() {
                fun response_greeting() {
                    arg[0x00] = randrange(0x04);

                    if(arg[0x00] == 0x00) {
                        dialog("[SLOW]What? You again?[B]");
                    } else if(arg[0x00] == 0x01) {
                        dialog("[SLOW]You again? Can't you see that I'm busy?[B]");
                    } else if(arg[0x00] == 0x02) {
                        dialog("[SLOW]Hmph, I'd given you up for dead. Almost had me worried, really…[B]");
                    } else {
                        dialog("[SLOW]I knew you'd be around soon. Go on, show me what you've got.[B]");
                    }
                }

                fun response_positive() {
                    arg[0x00] = randrange(0x03);

                    if(arg[0x00] == 0x00) {
                        dialog("[SLOW]I'll be around, if you make it back.[B]");
                    } else if(arg[0x00] == 0x01) {
                        dialog("[SLOW]How goes your journey?[B]");
                    } else {
                        dialog("[SLOW]Take these. They should help a bit.[B]");
                    }
                }
                fun response_negative() {
                    dialog("[SLOW]Hmph. Don't waste my time.[B]");
                }

                group progress_0() {
                    @install()
                    fun smith_0_triggered() {
                        conversation(True, {
                            if(NPC_SMITH.PROGRESS == 0d1) {
                                dialog("[SLOW]Thanks.[B]");

                                conversation_end(True);
                                end();
                            }

                            if(False) {
                                response_greeting();
                            }

                            if!(SOULS_MEMORY.SMITH_KEY) {
                                dialog("[SLOW]I can't find my key, I must have left it in my shop in the town.[B]");
                            } else {
                                question("[SLOW]I can't find my key, I must have left it in my shop in the town.[CHOICE]give…[CHOICE]leave…", 0d5);

                                if(MEMORY.QUESTION_ANSWER == 0d0) { // give key
                                    NPC_SMITH.PROGRESS = 0d1;

                                    SOULS_MEMORY.SMITH_KEY = False;

                                    dialog("[SLOW]Thanks.[B]");
                                } else { // leave
                                    response_negative();
                                }   
                            }
                        });
                    }
                };

                group progress_1() {
                    enum WEAPON_UPGRADE {
                        UPGRADE_1_TYPE_1 = ITEM.MONEY,
                        UPGRADE_1_AMOUNT_1 = 0d50,
                        UPGRADE_1_TYPE_2 = ITEM.NO_ITEM,
                        UPGRADE_1_AMOUNT_2 = 0d0,

                        UPGRADE_2_TYPE_1 = ITEM.IRON,
                        UPGRADE_2_AMOUNT_1 = 0d2,
                        UPGRADE_2_TYPE_2 = ITEM.NO_ITEM,
                        UPGRADE_2_AMOUNT_2 = 0d0,

                        UPGRADE_3_TYPE_1 = ITEM.IRON,
                        UPGRADE_3_AMOUNT_1 = 0d4,
                        UPGRADE_3_TYPE_2 = ITEM.NO_ITEM,
                        UPGRADE_3_AMOUNT_2 = 0d0,

                        UPGRADE_4_TYPE_1 = ITEM.METEORITE,
                        UPGRADE_4_AMOUNT_1 = 0d1,
                        UPGRADE_4_TYPE_2 = ITEM.IRON,
                        UPGRADE_4_AMOUNT_2 = 0d2,
                    }

                    fun upgrade_weapon(type_1, amount_1, type_2, amount_2) {
                        text_start();

                        MEMORY.STRING_PARAMETER_1 = amount_1;
                        text("This costs [MEM1] ");
                        item_to_string(type_1);

                        if(type_2 != ITEM.NO_ITEM) {
                            MEMORY.STRING_PARAMETER_1 = amount_2;
                            text(" and [MEM1] ");
                            item_to_string(type_2);
                        }

                        text("[CHOICE]yes…[CHOICE]no…");
                        await_answer();
                        text_end();

                        if(MEMORY.QUESTION_ANSWER == 0d0) {
                            trade_custom_items(NO_ITEM, 0d0, type_1, amount_1, type_2, amount_2);
                        } else {
                            CUSTOM_MEMORY.RETURN = False;
                        }
                    }

                    @install()
                    fun upgrade_act_1_weapon() {
                        upgrade_weapon(WEAPON_UPGRADE.UPGRADE_1_TYPE_1, WEAPON_UPGRADE.UPGRADE_1_AMOUNT_1, WEAPON_UPGRADE.UPGRADE_1_TYPE_2, WEAPON_UPGRADE.UPGRADE_1_AMOUNT_2);
                    }
                    @install()
                    fun upgrade_act_2_weapon() {
                        upgrade_weapon(WEAPON_UPGRADE.UPGRADE_2_TYPE_1, WEAPON_UPGRADE.UPGRADE_2_AMOUNT_1, WEAPON_UPGRADE.UPGRADE_2_TYPE_2, WEAPON_UPGRADE.UPGRADE_2_AMOUNT_2);
                    }
                    @install()
                    fun upgrade_act_3_weapon() {
                        upgrade_weapon(WEAPON_UPGRADE.UPGRADE_3_TYPE_1, WEAPON_UPGRADE.UPGRADE_3_AMOUNT_1, WEAPON_UPGRADE.UPGRADE_3_TYPE_2, WEAPON_UPGRADE.UPGRADE_3_AMOUNT_2);
                    }
                    @install()
                    fun upgrade_act_4_weapon() {
                        upgrade_weapon(WEAPON_UPGRADE.UPGRADE_4_TYPE_1, WEAPON_UPGRADE.UPGRADE_4_AMOUNT_1, WEAPON_UPGRADE.UPGRADE_4_TYPE_2, WEAPON_UPGRADE.UPGRADE_4_AMOUNT_2);
                    }

                    fun reward_upgrade(orb:SOULS_MEMORY, weapon:ITEM) {
                        if(CUSTOM_MEMORY.RETURN) {
                            orb--;
                            reward(weapon, True);
                            SOULS_MEMORY.ORB_USED = True;

                            response_positive();
                        } else {
                            response_negative();
                        }
                    }

                    fun response_upgrade_weapon() {
                        if(
                            ((SOULS_MEMORY.ORB_SWORD > 0x00) && !(FLAG.SWORD_4)) ||
                            ((SOULS_MEMORY.ORB_AXE > 0x00) && !(FLAG.AXE_4)) ||
                            ((SOULS_MEMORY.ORB_SPEAR > 0x00) && !(FLAG.SPEAR_4))
                        ) {
                            text_start();
                            text("[SLOW]Which weapon?");

                            if((SOULS_MEMORY.ORB_SWORD > 0x00) && !(FLAG.SWORD_4)) {
                                text("[CHOICE]Sword…");
                            } else {
                                text("[CHOICE]…");
                            }

                            if((SOULS_MEMORY.ORB_AXE > 0x00) && !(FLAG.AXE_4)) {
                                text("[CHOICE]Axe…");
                            } else {
                                text("[CHOICE]…");
                            }

                            if((SOULS_MEMORY.ORB_SPEAR > 0x00) && !(FLAG.SPEAR_4)) {
                                text("[CHOICE]Spear…");
                            } else {
                                text("[CHOICE]…");
                            }

                            await_answer();
                            text_end();
                            control(BOTH);

                            if(MEMORY.QUESTION_ANSWER == 0d0) {
                                if!((SOULS_MEMORY.ORB_SWORD > 0x00) && !(FLAG.SWORD_4)) {
                                    response_negative();
                                    end();
                                }

                                if!(FLAG.SWORD_1) {
                                    upgrade_act_1_weapon();

                                    reward_upgrade(ORB_SWORD, SWORD_1);
                                } else if!(FLAG.SWORD_2) {
                                    if(SOULS_MEMORY.WITH_CHEAP_SWORD2) {
                                        upgrade_act_1_weapon();
                                    } else {
                                        upgrade_act_2_weapon();
                                    }

                                    reward_upgrade(ORB_SWORD, SWORD_2);
                                } else if!(FLAG.SWORD_3) {
                                    upgrade_act_3_weapon();

                                    reward_upgrade(ORB_SWORD, SWORD_3);
                                } else if!(FLAG.SWORD_4) {
                                    upgrade_act_4_weapon();

                                    reward_upgrade(ORB_SWORD, SWORD_4);
                                } else {
                                    response_negative();
                                }
                            } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                                if!((SOULS_MEMORY.ORB_AXE > 0x00) && !(FLAG.AXE_4)) {
                                    response_negative();
                                    end();
                                }

                                if!(FLAG.AXE_1) {
                                    upgrade_act_1_weapon();

                                    reward_upgrade(ORB_AXE, AXE_1);
                                } else if!(FLAG.AXE_2) {
                                    upgrade_act_2_weapon();

                                    reward_upgrade(ORB_AXE, AXE_2);
                                } else if!(FLAG.AXE_3) {
                                    upgrade_act_3_weapon();

                                    reward_upgrade(ORB_AXE, AXE_3);
                                } else if!(FLAG.AXE_4) {
                                    upgrade_act_4_weapon();

                                    reward_upgrade(ORB_AXE, AXE_4);
                                } else {
                                    response_negative();
                                }
                            } else if(MEMORY.QUESTION_ANSWER == 0d2) {
                                if!((SOULS_MEMORY.ORB_SPEAR > 0x00) && !(FLAG.SPEAR_4)) {
                                    response_negative();
                                    end();
                                }

                                if!(FLAG.SPEAR_1) {
                                    upgrade_act_1_weapon();

                                    reward_upgrade(ORB_SPEAR, SPEAR_1);
                                } else if!(FLAG.SPEAR_2) {
                                    upgrade_act_2_weapon();

                                    reward_upgrade(ORB_SPEAR, SPEAR_2);
                                } else if!(FLAG.SPEAR_3) {
                                    upgrade_act_3_weapon();

                                    reward_upgrade(ORB_SPEAR, SPEAR_3);
                                } else if!(FLAG.SPEAR_4) {
                                    upgrade_act_4_weapon();

                                    reward_upgrade(ORB_SPEAR, SPEAR_4);
                                } else {
                                    response_negative();
                                }
                            } else {
                                response_negative();
                            }
                        } else {
                            dialog("[SLOW]Bring me a weapon orb, and I'll forge you a better weapon.[B]");
                        }
                    }

                    @install()
                    fun smith_1_triggered() {
                        conversation(True, {
                            response_greeting();

                            question("[SLOW]How can I help you?[CHOICE]talk…[CHOICE]upgrade…");

                            if(MEMORY.QUESTION_ANSWER == 0d0) { // talk
                                subtext("todo");
                            } else if(MEMORY.QUESTION_ANSWER == 0d1) { // purchase
                                response_upgrade_weapon();
                            } else {
                                response_negative();
                            }
                        });
                    }
                };
            };
            
            fun add_souls_npc_smith(x, y, flags:FLAG_ENEMY) {
                if(flags is Word) {
                    add_enemy(NPC_SMITH.BODY, x, y, flags);
                } else {
                    add_enemy(NPC_SMITH.BODY, x, y, 0d0);
                }

                if(NPC_SMITH.PROGRESS == 0d0) {
                    attach_script(LAST_ENTITY, B, reference(smith_0_triggered));
                } else {
                    attach_script(LAST_ENTITY, B, reference(smith_1_triggered));
                }
            }
        };

        group npc_smith_key_lady() {
            group smith_ai() {
                fun response_greeting() {
                    arg[0x00] = randrange(0d3);

                    if(arg[0x00] == 0d0) {
                        dialog("[SLOW]Buy something, anything… Come, now… help an old woman… Keh heh heh…[B]");
                    } else if(arg[0x00] == 0d1) {
                        dialog("[SLOW]Oh, you again. Go on… it's on the cheap for you… Keh heh heh…[B]");
                    } else {
                        dialog("[SLOW]Buy something, anything… Don't abandon a poor old woman… I knew you'd be back.[B]");
                    }
                }

                fun response_positive() {
                    arg[0x00] = randrange(0d2);

                    if(arg[0x00] == 0d0) {
                        dialog("[SLOW]Thank you kindly. Keh heh heh…[B]");
                    } else if(arg[0x00] == 0d1) {
                        dialog("[SLOW]It's high time that I pick up and move. I've a bargain for you, next time we meet, my love.[B]");
                    }
                }
                fun response_negative() {
                    dialog("[SLOW]Lowly times, these are…[B]");
                }

                @install()
                fun smith_key_triggered() {
                    response_greeting();

                    question("[SLOW]How can I help you?[CHOICE]talk…[CHOICE]upgrade…");

                    if(MEMORY.QUESTION_ANSWER == 0d0) { // talk
                        subtext("todo");
                    } else if(MEMORY.QUESTION_ANSWER == 0d1) { // purchase
                        subtext("todo");
                    } else {
                        response_negative();
                    }
                }
            };
            
            fun add_souls_npc_smith_key(x, y) {
                add_enemy(VILLAGER_2_6, x, y, INACTIVE);
                attach_script(LAST_ENTITY, B, reference(smith_key_triggered));
            }
        };

        group npc_bee_boy() {
            enum NPC_BEE_BOY {
                PROGRESS = memory(BYTE, SRAM),

                REWARD_1_COLLECTED = memory(FLAG, SRAM),
                REWARD_1_PRICE = 0d1,
            }

            group bee_boy_ai() {
                fun response_positive() {
                    dialog("[SLOW]If you bring me enough bees I'll reward you with some treasures I found…[B]");
                }
                fun response_negative() {
                    dialog("[SLOW]Bring me more bees…[B]");
                }

                fun add_following_bee(entity) {
                    MEMORY.NEXT_ENEMY_FOLLOWS_ENTITY = entity;
                    _add_enemy(BEE, entity[X], entity[Y]);
                }

                fun request_reward() {
                    if((!NPC_BEE_BOY.REWARD_1_COLLECTED) && (NPC_BEE_BOY.PROGRESS >= NPC_BEE_BOY.REWARD_1_PRICE)) {
                        NPC_BEE_BOY.REWARD_1_COLLECTED = True;

                        add_following_bee(<SCRIPT_OWNER>);

                        reward(SOULS_MEMORY.REWARD_BEE_BOY_QUEST_1);

                        response_positive();
                    } else {
                        response_negative();
                    }
                }

                @install()
                fun bee_boy_triggered() {
                    conversation(True, {
                        if!(SOULS_MEMORY.BUG_CATCHER) {
                            question("[SLOW]Can you help me to find more bees?[CHOICE]help…[CHOICE]leave…");
                            
                            if(MEMORY.QUESTION_ANSWER == 0d0) { // help
                                custom_reward(BUG_CATCHER);

                                dialog("[SLOW]I attached it to your bone, so use it to collect them![B]");
                            } else if(MEMORY.QUESTION_ANSWER == 0d1) { // leave
                                response_negative();
                            } else {
                                response_negative();
                            }   
                        } else {
                            arg[0x10] = SOULS_MEMORY.BEES - NPC_BEE_BOY.PROGRESS;

                            if(arg[0x10] > 0d0) {
                                if(arg[0x10] == 0d1) {
                                    question("[SLOW]You brought me only 1 bee?[CHOICE]give…[CHOICE]leave…");
                                } else {
                                    MEMORY.STRING_PARAMETER_1 = arg[0x10];
                                    question("[SLOW]You brought me [MEM1] bees?[CHOICE]give…[CHOICE]leave…");
                                }

                                if(MEMORY.QUESTION_ANSWER == 0d0) { // give
                                    NPC_BEE_BOY.PROGRESS = SOULS_MEMORY.BEES;
                                    request_reward();
                                } else if(MEMORY.QUESTION_ANSWER == 0d1) { // leave
                                    response_negative();
                                } else {
                                    response_negative();
                                }
                            } else {
                                response_negative();
                            }
                        }
                    });
                }
            };
            
            fun add_souls_npc_bee_boy(x, y) {
                add_enemy(VILLAGER_1_2, x, y);
                attach_script(LAST_ENTITY, B, reference(bee_boy_triggered));

                if(NPC_BEE_BOY.REWARD_1_COLLECTED) {
                    add_following_bee(<LAST_ENTITY>);
                }
            }
        };

        group npc_dog_lady() {
            enum NPC_DOG_LADY {
                PROGRESS = memory(BYTE, SRAM),

                BODY = ENEMY.VILLAGER_2_4,
            }

            group dog_lady_ai() {
                @install()
                fun dog_lady_dialog_0() {
                    conversation(True, {
                        if(NPC_DOG_LADY.PROGRESS == 0d0) {
                            if(SOULS_MEMORY.BONFIRE_FIRST_TRIGGER) {
                                conversation_question("[SLOW]What a lovely dog… Do you need help training?[CHOICE]invite…[CHOICE]leave…");
                                
                                if(MEMORY.QUESTION_ANSWER == 0d0) { // help
                                    NPC_DOG_LADY.PROGRESS++;

                                    conversation_dialog("[SLOW]I'll be on my way.[B]");
                                }
                            } else {
                                conversation_dialog("[SLOW]I… I don't know where to go now…[B]");
                            }
                        } else {
                            conversation_dialog("[SLOW]I'll be on my way.[B]");
                        }
                    });
                }

                @install()
                fun dog_lady_dialog_1() {
                    conversation(True, {
                        conversation_dialog("[SLOW]TODO.[B]");
                    });
                }
            };
            
            fun add_souls_npc_dog_lady(x, y, flags:FLAG_ENEMY) {
                if(flags is Word) {
                    add_enemy(NPC_DOG_LADY.BODY, x, y, flags);
                } else {
                    add_enemy(NPC_DOG_LADY.BODY, x, y);
                }

                if(NPC_DOG_LADY.PROGRESS == 0d0) {
                    attach_script(LAST_ENTITY, B, reference(dog_lady_dialog_0));
                } else if(NPC_DOG_LADY.PROGRESS == 0d1) {
                    attach_script(LAST_ENTITY, B, reference(dog_lady_dialog_1));
                }
            }
        };

        group npc_squidmar() {
            enum NPC_SQUIDMAR {
                DEBUG = False,

                DIALOG_GREETING = memory(FLAG, SRAM),

                AQUAGOTH_SEEN = memory(FLAG, SRAM),
                DIALOG_AQUAGOTH_SEEN = memory(FLAG, SRAM),

                INSANITY = memory(BYTE, SRAM),
                INSANITY_LIMIT = 0d100,

                REPUTATION = memory(BYTE, SRAM),
                REPUTATION_LIMIT = 0d10,
            }

            group squidmar_ai() {
                fun reduce_sanity(amount, external) {
                    NPC_SQUIDMAR.INSANITY += amount;

                    if(NPC_SQUIDMAR.INSANITY > 0d50) {
                        sfx_effect(SHAKING, True);
                    }

                    if(external !is Word) {
                        if(NPC_SQUIDMAR.INSANITY >= NPC_SQUIDMAR.INSANITY_LIMIT) {
                            destroy(SCRIPT_OWNER);

                            conversation_end(True);
                            end();
                        }
                    }
                }

                fun response_buffled() {
                    subtext("…");
                }

                fun response_sad() {
                    dialog("[SLOW]Poor soul… Please look after him…[B]");
                }

                fun response_lie_detected() {
                    arg[0x10] = randrange(0d3);

                    if(arg[0x10] == 0d0) {
                        dialog("[SLOW]…lies…[B]");
                    } else if(arg[0x10] == 0d1) {
                        dialog("[SLOW]…the smell of lies…[B]");
                    } else {
                        dialog("[SLOW]…I'll squeeze the truth out of you…[B]");
                    }
                }

                fun response_lie() {
                    if(False) {
                        reduce_sanity(0d50);

                        arg[0x10] = randrange(0d3);

                        if(arg[0x10] == 0d0) {
                            dialog("[SLOW]…you want to investige his silence?…[B]");
                        } else if(arg[0x10] == 0d1) {
                            dialog("[SLOW]…you saw someone in his cave?…[B]");
                        } else {
                            dialog("[SLOW]…he attacked you?…[B]");
                        }
                    } else {
                        question("[SLOW][CHOICE_INLINE]investige silence…[CHOICE]saw someone…[CHOICE]attacked you…");

                        response_lie_detected();

                        reduce_sanity(0d50);
                    }
                }

                fun dialog_aquagoth() {
                    dialog("[SLOW]What happened to Aquagoth? I can't feel him anymore.[B]");

                    while(True) {
                        if(NPC_SQUIDMAR.INSANITY < 0d50) {
                            question("[SLOW]What happened to my brother?![CHOICE]tell…[CHOICE]lie…");
                        } else {
                            question("[SLOW]WHAT HAPPENED TO MY BROTHER?![CHOICE]tell…[CHOICE]lie…[CHOICE]run…", 0d5);
                        }

                        if(MEMORY.QUESTION_ANSWER == 0d0) { // tell
                            sfx_effect(SHAKING, False);

                            dialog("[SLOW]Puny mortal. My prison will be your grave.[B]");

                            reduce_sanity(0d100);
                        } else if(MEMORY.QUESTION_ANSWER == 0d1) { // lie
                            response_lie();
                        } else if(MEMORY.QUESTION_ANSWER == 0d2) { // run
                            arg[0x10] = randrange(0d3);

                            if(arg[0x10] == 0d0) {
                                dialog("[SLOW]The smell of guilt…[B]");
                            } else if(arg[0x10] == 0d1) {
                                dialog("[SLOW]You can't outrun your destiny…[B]");
                            } else {
                                dialog("[SLOW]…I see…[B]");
                            }

                            reduce_sanity(0d100);
                        } else {
                            reduce_sanity(0d20);
                            
                            if(NPC_SQUIDMAR.INSANITY <= 0d50) {
                                arg[0x10] = randrange(0d3);

                                if(arg[0x10] == 0d0) {
                                    dialog("[SLOW]…mortal… tell me…[B]");
                                } else if(arg[0x10] == 0d1) {
                                    dialog("[SLOW]…tell me…[B]");
                                } else {
                                    dialog("[SLOW]…don't make me break your tiny bones…[B]");
                                }
                            } else {
                                arg[0x10] = randrange(0d4);

                                if(arg[0x10] == 0d0) {
                                    dialog("[SLOW]TELL ME![B]");
                                } else if(arg[0x10] == 0d1) {
                                    dialog("[SLOW]Tell me![B]");
                                } else {
                                    dialog("[SLOW]TELL ME?![B]");
                                }
                            }
                        }
                    }
                }

                fun dialog_aquagoth_seen() {
                    NPC_SQUIDMAR.DIALOG_AQUAGOTH_SEEN = True;
                    NPC_SQUIDMAR.AQUAGOTH_SEEN = False;

                    reduce_sanity(0d5);

                    if(NPC_SQUIDMAR.INSANITY < 0d50) {
                        dialog("[SLOW]Mortal, I have not seen my brother in millenia. Please look after him.[B]");
                    } else {
                        dialog("[SLOW]You saw my brother?! Tell me more![B]");
                    }

                    if(NPC_SQUIDMAR.INSANITY < 0d50) {
                        question("[SLOW][CHOICE_INLINE]tell…[CHOICE]lie…");
                    } else {
                        question("[SLOW][CHOICE_INLINE]tell…[CHOICE]lie…[CHOICE]run…");
                    }

                    if(MEMORY.QUESTION_ANSWER == 0d0) { // tell
                        if((NPC_SQUIDMAR.INSANITY >= 0d50) && (NPC_SQUIDMAR.INSANITY < NPC_SQUIDMAR.INSANITY_LIMIT) && !FLAG.HEAL) {
                            dialog("[SLOW]…[B]Here - go and help him.[B]");

                            reward(HEAL);
                        }
                        
                        dialog("[SLOW]Leave now! Help my brother.[B]");
                    } else if(MEMORY.QUESTION_ANSWER == 0d1) { // lie
                        response_buffled();
                        reduce_sanity(0d30);
                    } else if(MEMORY.QUESTION_ANSWER == 0d2) { // run
                        response_buffled();
                        reduce_sanity(0d10);

                        conversation_end();
                        end();
                    } else { // cancel
                        response_lie_detected();
                        reduce_sanity(0d30);
                    }
                }

                fun donate_relic(item:ITEM) {
                    item_pay(item, 0d1, False);

                    if(CUSTOM_MEMORY.RETURN) {
                        smart_sound(PURCHASE);

                        NPC_SQUIDMAR.REPUTATION++;

                        if(NPC_SQUIDMAR.REPUTATION >= NPC_SQUIDMAR.REPUTATION_LIMIT) {
                            subtext("TODO");
                        }
                    } else {
                        response_buffled();
                        reduce_sanity(0d10);
                    }
                }

                fun response_greeting() {
                    dialog("I am Squidmar.[B]");
                }

                fun dialog_worship() {
                    MEMORY.QUESTION_ANSWER = 0d0;
                    while(MEMORY.QUESTION_ANSWER != 0xffff) {
                        question("[SLOW]Worship me, mortal. Bring me relics from all across the lands…[CHOICE]Jeweled Scarab…[CHOICE]Limestone Tablet…[CHOICE]Golden Jackal…", 0d7);

                        if(MEMORY.QUESTION_ANSWER == 0d0) { // scarab
                            donate_relic(JEWELED_SCARAB);
                        } else if(MEMORY.QUESTION_ANSWER == 0d1) { // tablet
                            donate_relic(LIMESTONE_TABLET);
                        } else if(MEMORY.QUESTION_ANSWER == 0d2) { // jackal
                            donate_relic(GOLDEN_JACKAL);
                        } else {
                            response_buffled();
                        }
                    }
                }
            };

            @install()
            fun npc_squidmar_triggered() {
                if(NPC_SQUIDMAR.INSANITY < NPC_SQUIDMAR.INSANITY_LIMIT) {
                    reduce_sanity(0d50, True);
                }
            }

            fun aquagoth_seen() {
                NPC_SQUIDMAR.AQUAGOTH_SEEN = True;
                NPC_SQUIDMAR.DIALOG_AQUAGOTH_SEEN = False;
            }

            fun add_souls_npc_squidmar(x, y) {
                add_enemy(PLACEHOLDER, x, y);
                
                attach_script(LAST_ENTITY, B, reference(@install() {
                    conversation(False, {
                        if((!NPC_SQUIDMAR.DIALOG_AQUAGOTH_SEEN) && NPC_SQUIDMAR.AQUAGOTH_SEEN) {
                            dialog_aquagoth_seen();
                        } else if(SOULS_MEMORY.DEAD_AQUAGOTH) {
                            dialog_aquagoth();
                        } else if!(NPC_SQUIDMAR.DIALOG_GREETING) {
                            NPC_SQUIDMAR.DIALOG_GREETING = True;

                            response_greeting();
                        } else {
                            question("[SLOW][CHOICE]talk…[CHOICE]worship…");

                            if(MEMORY.QUESTION_ANSWER == 0d0) { // talk
                                subtext("todo");
                            } else if(MEMORY.QUESTION_ANSWER == 0d1) { // worship
                                dialog_worship();
                            } else {
                                response_buffled();
                            }
                        }
                    });
                }));
            }
        };

        group npc_alchemists() {
            // "C"
            group npc_alchemist_corrosion() {
                fun reward_formula(flag:FLAG, formula:ITEM, alchemy_index:ALCHEMY_INDEX) {
                    if!(flag) {
                        dialog("todo: reward(corrosion)[B]");

                        reward(formula);
                        select_alchemy(alchemy_index);

                        pop_music();

                        dialog("todo: explain(corrosion)[B]");
                    }
                }

                fun add_souls_npc_alchemist_corrosion(x, y, direction:DIRECTION) {
                    if(direction is Word) {
                        add_enemy(VILLAGER_2_8, x, y, INACTIVE);
                        face(LAST_ENTITY, direction);
                    } else {
                        add_enemy(VILLAGER_2_8, x, y);
                    }
                    
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        conversation(True, {
                            dialog("todo: hi2[B]");
                            reward_formula(CORROSION, CORROSION, CORROSION);
                        });
                    }));
                }
            };

            // "D"
            group npc_alchemist_defend() {
                fun reward_formula(flag:FLAG, formula:ITEM, alchemy_index:ALCHEMY_INDEX) {
                    if!(flag) {
                        dialog("todo: reward(defend)[B]");

                        reward(formula);
                        select_alchemy(alchemy_index);

                        // music(BUGMUCK_AMBIENT_MELODY);

                        dialog("todo: explain(defend)[B]");
                    }
                }

                fun add_souls_npc_alchemist_defend(x, y, direction:DIRECTION) {
                    if(direction is Word) {
                        add_enemy(VILLAGER_2_8, x, y, INACTIVE);
                        face(LAST_ENTITY, direction);
                    } else {
                        add_enemy(VILLAGER_2_8, x, y);
                    }
                    
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        conversation(True, {
                            dialog("todo: hi2[B]");
                            reward_formula(DEFEND, DEFEND, DEFEND);
                        });
                    }));
                }
            };

            // "F"
            group npc_alchemist_forcefield() {
                fun reward_formula(flag:FLAG, formula:ITEM, alchemy_index:ALCHEMY_INDEX) {
                    if!(flag) {
                        dialog("todo: reward(forcefield)[B]");

                        reward(formula);
                        select_alchemy(alchemy_index);

                        // music(BUGMUCK_AMBIENT_MELODY);

                        dialog("todo: explain(forcefield)[B]");
                    }
                }

                fun add_souls_npc_alchemist_stop(x, y, direction:DIRECTION) {
                    if(direction is Word) {
                        add_enemy(VILLAGER_2_8, x, y, INACTIVE);
                        face(LAST_ENTITY, direction);
                    } else {
                        add_enemy(VILLAGER_2_8, x, y);
                    }
                    
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        conversation(True, {
                            dialog("todo: hi3[B]");
                            reward_formula(FORCE_FIELD, FORCE_FIELD, FORCE_FIELD);
                        });
                    }));
                }
            };

            // "H"
            group npc_alchemist_heal() {
                fun reward_formula(flag:FLAG, formula:ITEM, alchemy_index:ALCHEMY_INDEX) {
                    if!(flag) {
                        dialog("todo: reward(heal)[B]");

                        reward(formula);
                        select_alchemy(alchemy_index);

                        // music(BUGMUCK_AMBIENT_MELODY);

                        dialog("todo: explain(heal)[B]");
                    }
                }

                fun add_souls_npc_alchemist_heal(x, y, direction:DIRECTION) {
                    if(direction is Word) {
                        add_enemy(VILLAGER_2_8, x, y, INACTIVE);
                        face(LAST_ENTITY, direction);
                    } else {
                        add_enemy(VILLAGER_2_8, x, y);
                    }
                    
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        conversation(True, {
                            dialog("todo: hi3[B]");
                            reward_formula(HEAL, HEAL, HEAL);
                        });
                    }));
                }
            };

            // "R"
            group npc_alchemist_revive() {
                fun reward_formula(flag:FLAG, formula:ITEM, alchemy_index:ALCHEMY_INDEX) {
                    if!(flag) {
                        dialog("todo: reward(revive)[B]");

                        reward(formula);
                        select_alchemy(alchemy_index);

                        // music(BUGMUCK_AMBIENT_MELODY);

                        dialog("todo: explain(revive)[B]");
                    }
                }

                fun add_souls_npc_alchemist_revive(x, y, direction:DIRECTION) {
                    if(direction is Word) {
                        add_enemy(VILLAGER_2_8, x, y, INACTIVE);
                        face(LAST_ENTITY, direction);
                    } else {
                        add_enemy(VILLAGER_2_8, x, y);
                    }
                    
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        conversation(True, {
                            dialog("todo: hi3[B]");
                            reward_formula(REVIVE, REVIVE, REVIVE);
                        });
                    }));
                }
            };

            // "S"
            group npc_alchemist_speed() {
                fun reward_formula(flag:FLAG, formula:ITEM, alchemy_index:ALCHEMY_INDEX) {
                    if!(flag) {
                        dialog("todo: reward(speed)[B]");

                        reward(formula);
                        select_alchemy(alchemy_index);

                        music(BUGMUCK_AMBIENT_MELODY);

                        dialog("todo: explain(speed)[B]");
                    }
                }

                fun add_souls_npc_alchemist_speed(x, y, direction:DIRECTION) {
                    if(direction is Word) {
                        add_enemy(VILLAGER_2_8, x, y, INACTIVE);
                        face(LAST_ENTITY, direction);
                    } else {
                        add_enemy(VILLAGER_2_8, x, y);
                    }
                    
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        conversation(True, {
                            dialog("todo: hi3[B]");
                            reward_formula(SPEED, SPEED, SPEED);
                        });
                    }));
                }
            };
            group npc_alchemist_stop() {
                fun reward_formula(flag:FLAG, formula:ITEM, alchemy_index:ALCHEMY_INDEX) {
                    if!(flag) {
                        dialog("todo: reward(stop)[B]");

                        reward(formula);
                        select_alchemy(alchemy_index);

                        // music(BUGMUCK_AMBIENT_MELODY);

                        dialog("todo: explain(stop)[B]");
                    }
                }

                fun add_souls_npc_alchemist_stop(x, y, direction:DIRECTION) {
                    if(direction is Word) {
                        add_enemy(VILLAGER_2_8, x, y, INACTIVE);
                        face(LAST_ENTITY, direction);
                    } else {
                        add_enemy(VILLAGER_2_8, x, y);
                    }
                    
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        conversation(True, {
                            dialog("todo: hi3[B]");
                            reward_formula(STOP, STOP, STOP);
                        });
                    }));
                }
            };
        };
    };

    group statue_riddle() {
        enum STATUE_RIDDLE {
            PROGRESS = memory(BYTE, SRAM),
        }

        enum STATUE_RIDDLE_STATUES { // order = actual activation order
            DOG = 0x00,
            HORACE = 0x01,
            VIGOR = 0x02,
            GOMI = 0x03,
        }

        fun place_statue(index:STATUE_RIDDLE_STATUES, x, y) {
            if(index == STATUE_RIDDLE_STATUES.DOG) {
                if(STATUE_RIDDLE.PROGRESS >= STATUE_RIDDLE_STATUES.DOG) {
                    add_enemy(PLACEHOLDER, x, y);
                    // <LAST_ENTITY>[GENERAL_PURPOSE] = STATUE_RIDDLE_STATUES.DOG;
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        STATUE_RIDDLE.PROGRESS = STATUE_RIDDLE_STATUES.HORACE;

                        dialog("[SLOW]He was the first to wittness a dog walking on water.[B]");
                    }));
                }
            } else if(index == STATUE_RIDDLE_STATUES.HORACE) {
                if(STATUE_RIDDLE.PROGRESS >= STATUE_RIDDLE_STATUES.HORACE) {
                    add_enemy(PLACEHOLDER, x, y);
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        STATUE_RIDDLE.PROGRESS = STATUE_RIDDLE_STATUES.VIGOR;

                        dialog("[SLOW]He once wittnessed a street boy outsmarting a strong man, twice.[B]");
                    }));
                }
            } else if(index == STATUE_RIDDLE_STATUES.VIGOR) {
                if(STATUE_RIDDLE.PROGRESS >= STATUE_RIDDLE_STATUES.VIGOR) {
                    add_enemy(PLACEHOLDER, x, y);
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        STATUE_RIDDLE.PROGRESS = STATUE_RIDDLE_STATUES.GOMI;

                        dialog("[SLOW]He watched a street boy repeatedly falling to the ground.[B]");
                    }));
                }
            } else if(index == STATUE_RIDDLE_STATUES.GOMI) {
                if(STATUE_RIDDLE.PROGRESS >= STATUE_RIDDLE_STATUES.GOMI) {
                    add_enemy(PLACEHOLDER, x, y);
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        // STATUE_RIDDLE.PROGRESS = STATUE_RIDDLE_STATUES.HORACE;

                        dialog("todo[B]");
                    }));
                }
            }
        }
    };
};

// MAPS

area intro_screens() {
    fun intro_skip() {
        init_souls();

        map_transition(inbetwixx, start, NONE);
    }

    map intro_1(OPENING) {
        enum entrance {
            test = entrance(0x10, 0x10, NONE),
        }

        fun trigger_enter() {
            if(False) {
                fade_in();
            }

            if(SOULS_MEMORY.WITH_OPENING) {
                if(SOULS_MEMORY.WITH_SAVESTATE_SAVE) {
                    if(False) {
                        call(0x92e0ca);
                    } else {
                        // unset(<0x22ea, 0x04>);
                        set(<0x22ea, 0x08>);
                        unset(<0x22ea, 0x20>);

                        fade_in();

                        if(False) {
                            while!(<0x22eb, 0x20>) {
                                debug_subtext("nope");
                                debug_memory(<0x22eb>, <0x22eb, 0x02>);
                                sleep(0d60);
                                // eval("26");
                            }
                        }
                        // fade_out();

                        // show_hud(True);
                        set(<0x22ea, 0x10>);
                        set(<0x22ea, 0x20>);
                    }
                } else {
                    call(0x92e0ca);
                }
            } else {
                if(SOULS_MEMORY.WITH_SAVESTATE_LOAD) {
                    boot_into_loading_screen();
                } else {
                    intro_skip();
                }
            }
        }
    };
    map intro_2(PODUNK_65) {
        enum entrance {
            north = entrance(0d09, 0d00, SOUTH),
            west = entrance(0d00, 0d19, EAST),

            cinema_left = entrance(0d64, 0d15, SOUTH),
            cinema_right = entrance(0d75, 0d15, SOUTH),
        }

        fun trigger_enter() {
            intro_skip();
        }
    };
};

area shrine_area() {
    map shrine(VILLAGE) {
        // sniff=vanilla

        enum entrance {
            north = entrance(0x59, 0x0d, SOUTH),
            east = entrance(0x7d, 0x65, WEST),
            south = entrance(0x59, 0x73, NORTH),
            west = entrance(0x01, 0x2f, EAST),

            hut_1 = entrance(0x0f, 0x1b, SOUTH),
            hut_2 = entrance(0x33, 0x2d, SOUTH),
            hut_3 = entrance(0x53, 0x2f, SOUTH),
            hut_4 = entrance(0x65, 0x36, SOUTH),
            hut_5 = entrance(0x6f, 0x49, SOUTH),
            hut_6 = entrance(0x45, 0x53, SOUTH),
            hut_7 = entrance(0x25, 0x5b, SOUTH),
            hut_8 = entrance(0x21, 0x3b, SOUTH),

            crash = entrance(0d75, 0d95, NONE, { crash_both(); }),
        }

        enum soundtrack {
            default = soundtrack(MYSTERY, 0xff)
        }

        enum ROOM {
            SHRINE_BONFIRE_LIT = memory(FLAG, SRAM),

            SMITH_UNLOCKED = memory(FLAG, SRAM),
        }

        @install()
        fun bonfire_triggered_first_bonfire() {
            fake_b();

            question("[SLOW]Return to the beginning?[CHOICE]Yes.[CHOICE]No.");

            if(MEMORY.QUESTION_ANSWER == 0d0) {
                map_transition(inbetwixx, center, NONE);
            }
        }

        @install()
        fun bonfire_triggered_inbetwixx() {
            guard_boy_damage();
            
            text_start();
            text("[SLOW]Return to Inbetwixx?");
            if(SOULS_MEMORY.BONFIRE_INBETWIXX) {
                text("[CHOICE]Inbetwixx…");
            } else {
                text("[CHOICE]…");
            }
            await_answer();
            text_end();
            control(BOTH);

            if(MEMORY.QUESTION_ANSWER == 0d0) {
                if(SOULS_MEMORY.BONFIRE_INBETWIXX) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.CROSSING;
                    map_transition(inbetwixx, bonfire, NONE);
                }
            }
        }
        @install()
        fun bonfire_triggered_east() {
            guard_boy_damage();

            text_start();
            text("[SLOW]Return to East Inbetwixx?");
            if(SOULS_MEMORY.BONFIRE_EAST_CROSSING) {
                text("[CHOICE]Eastern Cave");
            } else {
                text("[CHOICE]…");
            }
            if(SOULS_MEMORY.BONFIRE_PIPES) {
                text("[CHOICE]Pipe maze");
            } else {
                text("[CHOICE]…");
            }
            await_answer();
            text_end();
            control(BOTH);

            if(MEMORY.QUESTION_ANSWER == 0d0) {
                if(SOULS_MEMORY.BONFIRE_EAST_CROSSING) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.BLIMP_EXTERIOR;
                    map_transition(east_crossing, bonfire, NONE);
                }
            } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                if(SOULS_MEMORY.BONFIRE_PIPES) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.PIPEMAZE_ROOMS;
                    map_transition(pipe_entrance, bonfire, NONE);
                }
            }
        }
        @install()
        fun bonfire_triggered_west() {
            guard_boy_damage();

            text_start();
            text("[SLOW]Return to West Inbetwixx?");
            if(SOULS_MEMORY.BONFIRE_VOLCANO_TOWER) {
                text("[CHOICE]Volcano Tower…");
            } else {
                text("[CHOICE]…");
            }
            if(SOULS_MEMORY.BONFIRE_ISAAC_DUNGEON) {
                text("[CHOICE]Basement Lvl1…");
            } else {
                text("[CHOICE]…");
            }
            await_answer();
            text_end();
            control(BOTH);

            if(MEMORY.QUESTION_ANSWER == 0d0) {
                if(SOULS_MEMORY.BONFIRE_VOLCANO_TOWER) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.STERLING;
                    map_transition(volcano_tower, bonfire, NONE);
                }
            } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                if(SOULS_MEMORY.BONFIRE_ISAAC_DUNGEON) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.DARK_FOREST;
                    map_transition(basement_0_start, bonfire, NONE);
                }
            }
        }
        @install()
        fun bonfire_triggered_town() {
            guard_boy_damage();

            text_start();
            text("[SLOW]Return to Town?");
            if(SOULS_MEMORY.BONFIRE_TOWN_CENTER) {
                text("[CHOICE]Town Center…");
            } else {
                text("[CHOICE]…");
            }
            if(SOULS_MEMORY.BONFIRE_TEMPLE_PIT) {
                text("[CHOICE]Temple Lvl.2…");
            } else {
                text("[CHOICE]…");
            }
            await_answer();
            text_end();
            control(BOTH);

            if(MEMORY.QUESTION_ANSWER == 0d0) {
                if(SOULS_MEMORY.BONFIRE_TOWN_CENTER) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.NOBILIA_SQUARE;
                    map_transition(town_center, bonfire, NONE); // TODO
                }
            } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                if(SOULS_MEMORY.BONFIRE_TEMPLE_PIT) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.FIREPIT_NOBILIA;
                    SOULS_MEMORY.BONFIRE_VARIANT = 0d1;
                    map_transition(town_temple_underground_firepit, bonfire, NONE); // TODO
                }
            }
        }
        @install()
        fun bonfire_triggered_jungle() {
            guard_boy_damage();

            text_start();
            text("[SLOW]Return to Southern Jungle?");
            if(SOULS_MEMORY.BONFIRE_JUNGLE_PIT) {
                text("[CHOICE]Jungle Pit…");
            } else {
                text("[CHOICE]…");
            }
            if(SOULS_MEMORY.BONFIRE_DESERT_BUG) {
                text("[CHOICE]Desert…");
            } else {
                text("[CHOICE]…");
            }
            await_answer();
            text_end();
            control(BOTH);

            if(MEMORY.QUESTION_ANSWER == 0d0) {
                if(SOULS_MEMORY.BONFIRE_JUNGLE_PIT) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.FIREPIT_JUNGLE;
                    map_transition(jungle_firepit, bonfire, NONE);
                }
            } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                if(SOULS_MEMORY.BONFIRE_DESERT_BUG) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.VOLCANO_ROOMS;
                    SOULS_MEMORY.BONFIRE_VARIANT = 0d2;
                    map_transition(bugmuck_cave_1, bonfire, NONE);
                }
            }
        }
        @install()
        fun bonfire_triggered_altus() {
            guard_boy_damage();

            text_start();
            text("[SLOW]Return to Altus Plateu?");
            if(SOULS_MEMORY.BONFIRE_ALTUS_WELL) {
                text("[CHOICE]Well…");
            } else {
                text("[CHOICE]…");
            }
            if(SOULS_MEMORY.BONFIRE_CASTLE_PIT) {
                text("[CHOICE]Castle Pit…");
            } else {
                text("[CHOICE]…");
            }
            await_answer();
            text_end();
            control(BOTH);

            if(MEMORY.QUESTION_ANSWER == 0d0) {
                if(SOULS_MEMORY.BONFIRE_ALTUS_WELL) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.WELL;
                    map_transition(well, bonfire, NONE);
                }
            } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                if(SOULS_MEMORY.BONFIRE_CASTLE_PIT) {
                    SOULS_MEMORY.BONFIRE_MAP = MAP.FIREPIT_NOBILIA;
                    SOULS_MEMORY.BONFIRE_VARIANT = 0d0;
                    map_transition(castle_fire_pit, bonfire, NONE);
                }
            }
        }

        fun bonfire_portal(x, y, flag, active, trigger) {
            if(flag) {
                if!(active) {
                    add_enemy(LANTERN_LIGHT, x, y, INACTIVE);
                } else {
                    add_enemy(LANTERN_LIGHT_RED, x, y, INACTIVE);
                }
                attach_script(LAST_ENTITY, DAMAGE, trigger);
                attribute(LAST_ENTITY, ROOT, True);
                <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
                // <LAST_ENTITY>[PALETTE] = 0x0000;
            }
        }

        @install()
        fun add_bonfire() {
            bonfire_portal(0d77, 0d92, SOULS_MEMORY.BONFIRE_INBETWIXX, (SOULS_MEMORY.BONFIRE_MAP == MAP.CROSSING), reference(bonfire_triggered_inbetwixx)); // inbetwixx

            bonfire_portal(0d77, 0d100, (SOULS_MEMORY.BONFIRE_EAST_CROSSING || SOULS_MEMORY.BONFIRE_PIPES), ((SOULS_MEMORY.BONFIRE_MAP == MAP.BLIMP_EXTERIOR) || (SOULS_MEMORY.BONFIRE_MAP == MAP.PIPEMAZE_ROOMS)), reference(bonfire_triggered_east)); // east inbetwixx

            bonfire_portal(0d69, 0d104, (SOULS_MEMORY.BONFIRE_TOWN_CENTER || SOULS_MEMORY.BONFIRE_TEMPLE_PIT), ((SOULS_MEMORY.BONFIRE_MAP == MAP.NOBILIA_SQUARE) || ((SOULS_MEMORY.BONFIRE_MAP == MAP.FIREPIT_NOBILIA) && (SOULS_MEMORY.BONFIRE_VARIANT == 0d1))), reference(bonfire_triggered_town)); // town

            bonfire_portal(0d61, 0d104, (SOULS_MEMORY.BONFIRE_ISAAC_DUNGEON || SOULS_MEMORY.BONFIRE_VOLCANO_TOWER), ((SOULS_MEMORY.BONFIRE_MAP == MAP.DARK_FOREST) || (SOULS_MEMORY.BONFIRE_MAP == MAP.STERLING)), reference(bonfire_triggered_west)); // west inbetwixx

            bonfire_portal(0d53, 0d100, (SOULS_MEMORY.BONFIRE_JUNGLE_PIT || SOULS_MEMORY.BONFIRE_DESERT_BUG), ((SOULS_MEMORY.BONFIRE_MAP == MAP.FIREPIT_JUNGLE) || (SOULS_MEMORY.BONFIRE_MAP == MAP.VOLCANO_ROOMS)), reference(bonfire_triggered_jungle)); // southern jungle

            bonfire_portal(0d51, 0d92, (SOULS_MEMORY.BONFIRE_ALTUS_WELL || SOULS_MEMORY.BONFIRE_CASTLE_PIT), ((SOULS_MEMORY.BONFIRE_MAP == MAP.WELL) || ((SOULS_MEMORY.BONFIRE_MAP == MAP.FIREPIT_NOBILIA) && (SOULS_MEMORY.BONFIRE_VARIANT == 0d0))), reference(bonfire_triggered_altus)); // altus plateau 

            // bonfire_portal(0d59, 0d88, …); // omnitopia
        }

        @install()
        fun locked_door() {
            subtext("Locked.");
        }

        enum stepon_trigger {
            exit_hut_1 = @install() {
                map_transition(hut_dog_lady, door, NORTH);
            },
            exit_hut_2 = @install() {
                map_transition(hut_2, door, NORTH);
            },
            exit_hut_3 = @install() {
                map_transition(hut_3, door, NORTH);
            },
            exit_hut_4 = @install() {
                map_transition(hut_4, door, NORTH);
            },
            exit_hut_5 = @install() {
                map_transition(hut_5, door, NORTH);
            },
            exit_hut_6 = @install() {
                map_transition(hut_6, door, NORTH);
            },
            exit_hut_7 = @install() {
                map_transition(hut_smith, door, NORTH);
            },
            exit_hut8 = @install() {
                map_transition(hut_cat, door, NORTH);
            },
            guard_east = @install() {
                debug_subtext("S=8");
            },
            exit_north = @install() {
                map_transition(shrine, south, NORTH);
            },

            exit_south = @install() {
                map_transition(shrine, north, SOUTH);
            },
            exit_east = @install() {
                map_transition(shrine, west, EAST);
            },
            exit_west = @install() {
                map_transition(shrine, east, WEST);
            },
        }

        @install()
        fun first_bonfire_triggered() {
            if(SOULS_MEMORY.WITH_SHRINE_INTRO) {
                if(
                    (NPC_SHRINE_MAIDEN.PROGRESS == 0x00) && (NPC_SHRINE_MAIDEN.SUB_PROGRESS == 0x03) &&
                    !(ROOM.SHRINE_BONFIRE_LIT)
                ) {
                    NPC_SHRINE_MAIDEN.PROGRESS++;
                    NPC_SHRINE_MAIDEN.SUB_PROGRESS = 0x00;

                    set(ROOM.SHRINE_BONFIRE_LIT);
                    object[0x11] = 0x1; // ignite fire

                    add_bonfire();
                } else if(ROOM.SHRINE_BONFIRE_LIT) {
                    bonfire_triggered_first_bonfire();
                }
            } else {
                bonfire_triggered_first_bonfire();
            }
        }

        enum b_trigger {
            sniff__1_ash = first_bonfire_triggered(), // object[0x12]=0x01; object[0x13]=0x01; ?
            sniff__1_ash = first_bonfire_triggered(), // object[0x12]=0x01; object[0x14]=0x01; ?
            sniff__1_ash = first_bonfire_triggered(), // object[0x13]=0x01; object[0x14]=0x01; ?
            gourd__2_wax = @install() {
                debug_subtext("B=3");
                _loot_chest(0x00, WAX, 0d02);
            },
            sniff__1_water = @install() {
                debug_subtext("B=4");
                _loot(0x0c, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=5");
                _loot(0x0b, WATER, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=6");
                _loot(0x0a, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=7");
                _loot(0x09, ROOTS, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=8");
                _loot(0x08, OIL, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=9");
                _loot(0x07, OIL, 0d01, 0d00);
            },

            sniff__1_water = @install() {
                debug_subtext("B=10");
                _loot(0x06, WATER, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=11");
                _loot(0x05, OIL, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=12");
                _loot(0x04, WATER, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=13");
                _loot(0x03, ROOTS, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=14");
                _loot(0x02, OIL, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=15");
                _loot(0x0d, WATER, 0d01, 0d00); // object[0x0d]=0x01; ?
            },
            sniff__1_ash = @install() {
                debug_subtext("B=16");
                _loot(0x0e, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=17");
                _loot(0x0f, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=18");
                _loot(0x10, ASH, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=19");
                _loot(0x01, ROOTS, 0d01, 0d00);
            },
        }

        fun show_bonfires() {
            object[0x11] = 0x01; // ignite fire

            add_bonfire();
        }

        fun add_door(x, y, locked) {
            if(locked) {
                add_enemy(STONE_ROUND, x, y);
                attach_script(LAST_ENTITY, B, reference(installed_error_locked));
            } else {
                add_enemy(STONE_ROUND, x - 0d4, y);
            }
        }

        fun trigger_enter() {
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            add_souls_npc_bee_boy(0d60, 0d60);

            add_door(0d15, 0d29, NPC_DOG_LADY.PROGRESS < 0d1); // dog lady
            add_door(0d51, 0d47, True);
            add_door(0d83, 0d49, True);
            add_door(0d101, 0d57, True);
            add_door(0d111, 0d75, True);


            add_door(0d33, 0d62, False); // cat
            add_door(0d69, 0d85, True); // shrine maiden

            if(ROOM.SHRINE_BONFIRE_LIT) {
                show_bonfires();
            } else if!(SOULS_MEMORY.WITH_SHRINE_INTRO) {
                show_bonfires();
            }

            add_souls_npc_shrine_maiden(0d71, 0d88);
            if(NPC_SMITH.PROGRESS == 0d0) {
                add_door(0d37, 0d93, True); // smith
                add_souls_npc_smith(0d42, 0d93);
            } else {
                add_door(0d37, 0d93, False); // smith
                ROOM.SMITH_UNLOCKED = True;
            }

            // object[0x00] = 0x01; // open gourd
            // … sniff spots?
            // object[0x11] = 0x01; // ignite fire

            default_init_room(False, False);

            add_debug_entity(0d54, 0d84, reference(@install() {
                SOULS_MEMORY.SMITH_KEY = True;
                ROOM.SMITH_UNLOCKED = True;
                NPC_SMITH.PROGRESS = 0d1;

                MEMORY.IRON = 0d5;
                MEMORY.METEORITE = 0d5;

                SOULS_MEMORY.ORB_SWORD = 0d99;
                SOULS_MEMORY.ORB_AXE = 0d99;
                SOULS_MEMORY.ORB_SPEAR = 0d99;

                SOULS_MEMORY.ESTUS_SHARDS = 0d99;

                currency_get(TALONS, 0d1000);

                destroy(SCRIPT_OWNER);
            }));
        }
    };

    map hut_dog_lady(VILLAGE_HUTS) { // variant 1_1
        enum entrance {
            door = entrance(0x10, 0x23, NORTH),
        }

        enum stepon_trigger {
            exit_door_3_3 = nop(),
            exit_door_3_2 = nop(),
            exit_door_3_1 = nop(),
            exit_door_2_3 = nop(),
            exit_door_2_2 = nop(),
            exit_door_2_1 = nop(),
            exit_door_1_3 = nop(),
            exit_door_1_2 = nop(),
            exit_door = @install() {
                map_transition(shrine, hut_1, SOUTH);
            },
        }

        enum b_trigger {
            gourd_3_3_3__1_water = nop(),
            gourd_3_3_2__1_water = nop(),
            gourd_3_3_1__1_water = nop(),
            gourd_3_2_4__1_water = nop(),
            gourd_3_2_3__4_water = nop(),
            gourd_3_2_1__1_petal = nop(),
            gourd_3_2_2__2_clay = nop(),
            gourd_3_1_2__1_call_beads = nop(),
            gourd_3_1_1__1_water = nop(),
            gourd_2_3_2__2_water = nop(),

            gourd_2_3_1__1_roots = nop(),
            gourd_2_2_3__4_water = nop(),
            gourd_2_2_2__2_roots = nop(),
            gourd_2_2_1__1_water = nop(),
            gourd_2_1_3__3_clay = nop(),
            gourd_2_1_2__18_money = nop(),
            gourd_2_1_1__1_clay = nop(),
            gourd_1_3_3__2_roots = nop(),
            gourd_1_3_2__1_water = nop(),
            gourd_1_3_1__1_nectar = nop(),

            gourd_1_2_3__30_money = nop(),
            gourd_1_2_2__1_water = nop(),
            gourd_1_2_1__4_water = nop(),
            gourd_2 = @install() {
                debug_subtext("B=23");
                _loot_chest(0x01, WATER, 0d01);
            },
            gourd_1_1_1 = @install() {
                debug_subtext("B=24");
                _loot_chest(0x00, ROOTS, 0d01);
            },
        }

        fun init_map(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x20, 0x24); // hut_1_1
            } else if(index == 0x02) {
                init_map(0x22, 0x00, 0x42, 0x24); // hut_1_2
            } else if(index == 0x03) {
                init_map(0x44, 0x00, 0x64, 0x24); // hut_1_3
            } else if(index == 0x04) {
                init_map(0x00, 0x26, 0x20, 0x4a); // hut_2_1
            } else if(index == 0x05) {
                init_map(0x22, 0x26, 0x42, 0x4a); // hut_2_2
            } else if(index == 0x06) {
                init_map(0x44, 0x26, 0x64, 0x4a); // hut_2_3
            } else if(index == 0x07) {
                init_map(0x00, 0x4c, 0x20, 0x70); // hut_3_1
            } else if(index == 0x08) {
                init_map(0x22, 0x4c, 0x42, 0x70); // hut_3_2 ?
            } else if(index == 0x09) {
                init_map(0x44, 0x4c, 0x64, 0x70); // hut_3_3
            }
        }

        fun trigger_enter() {
            init_map(0x01);

            // object[0x00] = 0x01; // open gourd_1_1_1
            // object[0x01] = 0x01; // open gourd_1_1_2

            if(NPC_DOG_LADY.PROGRESS >= 0d1) {
                add_souls_npc_dog_lady(0d15, 0d16);
            }

            fade_in();
        }
    };

    map hut_2(VILLAGE_HUTS) { // variant 2_3
        enum entrance {
            door = entrance(0x54, 0x49, NORTH),
        }

        enum stepon_trigger {
            exit_door_3_3 = nop(),
            exit_door_3_2 = nop(),
            exit_door_3_1 = nop(),
            exit_door = @install() {
                map_transition(shrine, hut_2, SOUTH);
            },
            exit_door_2_2 = nop(),
            exit_door_2_1 = nop(),
            exit_door_1_3 = nop(),
            exit_door_1_2 = nop(),
            exit_door_1_1 = nop(),
        }

        enum b_trigger {
            gourd_3_3_3__1_water = nop(),
            gourd_3_3_2__1_water = nop(),
            gourd_3_3_1__1_water = nop(),
            gourd_3_2_4__1_water = nop(),
            gourd_3_2_3__4_water = nop(),
            gourd_3_2_1__1_petal = nop(),
            gourd_3_2_2__2_clay = nop(),
            gourd_3_1_2__1_call_beads = nop(),
            gourd_3_1_1__1_water = nop(),
            gourd_2__2_water = @install() {
                debug_subtext("B=9");
                _loot_chest(0x0f, WATER, 0d02);
            },

            gourd_1__1_roots = @install() {
                debug_subtext("B=10");
                _loot_chest(0x0e, ROOTS, 0d01);
            },
            gourd_2_2_3__4_water = nop(),
            gourd_2_2_2__2_roots = nop(),
            gourd_2_2_1__1_water = nop(),
            gourd_2_1_3__3_clay = nop(),
            gourd_2_1_2__18_money = nop(),
            gourd_2_1_1__1_clay = nop(),
            gourd_1_3_3__2_roots = nop(),
            gourd_1_3_2__1_water = nop(),
            gourd_1_3_1__1_nectar = nop(),

            gourd_1_2_3__30_money = nop(),
            gourd_1_2_2__1_water = nop(),
            gourd_1_2_1__4_water = nop(),
            gourd_1_1_2__1_water = nop(),
            gourd_1_1_1__2_roots = nop(),
        }

        fun init_map(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x20, 0x24); // hut_1_1
            } else if(index == 0x02) {
                init_map(0x22, 0x00, 0x42, 0x24); // hut_1_2
            } else if(index == 0x03) {
                init_map(0x44, 0x00, 0x64, 0x24); // hut_1_3
            } else if(index == 0x04) {
                init_map(0x00, 0x26, 0x20, 0x4a); // hut_2_1
            } else if(index == 0x05) {
                init_map(0x22, 0x26, 0x42, 0x4a); // hut_2_2
            } else if(index == 0x06) {
                init_map(0x44, 0x26, 0x64, 0x4a); // hut_2_3
            } else if(index == 0x07) {
                init_map(0x00, 0x4c, 0x20, 0x70); // hut_3_1
            } else if(index == 0x08) {
                init_map(0x22, 0x4c, 0x42, 0x70); // hut_3_2 ?
            } else if(index == 0x09) {
                init_map(0x44, 0x4c, 0x64, 0x70); // hut_3_3
            }
        }

        fun trigger_enter() {
            init_map(0x06);

            // object[0x0e] = 0x01; // open gourd_2_3_1
            // object[0x0f] = 0x01; // open gourd_2_3_2

            fade_in();
        }
    };

    map hut_3(VILLAGE_HUTS) { // variant 1_2
        enum entrance {
            door = entrance(0x32, 0x23, NORTH),
        }

        enum stepon_trigger {
            exit_door_3_3 = nop(),
            exit_door_3_2 = nop(),
            exit_door_3_1 = nop(),
            exit_door_2_3 = nop(),
            exit_door_2_2 = nop(),
            exit_door_2_1 = nop(),
            exit_door_1_3 = nop(),
            exit_door = @install() {
                map_transition(shrine, hut_3, SOUTH);
            },
            exit_door_1_1 = nop(),
        }

        enum b_trigger {
            gourd_3_3_3__1_water = nop(),
            gourd_3_3_2__1_water = nop(),
            gourd_3_3_1__1_water = nop(),
            gourd_3_2_4__1_water = nop(),
            gourd_3_2_3__4_water = nop(),
            gourd_3_2_1__1_petal = nop(),
            gourd_3_2_2__2_clay = nop(),
            gourd_3_1_2__1_call_beads = nop(),
            gourd_3_1_1__1_water = nop(),
            gourd_2_3_2__2_water = nop(),

            gourd_2_3_1__1_roots = nop(),
            gourd_2_2_3__4_water = nop(),
            gourd_2_2_2__2_roots = nop(),
            gourd_2_2_1__1_water = nop(),
            gourd_2_1_3__3_clay = nop(),
            gourd_2_1_2__18_money = nop(),
            gourd_2_1_1__1_clay = nop(),
            gourd_1_3_3__2_roots = nop(),
            gourd_1_3_2__1_water = nop(),
            gourd_1_3_1__1_nectar = nop(),

            gourd_3__30_money = @install() {
                debug_subtext("B=20");
                _loot_chest(0x04, MONEY, 0d30);
            },
            gourd_2__1_water = @install() {
                debug_subtext("B=21");
                _loot_chest(0x03, WATER, 0d01);
            },
            gourd_1__4_water = @install() {
                debug_subtext("B=22");
                _loot_chest(0x02, WATER, 0d03);
            },
            gourd_1_1_2__1_water = nop(),
            gourd_1_1_1__2_roots = nop(),
        }

        fun init_map(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x20, 0x24); // hut_1_1
            } else if(index == 0x02) {
                init_map(0x22, 0x00, 0x42, 0x24); // hut_1_2
            } else if(index == 0x03) {
                init_map(0x44, 0x00, 0x64, 0x24); // hut_1_3
            } else if(index == 0x04) {
                init_map(0x00, 0x26, 0x20, 0x4a); // hut_2_1
            } else if(index == 0x05) {
                init_map(0x22, 0x26, 0x42, 0x4a); // hut_2_2
            } else if(index == 0x06) {
                init_map(0x44, 0x26, 0x64, 0x4a); // hut_2_3
            } else if(index == 0x07) {
                init_map(0x00, 0x4c, 0x20, 0x70); // hut_3_1
            } else if(index == 0x08) {
                init_map(0x22, 0x4c, 0x42, 0x70); // hut_3_2 ?
            } else if(index == 0x09) {
                init_map(0x44, 0x4c, 0x64, 0x70); // hut_3_3
            }
        }

        fun trigger_enter() {
            init_map(0x02);

            // object[0x02] = 0x01; // open gourd_1_2_1
            // object[0x03] = 0x01; // open gourd_1_2_2
            // object[0x04] = 0x01; // open gourd_1_2_3

            fade_in();
        }
    };

    map hut_4(VILLAGE_HUTS) { // variant 1_3
        enum entrance {
            door = entrance(0x32, 0x23, NORTH),
        }

        enum stepon_trigger {
            exit_door_3_3 = nop(),
            exit_door_3_2 = nop(),
            exit_door_3_1 = nop(),
            exit_door_2_3 = nop(),
            exit_door_2_2 = nop(),
            exit_door_2_1 = nop(),
            exit_door_1_3 = nop(),
            exit_door = @install() {
                map_transition(shrine, hut_4, SOUTH);
            },
            exit_door_1_1 = nop(),
        }

        enum b_trigger {
            gourd_3_3_3__1_water = nop(),
            gourd_3_3_2__1_water = nop(),
            gourd_3_3_1__1_water = nop(),
            gourd_3_2_4__1_water = nop(),
            gourd_3_2_3__4_water = nop(),
            gourd_3_2_1__1_petal = nop(),
            gourd_3_2_2__2_clay = nop(),
            gourd_3_1_2__1_call_beads = nop(),
            gourd_3_1_1__1_water = nop(),
            gourd_2_3_2__2_water = nop(),

            gourd_2_3_1__1_roots = nop(),
            gourd_2_2_3__4_water = nop(),
            gourd_2_2_2__2_roots = nop(),
            gourd_2_2_1__1_water = nop(),
            gourd_2_1_3__3_clay = nop(),
            gourd_2_1_2__18_money = nop(),
            gourd_2_1_1__1_clay = nop(),
            gourd_1_3_3__2_roots = nop(),
            gourd_1_3_2__1_water = nop(),
            gourd_1_3_1__1_nectar = nop(),

            gourd_3__30_money = @install() {
                debug_subtext("B=20");
                _loot_chest(0x04, MONEY, 0d30);
            },
            gourd_2__1_water = @install() {
                debug_subtext("B=21");
                _loot_chest(0x03, WATER, 0d01);
            },
            gourd_1__4_water = @install() {
                debug_subtext("B=22");
                _loot_chest(0x02, WATER, 0d03);
            },
            gourd_1_1_2__1_water = nop(),
            gourd_1_1_1__2_roots = nop(),
        }

        fun init_map(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x20, 0x24); // hut_1_1
            } else if(index == 0x02) {
                init_map(0x22, 0x00, 0x42, 0x24); // hut_1_2
            } else if(index == 0x03) {
                init_map(0x44, 0x00, 0x64, 0x24); // hut_1_3
            } else if(index == 0x04) {
                init_map(0x00, 0x26, 0x20, 0x4a); // hut_2_1
            } else if(index == 0x05) {
                init_map(0x22, 0x26, 0x42, 0x4a); // hut_2_2
            } else if(index == 0x06) {
                init_map(0x44, 0x26, 0x64, 0x4a); // hut_2_3
            } else if(index == 0x07) {
                init_map(0x00, 0x4c, 0x20, 0x70); // hut_3_1
            } else if(index == 0x08) {
                init_map(0x22, 0x4c, 0x42, 0x70); // hut_3_2 ?
            } else if(index == 0x09) {
                init_map(0x44, 0x4c, 0x64, 0x70); // hut_3_3
            }
        }

        fun trigger_enter() {
            init_map(0x02);

            // object[0x02] = 0x01; // open gourd_1_2_1
            // object[0x03] = 0x01; // open gourd_1_2_2
            // object[0x04] = 0x01; // open gourd_1_2_3

            fade_in();
        }
    };

    map hut_5(VILLAGE_HUTS) { // variant 2_1
        enum entrance {
            door = entrance(0x10, 0x49, NORTH),
        }

        enum stepon_trigger {
            exit_door_3_3 = nop(),
            exit_door_3_2 = nop(),
            exit_door_3_1 = nop(),
            exit_door_2_3 = nop(),
            exit_door_2_2 = nop(),
            exit_door = @install() {
                map_transition(shrine, hut_5, SOUTH);
            },
            exit_door_1_3 = nop(),
            exit_door_1_2 = nop(),
            exit_door_1_1 = nop(),
        }

        enum b_trigger {
            gourd_3_3_3__1_water = nop(),
            gourd_3_3_2__1_water = nop(),
            gourd_3_3_1__1_water = nop(),
            gourd_3_2_4__1_water = nop(),
            gourd_3_2_3__4_water = nop(),
            gourd_3_2_1__1_petal = nop(),
            gourd_3_2_2__2_clay = nop(),
            gourd_3_1_2__1_call_beads = nop(),
            gourd_3_1_1__1_water = nop(),
            gourd_2_3_2__2_water = nop(),

            gourd_2_3_1__1_roots = nop(),
            gourd_2_2_3__4_water = nop(),
            gourd_2_2_2__2_roots = nop(),
            gourd_2_2_1__1_water = nop(),
            gourd_3__3_clay = @install() {
                debug_subtext("B=14");
                _loot_chest(0x0a, CLAY, 0d03);
            },
            gourd_2__18_money = @install() {
                debug_subtext("B=15");
                _loot_chest(0x09, MONEY, 0d18);
            },
            gourd_1__1_clay = @install() {
                debug_subtext("B=16");
                _loot_chest(0x08, CLAY, 0d01);
            },
            gourd_1_3_3__2_roots = nop(),
            gourd_1_3_2__1_water = nop(),
            gourd_1_3_1__1_nectar = nop(),

            gourd_1_2_3__30_money = nop(),
            gourd_1_2_2__1_water = nop(),
            gourd_1_2_1__4_water = nop(),
            gourd_1_1_2__1_water = nop(),
            gourd_1_1_1__2_roots = nop(),
        }

        fun init_map(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x20, 0x24); // hut_1_1
            } else if(index == 0x02) {
                init_map(0x22, 0x00, 0x42, 0x24); // hut_1_2
            } else if(index == 0x03) {
                init_map(0x44, 0x00, 0x64, 0x24); // hut_1_3
            } else if(index == 0x04) {
                init_map(0x00, 0x26, 0x20, 0x4a); // hut_2_1
            } else if(index == 0x05) {
                init_map(0x22, 0x26, 0x42, 0x4a); // hut_2_2
            } else if(index == 0x06) {
                init_map(0x44, 0x26, 0x64, 0x4a); // hut_2_3
            } else if(index == 0x07) {
                init_map(0x00, 0x4c, 0x20, 0x70); // hut_3_1
            } else if(index == 0x08) {
                init_map(0x22, 0x4c, 0x42, 0x70); // hut_3_2 ?
            } else if(index == 0x09) {
                init_map(0x44, 0x4c, 0x64, 0x70); // hut_3_3
            }
        }

        fun trigger_enter() {
            init_map(0x04);

            // object[0x08] = 0x01; // open gourd_2_1_1
            // object[0x09] = 0x01; // open gourd_2_1_2
            // object[0x0a] = 0x01; // open gourd_2_1_3

            fade_in();
        }
    };

    map hut_6(VILLAGE_HUTS) { // variant 3_1 (fire eyes)
        enum entrance {
            door = entrance(0x10, 0x6f, NORTH),
        }

        enum stepon_trigger {
            exit_door_3_3 = nop(),
            exit_door_3_2 = nop(),
            exit_door = @install() {
                map_transition(shrine, hut_6, SOUTH);
            },
            exit_door_2_3 = nop(),
            exit_door_2_2 = nop(),
            exit_door_2_1 = nop(),
            exit_door_1_3 = nop(),
            exit_door_1_2 = nop(),
            exit_door_1_1 = nop(),
        }

        enum b_trigger {
            gourd_3_3_3__1_water = nop(),
            gourd_3_3_2__1_water = nop(),
            gourd_3_3_1__1_water = nop(),
            gourd_3_2_4__1_water = nop(),
            gourd_3_2_3__4_water = nop(),
            gourd_3_2_1__1_petal = nop(),
            gourd_3_2_2__2_clay = nop(),
            gourd_2__1_call_beads = @install() {
                debug_subtext("B=7");
                // _loot_chest(0x11, BISCUIT, 0d01);
                _loot_chest(0x11, CALL_BEADS, 0d01);
            },
            gourd_1__1_water = @install() {
                debug_subtext("B=8");
                _loot_chest(0x10, WATER, 0d01);
            },
            gourd_2_3_2__2_water = nop(),

            gourd_2_3_1__1_roots = nop(),
            gourd_2_2_3__4_water = nop(),
            gourd_2_2_2__2_roots = nop(),
            gourd_2_2_1__1_water = nop(),
            gourd_2_1_3__3_clay = nop(),
            gourd_2_1_2__18_money = nop(),
            gourd_2_1_1__1_clay = nop(),
            gourd_1_3_3__2_roots = nop(),
            gourd_1_3_2__1_water = nop(),
            gourd_1_3_1__1_nectar = nop(),

            gourd_1_2_3__30_money = nop(),
            gourd_1_2_2__1_water = nop(),
            gourd_1_2_1__4_water = nop(),
            gourd_1_1_2__1_water = nop(),
            gourd_1_1_1__2_roots = nop(),
        }

        fun init_map(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x20, 0x24); // hut_1_1
            } else if(index == 0x02) {
                init_map(0x22, 0x00, 0x42, 0x24); // hut_1_2
            } else if(index == 0x03) {
                init_map(0x44, 0x00, 0x64, 0x24); // hut_1_3
            } else if(index == 0x04) {
                init_map(0x00, 0x26, 0x20, 0x4a); // hut_2_1
            } else if(index == 0x05) {
                init_map(0x22, 0x26, 0x42, 0x4a); // hut_2_2
            } else if(index == 0x06) {
                init_map(0x44, 0x26, 0x64, 0x4a); // hut_2_3
            } else if(index == 0x07) {
                init_map(0x00, 0x4c, 0x20, 0x70); // hut_3_1
            } else if(index == 0x08) {
                init_map(0x22, 0x4c, 0x42, 0x70); // hut_3_2 ?
            } else if(index == 0x09) {
                init_map(0x44, 0x4c, 0x64, 0x70); // hut_3_3
            }
        }

        fun trigger_enter() {
            init_map(0x07);

            // object[0x10] = 0x01; // open gourd_3_1_1
            // object[0x11] = 0x01; // open gourd_3_1_2

            fade_in();
        }
    };

    map hut_smith(VILLAGE_HUTS) {
        enum entrance {
            door = entrance(0x32, 0x23, NORTH),
        }

        enum soundtrack {
            default = soundtrack(MYSTERY, 0xff)
        }

        enum stepon_trigger {
            exit_door_3_3 = nop(),
            exit_door_3_2 = nop(),
            exit_door_3_1 = nop(),
            exit_door_2_3 = nop(),
            exit_door_2_2 = nop(),
            exit_door_2_1 = nop(),
            exit_door_1_3 = nop(),
            exit_door = @install() {
                map_transition(shrine, hut_7, SOUTH);
            },
            exit_door_1_1 = nop(),
        }

        enum b_trigger {
            gourd_3_3_3 = nop(),
            gourd_3_3_2 = nop(),
            gourd_3_3_1 = nop(),
            gourd_3_2_4 = nop(),
            gourd_3_2_3 = nop(),
            gourd_3_2_1 = nop(),
            gourd_3_2_2 = nop(),
            gourd_3_1_2 = nop(),
            gourd_3_1_1 = nop(),
            gourd_2_3_2 = nop(),

            gourd_2_3_1 = nop(),
            gourd_2_2_3 = nop(),
            gourd_2_2_2 = nop(),
            gourd_2_2_1 = nop(),
            gourd_2_1_3 = nop(),
            gourd_2_1_2 = nop(),
            gourd_2_1_1 = nop(),
            gourd_1_3_3 = nop(),
            gourd_1_3_2 = nop(),
            gourd_1_3_1 = nop(),

            gourd_3__30_money = @install() {
                debug_subtext("B=20");
                _loot_chest(0x04, MONEY, 0d30);
            },
            gourd_2__1_water = @install() {
                debug_subtext("B=21");
                _loot_chest(0x03, WATER, 0d01);
            },
            gourd_1__4_water = @install() {
                debug_subtext("B=22");
                _loot_chest(0x02, WATER, 0d03);
            },
            gourd_1_1_2 = nop(),
            gourd_1_1_1 = nop(),
        }

        fun init_map(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x20, 0x24); // hut_1_1
            } else if(index == 0x02) {
                init_map(0x22, 0x00, 0x42, 0x24); // hut_1_2
            } else if(index == 0x03) {
                init_map(0x44, 0x00, 0x64, 0x24); // hut_1_3
            } else if(index == 0x04) {
                init_map(0x00, 0x26, 0x20, 0x4a); // hut_2_1
            } else if(index == 0x05) {
                init_map(0x22, 0x26, 0x42, 0x4a); // hut_2_2
            } else if(index == 0x06) {
                init_map(0x44, 0x26, 0x64, 0x4a); // hut_2_3
            } else if(index == 0x07) {
                init_map(0x00, 0x4c, 0x20, 0x70); // hut_3_1
            } else if(index == 0x08) {
                init_map(0x22, 0x4c, 0x42, 0x70); // hut_3_2 ?
            } else if(index == 0x09) {
                init_map(0x44, 0x4c, 0x64, 0x70); // hut_3_3
            }
        }

        fun trigger_enter() {
            init_map(0x02);

            // object[0x02] = 0x01; // open gourd_1_2_1
            // object[0x03] = 0x01; // open gourd_1_2_2
            // object[0x04] = 0x01; // open gourd_1_2_3

            if(NPC_SMITH.PROGRESS >= 0d1) {
                add_souls_npc_smith(0d49, 0d18);
            }

            default_init_room(False, False);
        }
    };

    group hut_cat() {
        enum AREA_CAT {
            TRAP_CLEARED = memory(FLAG, SRAM),
        }

        map hut_cat(VILLAGE_HUTS) {
            enum entrance {
                door = entrance(0x54, 0x6f, NORTH),
            }

            enum soundtrack {
                default = soundtrack(INN_GUITAR, 0xff)
            }

            enum stepon_trigger {
                exit_door = @install() {
                    map_transition(shrine, hut_8, SOUTH);
                },
                exit_door_3_2 = nop(),
                exit_door_3_1 = nop(),
                exit_door_2_3 = nop(),
                exit_door_2_2 = nop(),
                exit_door_2_1 = nop(),
                exit_door_1_3 = nop(),
                exit_door_1_2 = nop(),
                exit_door_1_1 = nop(),
            }

            @install()
            @async()
            fun entity_general_purpose_check(entity) {
                while(entity[GENERAL_PURPOSE] == 0x00) {
                    yield();
                }

                map_transition(boy_rats_arena, right, NONE);
            }

            enum b_trigger {
                gourd_3 = @install() {
                    <ACTIVE>[GENERAL_PURPOSE] = 0x00;
                    gourd_trap(0x18, <ACTIVE>, 0d96, 0d95);
                    entity_general_purpose_check(<ACTIVE>);
                    // _loot_chest(0x18, WATER, 0x03);
                },
                gourd_2 = @install() {
                    _loot_chest(0x17, WATER, 0x02);
                },
                gourd_1 = @install() {
                    _loot_chest(0x16, WATER, 0x01);
                },
                gourd_3_2_4 = nop(),
                gourd_3_2_3 = nop(),
                gourd_3_2_1 = nop(),
                gourd_3_2_2 = nop(),
                gourd_3_1_2 = nop(),
                gourd_3_1_1 = nop(),
                gourd_2_3_2 = nop(),

                gourd_2_3_1 = nop(),
                gourd_2_2_3 = nop(),
                gourd_2_2_2 = nop(),
                gourd_2_2_1 = nop(),
                gourd_2_1_3 = nop(),
                gourd_2_1_2 = nop(),
                gourd_2_1_1 = nop(),
                gourd_1_3_3 = nop(),
                gourd_1_3_2 = nop(),
                gourd_1_3_1 = nop(),

                gourd_1_2_3 = nop(),
                gourd_1_2_2 = nop(),
                gourd_1_2_1 = nop(),
                gourd_1_1_2 = nop(),
                gourd_1_1_1 = nop(),
            }

            fun init_map(index) {
                if(index == 0x01) {
                    init_map(0x00, 0x00, 0x20, 0x24); // hut_1_1
                } else if(index == 0x02) {
                    init_map(0x22, 0x00, 0x42, 0x24); // hut_1_2
                } else if(index == 0x03) {
                    init_map(0x44, 0x00, 0x64, 0x24); // hut_1_3
                } else if(index == 0x04) {
                    init_map(0x00, 0x26, 0x20, 0x4a); // hut_2_1
                } else if(index == 0x05) {
                    init_map(0x22, 0x26, 0x42, 0x4a); // hut_2_2
                } else if(index == 0x06) {
                    init_map(0x44, 0x26, 0x64, 0x4a); // hut_2_3
                } else if(index == 0x07) {
                    init_map(0x00, 0x4c, 0x20, 0x70); // hut_3_1
                } else if(index == 0x08) {
                    init_map(0x22, 0x4c, 0x42, 0x70); // hut_3_2
                } else if(index == 0x09) {
                    init_map(0x44, 0x4c, 0x64, 0x70); // hut_3_3
                }
            }

            fun trigger_enter() {
                init_map(0x09);

                // object[0x16] = 0x01; // open gourd_3_3_1
                // object[0x17] = 0x01; // open gourd_3_3_2
                // object[0x18] = 0x01; // open gourd_3_3_3

                arg[0x00] = randrange(0x05);

                if(arg[0x00] == 0x00) {
                    add_souls_npc_cat(CLEANING, 0d89, 0d103); // fish cleaning
                } else if(arg[0x00] == 0x01) {
                    add_souls_npc_cat(LOOKING, 0d78, 0d100); // desk looking
                } else if(arg[0x00] == 0x02) {
                    add_souls_npc_cat(CLEANING, 0d76, 0d92); // food cleaning
        
                } else {
                    add_souls_npc_cat(CLEANING, 0d78, 0d100); // desk cleaning
                }

                if(AREA_CAT.TRAP_CLEARED) {
                    object[0x18] = 0x01; // open gourd_3_3_3
                }

                default_init_room(False, False);
            }
        };

        map boy_rats_arena(RAPTORS) {
            // sniff=vanilla

            enum entrance {
                left = entrance(0x15, 0x1c, NONE),
                center = entrance(0x1e, 0x21, NONE),
                right = entrance(0x2a, 0x23, NONE)
            }

            enum soundtrack {
                default = soundtrack(SPACE_NOISE, 0x30)
            }

            enum stepon_trigger {
                exit_north = nop(),
                exit_south = nop(),
                center = nop(),
            }

            enum b_trigger {
                sniff__1_crystal_1 = @install() {
                    debug_subtext("B=0");
                    _loot(0x09, CRYSTAL, 0d01, 0d01);
                },
                sniff__1_oil_1 = @install() {
                    debug_subtext("B=1");
                    _loot(0x08, OIL, 0d01, 0d01);
                },
                sniff__1_crystal_2 = @install() {
                    debug_subtext("B=2");
                    _loot(0x07, CRYSTAL, 0d01, 0d02);
                },
                sniff__1_water_2 = @install() {
                    debug_subtext("B=3");
                    _loot(0x06, WATER, 0d01, 0d02);
                },
            }
            
            enum BOSS {
                RAT_1_ID = memory(WORD, TEMP),
                RAT_1_X = 0x13,
                RAT_1_Y = 0x19,
                RAT_2_ID = memory(WORD, TEMP),
                RAT_2_X = 0x29,
                RAT_2_Y = 0x1b,
                RAT_3_ID = memory(WORD, TEMP),
                RAT_3_X = 0x13,
                RAT_3_Y = 0x25,
                RAT_4_ID = memory(WORD, TEMP),
                RAT_4_X = 0x29,
                RAT_4_Y = 0x27,

                PHASE = memory(WORD, TEMP),
                TIMER = memory(WORD, TEMP),

                COUNTDOWN = 0x03,
            }

            fun close_exits(close) {
                if(close) {
                    object[0x04] = 0x04;
                } else {
                    object[0x05] = 0x04;
                }
            }

            enum ROOM {
                RATS_TO_KILL = 0d5,
                RAT_COUNTER = memory(WORD, TEMP),

                REWARD = NECTAR,
            }

            fun print_counter() {
                MEMORY.STRING_PARAMETER_1 = ROOM.RAT_COUNTER;
                MEMORY.STRING_PARAMETER_2 = ROOM.RATS_TO_KILL;
                subtext("[MEM1]/[MEM2]");
            }

            fun update_counter() {
                ROOM.RAT_COUNTER++;

                if(ROOM.RAT_COUNTER < ROOM.RATS_TO_KILL) {
                    print_counter();
                }
                
                if(ROOM.RAT_COUNTER == ROOM.RATS_TO_KILL) {
                    set(AREA_CAT.TRAP_CLEARED);

                    reward(ROOM.REWARD);

                    map_transition(hut_cat, door, NONE);
                }
            }

            fun rat_dead(x, y, death_trigger) {
                update_counter();

                add_enemy(RAT, x, y);
                attach_script(LAST_ENTITY, DEATH, death_trigger);
                <LAST_ENTITY>[HP] = 0x0001;

                sleep(0x20);
                destroy(SCRIPT_OWNER);
            }

            @install()
            fun rat_1_dead() {
                rat_dead(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));
            }
            @install()
            fun rat_2_dead() {
                rat_dead(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));
            }
            @install()
            fun rat_3_dead() {
                rat_dead(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));
            }
            @install()
            fun rat_4_dead() {
                rat_dead(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
            }

            fun spawn_rat(x, y, death_trigger) {
                add_enemy(RAT, x, y);
                attach_script(LAST_ENTITY, DEATH, death_trigger);
                <LAST_ENTITY>[HP] = 0x0001;
            }

            fun trigger_enter() {
                crash_both();
                default_init_room(True, False);

                print_counter();

                close_exits(True);

                spawn_rat(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));
                spawn_rat(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));

                sleep(0x40);

                spawn_rat(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));
                spawn_rat(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));

                sleep(0x20);

                spawn_rat(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));
                spawn_rat(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));

                sleep(0x20);

                spawn_rat(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
                spawn_rat(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
            }
        };

    };
};

area inbetwixx_center() {
    map inbetwixx(CROSSING) {
        // chests=vanilla
        // sniff=vanilla

        enum entrance {
            north = entrance(0x2d, 0x01, SOUTH),
            east = entrance(0x5f, 0x4d, WEST),
            west_1 = entrance(0x04, 0x71, EAST),
            west_2 = entrance(0x04, 0x2f, EAST),

            start = entrance(0x0f, 0x47, NONE),
            center = entrance(0x0f, 0x47, NONE, { bonfire_wakeup(0d0, -0d16, -0d24, 0d0); }),
            bonfire = entrance(0d49, 0d53, NONE, { bonfire_wakeup(0d0, -0d16, -0d24, 0d0); }),
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            DEBUG = False,
            
            BRIDGE_REVEALED = memory(FLAG, SRAM),
            BRIDGE_REVEALER_ENTITY = memory(WORD, TEMP),

            FLOWER_GATE = memory(WORD, TEMP),

            WITH_FLOWER_TRIGGER = False,
        }

        @install()
        fun ravine_triggered() {
            generic_fall(0d100, 0d300);

            dust_unreachable(0d45, 0d35);
            damage(BOTH, 0d999, True);
            sleep(0d30);
            damage(BOTH, SYSTEM.HP_MAX, False);
        }

        enum stepon_trigger {
            stepon_0 = @install() {
                debug_subtext("S=0");
            },
            stepon_1 = ravine_triggered(),
            stepon_2 = ravine_triggered(),
            stepon_3 = ravine_triggered(),
            stepon_4 = ravine_triggered(),
            stepon_5 = ravine_triggered(),
            stepon_6 = ravine_triggered(),
            diamon_eyes = @install() {
                if(ROOM.WITH_FLOWER_TRIGGER) {
                    face(ROOM.FLOWER_GATE, SOUTH);
                    animate(ROOM.FLOWER_GATE, ONCE, SLASH_1);
                }
            },
            exit_east = @install() {
                map_transition(east_inbetwixx, west_2, EAST);
            },
            exit_north = @install() {
                fog_wall_outside(True, SOUTH);

                map_transition(north_inbetwixx, south, NORTH);
            },
            exit_west_2_east = @install() {
                map_transition(northwest_inbetwixx, east, WEST);
            },
            exit_west_1_exit = @install() {
                map_transition(west_inbetwixx, east_2, WEST);
            },
            stepon_12 = @install() {
                debug_subtext("S=12");
            },
            stepon_13 = @install() {
                debug_subtext("S=13");
            },
            stepon_14 = @install() {
                debug_subtext("S=14");
            },
            stepon_15 = @install() {
                debug_subtext("S=15");
            },

            stepon_16 = @install() {
                debug_subtext("S=16");
            },
            stepon_17 = @install() {
                debug_subtext("S=17");
            },
            stepon_18 = @install() {
                debug_subtext("S=18");
            },
            stepon_19 = @install() {
                debug_subtext("S=19");
            }
        }

        enum b_trigger {
            wall_2 = @install() {
                _axe2_wall(0x00);
            },
            wall_1 = @install() {
                _axe2_wall(0x01);
            },
            gourd_2_1__3_water = @install() {
                debug_subtext("B=2");
                _loot_chest(0x06, WATER, 0d03);
            },
            gourd_1_1__2_water = @install() {
                debug_subtext("B=3");
                _loot_chest(0x05, WATER, 0d02);
            },
            gourd_1_2__3_limestone = @install() {
                debug_subtext("B=4");
                _loot_chest(0x07, LIMESTONE, 0d03);
            },
            gourd_1_3__4_wax = @install() {
                debug_subtext("B=5");
                _loot_chest(0x08, WAX, 0d04);
            },
            sniff__1_ethanol_3 = @install() {
                debug_subtext("B=6");
                _loot(0x09, ETHANOL, 0d01, 0d03);
            },
            sniff__1_ethanol_2 = @install() {
                debug_subtext("B=7");
                _loot(0x0a, ETHANOL, 0d01, 0d02);
            },
            sniff__1_roots_1 = @install() {
                debug_subtext("B=8");
                _loot(0x0b, ROOTS, 0d01, 0d01);
            },
            sniff__1_roots_3 = @install() {
                debug_subtext("B=9");
                _loot(0x0c, ROOTS, 0d01, 0d03);
            },

            sniff__1_roots = @install() {
                debug_subtext("B=10");
                _loot(0x0d, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots_2 = @install() {
                debug_subtext("B=11");
                _loot(0x0e, ROOTS, 0d01, 0d02);
            },
            sniff__1_limestone_2 = @install() {
                debug_subtext("B=12");
                _loot(0x0f, LIMESTONE, 0d01, 0d02);
            },
            sniff__1_limestone_1 = @install() {
                debug_subtext("B=13");
                _loot(0x10, LIMESTONE, 0d01, 0d01);
            },
            sniff__1_wax_2 = @install() {
                debug_subtext("B=14");
                _loot(0x11, WAX, 0d01, 0d02);
            },
            sniff__1_wax_2 = @install() {
                debug_subtext("B=15");
                _loot(0x12, WAX, 0d01, 0d02);
            },
            sniff__1_water_1 = @install() {
                debug_subtext("B=16");
                _loot(0x13, WATER, 0d01, 0d01);
            },
            sniff__1_vinegar_1 = @install() {
                debug_subtext("B=17");
                _loot(0x14, VINEGAR, 0d01, 0d01);
            },
            sniff__1_vinegar_1 = @install() {
                debug_subtext("B=18");
                _loot(0x15, VINEGAR, 0d01, 0d01);
            },
            sniff__1_bone_1 = @install() {
                debug_subtext("B=19");
                _loot(0x16, BONE, 0d01, 0d01);
            },
        }

        fun init_room() {
            default_init_room(True, True);

            subtext("Inbetwixx");
        }

        fun intro() {
            // teleport(BOY, 0x0f, 0x47);
            teleport(DOG, 0x13, 0x49);

            if(SOULS_MEMORY.WITH_INTRO) {
                animate(DOG, ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);

                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

                sleep(0x50);
            }

            if(SOULS_MEMORY.WITH_STARTING_CLASS) {
                choose_starting_class();

                animate(DOG, ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);

                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

                choose_starting_item();
            }

            if(SOULS_MEMORY.WITH_INTRO) {
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
                sleep(0x30);
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
                sleep(0x40);
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
                sleep(0x15);
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

                animate(BOY, ONCE, ANIMATION_BOY.KNEEL);

                sleep(0x20);
                animate(DOG, ONCE, DEFAULT);
            }
        }

        @install()
        fun energy_core_triggered() {
            if(<ACTIVE> == <BOY>) {
                animate(BOY, ONCE, ANIMATION_BOY.LOOT);
                sleep(0x10);

                unlock(ENERGY_CORE);

                destroy(SCRIPT_OWNER);
            }
        }

        @install()
        @async()
        fun revealer_approached() {
            range_checker(ROOM.BRIDGE_REVEALER_ENTITY, <ACTIVE>, 0x20, 0x20, { ravine_triggered(); });
        }

        @install()
        fun revealer_triggered() {
            set(ROOM.BRIDGE_REVEALED);
            object[0x02] = 0x7e;
            sleep(0x29);
            destroy(ROOM.BRIDGE_REVEALER_ENTITY);
        }

        @install()
        fun debug_triggered() {
            if(False) {
                unlock(ALL);
            } else {
                unlock(WEAPONS);
                unlock(ARMOR);
                unlock(JAGUAR_RING);
                if(False) {
                    unlock(CHARMS);
                }
                unlock(CONSUMABLES);
                unlock(INGREDIENTS);
                unlock(TRADING_GOODS);
                unlock(MONEY);
                unlock(ALCHEMY);
                
                // unlock(SPEAR_1);
                unlock(AXE_2);

                set(FLAG.REVEALER);
                MEMORY.SELECTED_ALCHEMY_0 = ALCHEMY_INDEX.REVEALER;
                set(FLAG.LEVITATE);
                MEMORY.SELECTED_ALCHEMY_1 = ALCHEMY_INDEX.LEVITATE;
                set(FLAG.HARD_BALL);
                MEMORY.SELECTED_ALCHEMY_2 = ALCHEMY_INDEX.HARD_BALL;

                set(FLAG.ATLAS);
                MEMORY.SELECTED_ALCHEMY_3 = ALCHEMY_INDEX.ATLAS;
                set(FLAG.DEFEND);
                MEMORY.SELECTED_ALCHEMY_4 = ALCHEMY_INDEX.DEFEND;

                SOULS_MEMORY.BOMB_ENABLED = True;
                SOULS_MEMORY.MARIO_YUMP_ENABLED = True;
                SOULS_MEMORY.ISAAC_TEARS_ENABLED = True;
                SOULS_MEMORY.PUPPER_ENABLED = True;
                update_debug_menu();
            }

            if(SOULS_MEMORY.WITH_DEBUG_ENTITY_ALCHEMY_SELECTION) {
                select_alchemy();
            }
            
            destroy(SCRIPT_OWNER);
        }
        
        @install()
        fun trigger_enter() {
            add_debug_entity(0d16, 0d63, reference(debug_triggered));

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // center
                add_enemy(FLOWER_PURPLE, 0d52, 0d79);

                // north
                add_enemy(BUZZARD_1, 0d29, 0d35);

                // east
                // add_enemy(FLOWER_PURPLE, 0x59, 0x4f);
                add_enemy(FLOWER_PURPLE, 0x4d, 0x4a);
                ROOM.FLOWER_GATE = <LAST_ENTITY>;

                // south
                add_enemy(FLOWER_PURPLE, 0d28, 0d109);

                add_enemy(FLOWER_PURPLE, 0d36, 0d96);

                add_enemy(FLOWER_PURPLE, 0x2a, 0x56);
            }

            if!(ROOM.BRIDGE_REVEALED) {
                add_enemy(REVEALER_TARGET_ENTITY, 0x24, 0x1a);
                ROOM.BRIDGE_REVEALER_ENTITY = <LAST_ENTITY>;

                special_script(REVEALER, reference(revealer_triggered));
                revealer_approached();
            } else {
                revealer_triggered();
            }

            init_room();

            if!(FLAG.IN_ANIMATION) {
                if!(SOULS_MEMORY.INTRO_WATCHED) {
                    set(SOULS_MEMORY.INTRO_WATCHED);

                    subtext("`The Missadventures of Vex´");

                    intro();

                    subtext("v0.7.0 - by r.bin");
                }
                
                // code(0xa3, 0x18, "// (a3) CALL 'Prepare room change? North exit/south entrance outdoor-indoor?' (0x26)"); // TODO: 4x4 combinations, not 4
                // 19=ww, 1a=Ww, 1b=wn, 1c=ws, 1d=ee, 1e=Ee, 1f=EN
                // 20=ES, 21=SS, 22=Ss, 23=sW, 24=SW, 25=SE, 26=NN, 27=NN, 28=NE, 29=NW, 2a=NS, 2b=Ns, 2c=ns, 2d=ss

                // load_map(0x05, 0x0f, 0x47);
            }

            bonfire(0d49, 0d53, SOULS_MEMORY.BONFIRE_INBETWIXX);
            bomb_wall_trigger(0x01, 0x01, 0d63, 0d63);
            bomb_wall_trigger(0x00, 0x10, 0d64, 0d99);

            // object[0x02] = 0x01; // show bridge
            // object[0x01] = 0x01; // open wall_1
            // object[0x00] = 0x01; // open wall_2
            // object[0x04] = 0x01; // block exit_east_left
            // object[0x03] = 0x01; // block exit_east_right
            // object[0x05] = 0x01; // block gourd_1_1
            // object[0x07] = 0x01; // block gourd_1_2
            // object[0x08] = 0x01; // block gourd_1_3
            // object[0x06] = 0x01; // block gourd_2_1
            // sniff spots

            player_message(0d30, 0d75, reference(@install() {
                player_message_triggered();

                subtext("try rolling");
            }));

            if(False) {
                destroy(DOG);
                add_enemy(BOXER_1, 0x13, 0x47);
                // attach_script(LAST_ENTITY, 0x100, reference(@install() { if(dead(<SCRIPT_OWNER>)) { subtext("true"); } else { subtext("false"); } }));
            }
        }
    };
};

area north_inbetwixx() {
    map north_inbetwixx(HALLS_EXTERIOR) {
        // sniff=vanilla
        
        enum entrance {
            north = entrance(0x41, 0x03, SOUTH),
            south = entrance(0x45, 0x41, NORTH),
        }

        enum soundtrack {
            default = soundtrack(WIND_AMBIENT_BIRDS_2, 0xff),
        }

        fun show_credits() {
            control(NONE);

            outro_stats(SOULS_MEMORY.PROGRESS_COUNTER, SOULS_MEMORY.BOSSES_DEFEATED_COUNTER, SOULS_MEMORY.COLLECTIBLE_COUNTER);
            
            outro_text_box("Created by", "[LF][LF]twitch.tv/ps3003");

            outro_text_box("Shoutouts Devs/Designers", "[LF][LF]twitch.tv/Black_Sliver[LF](evermizer.com)[LF][LF]twitch.tv/skarsnikus[LF](Evermore hacking)[LF][LF]twitch.tv/BarbarousKing[LF](Lunar Magic Streams)[LF][LF]twitch.tv/Dennsen86[LF](Lunar Magic Streams)");

            outro_text_box("Shoutouts Players", "[LF][LF]twitch.tv/its_cliqz[LF][LF]twitch.tv/solarcell007");

            outro_text_box("", "[LF][LF]The End", True);

            sleep(0d600);

            return_to_bonfire();
        }
        fun outro_triggered() {
            question("[SLOW]I'm afraid there is no final boss, yet.[B]After starting the credits you can't return back to the game.[B]Exit the games and roll the credits?[CHOICE]credits…[CHOICE]leave…");

            if(MEMORY.QUESTION_ANSWER == 0d0) {
                show_credits();
            } else {
                map_transition(inbetwixx, north, SOUTH);
            }

            end();
        }

        enum BOSS {
            DEBUG = True,

            ID = memory(WORD, TEMP),
            PROGRESS = memory(FLAG, TEMP),

            HP = 0d200,

            RNG = memory(WORD, TEMP),
            CASTING = memory(FLAG, TEMP),

            ESTUS_FLASK = memory(WORD, TEMP),
            ESTUS_FLASK_TILT = memory(FLAG, TEMP),
            ESTUS_CHARGES = 0d2,
            HEAL_THRESHOLD = 0d20,
            ESTUS_HEAL = 0d20,
        }

        enum stepon_trigger {
            exit_south = @install() {
                debug_subtext("S=0");

                fog_wall_inside(True, NORTH);

                map_transition(inbetwixx, north, SOUTH);
            },
            exit_north = @install() {
                debug_subtext("S=1");

                fog_wall_inside(!SOULS_MEMORY.DEAD_GIDEON, SOUTH);

                show_credits();
            },
        }

        enum b_trigger {
            sniff__1_ash = @install() {
                debug_subtext("B=0");
                _loot(0x0f, ASH, 0d01, 0d00);
            },
            sniff__1_ash_2 = @install() {
                debug_subtext("B=1");
                _loot(0x0e, ASH, 0d01, 0d02);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=2");
                _loot(0x0d, ASH, 0d01, 0d00);
            },
            sniff__1_ethanol_3 = @install() {
                debug_subtext("B=3");
                _loot(0x0c, ETHANOL, 0d01, 0d03);
            },
            sniff__1_ethanol = @install() {
                debug_subtext("B=4");
                _loot(0x0b, ETHANOL, 0d01, 0d00);
            },
            sniff__1_ethanol_1 = @install() {
                debug_subtext("B=5");
                _loot(0x0a, ETHANOL, 0d01, 0d01);
            },
            sniff__1_bone_1 = @install() {
                debug_subtext("B=6");
                _loot(0x09, BONE, 0d01, 0d01);
            },
            sniff__1_bone_1 = @install() {
                debug_subtext("B=7");
                _loot(0x08, BONE, 0d01, 0d01);
            },
            sniff__1_bone_1 = @install() {
                debug_subtext("B=8");
                _loot(0x07, BONE, 0d01, 0d01);
            },
            sniff__1_limestone_2 = @install() {
                debug_subtext("B=9");
                _loot(0x06, LIMESTONE, 0d01, 0d02);
            },

            sniff__1_limestone_1 = @install() {
                debug_subtext("B=10");
                _loot(0x05, LIMESTONE, 0d01, 0d01);
            },
            sniff__1_limestone = @install() {
                debug_subtext("B=11");
                _loot(0x04, LIMESTONE, 0d01, 0d00);
            },
            sniff__1_brimstone_1 = @install() {
                debug_subtext("B=12");
                _loot(0x03, BRIMSTONE, 0d01, 0d01);
            },
            sniff__1_brimstone_2 = @install() {
                debug_subtext("B=13");
                _loot(0x02, BRIMSTONE, 0d01, 0d02);
            },
            sniff__1_brimstone = @install() {
                debug_subtext("B=14");
                _loot(0x01, BRIMSTONE, 0d01, 0d00); // same as B=15
            },
            sniff__1_brimstone = @install() {
                debug_subtext("B=15");
                _loot(0x01, BRIMSTONE, 0d01, 0d00); // same as B=14
            },
            sniff__1_brimstone_1 = @install() {
                debug_subtext("B=16");
                _loot(0x00, BRIMSTONE, 0d01, 0d01);
            },
        }

        fun stagger() {
            animate(<0x2834>, ONCE_FREEZE, ANIMATION_BOY.LOOT);
            sleep(0d10);
            animate(<0x2834>, PAUSE, DEFAULT);

            _add_enemy(PLACEHOLDER, <0x2834>[X], <0x2834>[Y]);
            <0x2836> = <LAST_ENTITY>;
            attach_script(LAST_ENTITY, B, reference(@install() {
                subtext("!");
                
                animate(BOY, ONCE, ANIMATION_ALL.SLASH_3);

                destroy(<0x2836>);
            }));

            while(<0x2834>[FLAGS_1] & ATTRIBUTE_FLAGS.IN_ANIMATION) {
                yield();
            }

            destroy(<0x2836>);
        }

        @install()
        fun cast_small() {
            if(BOSS.DEBUG) {
                debug_subtext("cast");
            }

            animate(BOSS.ID, ONCE, DEFAULT);
            sleep(0d10);
            animate(BOSS.ID, ONCE, CAST);

            val rng = arg[0x10];
            val spell_id = arg[0x12];
            val spell_target = arg[0x14];

            rng = randrange(0d10);

            if(rng == 0d0) {
                spell_id = CAST.CRUSH;
            } else if(rng == 0d1) {
                spell_id = CAST.STING;
            } else {
                spell_id = CAST.FLASH;
            }

            cast_team(BOSS.ID, spell_id, 0d1);

            sleep(0d30);
        }

        @install()
        fun prepare_casting() {
            BOSS.CASTING = True;

            animate(BOSS.ID, ONCE, DEFAULT);
            sleep(0d10);
            animate(BOSS.ID, ONCE, CAST);
            sleep(0d30);
        }

        @install()
        @async()
        fun place_spark() {
            _add_enemy(SPARK, BOSS.ID[X], BOSS.ID[Y]);
            attach_to_script(LAST_ENTITY);

            sleep(0d600);

            if(alive(<SCRIPT_OWNER>)) {
                attribute(SCRIPT_OWNER, ROOT, True);

                if(True) {
                    sound(TESLA);
                    shoot_entity_entity(SCRIPT_OWNER, LIGHTNING, BOSS.ID, 0d30, 0d0);

                    sleep(0d30);
                }

                sleep(0d30);

                if(alive(<SCRIPT_OWNER>)) {
                    ai_move_tesla(BOSS.ID, <BOY>);
                }
            }

            destroy(SCRIPT_OWNER);
        }
        @install()
        @async()
        fun place_mosquito() {
            _add_enemy(MOSQUITO, BOSS.ID[X], BOSS.ID[Y]);
            attach_to_script(LAST_ENTITY);

            attach_script(LAST_ENTITY, DEATH, reference(@install() {
                if((BOSS.ID[X] >= MEMORY.CAMERA_X_MIN) && ((BOSS.ID[X] <= MEMORY.CAMERA_X_MAX)) && (BOSS.ID[Y] >= MEMORY.CAMERA_Y_MIN) && ((BOSS.ID[Y] <= MEMORY.CAMERA_Y_MAX))) {
                    cast(SCRIPT_OWNER, BOSS.ID, FIREBALL, 0d20);
                } else {
                    cast(SCRIPT_OWNER, BOY, FIREBALL, 0d10);
                }
            }));

            sleep(0d600);

            if(alive(<SCRIPT_OWNER>)) {
                cast(SCRIPT_OWNER, BOY, FIREBALL, 0d10);
            }

            destroy(SCRIPT_OWNER);
        }

        @install()
        fun choose_move_set() {
            BOSS.RNG = 0d0;
            BOSS.CASTING = False;

            while!(BOSS.CASTING) {
                BOSS.RNG = randrange(0d6);

                if((BOSS.RNG == 0d0) && (SOULS_MEMORY.DEAD_MONSTRO)) {
                    prepare_casting();

                    arg[0x10] = randrange(0d2);

                    if(arg[0x10] == 0d0) {
                        animate(BOSS.ID, ONCE, ANIMATION_ENEMY.MAGMAR_ENTER);
                        ai_move_projectile_splash(BOSS.ID, ONION);
                    } else {
                        ai_move_projectile_puke(BOSS.ID, ONION, <BOY>, 0d4);
                    }

                } else if((BOSS.RNG == 0d1) && (SOULS_MEMORY.DEAD_DARK_ONE)) {
                    prepare_casting();

                    arg[0x10] = randrange(0d3);

                    if(arg[0x10] == 0d0) {
                        animate(BOSS.ID, ONCE, ANIMATION_ENEMY.MAGMAR_ENTER);
                        ai_move_charge_right(BOSS.ID, <BOY>, 0d8, 0d2);
                    } else {
                        control(BOSS.ID, True);
                        face(BOSS.ID, SOUTH);
                        ai_move_projectile_x(BOSS.ID, ONION, 0d70);
                        sleep(0d40);
                        ai_move_projectile_plus(BOSS.ID, ONION, 0d70);
                        control(BOSS.ID, False);
                    }

                } else if((BOSS.RNG == 0d2) && (SOULS_MEMORY.DEAD_SIDESCROLLER)) {
                    prepare_casting();

                    arg[0x10] = randrange(0d3);

                    if(arg[0x10] == 0d0) {
                        ai_move_projectile_ring(BOSS.ID, CITRON, 0d75, 0x40, 0d5, 0d1, False, True);
                    } else {
                        sound(PROJECTILE_SHOOTING);
                        shoot_entity_entity(BOSS.ID, CITRON, BOY, 0x10, 0xff);
                    }
                } else if((BOSS.RNG == 0d3) && (SOULS_MEMORY.DEAD_BOWSER)) {
                    prepare_casting();

                    arg[0x10] = 0d1 + randrange(0d8);

                    ai_move_projectile_toss(BOSS.ID, SPEAR, <BOY>, arg[0x10]);
                } else if((BOSS.RNG == 0d4) && (SOULS_MEMORY.DEAD_SQUIDMAR)) {
                    prepare_casting();

                    animate(BOSS.ID, ONCE, ANIMATION_BOY.KNEEL);
                    place_spark();
                } else if((BOSS.RNG == 0d5) && (SOULS_MEMORY.DEAD_ARENA_MOSQUITO)) {
                    prepare_casting();

                    animate(BOSS.ID, ONCE, ANIMATION_BOY.KNEEL);
                    place_mosquito();
                } else {
                    if(BOSS.DEBUG) {
                        // debug_memory(BOSS.RNG, 0d0);
                        // debug_subtext("reroll");
                        nop();
                    }
                    yield();
                }
            }
        }

        fun use_estus() {
            control(BOSS.ID, True);
            face(BOSS.ID, SOUTH);

            animate(BOSS.ID, ONCE, CAST);

            if(BOSS.ESTUS_FLASK > 0d0) {
                BOSS.ESTUS_FLASK--;

                cast(BOSS.ID, BOSS.ID, HEAL, BOSS.ESTUS_HEAL);
            } else {
                BOSS.ESTUS_FLASK_TILT = True;

                cast(BOSS.ID, BOSS.ID, HEAL, 0d0);
            }

            wait(BOSS.ID);

            control(BOSS.ID, False);
        }

        fun random_cast() {
            if(BOSS.DEBUG) {
                debug_subtext("start cast");
            }

            if!(BOSS.ESTUS_FLASK_TILT) {
                BOSS.RNG = randrange(0d8);

                if((BOSS.RNG == 0d0) && (BOSS.ID[HP] < (BOSS.HP - BOSS.HEAL_THRESHOLD))) {
                    use_estus();
                }
            }

            // cast_small();
            choose_move_set();

            if(rand(0x1) > 0d0) {
                // cast_small();
                choose_move_set();
            }
        }

        @install()
        fun boss_triggered() {
            BOSS.PROGRESS = False;

            souls_boss_defeated(DEAD_GIDEON, REWARD_GIDEON);
        }

        @install()
        fun boss_triggered_init() {
            if!(BOSS.PROGRESS) {
                BOSS.PROGRESS = True;

                attach_script(BOSS.ID, DEATH, reference(boss_triggered));
                push_music(BOSS);

                while(alive(BOSS.ID)) {
                    while((BOSS.ID[FLAGS_7] & ATTRIBUTE_FLAGS.KNOCKBACK) > 0d0) {
                        yield();
                    }
                    
                    if(True) {
                        random_cast();
                    } else {
                        animate(BOSS.ID, ONCE, DEFAULT);
                        sleep(0d10);
                        animate(BOSS.ID, ONCE, CAST);
                        sleep(0d30);

                        animate(BOSS.ID, ONCE, ANIMATION_ENEMY.MAGMAR_ENTER);
                        // ai_move_charge_right(BOSS.ID, <BOY>, 0d8, 0d2);
                        ai_move_projectile_splash(BOSS.ID, ONION);
                    }

                    sleep(randrange(0d300));
                }
            }
        }

        fun add_boss(x, y) {
            add_enemy(BOY_BLACK, x, y);
            BOSS.ID = <LAST_ENTITY>;

            <LAST_ENTITY>[HP] = BOSS.HP;
            BOSS.ESTUS_FLASK = BOSS.ESTUS_CHARGES;

            attach_script(LAST_ENTITY, DAMAGE, reference(boss_triggered_init));
            animate(LAST_ENTITY, ONCE_FREEZE, DEFAULT);
        }

        @install()
        @async()
        fun gideon_speech() {
            dialog("I knew you'd come.[B]");
        }

        fun place_masks(position) {
            if(position == 0x01) {
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x3d, 0x04);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_2, 0x46, 0x04);

                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_3, 0x42, 0x0b);
            } else if(position == 0x02) {
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x38, 0x04);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_2, 0x4c, 0x04);
            } else if(position == 0x03) {
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x32, 0x14);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_2, 0x32, 0x24);

                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_3, 0x52, 0x14);
                add_placeholder(ANIMATION_PLACEHOLDER.AEGIS_MASK_1, 0x52, 0x24);
            }
        }

        fun trigger_enter() {
            if!(SOULS_MEMORY.WITH_ENDBOSS) {
                fade_in();
                outro_triggered();
            }

            // place_masks(0x01);

            if!(SOULS_MEMORY.DEAD_GIDEON) {
                // attribute(BOY, INVINCIBLE_TEMP, True);

                if(False) {
                    <BOY>[HP] = SYSTEM.HP_MAX;
                    
                    // SOULS_MEMORY.DEAD_MONSTRO = True;
                    // SOULS_MEMORY.DEAD_DARK_ONE = True;
                    // SOULS_MEMORY.DEAD_BOWSER = True;
                    // SOULS_MEMORY.DEAD_SQUIDMAR = True;
                    SOULS_MEMORY.DEAD_ARENA_MOSQUITO = True;
                }

                add_boss(0d66, 0d35);
                
                gideon_speech();
            }

            default_init_room(True, True);
        }
    };
};

area west_inbetwixx() {
    map west_inbetwixx(EAST_JUNGLE) {
        // sniff=vanilla

        enum entrance {
            north = entrance(0x12, 0x09, SOUTH),
            east_1 = entrance(0x6d, 0x11, WEST),
            east_2 = entrance(0x6d, 0x23, WEST),
            east_3 = entrance(0x6d, 0x35, WEST),
            west = entrance(0x01, 0x37, EAST),
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            BRANCH_USED = memory(FLAG, SRAM),

            FAKE_SLASH_GRASS_X = memory(WORD, TEMP),
            FAKE_SLASH_GRASS_Y = memory(WORD, TEMP),
        }

        enum BOSS {
            DEBUG = False,

            PROGRESS = memory(FLAG, TEMP),

            ID_OWL_1 = memory(WORD, TEMP),
            ID_OWL_2 = memory(WORD, TEMP),

            TRANSFORM_DISTANCE = 0x10
        }

        fun fog_wall(exit_direction:DIRECTION) {
            if(BOSS.PROGRESS) {
                fog_wall_inside(!SOULS_MEMORY.DEAD_OWL_BOY, exit_direction);
            }
        }

        enum stepon_trigger {
            exit_east_1 = @install() {
                fog_wall(NONE); // WEST

                map_transition(west_inbetwixx, east_3, EAST);
            },
            exit_east_3 = @install() {
                fog_wall(NONE); // WEST

                map_transition(west_inbetwixx, east_1, EAST);
            },
            exit_east_2 = @install() {
                fog_wall(NONE); // WEST

                map_transition(inbetwixx, west_1, EAST);
            },
            exit_west = @install() {
                fog_wall(NONE); // EAST

                map_transition(west_hut_outside, east, WEST);
            },
            exit_north = @install() {
                fog_wall(SOUTH);

                map_transition(volcano, south, NORTH);
            }
        }

        enum b_trigger {
            sniff__1_clay = @install() {
                debug_subtext("B=0");
                _loot(0x0a, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=1");
                _loot(0x09, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=2");
                _loot(0x08, CLAY, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=3");
                _loot(0x07, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=4");
                _loot(0x06, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=5");
                _loot(0x05, ROOTS, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=6");
                _loot(0x04, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=7");
                _loot(0x03, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=8");
                _loot(0x0c, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=9");
                _loot(0x0b, WATER, 0d01, 0d00);
            },

            sniff__1_roots = @install() {
                debug_subtext("B=10");
                _loot(0x02, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=11");
                _loot(0x01, ROOTS, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=12");
                _loot(0x00, WATER, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=13");
                _loot(0x0d, CLAY, 0d01, 0d00); // same as B=16
            },
            sniff__1_water = @install() {
                debug_subtext("B=14");
                _loot(0x0c, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=15");
                _loot(0x0b, WATER, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=16");
                _loot(0x0d, CLAY, 0d01, 0d00); // same as B=13
            },
        }

        @install()
        fun boss_defeated() {
            souls_boss_defeated(DEAD_OWL_BOY, REWARD_OWL_BOY);
        }

        @install()
        fun message_triggered() {
            player_message_triggered();

            subtext("prisoner ahead and then bonfire!");
        }

        @install()
        @async()
        fun grabby_owls() {
            add_transforming_owls(0x2d, 0x21, True, 0x47, 0x42, False, {
                transform_owls(arg[0x0e], arg[0x0c]);

                _add_enemy(BOY_BLACK, arg[0x0c][X], arg[0x0c][Y]);
                attach_script(LAST_ENTITY, DEATH, reference(boss_defeated));

                BOSS.PROGRESS = True;
                push_music(BOSS);

                end();
            });
        }

        fun trigger_enter() {
            add_souls_npc_alchemist_speed(0d91, 0d65);
            
            if!(ROOM.BRANCH_USED) {
                branch_lady(0x58, 0x0f, WEST, reference(@install() {
                    guard_branch_lady(ROOM.BRANCH_USED);

                    dog_lady_dialog_0();
                }));
            } else if(NPC_DOG_LADY.PROGRESS == 0d0) {
                add_souls_npc_dog_lady(0x58, 0x0f);
            }

            if!(SOULS_MEMORY.DEAD_OWL_BOY) {
                grabby_owls();
            }

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // inside
                add_enemy(FLOWER_PURPLE, 0x1e, 0x2c);

                // add_enemy(RAT, 0d51, 0d43); // backup

                // east
                add_enemy(TUMBLING_WEED, 0d77, 0d36);

                // west
                add_enemy(FLOWER_PURPLE, 0d20, 0d61);

                // cliff
                // add_enemy(OWL_BLACK, 0d97, 0d55, INACTIVE);
            }

            init_map(0x00, 0x06, 0x6e, 0x52);
            default_init_room(True, True);
            subtext("West Inbetwixx");

            player_message(0d23, 0d66, reference(message_triggered));
        }
    };

    map west_hut_outside(STRONGHEART_EXTERIOR) {
        enum entrance {
            hut = entrance(0x13, 0x13, SOUTH), // TODO: 13/15
            east = entrance(0x25, 0x12, WEST),

            backdoor = entrance(0d15, 0d16, WEST),
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum stepon_trigger {
            stepon_0 = @install() {
                map_transition(west_hut_inside, door, NORTH);
            },
            stepon_1 = @install() {
                map_transition(west_inbetwixx, west, EAST);
            }
        }

        fun trigger_enter() {
            default_init_room(True, True);

            add_enemy(PLACEHOLDER, 0d13, 0d18);
            attach_script(LAST_ENTITY, B, reference(@install() {
                sound(WEIRD_SOUND);

                map_transition(potato_room, stairs, NONE);
            }));
        }
    };

    map potato_room(EBON_CELLAR) {
        // chests=vanilla

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum entrance {
            stairs = entrance(0x29, 0x0d, WEST)
        }

        enum stepon_trigger {
            exit_stairs = @install() {
                map_transition(west_hut_outside, backdoor, EAST);
            },
        }

        enum b_trigger {
            chest_1__3_feather = @install() {
                debug_subtext("B=0");
                _loot_chest(0x00, FEATHER, 0d03);
            },
            chest_2__4_brimstone = @install() {
                debug_subtext("B=1");
                _loot_chest(0x01, BRIMSTONE, 0d04);
            },
            chest_3__2_acorns = @install() {
                debug_subtext("B=2");
                _loot_chest(0x02, ACORNS, 0d02);
            },
        }

        fun trigger_enter() {
            default_init_room(True, False);
        }
    };

    map west_hut_inside(STRONGHEART) {
        enum entrance {
            door = entrance(0x12, 0x23, NORTH)
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            CLUE_1 = memory(FLAG, SRAM),
            CLUE_2 = memory(FLAG, SRAM),
        }

        enum stepon_trigger {
            stepon_0 = @install() {
                map_transition(west_hut_outside, hut, SOUTH);
            }
        }

        enum b_trigger {
            gourd_1__1_oil = @install() {
                fake_loot_gourd();

                object[0x00] = 0x01; // unload gourd_1
                custom_reward(ISAAC_LETTER);

                dialog("[SLOW]The letter seems to be old, it's barely readable.[B]But it clearly states the phrases `To Maggy´, `child´ and something about leaving.[B]Based on the coat of arms the origin seems to be a town.[B]Maybe I can find more clues there.[B]");
            },
            gourd_2__1_wax = @install() {
                fake_loot_gourd();

                object[0x02] = 0x01; // unload gourd_2
                subtext("Locked away childrens toys.");
                set(ROOM.CLUE_1);
            },
            gourd_3__1_wax = @install() {
                fake_loot_gourd();

                object[0x01] = 0x01; // unload gourd_3
                subtext("Cheap religious artifacts.");
                set(ROOM.CLUE_2);
            },
        }

        @install()
        fun trap_door() {
            if!(SOULS_MEMORY.WITH_SIDE_QUESTS) {
                error_unknown(NONE);
                end();
            }
            if((!ROOM.CLUE_1) || (!ROOM.CLUE_2)) {
                fake_b();
                end();
            }

            sound(WEIRD_SOUND);

            animate_boy_kneel();
            
            question("[SLOW]A trap door under the rug.[CHOICE]Enter…[CHOICE]Leave…");

            if(MEMORY.QUESTION_ANSWER == 0d0) {
                face(BOY, SOUTH);
                animate(BOY, LOOP, ANIMATION_BOY.FALL_2);
                sleep(0d20);

                map_transition(basement_0_start, center, NONE);
            } else {
                animate(BOY, ONCE, DEFAULT);
            }
        }

        fun trigger_enter() {
            if(SOULS_MEMORY.ISAAC_LETTER) {
                object[0x00] = 0x01; // unload gourd_1
            }
            if(ROOM.CLUE_1) {
                object[0x02] = 0x01; // unload gourd_2
            }
            if(ROOM.CLUE_2) {
                object[0x01] = 0x01; // unload gourd_3
            }

            add_enemy(PLACEHOLDER, 0x0f, 0x12);
            attach_script(LAST_ENTITY, B, reference(trap_door));

            default_init_room(True, False);
        }
    };
};

area altus_plateau_entry() {
    enum AREA_ALTUS_PLATEAU {
        DEFAULT_MUSIC = MUSIC.JUNGLE_AMBIENT_BIRDS,

        ENTRANCE_UNLOCKED = memory(FLAG, SRAM),
    }

    map volcano(VOLCANO_PATH) {
        // gourd=vanilla
        // sniff=vanilla

        enum entrance {
            cutscene_north_1 = entrance(0x4a, 0x38, NONE),
            cutscene_north_2 = entrance(0x5f, 0x1b, NONE),
            east = entrance(0x6d, 0x83, WEST), // 0x6b, 0x83
            south = entrance(0x1b, 0x9d, NORTH),

            cave_west = entrance(0x0b, 0x70, SOUTH),
            cave_center = entrance(0x3f, 0x4a, SOUTH),
            cave_east = entrance(0x4d, 0x6a, SOUTH),

            cave_gauge = entrance(0x5f, 0x16, SOUTH),

            cave_2_2 = entrance(0x44, 0x23, SOUTH),
        }

        enum soundtrack {
            default = soundtrack(AREA_ALTUS_PLATEAU.DEFAULT_MUSIC, 0xff)
        }

        enum ROOM {
            STONE_MOVED = memory(FLAG, SRAM),
            STONE_OFFSET = 0d8 * 0d2,
        }

        fun pressure_plate_0_1() {
            generic_act1_volcano_pressure_plate(0x3c, 0x3f, 0x05, 0x02, 0d93, 0d59, 0d2);
        }
        fun pressure_plate_0_2() {
            if(ROOM.STONE_MOVED) {
                generic_act1_volcano_pressure_plate(0x44, 0x41, 0x06, 0x01, 0d61, 0d30, 0d4);
            }
        }
        @install()
        @async()
        fun exit_north() {
            sleep(0d75);
            map_transition(well, crash, NONE);
        }
        fun pressure_plate_1_1() {
            exit_north();
            generic_act1_volcano_pressure_plate(0x30, 0x39, 0x04, 0x01, 0d145, 0d00, 0d0);
        }
        fun pressure_plate_1_2() {
            generic_act1_volcano_pressure_plate(0x4e, 0x31, 0x03, 0x01, 0d74, 0d52, 0d0);
        }
        fun pressure_plate_2_1() {
            generic_act1_volcano_pressure_plate(0x3c, 0x27, 0x01, 0x01, 0d68, 0d27, 0d3);
        }
        fun pressure_plate_2_2() {
            generic_act1_volcano_pressure_plate(0x52, 0x25, 0x02, 0x01, 0d71, 0d49, 0d0);
        }
        fun pressure_plate_3_1() {
            generic_act1_volcano_pressure_plate(0x36, 0x1d, 0x07, 0x01, 0d59, 0d39, 0d3);
        }
        fun pressure_plate_3_2() {
            generic_act1_volcano_pressure_plate(0x52, 0x19, 0x00, 0x01, 0d66, 0d37, 0d1);
        }

        enum stepon_trigger {
            tunnel_gauge = @install() {
                debug_subtext("S=0");

                map_transition(cave_gauge, south, NORTH);
            },
            pressure_plate_1_2_right = @install() {
                debug_subtext("S=1");

                pressure_plate_1_2();
            },
            pressure_plate_1_2_left = @install() {
                debug_subtext("S=2");
                
                pressure_plate_1_2();
            },
            door_1_2_hole_0_2 = @install() {
                debug_subtext("S=3");

                generic_act1_volcano_cave_hole(0x46, 0x31, 0d74, 0d56);
            },
            pressure_plate_3_1_left = @install() {
                debug_subtext("S=4");
                
                pressure_plate_3_1();
            },
            cave_2_1_hole_0_1 = @install() {
                debug_subtext("S=5");

                generic_act1_volcano_cave_hole(0x2a, 0x35, 0d48, 0d60);
            },
            cave_2_1_hole_1_1 = @install() {
                debug_subtext("S=6");

                generic_act1_volcano_cave_hole(0d52, 0d36, 0d52, 0d48);
            },
            cave_4_hole_0_2 = @install() {
                debug_subtext("S=7");

                generic_act1_volcano_cave_hole(0d62, 0d18, 0d74, 0d56, True);
            },
            cave_5_hole_3 = @install() {
                debug_subtext("S=8");

                generic_act1_volcano_cave_hole(0x4a, 0x09, 0d72, 0d16);
            },
            cave_4_hole_1_2 = @install() {
                debug_subtext("S=9");

                generic_act1_volcano_cave_hole(0d76, 0d23, 0d82, 0d42, True);
            },

            cave_2_2_hole_1_2 = @install() {
                debug_subtext("S=10");

                map_transition(pipe_pit, south, NORTH);
                // generic_act1_volcano_cave_hole(0x44, 0x23, 0d82, 0d42);
            },
            exit_south = @install() {
                debug_subtext("S=11");

                map_transition(west_inbetwixx, north, SOUTH);
            },
            cave_east = @install() {
                debug_subtext("S=12");

                map_transition(cave_shop, south, NORTH);
            },
            cave_west = @install() {
                debug_subtext("S=13");

                if(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED) {
                    map_transition(stairs, stairs_west_bottom, NORTH);
                } else {
                    error_wrong_side(SOUTH);
                }
            },
            cave_center = @install() {
                debug_subtext("S=14");

                map_transition(volcano_tower, south, NORTH);
            },
            exit_east = @install() {
                debug_subtext("S=15");

                map_transition(northwest_inbetwixx, west, EAST);
            },
            pressure_plate_2_2_right = @install() {
                debug_subtext("S=16");
                
                pressure_plate_2_2();
            },
            pressure_plate_3_2 = @install() {
                debug_subtext("S=17");
                
                pressure_plate_3_2();
            },
            pressure_plate_1_1 = @install() {
                debug_subtext("S=8");
                
                pressure_plate_1_1();
            },
            stepon_19 = @install() {
                debug_subtext("S=19");
            },

            pressure_plate_0_1_right = @install() {
                debug_subtext("S=20");
                
                pressure_plate_0_1();
            },
            pressure_plate_0_2_right = @install() {
                debug_subtext("S=21");
                
                pressure_plate_0_2();
            },
            pressure_plate_0_2_left = @install() {
                debug_subtext("S=22");
                
                pressure_plate_0_2();
            },
            stepon_23 = @install() {
                debug_subtext("S=23");
            },
            stepon_24 = @install() {
                debug_subtext("S=24");
            },
            pressure_plate_3_1_right = @install() {
                debug_subtext("S=25");
                
                pressure_plate_3_1();
            },
            stepon_26 = @install() {
                debug_subtext("S=26");
            },
            pressure_plate_2_2_left = @install() {
                debug_subtext("S=27");
                
                pressure_plate_2_2();
            },
            stepon_28 = @install() {
                debug_subtext("S=28");
            },
            pressure_plate_0_1_left = @install() {
                debug_subtext("S=29");

                pressure_plate_0_1();
            },

            pressure_plate_2_1 = @install() {
                debug_subtext("S=30");
                
                pressure_plate_2_1();
            },
        }

        enum b_trigger {
            guord_gauge = @install() {
                debug_subtext("B=0");
                _loot_chest(0x27, WATER, 0d01); // gauge
            },
            gourd_2 = @install() {
                debug_subtext("B=1");
                _loot_chest(0x0b, CLAY, 0d01);
            },
            gourd_3 = @install() {
                debug_subtext("B=2");
                _loot_chest(0x08, PETAL, 0d01);
            },
            gourd_5 = @install() {
                debug_subtext("B=3");
                _loot_chest(0x09, WATER, 0d01);
            },
            gourd_1 = @install() {
                debug_subtext("B=4");
                _loot_chest(0x0a, ROOTS, 0d01);
            },
            sniff__1_water = @install() {
                debug_subtext("B=5");
                _loot(0x0c, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=6");
                _loot(0x0d, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=7");
                _loot(0x0e, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=8");
                _loot(0x0f, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=9");
                _loot(0x10, WATER, 0d01, 0d00);
            },

            sniff__1_water = @install() {
                debug_subtext("B=10");
                _loot(0x11, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=11");
                _loot(0x12, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=12");
                _loot(0x13, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=13");
                _loot(0x14, WATER, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=14");
                _loot(0x15, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=15");
                _loot(0x16, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=16");
                _loot(0x17, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=17");
                _loot(0x18, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=18");
                _loot(0x19, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=19");
                _loot(0x1a, CLAY, 0d01, 0d00);
            },

            sniff__1_clay = @install() {
                debug_subtext("B=20");
                _loot(0x1b, CLAY, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=21");
                _loot(0x1d, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=22");
                _loot(0x1d, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=23");
                _loot(0x1e, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=24");
                _loot(0x1f, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=25");
                _loot(0x20, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=26");
                _loot(0x21, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=27");
                _loot(0x22, ROOTS, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=28");
                _loot(0x23, OIL, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=29");
                _loot(0x24, OIL, 0d01, 0d00);
            },

            sniff__1_ash = @install() {
                debug_subtext("B=30");
                _loot(0x25, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=31");
                _loot(0x26, ASH, 0d01, 0d00);
            },
            grass_non_sword = @install() {
                debug_subtext("B=32");

                vanilla_grass_cutter(0x05);
            },
        }

        @install()
        fun debug_triggered() {
            set(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED);

            destroy(SCRIPT_OWNER);
        }

        fun trigger_enter() {
            if(FLAG.DEBUG) {
                if!(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED) {
                    add_debug_entity(0x06, 0x78, reference(debug_triggered));
                }
            }

            add_levitate_stone(0d68, 0d65, reference(@install() {
                guard_levitate_stone(0d1);

                ROOM.STONE_MOVED = True;
            }));
            if(ROOM.STONE_MOVED) {
                <LAST_ENTITY>[X] += ROOM.STONE_OFFSET;
            }

            special_script(LEVITATE, reference(@install() {
                if(<SCRIPT_OWNER>[FLAGS_2] & ATTRIBUTE_FLAGS.INVINCIBLE_TEMP) {
                    end();
                }

                attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, True);

                if!(ROOM.STONE_MOVED) {
                    sleep(0d60);

                    ROOM.STONE_MOVED = True;

                    sleep(0d60);

                    while(arg[0x10] < ROOM.STONE_OFFSET) {
                        arg[0x10]++;

                        <SCRIPT_OWNER>[X]++;

                        sleep(0d3);
                    }

                    sleep(0d360 - 0d3 * ROOM.STONE_OFFSET);
                } else {
                    sleep(0d120);

                    while(arg[0x10] < ROOM.STONE_OFFSET) {
                        arg[0x10]++;

                        <SCRIPT_OWNER>[X]--;

                        sleep(0d3);
                    }

                    sleep(0d360 - 0d3 * ROOM.STONE_OFFSET);

                    ROOM.STONE_MOVED = False;
                    object[0x03] = 0x00; // open door_NW
                }

                attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, False);
            }));

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // path
                add_enemy(FLOWER_PURPLE, 0d31, 0d103);

                add_enemy(MONK, 0d79, 0d84);

                add_enemy(HEDGEHOG, 0d58, 0d67);

                // east
                add_enemy(FLOWER_PURPLE, 0d85, 0d115);

                // west
                add_enemy(HEDGEHOG, 0d19, 0d125);
                add_enemy(FLOWER_PURPLE, 0d17, 0d126);
            }

            default_init_room(True, True);

            if!(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED) {
                add_enemy(STONE_ROUND, 0d11, 0d114);
                attach_script(LAST_ENTITY, B, reference(@install() {
                    error_wrong_side(SOUTH);
                }));
            }
        }
    };

    area behind_volcano() {
        map volcano_tower(STERLING) {
            // gourd=vanilla
            // sniff=vannilla

            enum entrance {
                south = entrance(0x55, 0xf9, NORTH),
                platform = entrance(0x51, 0x2f, NORTH),

                bonfire = entrance(0d67, 0d159, NONE, { bonfire_wakeup(0d0, 0d8, -0d24, 0d0); }),

                crash = entrance(0d23, 0d249, NONE, { crash_both(); }),
            }

            enum soundtrack {
                default = soundtrack(WIND_AMBIENT_BIRDS, 0xff),
            }

            @install()
            fun trapdoor_3() {
                debug_subtext("S=10/11");

                object[0x05] = 0x03; // activate trapdoor_3

                if(CUSTOM_MEMORY.CURRENT_ARMOR_ARMLET == ARMOR_STATS.GLOVE_3_2) {
                    generic_fall_gomi(0d91, 0d191, 0d1640);
                } else {
                    generic_fall_gomi(0d91, 0d191, 0d1640, 0d5);
                }
            }
            @install()
            fun trapdoor_4() {
                debug_subtext("S=3/7");

                object[0x03] = 0x03; // activate trapdoor_4

                if(CUSTOM_MEMORY.CURRENT_ARMOR_ARMLET == ARMOR_STATS.GLOVE_3_2) {
                    generic_fall_gomi(0d43, 0d96, 0d1280);
                } else {
                    generic_fall_gomi(0d43, 0d96, 0d1280, 0d5);
                }
            }

            enum stepon_trigger {
                elevator_bottom = @install() {
                    debug_subtext("S=0");

                    generic_elevator_gomi(0x3e, 0xcf, 0x01, 0x01, 0d62, 0d76, 0x04, 0x01);
                },
                elevator_top = @install() {
                    debug_subtext("S=1");

                    generic_elevator_gomi(0x3e, 0x4e, 0x04, 0x01, 0d62, 0d205, 0x01, 0x01);
                },
                spawn_boss = @install() {
                    debug_subtext("S=2");
                },
                trapdoor_4 = @install() {
                    debug_subtext("S=3");

                    trapdoor_4();
                },
                exit_south = @install() {
                    map_transition(volcano, cave_center, SOUTH);
                },
                trapdoor_1 = nop(),
                stepon_6 = @install() {
                    debug_subtext("S=6");
                },
                trapdoor_4_open = @install() {
                    debug_subtext("S=7");

                    trapdoor_4();
                },
                trapdoor_2 = @install() {
                    debug_subtext("S=8");
                    
                    object[0x06] = 0x03; // activate trapdoor_2

                    if(CUSTOM_MEMORY.CURRENT_ARMOR_ARMLET == ARMOR_STATS.GLOVE_3_2) {
                        generic_fall_gomi(0d61, 0d160, 0d1408);
                    } else {
                        generic_fall_gomi(0d61, 0d160, 0d1408, 0d5);
                    }
                },
                stepon_9 = @install() {
                    debug_subtext("S=9");
                },

                trapdoor_3_left = trapdoor_3(),
                trapdoor_3_right = trapdoor_3()
            }

            enum b_trigger {
                sniff__1_water_2 = @install() {
                    debug_subtext("B=0");
                    _loot(0x1c, WATER, 0d01, 0d02);
                },
                sniff__1_water_4 = @install() {
                    debug_subtext("B=1");
                    _loot(0x1b, WATER, 0d01, 0d04);
                },
                sniff__1_acorns_2 = @install() {
                    debug_subtext("B=2");
                    _loot(0x1a, ACORNS, 0d01, 0d02);
                },
                sniff__1_acorns_1 = @install() {
                    debug_subtext("B=3");
                    _loot(0x19, ACORNS, 0d01, 0d01);
                },
                sniff__1_mushroom_3 = @install() {
                    debug_subtext("B=4");
                    _loot(0x18, MUSHROOM, 0d01, 0d03);
                },
                sniff__1_mushroom_1 = @install() {
                    debug_subtext("B=5");
                    _loot(0x17, MUSHROOM, 0d01, 0d01);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=6");
                    _loot(0x16, ROOTS, 0d01, 0d00);
                },
                sniff__1_roots_2 = @install() {
                    debug_subtext("B=7");
                    _loot(0x15, ROOTS, 0d01, 0d02);
                },
                sniff__1_feather_2 = @install() {
                    debug_subtext("B=8");
                    _loot(0x14, FEATHER, 0d01, 0d02);
                },
                sniff__1_feather_3 = @install() {
                    debug_subtext("B=9");
                    _loot(0x13, FEATHER, 0d01, 0d03);
                },

                sniff__1_feather_1 = @install() {
                    debug_subtext("B=10");
                    _loot(0x12, FEATHER, 0d01, 0d01);
                },
                sniff__1_iron = @install() {
                    debug_subtext("B=11");
                    _loot(0x11, IRON, 0d01, 0d00);
                },
                sniff__1_iron_2 = @install() {
                    debug_subtext("B=12");
                    _loot(0x10, IRON, 0d01, 0d02);
                },
                sniff__1_ash_2 = @install() {
                    debug_subtext("B=13");
                    _loot(0x0f, ASH, 0d01, 0d02);
                },
                sniff__1_ash_1 = @install() {
                    debug_subtext("B=14");
                    _loot(0x0e, ASH, 0d01, 0d01);
                },
                sniff__1_ethanol_2 = @install() {
                    debug_subtext("B=15");
                    _loot(0x0d, ETHANOL, 0d01, 0d02);
                },
                sniff__1_ethanol_2 = @install() {
                    debug_subtext("B=16");
                    _loot(0x0c, ETHANOL, 0d01, 0d02);
                },
                sniff__1_ethanol_1 = @install() {
                    debug_subtext("B=17");
                    _loot(0x0b, ETHANOL, 0d01, 0d01);
                },
                gourd_x__1_feather = @install() {
                    debug_subtext("B=18");
                    _loot_chest(0x09, FEATHER, 0d01);
                },
                gourd_x__1_acorn = @install() {
                    debug_subtext("B=19");
                    _loot_chest(0x08, ACORNS, 0d01);
                },

                gourd_x__1_ash = @install() {
                    debug_subtext("B=20");
                    _loot_chest(0x02, ASH, 0d01);
                },
                gourd_x__1_ethanol = @install() {
                    debug_subtext("B=21");
                    _loot_chest(0x00, ETHANOL, 0d01);
                }
            }

            @install()
            fun lift_off() {
                <0x2834> = <SCRIPT_OWNER>[X];
                <0x2836> = <SCRIPT_OWNER>[Y];
                // walk(BOY, TILE_ABSOLUTE_DIRECT, <SCRIPT_OWNER>[X], <SCRIPT_OWNER>[Y], NONE);
                // walk(BOY, TILE_ABSOLUTE_DIRECT, <0x2834>, <0x2836>, NONE);
                control(NONE);
                walk(DOG, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X] + 0x30, <SCRIPT_OWNER>[Y] - 0x05, NONE);
                walk(BOY, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X] + 0x30, <SCRIPT_OWNER>[Y] - 0x05, BOTH);
                walk(DOG, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X] - 0x20, <SCRIPT_OWNER>[Y] - 0x05, NONE);
                walk(BOY, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X] - 0x10, <SCRIPT_OWNER>[Y] - 0x05, BOTH);
                
                face(BOY, EAST);
                face(DOG, EAST);
                sleep(0x20);

                while(arg[0x00] < 0d160) {
                    arg[0x00]++;
                    control(NONE);
                    face(BOY, EAST);
                    face(DOG, EAST);
                    <SCRIPT_OWNER>[Y]--;
                    <BOY>[Y]--;
                    <DOG>[Y]--;

                    yield();
                }

                map_transition(windwalker_sidescroller, west, NONE);
            }

            enum ROOM {
                COLLECTIBLE_LOOTED = memory(FLAG, SRAM),
            }

            fun start_wind() {
                while(True) {
                    if(<ACTIVE>[Y] < 0d350) {
                        arg[0x10] = 0d4;
                    } else if(<ACTIVE>[Y] < 0d400) {
                        arg[0x10] = 0d3;
                    } else if(<ACTIVE>[Y] < 0d670) {
                        arg[0x10] = 0d1;
                    } else {
                        arg[0x10] = 0d0;
                    }

                    if(<INACTIVE>[Y] < 0d350) {
                        arg[0x12] = 0d4;
                    } else if(<INACTIVE>[Y] < 0d400) {
                        arg[0x12] = 0d3;
                    } else if(<INACTIVE>[Y] < 0d670) {
                        arg[0x12] = 0d1;
                    } else {
                        arg[0x12] = 0d0;
                    }

                    // if(<BOY>[STAMINA] > STAMINA.PERCENTAGE_50) {

                    if(arg[0x10] > 0d0) {
                        CUSTOM_FLAG.NO_RUNNING = True;
                    } else {
                        CUSTOM_FLAG.NO_RUNNING = False;
                    }

                    teleport_relative(ACTIVE, 0d0, arg[0x10]);
                    teleport_relative(INACTIVE, 0d0, arg[0x12]);

                    sleep(0d3);
                }
            }

            fun trigger_enter() {
                // object[0x00] = 0x01; // open chest_2
                // object[0x01] = 0x01; // open elevator_bottom
                // object[0x02] = 0x01; // open chest_3
                // object[0x03] = 0x01; // activate trapdoor_3
                // object[0x04] = 0x01; // open elevator_top
                // object[0x05] = 0x03; // activate trapdoor_4
                // object[0x06] = 0x03; // activate trapdoor_2
                // object[0x07] = 0x03; // activate trapdoor_1
                // object[0x08] = 0x01; // open chest_1
                // object[0x09] = 0x01; // open chest_4
                // object[0x0a] = 0x01; // block elevator_top

                if!(ROOM.COLLECTIBLE_LOOTED) {
                    add_collectible(0x00, 0d43, 0d10, reference(@install() {
                        collectible_collected();

                        set(ROOM.COLLECTIBLE_LOOTED);
                        destroy(SCRIPT_OWNER);
                    }));
                }

                add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0d24, 0d109);
                attach_script(LAST_ENTITY, B, reference(lift_off));

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // level 0
                    // add_enemy(FLOWER_PURPLE, 0d81, 0d239);

                    // level 1
                    add_enemy(MONK, 0d93, 0d209);
                    add_enemy(HEDGEHOG, 0d54, 0d186);

                    // level 2
                    add_enemy(MONK, 0d25, 0d175);

                    // level 3
                    add_enemy(HEDGEHOG, 0d41, 0d160);

                    // level 5
                    // add_enemy(BUZZARD_1, 0d29, 0d123);
                    // add_enemy(RAT, 0d29, 0d123);
                    // add_enemy(RAT, 0d29, 0d123);
                }

                bonfire(0d67, 0d159, SOULS_MEMORY.BONFIRE_VOLCANO_TOWER);

                default_init_room(True, True);

                place_statue(GOMI, 0d24, 0d119);

                if(False) {
                    start_wind();
                }
            }
        };

        map windwalker_sidescroller(SKY) {
            enum entrance {
                west = entrance(0x06, 0x0f, NONE),
                south = entrance(0x10, 0x19, NONE),
            }

            enum soundtrack {
                default = soundtrack(WIND_AMBIENT_PLANE, 0xff)
            }

            enum ROOM {
                DEBUG = False,

                SHIP_ID = memory(WORD, TEMP),

                PROGRESS = memory(BYTE, SRAM),

                START_HEIGHT = 0x1fff,

                ENEMIES_ALIVE = memory(BYTE, TEMP),

                LANE_1 = 0x05,
                LANE_2 = 0x0c,
                LANE_3 = 0x15,
            }

            enum BOSS {
                DEBUG = False,
                
                ID = memory(WORD, TEMP),
                PHASE = memory(WORD, TEMP),

                HP = 0d4,

                TURN_TIME = 0x30,

                P1_THRESHOLD = 0x04,

                RING_TIMER = memory(WORD, TEMP),
                RING_X = memory(WORD, TEMP),
                RING_Y = memory(WORD, TEMP),
                RING_PROJECTILE = THROWABLE.CITRON,
                RING_SLEEP = 0d5,
                RING_STEP = 0x40,
                RING_RADIUS = 0d200,

                RING_DOUBLE = False,
            }

            fun shoot_boss(x, y) {
                sound(PROJECTILE_SHOOTING);
                shoot_entity_relative(BOSS.ID, BOSS.RING_PROJECTILE, x, y, 0x14, 0x0a);
            }

            @install()
            @async()
            fun stack_t01_offset() {
                while(alive(<BOY>)) {
                    ROOM.SHIP_ID[X] = <BOY>[X];
                    ROOM.SHIP_ID[Y] = <BOY>[Y] + 0x05;
                    yield();

                    // <DOG>[X] = <BOY>[X] - 0x05;
                    // <DOG>[Y] = <BOY>[Y];
                    // yield();
                }
            }

            @install()
            fun enemy_killed() {
                ROOM.ENEMIES_ALIVE--;
                if(ROOM.DEBUG) {
                    debug_memory(ROOM.ENEMIES_ALIVE, 0d0);
                }
            }

            fun enemy(enemy, y) {
                ROOM.ENEMIES_ALIVE++;
                if(ROOM.DEBUG) {
                    debug_memory(ROOM.ENEMIES_ALIVE, 0d1);
                }

                add_enemy(enemy, 0x20, y);
                <LAST_ENTITY>[HP] = 0d1;
                attach_script(LAST_ENTITY, DEATH, reference(enemy_killed));
                face(LAST_ENTITY, WEST);
                
                // attach_to_script(LAST_ENTITY);
                // walk(LAST_ENTITY, TILE_ABSOLUTE_DIRECT, 0x00, y, LAST_ENTITY);
                // destroy(SCRIPT_OWNER);
            }

            fun shooting_mosquito(enemy, y) {
                ROOM.ENEMIES_ALIVE++;
                if(ROOM.DEBUG) {
                    debug_memory(ROOM.ENEMIES_ALIVE, 0d1);
                }

                add_enemy(enemy, 0x20, y);
                <LAST_ENTITY>[HP] = 0d1;
                face(LAST_ENTITY, WEST);
                attach_script(LAST_ENTITY, DEATH, reference(enemy_killed));
                
                attach_to_script(LAST_ENTITY);
                walk(LAST_ENTITY, TILE_ABSOLUTE_DIRECT, 0d0, y, NONE);

                arg[0x10] = 0x80 + randrange(0d60);

                while(alive(<SCRIPT_OWNER>)) {
                    arg[0x10]--;

                    if(<SCRIPT_OWNER>[X] <= 0d0) {
                        if(<SCRIPT_OWNER>[HP] > 0d0) {
                            attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, True);
                            yield();

                            destroy(SCRIPT_OWNER);
                            enemy_killed();
                            end();
                        }
                    }

                    if(arg[0x10] == 0d0) {
                        arg[0x10] = 0x80 + randrange(0d60);

                        sound(PROJECTILE_SHOOTING);
                        shoot_entity_entity(SCRIPT_OWNER, CITRON, BOY, 0x10, 0xff);
                    }

                    yield();
                }
            }

            @install()
            @async()
            fun shooting_mosquito_1() {
                shooting_mosquito(ENEMY.MOSQUITO, ROOM.LANE_1);
            }
            @install()
            @async()
            fun shooting_mosquito_2() {
                shooting_mosquito(ENEMY.MOSQUITO, ROOM.LANE_2);
            }
            @install()
            @async()
            fun shooting_mosquito_3() {
                shooting_mosquito(ENEMY.MOSQUITO, ROOM.LANE_3);
            }

            @install()
            @async()
            fun shooting_fan_2() {
                attach_to_script(BOSS.ID);

                while(alive(<SCRIPT_OWNER>)) {
                    if((BOSS.RING_TIMER == 0d0) && (<SCRIPT_OWNER>[Z] == 0d0) && !(<SCRIPT_OWNER>[FLAGS_7] & ATTRIBUTE_FLAGS.KNOCKBACK)) {
                        sound(PROJECTILE_SHOOTING);
                        shoot_entity_entity(SCRIPT_OWNER, CITRON, BOY, 0x10, 0xff);
                    }

                    sleep(0x40);
                    <SCRIPT_OWNER>[VELOCITY] = 0d5;
                    sleep(0x40);
                    <SCRIPT_OWNER>[VELOCITY] = 0d5;
                }
            }

            @install()
            fun fan_damage() {
                if(BOSS.PHASE == 0d0) {
                    if(BOSS.ID[HP] <= BOSS.P1_THRESHOLD) {
                        BOSS.PHASE = 0d1;
                    }
                }
            }

            @install()
            @async()
            fun shooting_fan() {
                add_enemy(FAN_BOT, 0x20, ROOM.LANE_2);
                control(LAST_ENTITY, True);
                BOSS.ID = <LAST_ENTITY>;
                <LAST_ENTITY>[HP] = BOSS.HP;
                face(LAST_ENTITY, WEST);
                // attribute(LAST_ENTITY, ROOT, True);
                attach_script(LAST_ENTITY, DAMAGE, reference(fan_damage));
                
                attach_to_script(LAST_ENTITY);

                attribute(LAST_ENTITY, INVINCIBLE, True);
                walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, 0x17, ROOM.LANE_2, SCRIPT_OWNER);
                attribute(LAST_ENTITY, INVINCIBLE, False);
                shooting_fan_2();

                while(alive(<SCRIPT_OWNER>)) {
                    if(BOSS.PHASE == 0d0) {
                        walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, 0x17, ROOM.LANE_1, SCRIPT_OWNER);
                    }
                    if(BOSS.PHASE == 0d0) {
                        sleep(BOSS.TURN_TIME);
                    }

                    if(BOSS.PHASE == 0d0) {
                        walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, 0x17, ROOM.LANE_3, SCRIPT_OWNER);
                    }
                    if(BOSS.PHASE == 0d0) {
                        sleep(BOSS.TURN_TIME);
                    } else {
                        attribute(BOSS.ID, INVINCIBLE, True);

                        while((<SCRIPT_OWNER>[FLAGS_7] & ATTRIBUTE_FLAGS.KNOCKBACK)) {
                            yield();
                        }

                        BOSS.ID[VELOCITY] = 0d50;
                        walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, 0x10, 0x10, SCRIPT_OWNER);

                        while(BOSS.ID[Z] > 0d0) {
                            yield();
                        }

                        attribute(BOSS.ID, INVINCIBLE, False);

                        attribute(BOSS.ID, ROOT, True);
                        ai_move_projectile_ring(BOSS.ID, BOSS.RING_PROJECTILE, BOSS.RING_RADIUS, BOSS.RING_STEP, BOSS.RING_SLEEP, 0d2, False, True);
                        attribute(BOSS.ID, ROOT, False);

                        BOSS.PHASE = 0d0;
                    }
                }
            }

            fun exit_map() {
                attribute(BOY, INVINCIBLE_TEMP, True);

                souls_boss_defeated(DEAD_SIDESCROLLER, REWARD_SIDESCROLLER);

                <BOY>[VELOCITY] = 0x20;
                ROOM.SHIP_ID[VELOCITY] = 0x20;
                sleep(0x30);

                <BOY>[VELOCITY] = 0xff;
                ROOM.SHIP_ID[VELOCITY] = 0xff;
                sleep(0x50);

                map_transition(well, crash, NONE);
            }

            @install()
            fun debug_triggered() {
                destroy(SCRIPT_OWNER);

                exit_map();
            }

            fun pause() {
                sleep(0d60);

                while(ROOM.ENEMIES_ALIVE > 0d0) {
                    yield();
                }

                if(ROOM.DEBUG) {
                    debug_memory(ROOM.ENEMIES_ALIVE, 0d0);
                }

                sleep(0d120);
            }

            fun trigger_enter() {
                add_debug_entity(0d3, 0d3, reference(debug_triggered));

                available(BOY);
                teleport(DOG, 0xff, 0xff);
                face(BOY, EAST);

                <BOY>[Z] = ROOM.START_HEIGHT;
                <0x0A47> = 0x0001;
                <0x4F2F> = 0x0020;

                default_init_room(False, False);
                CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.AIRSHIP;

                press_start();

                add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0x10, 0x10);
                ROOM.SHIP_ID = <LAST_ENTITY>;
                <LAST_ENTITY>[Z] = ROOM.START_HEIGHT;

                stack_t01_offset();

                sleep(0d250);

                subtext("go!");

                if(ROOM.PROGRESS == 0d0) {
                    enemy(ENEMY.MOSQUITO, 0x10);

                    pause();

                    enemy(ENEMY.MOSQUITO, 0x05);
                    enemy(ENEMY.MOSQUITO, 0x15);

                    pause();

                    enemy(ENEMY.MOSQUITO, 0x05);
                    enemy(ENEMY.MOSQUITO, 0x15);

                    pause();

                    enemy(ENEMY.BUZZARD_1, 0x10);

                    pause();

                    ROOM.PROGRESS = 0d1;
                }

                if(ROOM.PROGRESS == 0d1) {
                    shooting_mosquito_2();

                    pause();

                    shooting_mosquito_1();
                    shooting_mosquito_3();

                    pause();

                    shooting_mosquito_1();
                    shooting_mosquito_2();
                    shooting_mosquito_3();

                    pause();

                    ROOM.PROGRESS = 0d2;
                }

                if(ROOM.PROGRESS == 0d2) {
                    shooting_fan();
                    sleep(0x60);

                    if(BOSS.DEBUG) {
                        subtext("boss start");
                    }
                    while(alive(BOSS.ID)) {
                        yield();
                    }
                    if(BOSS.DEBUG) {
                        subtext("boss end");
                    }

                    sleep(0d250);

                    ROOM.PROGRESS = 0d3;
                }

                if(True) {
                    exit_map();
                }
            }
        };
    };

    map pipe_pit(IVOR_EBON_PRISON) { // variant pit
        enum entrance {
            south = entrance(0d42, 0d140, NORTH),
            west = entrance(0d24, 0d115, EAST),
            east = entrance(0d59, 0d115, WEST),
        }

        enum ROOM {
            ID_FAKE_EXIT = memory(WORD, TEMP),
            ID_PIT = memory(WORD, TEMP),

            ID_YOSHI = memory(WORD, TEMP),
            ID_MARIO = memory(WORD, TEMP),
        }

        enum stepon_trigger {
            switch_6 = nop(),
            switch_5 = nop(),
            switch_4 = nop(),
            switch_3 = nop(),
            switch_2 = nop(),
            switch_7 = nop(),
            switch_1 = nop(),
            exit_door = nop(),
            stepon_8 = nop(),
            stepon_9 = nop(),

            stepon_10 = nop(),
            stepon_11 = nop(),
            stepon_12 = nop(),
            stepon_13 = nop(),
            stepon_14 = nop(),
            pipe_3_1 = nop(),
            pipe_1_1 = nop(),
            pipe_2_1 = nop(),
            pipe_2_2 = nop(),
            pipe_2_3 = nop(),

            pipe_1_2 = nop(),
            pipe_1_3 = nop(),
            pipe_1_4 = nop(),
            pipe_3_2 = nop(),
            pipe_3_3 = nop(),
            pipe_3_4 = nop(),
            stepon_26 = nop(),
            stepon_27 = nop(),
            stepon_28 = nop(),
            stepon_29 = nop(),

            stepon_30 = nop(),
            stepon_31 = nop(),
        }

        enum b_trigger {
            cell_1_gourd__1_glove_3_1 = nop(),
        }

        @install()
        @async()
        fun fake_exit_scanner() {
            range_checker(ROOM.ID_FAKE_EXIT, <ACTIVE>, 0x20, 0x20, {
                map_transition(volcano, cave_2_2, SOUTH);
            });
        }
        @install()
        @async()
        fun pit_scanner() {
            range_checker(ROOM.ID_PIT, <ACTIVE>, 0d35, 0d15, {
                generic_fall(0d100, 0d1000);
                map_transition(volcano_tower, crash, NONE);
            });
        }

        fun tease_mario() {
            add_enemy(RAPTOR_GREEN, 0d24 - 0d2, 0d115, INACTIVE_IMORTAL);
            ROOM.ID_YOSHI = <LAST_ENTITY>;
            add_enemy(VILLAGER_2_1, 0d24 - 0d2, 0d115, INACTIVE_IMORTAL);
            face(LAST_ENTITY, EAST);
            ROOM.ID_MARIO = <LAST_ENTITY>;

            stack_sprite(ROOM.ID_YOSHI, ROOM.ID_MARIO, 0d0, 0d15);

            subtext("He should be in that direction.");

            walk(ROOM.ID_YOSHI, TILE_ABSOLUTE, 0d59 + 0d2, 0d115, ROOM.ID_YOSHI, NONE);
            destroy(ROOM.ID_YOSHI);
            destroy(ROOM.ID_MARIO);
        }

        fun trigger_enter() {
            init_map(0d24, 0d108, 0d60, 0d140);
            fade_in();

            fake_walls();

            add_enemy(PLACEHOLDER, 0d42, 0d140);
            ROOM.ID_FAKE_EXIT = <LAST_ENTITY>;
            fake_exit_scanner();

            add_enemy(PLACEHOLDER, 0d42, 0d122);
            ROOM.ID_PIT = <LAST_ENTITY>;
            pit_scanner();

            if((!NPC_MARIO.MARIO_TEASED) && (NPC_MARIO.PROGRESS < 0d1)) {
                NPC_MARIO.MARIO_TEASED = True;

                tease_mario();
            }
        }
    };

    map cave_gauge(PYRAMID_CAVE) {
        enum entrance {
            south = entrance(0x15, 0x23, NORTH),

            teleporter = entrance(0d23, 0d18, NONE, { teleporter_in(SOUTH); }),
        }

        enum soundtrack {
            default = soundtrack(AREA_ALTUS_PLATEAU.DEFAULT_MUSIC, 0xff)
        }

        enum stepon_trigger {
            exit_south = @install() {
                map_transition(volcano, cave_gauge, SOUTH);
            },
            exit_teleporter = @install() {
                debug_subtext("S=1");

                teleporter_out(0d23, 0d17);
                map_transition(jaguar_cave, teleporter, NONE);
            },
        }

        fun trigger_enter() {
            fade_in();
        }
    };

    map cave_shop(ACT1_2_CAVES) {
        enum entrance {
            south = entrance(0x40, 0x2d, NORTH),
        }

        enum soundtrack {
            default = soundtrack(AREA_ALTUS_PLATEAU.DEFAULT_MUSIC, 0xff)
        }

        enum stepon_trigger {
            exit_south_drain = nop(),
            exit_south = @install() {
                map_transition(volcano, cave_east, SOUTH);
            },
            exit_south_jaguar_ring = nop(),
            exit_south_hard_ball = nop(),
            exit_south_inn = nop(),
        }

        enum b_trigger {
            gourd_drain_2 = nop(),
            gourd_drain_1 = nop(),
            gourd_inn_2 = nop(),
            gourd_inn_1 = nop(),
            gourd_jaguar_ring_1 = nop(),
            gourd_jaguar_ring_2 = nop(),
            gourd_jaguar_ring_3 = nop(),
            gourd_hard_ball_1 = nop(),
            gourd_hard_ball_2 = nop(),
            gourd_hard_ball_3 = nop(),
        }

        fun show_furniture(show) {
            if(show) {
                object[0x08] = 0x00; // hide raptors_stoble
                object[0x09] = 0x00; // hide raptors_fire
                object[0x0a] = 0x00; // hide raptors_rug
            } else {
                object[0x08] = 0x01; // hide raptors_stoble
                object[0x09] = 0x01; // hide raptors_fire
                object[0x0a] = 0x01; // hide raptors_rug
            }
        }

        enum ROOM {
            FURNITURE_REVEALED = memory(FLAG, SRAM),
        }

        @install()
        fun alchemist_triggered() {
            dialog("[SLOW]Huh, how did you find me?[B]");
        }

        fun reveal_furniture() {
            show_furniture(True);

            sfx_effect(NIGHT, False);

            add_enemy(VILLAGER_1_6, 0d70, 0d18);
            attach_script(LAST_ENTITY, B, reference(alchemist_triggered));
        }

        @install()
        fun revealer_triggered() {
            set(ROOM.FURNITURE_REVEALED);

            reveal_furniture();
        }

        fun trigger_enter() {
            if!(ROOM.FURNITURE_REVEALED) { // TODO: soft lock while standing in fire
                show_furniture(False);

                add_enemy(REVEALER_TARGET_ENTITY, 0d70, 0d23);
                special_script(REVEALER, reference(revealer_triggered));

                default_init_room(True, False);
            } else {
                reveal_furniture(True);

                default_init_room(False, False);
            }
        }
    };
    
    area altus_plateau_entry() {
        enum ALTUS {
            MUSIC = MUSIC.ACT3,
        }

        area chessboard_caves() {
            map stairs(CHESSBOARD_STAIRS) {
                enum entrance {
                    stairs_east_top = entrance(0x43, 0x03, SOUTH),
                    stairs_west_top = entrance(0x15, 0x05, SOUTH),
                    stairs_west_bottom = entrance(0x5f, 0xa1, NORTH),
                }

                enum soundtrack {
                    default = soundtrack(CAVE_AMBIENT_PIANO, 0xff)
                }

                enum stepon_trigger {
                    cutscene_energy_core = @install() {
                        debug_subtext("S=0");
                    },
                    exit_stairs_west_bottom = @install() {
                        map_transition(volcano, cave_west, SOUTH);
                    },
                    exit_stairs_west_top = @install() {
                        map_transition(chessboard, stairs_east, NORTH);
                    },
                    exit_stairs_east_top = @install() {
                        map_transition(hidden_castle_entry, stairs, NORTH);
                    },
                }

                enum b_trigger {
                    pickup_energy_core = @install() {
                        debug_subtext("B=0");
                    },
                }

                fun trigger_enter() {
                    object[0x00] = 0x7e; // remove energy_core_hitbox

                    fade_in();
                }
            };

            map chessboard(FOOTKNIGHT) {
                // sniff=vanilla

                enum entrance {
                    east = entrance(0x93, 0x42, WEST),
                    west = entrance(0x01, 0x42, EAST),
                    stairs_east = entrance(0x53, 0x4c, WEST),
                    stairs_west = entrance(0x40, 0x40, EAST), // 0x4c, 0x40

                    crash = entrance(0x54, 0x39, NONE),
                    boss = entrance(0d43, 0d70, EAST),
                }

                enum soundtrack {
                    default = soundtrack(ALTUS.MUSIC, 0xff)
                }

                enum ROOM {
                    STAIRS_WEST_REVEALED = memory(FLAG, SRAM),

                    PALETTE_DONOR_BOY = memory(WORD, TEMP),
                    PALETTE_DONOR_DOG = memory(WORD, TEMP),

                    BEE_COLLECTED = memory(FLAG, SRAM),
                }

                fun open_stairs_east(open) {
                    if(open) {
                        object[0x01] = 0x00; // close stairs_east
                    } else {
                        object[0x01] = 0x7e; // close stairs_east
                    }
                }

                fun close_arena(close) {
                    if(close) {
                        init_map(0x31, 0x2f, 0x65, 0x57);

                        sound(IMPACT);
                        object[0x02] = 0x01; // close wall_2
                        sleep(0d10);
                        sound(IMPACT);
                        object[0x03] = 0x01; // close wall_1

                    } else {
                        init_map(0x00, 0x00, 0xff, 0xff);

                        object[0x02] = 0x00; // close wall_2
                        object[0x03] = 0x00; // close wall_1
                    }
                }

                enum BOSS {
                    ID = memory(WORD, TEMP),
                    PROGRESS = memory(FLAG, TEMP),

                    HP = 0d200,
                }

                fun boss_defeated() {
                    souls_boss_defeated(DEAD_CHESS, REWARD_CHESS);

                    close_arena(False);
                    open_stairs_east(True);
                }

                @install()
                fun boss_triggered() {
                    // debug_memory(BOSS.ID[HP], BOSS.ID[DAMAGE_TYPE]);

                    // if(<SCRIPT_OWNER>[GENERAL_PURPOSE] > 0x00) {
                    //     heal(SCRIPT_OWNER, 0x30, True);
                    //     end();
                    // }
                    
                    if((<SCRIPT_OWNER>[DAMAGE_TYPE] == DAMAGE_TYPE.DOG_ATTACK) && (<DOG>[GENERAL_PURPOSE] ^ <SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x00)){
                        heal(SCRIPT_OWNER, 0x30, True);
                    } else if(<BOY>[GENERAL_PURPOSE] ^ <SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x00){
                        heal(SCRIPT_OWNER, 0x30, True);
                    }

                    if(<SCRIPT_OWNER>[HP] <= 0x00) {
                        boss_defeated();
                    }
                }

                @install()
                @async()
                fun oglin_parity_check(entity) {
                    attach_to_script(arg[0x00]);

                    val palette_oglin_black = arg[0x10];
                    palette_oglin_black = ROOM.PALETTE_DONOR_DOG[PALETTE];
                    val palette_oglin = arg[0x12];
                    palette_oglin = <SCRIPT_OWNER>[PALETTE];
                    
                    while(alive(<SCRIPT_OWNER>)) {
                        if((<SCRIPT_OWNER>[FLAGS_7] & ATTRIBUTE_FLAGS.KNOCKBACK) == 0d0) {
                            arg[0x14] = (((<SCRIPT_OWNER>[X]) / 0x50) & 0x01) ^ (((<SCRIPT_OWNER>[Y] - 0x1e) / 0x32) & 0x01);
                            yield();

                            if(<SCRIPT_OWNER>[GENERAL_PURPOSE] != arg[0x14]) {
                                // parity_check_character(<BOY>, DOG);
                                if(arg[0x14]) {
                                    // attribute(BOY, INVISIBLE, False);
                                    <SCRIPT_OWNER>[PALETTE] = palette_oglin_black;
                                    <SCRIPT_OWNER>[GENERAL_PURPOSE] = 0x01;
                                    nop();
                                } else {
                                    // attribute(BOY, INVISIBLE, True);
                                    <SCRIPT_OWNER>[PALETTE] = palette_oglin;
                                    <SCRIPT_OWNER>[GENERAL_PURPOSE] = 0x00;
                                    nop();
                                }
                            }
                        }
                        sleep(0d10);
                    }
                }

                fun spawn_boss(x, y) {
                    BOSS.PROGRESS = True;

                    add_enemy(MAGMAR, x, y);
                    BOSS.ID = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, DAMAGE_DEATH, reference(boss_triggered));
                    <LAST_ENTITY>[HP] = BOSS.HP;

                    push_music(BOSS);

                    if(False) {
                        attribute(BOY, INVINCIBLE_TEMP, True);
                        attribute(DOG, INVINCIBLE_TEMP, True);
                    }
                }

                enum stepon_trigger {
                    stairs_east = @install() {
                        map_transition(stairs, stairs_west_top, EAST);
                    },
                    spawn_boss = @install() {
                        debug_subtext("S=1");

                        if!(SOULS_MEMORY.DEAD_CHESS) {
                            if!(BOSS.PROGRESS) {
                                walk(BOY, TILE_ABSOLUTE, 0x39, 0x44, NONE);
                                walk(DOG, TILE_ABSOLUTE, 0x39, 0x48, BOTH, BOTH);

                                close_arena(True);
                                spawn_boss(0d74, 0d69); // 0d84, 0d57);
                                oglin_parity_check(<LAST_ENTITY>);
                            }
                        }
                    },
                    exit_west = @install() {
                        map_transition(gate, east, WEST);
                    },
                    exit_east = @install() {
                        map_transition(well, west, EAST);
                    },
                    stairs_west = @install() {
                        map_transition(hidden_stairs, stairs, WEST);
                    }
                }

                enum b_trigger {
                    sniff__1_water_3 = @install() {
                        debug_subtext("B=0");
                        _loot(0x18, WATER, 0d01, 0d03);
                    },
                    sniff__1_water_1 = @install() {
                        debug_subtext("B=1");
                        _loot(0x17, WATER, 0d01, 0d01);
                    },
                    sniff__1_ash_2 = @install() {
                        debug_subtext("B=2");
                        _loot(0x16, ASH, 0d01, 0d02);
                    },
                    sniff__1_ash_3 = @install() {
                        debug_subtext("B=3");
                        _loot(0x15, ASH, 0d01, 0d03);
                    },
                    sniff__1_roots_2 = @install() {
                        debug_subtext("B=4");
                        _loot(0x14, ROOTS, 0d01, 0d02);
                    },
                    sniff__1_roots_4 = @install() {
                        debug_subtext("B=5");
                        _loot(0x13, ROOTS, 0d01, 0d04);
                    },
                    sniff__1_roots_3 = @install() {
                        debug_subtext("B=6");
                        _loot(0x12, ROOTS, 0d01, 0d03);
                    },
                    sniff__1_roots_4 = @install() {
                        debug_subtext("B=7");
                        _loot(0x11, ROOTS, 0d01, 0d04);
                    },
                    sniff__1_brimstone_3 = @install() {
                        debug_subtext("B=8");
                        _loot(0x10, BRIMSTONE, 0d01, 0d03);
                    },
                    sniff__1_brimstone_1 = @install() {
                        debug_subtext("B=9");
                        _loot(0x0f, BRIMSTONE, 0d01, 0d01);
                    },

                    sniff__1_brimstone_1 = @install() {
                        debug_subtext("B=10");
                        _loot(0x0e, BRIMSTONE, 0d01, 0d01);
                    },
                    sniff__1_iron_3 = @install() {
                        debug_subtext("B=11");
                        _loot(0x0d, IRON, 0d01, 0d03);
                    },
                    sniff__1_iron = @install() {
                        debug_subtext("B=12");
                        _loot(0x0c, IRON, 0d01, 0d00);
                    },
                    sniff__1_feather_2 = @install() {
                        debug_subtext("B=13");
                        _loot(0x0b, FEATHER, 0d01, 0d02);
                    },
                    sniff__1_acorns_3 = @install() {
                        debug_subtext("B=14");
                        _loot(0x0a, ACORNS, 0d01, 0d03);
                    },
                    sniff__1_acorns_2 = @install() {
                        debug_subtext("B=15");
                        _loot(0x09, ACORNS, 0d01, 0d02);
                    },
                    sniff__1_acorns_2 = @install() {
                        debug_subtext("B=16");
                        _loot(0x08, ACORNS, 0d01, 0d02);
                    },
                    sniff__1_mushroom_3 = @install() {
                        debug_subtext("B=17");
                        _loot(0x07, MUSHROOM, 0d01, 0d03);
                    },
                    sniff__1_mushroom_2 = @install() {
                        debug_subtext("B=18");
                        _loot(0x06, MUSHROOM, 0d01, 0d02);
                    }
                }

                @install()
                fun revealer_triggered() {
                    destroy(SCRIPT_OWNER);

                    set(ROOM.STAIRS_WEST_REVEALED);

                    object[0x00] = 0x02;
                    sleep(0x10);
                    object[0x00] = 0x01;
                    sleep(0x10);
                    object[0x00] = 0x00;
                }

                fun square_white(character) {
                    attribute_bit(character, INVISIBLE);
                }
                fun square_black(character) {
                    attribute_bit(character, VISIBLE);
                }

                fun parity_check_character(char, character:CHARACTER) { // buggy
                    // arg[0x00] = (character[X] - 0x1e0) / 0x50;
                    // arg[0x02] = (character[Y] - 0x1ae) / 0x32;
                    arg[0x00] = (char[X]) / 0x50;
                    arg[0x02] = (char[Y] - 0x1e) / 0x32;

                    // debug_memory(arg[0x00], arg[0x02]);
                    // sleep(0x30);

                    arg[0x04] = arg[0x00] & 0x01;
                    arg[0x06] = arg[0x02] & 0x01;

                    // debug_memory(arg[0x04], arg[0x06]);
                    // sleep(0x30);

                    arg[0x08] = arg[0x04] ^ arg[0x06];

                    // debug_memory(arg[0x08], arg[0x08]);
                    if(arg[0x08] == 0x00) {
                        // square_black(character);
                        attribute(character, INVISIBLE, False);
                    } else {
                        // square_white(character);
                        attribute(character, INVISIBLE, True);
                    }

                    // arg[0x00] = (((<BOY>[X]) / 0x50) & 0x01);
                    // arg[0x02] = (((<BOY>[Y] - 0x1e) / 0x32) & 0x01);
                }

                @install()
                @async()
                fun parity_check() {
                    sleep(0x50);

                    val palette_boy_black = arg[0x10];
                    palette_boy_black = ROOM.PALETTE_DONOR_BOY[PALETTE];
                    val palette_dog_black = arg[0x12];
                    palette_dog_black = ROOM.PALETTE_DONOR_DOG[PALETTE];
                    val palette_boy = arg[0x14];
                    palette_boy = <BOY>[PALETTE];
                    val palette_dog = arg[0x16];
                    palette_dog = <DOG>[PALETTE];
                    // arg[0x06] = 0x08cd;

                    val current_square = arg[0x18];

                    // debug_memory(palette_boy_black, palette_boy);

                    while(True) {
                        // parity_check_character(<BOY>, DOG);
                        if((<BOY>[FLAGS_7] & ATTRIBUTE_FLAGS.KNOCKBACK) == 0d0) {
                            current_square = (((<BOY>[X]) / 0x50) & 0x01) ^ (((<BOY>[Y] - 0x1e) / 0x32) & 0x01);
                            yield();

                            if(<BOY>[GENERAL_PURPOSE] != current_square) {
                                if(current_square) {
                                    // attribute(BOY, INVISIBLE, False);
                                    <BOY>[PALETTE] = palette_boy_black;
                                    <BOY>[GENERAL_PURPOSE] = 0x01;
                                    nop();
                                } else {
                                    // attribute(BOY, INVISIBLE, True);
                                    <BOY>[PALETTE] = palette_boy;
                                    <BOY>[GENERAL_PURPOSE] = 0x00;
                                    nop();
                                }
                            }
                        }
                        sleep(0d10);

                        if((<DOG>[FLAGS_7] & ATTRIBUTE_FLAGS.KNOCKBACK) == 0d0) {
                            current_square = (((<DOG>[X]) / 0x50) & 0x01) ^ (((<DOG>[Y] - 0x1e) / 0x32) & 0x01);
                            yield();

                            if(<DOG>[GENERAL_PURPOSE] != current_square) {
                                // parity_check_character(<DOG>, DOG);
                                if((((<DOG>[X]) / 0x50) & 0x01) ^ (((<DOG>[Y] - 0x1e) / 0x32) & 0x01)) {
                                    // attribute(DOG, INVISIBLE, False);
                                    <DOG>[GENERAL_PURPOSE] = 0x01;
                                    <DOG>[PALETTE] = palette_dog_black;
                                    nop();
                                } else {
                                    // attribute(DOG, INVISIBLE, True);
                                    <DOG>[GENERAL_PURPOSE] = 0x00;
                                    <DOG>[PALETTE] = palette_dog;
                                    nop();
                                }
                            }
                        }
                        sleep(0d10);
                    }
                }

                @install()
                fun enemy_triggered() {
                    // debug_memory(BOSS.ID[HP], BOSS.ID[DAMAGE_TYPE]);

                    // if(<SCRIPT_OWNER>[GENERAL_PURPOSE] > 0x00) {
                    //     heal(SCRIPT_OWNER, 0x30, True);
                    //     end();
                    // }
                    
                    if((<SCRIPT_OWNER>[DAMAGE_TYPE] == DAMAGE_TYPE.DOG_ATTACK) && (<DOG>[GENERAL_PURPOSE] ^ <SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x00)){
                        heal(SCRIPT_OWNER, 0x30, True);
                        end();
                    } else if(<BOY>[GENERAL_PURPOSE] ^ <SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x00){
                        heal(SCRIPT_OWNER, 0x30, True);
                        end();
                    }
                }

                @install()
                fun debug_triggered() {
                    set(ROOM.STAIRS_WEST_REVEALED);

                    object[0x00] = 0x00; // close stairs_west
                    open_stairs_east(True);

                    destroy(SCRIPT_OWNER);
                }

                fun add_chess_enemy(x, y) {
                    add_enemy(OGLIN, x, y);
                    <LAST_ENTITY>[HP] = 0x01;
                    attach_script(LAST_ENTITY, DAMAGE, reference(enemy_triggered));

                    oglin_parity_check(<LAST_ENTITY>);
                }

                fun trigger_enter() {
                    CUSTOM_FLAG.NO_CURRENCY_DISPLAY = True; // TODO: should not discolor magmar
                    
                    add_enemy(BOY_BLACK, 0d00, 0d00, INVISBLE_INVINCIBLE_INACTIVE);
                    ROOM.PALETTE_DONOR_BOY = <LAST_ENTITY>;
                    add_enemy(DOG_1_BLACK, 0d00, 0d00, INVISBLE_INVINCIBLE_INACTIVE);
                    ROOM.PALETTE_DONOR_DOG = <LAST_ENTITY>;

                    if(FLAG.DEBUG) {
                        add_debug_entity(0x59, 0x49, reference(debug_triggered));
                    }

                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // east
                        add_chess_enemy(0d113, 0d71);

                        // south
                        add_chess_enemy(0d55, 0d93);

                        // west
                        add_chess_enemy(0d68, 0d44);
                    }

                    if(SOULS_MEMORY.DEAD_CHESS) {
                        open_stairs_east(True);
                    } else {
                        open_stairs_east(False);
                    }

                    if!(ROOM.STAIRS_WEST_REVEALED) {
                        add_enemy(REVEALER_TARGET_ENTITY, 0x3e, 0x40);
                        special_script(REVEALER, reference(revealer_triggered));

                        object[0x00] = 0x7e; // close stairs_west
                    } else {
                        object[0x00] = 0x00;
                    }

                    if!(ROOM.BEE_COLLECTED) {
                        add_bee(0d143, 0d31, reference(@install() {
                            bee_collected(ROOM.BEE_COLLECTED);
                        }));
                    }

                    default_init_room(True, True);

                    parity_check();

                    // object[0x00] = 0x7e; // close stairs_west
                    // object[0x01] = 0x7e; // close stairs_east
                    // object[0x02] = 0x01; // close wall_2
                    // object[0x03] = 0x01; // close wall_1
                    // object[0x04] = 0x01; // remove bridge_east
                    // object[0x05] = 0x01; // remove bridge_west
                }
            };

            map hidden_stairs(EBON_CELLAR) {
                // chests=vanilla

                enum entrance {
                    stairs = entrance(0x29, 0x0d, WEST)
                }

                enum stepon_trigger {
                    stepon_0 = @install() {
                        map_transition(chessboard, stairs_west, EAST);
                    },
                }

                enum b_trigger {
                    chest_1__3_feather = @install() {
                        debug_subtext("B=0");
                        _loot_chest(0x00, FEATHER, 0d03);
                    },
                    chest_2__4_brimstone = @install() {
                        debug_subtext("B=1");
                        _loot_chest(0x01, BRIMSTONE, 0d04);
                    },
                    chest_3__2_acorns = @install() {
                        debug_subtext("B=2");
                        _loot_chest(0x02, ACORNS, 0d02);
                    },
                }

                enum BOSS {
                    DEBUG = True,

                    ID_RIDER = memory(WORD, TEMP),
                    ID_MOUNT = memory(WORD, TEMP),

                    ID_PROJECTILE = memory(WORD, TEMP),

                    STACKING = memory(FLAG, TEMP),

                    CRATES_X = 0d22,
                    CRATES_Y = 0d12,

                    CHEESE_RANGE = 0d3,

                    RNG = memory(WORD, TEMP),
                }

                fun prepare_rat(entity) {
                    entity[HP] = 0d1;
                    attach_script(entity, DAMAGE, reference(@install() {
                        if(script[0x9] == 0x100) {
                            heal(SCRIPT_OWNER, 0d0, False);
                            yield();
                            damage(SCRIPT_OWNER, 0d0, True);

                            control(SCRIPT_OWNER, True);

                            if(BOSS.DEBUG) {
                                subtext("stunned");
                            }
                        }
                    }));
                }

                @install()
                @async()
                fun cheese_protection(entity_mount) {
                    while(alive(entity_mount)) {
                        if(entity_mount[FLAGS_7] & ATTRIBUTE_FLAGS.WALKING) {
                            arg[0x10] = entity_mount[X];
                            arg[0x12] = entity_mount[Y];

                            while(entity_mount[FLAGS_7] & ATTRIBUTE_FLAGS.WALKING) {
                                yield();
                            }

                            if(entity_mount[X] < arg[0x10]) {
                                arg[0x10] = arg[0x10] - entity_mount[X];
                            } else {
                                arg[0x10] = entity_mount[X] - arg[0x10];
                            }

                            if(entity_mount[Y] < arg[0x12]) {
                                arg[0x12] = arg[0x12] - entity_mount[Y];
                            } else {
                                arg[0x12] = entity_mount[Y] - arg[0x12];
                            }

                            if((arg[0x10] == arg[0x14]) && (arg[0x12] == arg[0x16])) {
                                arg[0x18]++;
                            } else {
                                arg[0x18] = 0d0;
                            }

                            if(BOSS.DEBUG && False) {
                                debug_memory(arg[0x10], arg[0x12], arg[0x18]);
                            }

                            if(
                                ((arg[0x10] <= BOSS.CHEESE_RANGE) && (arg[0x12] <= BOSS.CHEESE_RANGE)) ||
                                (arg[0x18] >= 0d2)
                            ) {
                                BOSS.STACKING = False;
                            }

                            arg[0x14] = arg[0x10];
                            arg[0x16] = arg[0x12];
                        }

                        yield();
                    }
                }

                // @install()
                // @async()
                fun ride_rat(entity_mount, entity_rider, offset_x, offset_y) {
                    BOSS.STACKING = True;
                    arg[0x10] = entity_mount[Z_LEVEL];

                    _add_enemy(MEGATAUR, entity_mount[X], entity_mount[Y]);
                    destroy(entity_mount);
                    entity_mount = <LAST_ENTITY>;
                    animate(entity_mount, ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_ENTER);

                    animate(entity_rider, ONCE, ANIMATION_ALL.CAST);
                    wait(entity_rider);

                    // entity_rider[VELOCITY] = 0d30;
                    _drag(entity_rider, entity_mount[X] + offset_x, entity_mount[Y] - offset_y);
                    entity_rider[Z_LEVEL] = arg[0x10];

                    entity_rider[VELOCITY] = 0d20;
                    sleep(0d50);
                    entity_rider[Z] = 0d0;

                    animate(entity_mount, ONCE, ANIMATION_ENEMY.MEGATAUR_DUCK);

                    cheese_protection(entity_mount);

                    while(BOSS.STACKING) {
                        entity_rider[X] = entity_mount[X] + offset_x;
                        entity_rider[Y] = entity_mount[Y] - offset_y;

                        yield();
                    }

                    attribute(entity_mount, INVINCIBLE_TEMP, True);
                    animate(entity_mount, ONCE, ANIMATION_ENEMY.MEGATAUR_DUCK);
                    animate(entity_mount, ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_EXIT);

                    drag(entity_rider, BOSS.CRATES_X, BOSS.CRATES_Y);
                    entity_rider[Z_LEVEL] = arg[0x10];

                    wait(entity_mount);
                    _add_enemy(RAT_RED, entity_mount[X], entity_mount[Y]);
                    prepare_rat(<LAST_ENTITY>);
                    destroy(entity_mount);
                    entity_mount = <LAST_ENTITY>;
                }

                fun trigger_enter() {
                    object[0x00] = 0x7e; // close gate

                    default_init_room(True, False);

                    add_enemy(RAT, 0d29, 0d14);
                    BOSS.ID_PROJECTILE = <LAST_ENTITY>;
                    prepare_rat(<LAST_ENTITY>);

                    add_enemy(RAT_RED, 0d12, 0d18);
                    BOSS.ID_MOUNT = <LAST_ENTITY>;
                    prepare_rat(<LAST_ENTITY>);

                    add_enemy(VERMINATOR, BOSS.CRATES_X, BOSS.CRATES_Y);
                    BOSS.ID_RIDER = <LAST_ENTITY>;

                    while(True) {
                        sleep(0d300);

                        BOSS.RNG = randrange(0d5);


                        if(BOSS.RNG == 0d0) {
                            if!(BOSS.STACKING) {
                                ride_rat(BOSS.ID_MOUNT, BOSS.ID_RIDER, 0d0, 0d40);
                            }
                        } else if(BOSS.RNG == 0d1) {
                            arg[0x10] = <ACTIVE>[X];
                            arg[0x12] = <ACTIVE>[Y];

                            shoot_entity_absolute(BOSS.ID_RIDER, BOTTLE, arg[0x10], arg[0x12] - 0d50, 0d20, 0d0);
                            shoot_entity_absolute(BOSS.ID_RIDER, BOTTLE_BROKEN, arg[0x10], arg[0x12], 0d20, 0d10);
                            shoot_entity_absolute(BOSS.ID_RIDER, BOTTLE, arg[0x10], arg[0x12] + 0d50, 0d20, 0d50);
                            shoot_entity_absolute(BOSS.ID_RIDER, BOTTLE, arg[0x10], arg[0x12] + 0d100, 0d20, 0d100);
                        } else if(BOSS.RNG == 0d2) {
                            arg[0x10] = <ACTIVE>[X];
                            arg[0x12] = <ACTIVE>[Y];

                            shoot_entity_absolute(BOSS.ID_RIDER, ROCK, arg[0x10], arg[0x12], 0d50, 0d0);
                            sleep(0d30);
                            shoot_entity_absolute(BOSS.ID_RIDER, ROCK, arg[0x10], arg[0x12], 0d50, 0d10);
                            sleep(0d30);
                            shoot_entity_absolute(BOSS.ID_RIDER, ROCK, arg[0x10], arg[0x12], 0d50, 0d50);
                            sleep(0d30);
                            shoot_entity_absolute(BOSS.ID_RIDER, ROCK, arg[0x10], arg[0x12], 0d50, 0d100);
                        } else {
                            cast(BOSS.ID_RIDER, BOSS.ID_MOUNT, HEAL, 0d1);
                            control(BOSS.ID_MOUNT, False);
                            cast(BOSS.ID_RIDER, BOSS.ID_PROJECTILE, HEAL, 0d1);
                            control(BOSS.ID_PROJECTILE, False);
                        }
                    }

                    end();

                    while(True) {
                        sleep(0d180);
                    }
                }
            };

            map hidden_castle_entry(VERMINATOR) {
                enum entrance {
                    north = entrance(0x16, 0x09, SOUTH),
                    east = entrance(0x29, 0x38, WEST),
                    south = entrance(0x16, 0x65, NORTH),
                    west = entrance(0x03, 0x38, EAST),
                    stairs = entrance(0x19, 0x4d, EAST)
                }

                enum stepon_trigger {
                    exit_north = @install() {
                        debug_subtext("S=0");
                    },
                    stepon_1 = @install() {
                        debug_subtext("S=1");
                    },
                    stepon_2 = @install() {
                        debug_subtext("S=2");
                    },
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    stepon_4 = @install() {
                        debug_subtext("S=4");
                    },
                    spawn_boss = @install() {
                        debug_subtext("S=5");
                    },
                    exit_stairs = @install() {
                        map_transition(stairs, stairs_east_top, WEST);
                    },
                    exit_south = @install() {
                        debug_subtext("S=7");
                    },
                    exit_west = @install() {
                        debug_subtext("S=8");
                    },
                    exit_east = @install() {
                        debug_subtext("S=9");
                    }
                }

                fun trigger_enter() {
                    fade_in();
                }
            };
        };

        map well(WELL) {
            enum entrance {
                west = entrance(0x01, 0x1c, EAST),

                crash = entrance(0x38, 0x18, NONE),
                bonfire = entrance(0d30, 0d20, NONE, { bonfire_wakeup(0d0, 0d8, 0d32, 0d0); }),
            }

            enum soundtrack {
                default = soundtrack(ALTUS.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_west = @install() {
                    map_transition(chessboard, east, WEST);
                },
            }

            enum ROOM {
                DEBUG = False,

                WELL_CRANKS = memory(WORD, TEMP),
                CRANKS_REQUIRED = 0d20,

                WELL_STATE = memory(FLAG, TEMP),

                LUIGI_ID = memory(WORD, TEMP),

                LUIGI_LIMIT_TOP = 0d433,
                LUIGI_LIMIT_BOTTOM = 0d447,
            }

            fun crank_well() {
                ROOM.WELL_STATE = !ROOM.WELL_STATE;

                sound(SQUEEK);

                if(ROOM.WELL_STATE) {
                    object[0x00] = 0x00;
                    object[0x01] = 0x00;
                    object[0x02] = 0x00;
                } else {
                    object[0x00] = 0x01;
                    object[0x01] = 0x01;
                    object[0x02] = 0x01;
                }

                if(ROOM.LUIGI_ID > 0d0) {
                    arg[0x10] = ROOM.LUIGI_LIMIT_TOP + (ROOM.CRANKS_REQUIRED - ROOM.WELL_CRANKS);

                    if(arg[0x10] < ROOM.LUIGI_LIMIT_BOTTOM) {
                        _teleport(ROOM.LUIGI_ID, 0d215, arg[0x10]);
                    } else if(arg[0x10] == ROOM.LUIGI_LIMIT_BOTTOM) {
                        teleport(ROOM.LUIGI_ID, 0d0, 0d0);
                    }
                }

                if(ROOM.DEBUG) {
                    MEMORY.STRING_PARAMETER_1 = ROOM.WELL_CRANKS;
                    MEMORY.STRING_PARAMETER_2 = ROOM.CRANKS_REQUIRED;
                    MEMORY.STRING_PARAMETER_3 = arg[0x10];

                    debug_subtext("cranks = [MEM1]/[MEM2] ([MEM3])");
                }
            }
            fun drop_bucket() {
                control(NONE);

                while(ROOM.WELL_CRANKS > 0d0) {
                    ROOM.WELL_CRANKS--;
                    crank_well();

                    sleep(0d3);
                }
                ROOM.WELL_CRANKS = 0d0;

                sound(WATER_PLOP);

                control(BOTH);
            }

            fun well_triggered() {
                nop();
            }

            enum b_trigger {
                well = @install() {
                    debug_subtext("B=0");

                    if(ROOM.WELL_CRANKS < ROOM.CRANKS_REQUIRED) {
                        ROOM.WELL_CRANKS++;
                        crank_well();
                    } else {
                        drop_bucket();

                        well_triggered();
                    }
                },
            }

            @install()
            @async()
            fun crash_windwalker() {
                // add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0x5b, 0x39);
                add_placeholder(ANIMATION_PLACEHOLDER.WINDWALKER_IDLE, 0x2a, 0x0c);
                attach_to_script(LAST_ENTITY);
                <SCRIPT_OWNER>[Z] = 0x1fff;
                sleep(0x80);
                <SCRIPT_OWNER>[VELOCITY] = 0x20;
                
                add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_3, 0x00, 0x00);
                arg[0x00] = <LAST_ENTITY>;

                arg[0x00][X] = <SCRIPT_OWNER>[X] + 0x10;
                arg[0x00][Y] = <SCRIPT_OWNER>[Y] + 0x10;

                add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_3, 0x00, 0x00);
                arg[0x02] = <LAST_ENTITY>;

                arg[0x02][X] = <SCRIPT_OWNER>[X] - 0x10;
                arg[0x02][Y] = <SCRIPT_OWNER>[Y] - 0x10;

                sleep(0x50);
                destroy(arg[0x02]);
                sleep(0x10);
                destroy(SCRIPT_OWNER);
                sleep(0x60);
                destroy(arg[0x00]);
            }

            fun trigger_enter() {
                if!(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED) {
                    set(AREA_ALTUS_PLATEAU.ENTRANCE_UNLOCKED);

                    if!(FLAG.IN_ANIMATION) {
                        crash_both();
                        crash_windwalker();
                    }
                }

                if(SOULS_MEMORY.WITH_SIDE_QUESTS) {
                    if(NPC_MARIO.PROGRESS == 0d0) {
                        add_souls_npc_mario(0d0, 0d0, INACTIVE);
                        ROOM.LUIGI_ID = <LAST_ENTITY>;
                    }
                }

                bonfire(0d30, 0d20, SOULS_MEMORY.BONFIRE_ALTUS_WELL);
                
                default_init_room(True, True);
            }
        };

        map gate(GATE) {
            // chests=vanilla
            // sniff=vanilla

            enum entrance {
                north = entrance(0x2c, 0x09, SOUTH),
                east = entrance(0x67, 0x71, WEST),
            }

            enum soundtrack {
                default = soundtrack(ALTUS.MUSIC, 0xff)
            }

            enum stepon_trigger {
                east_north = @install() {
                    map_transition(castle_center, south_2, NORTH);
                },
                exit_east = @install() {
                    map_transition(chessboard, west, EAST);
                },
            }

            enum b_trigger {
                sniff__1_ash_1 = @install() {
                    debug_subtext("B=0");
                    _loot(0x13, ASH, 0d01, 0d01);
                },
                sniff__1_ash_1 = @install() {
                    debug_subtext("B=1");
                    _loot(0x12, ASH, 0d01, 0d01);
                },
                sniff__1_ethanol_1 = @install() {
                    debug_subtext("B=2");
                    _loot(0x11, ETHANOL, 0d01, 0d01);
                },
                sniff__1_roots_1 = @install() {
                    debug_subtext("B=3");
                    _loot(0x10, ROOTS, 0d01, 0d01);
                },
                sniff__1_roots_1 = @install() {
                    debug_subtext("B=4");
                    _loot(0x0f, ROOTS, 0d01, 0d01);
                },
                sniff__1_water_1 = @install() {
                    debug_subtext("B=5");
                    _loot(0x0e, WATER, 0d01, 0d01);
                },
                sniff__1_brimstone_1 = @install() {
                    debug_subtext("B=6");
                    _loot(0x0d, BRIMSTONE, 0d01, 0d01);
                },
                sniff__1_feather_1 = @install() {
                    debug_subtext("B=7");
                    _loot(0x0c, FEATHER, 0d01, 0d01);
                },
                sniff__1_feather_1 = @install() {
                    debug_subtext("B=8");
                    _loot(0x0b, FEATHER, 0d01, 0d01);
                },
                sniff__1_mushroom_1 = @install() {
                    debug_subtext("B=9");
                    _loot(0x0a, MUSHROOM, 0d01, 0d01);
                },

                sniff__1_mushroom_1 = @install() {
                    debug_subtext("B=10");
                    _loot(0x09, MUSHROOM, 0d01, 0d01);
                },
                sniff__1_mushroom_1 = @install() {
                    debug_subtext("B=11");
                    _loot(0x08, MUSHROOM, 0d01, 0d01);
                },
                sniff__1_acorns_1 = @install() {
                    debug_subtext("B=12");
                    _loot(0x07, ACORNS, 0d01, 0d01);
                },
                sniff__1_acorns_1 = @install() {
                    debug_subtext("B=13");
                    _loot(0x06, ACORNS, 0d01, 0d01);
                },
                sniff__1_iron_1 = @install() {
                    debug_subtext("B=14");
                    _loot(0x05, IRON, 0d01, 0d01);
                },
                sniff__1_iron_1 = @install() {
                    debug_subtext("B=15");
                    _loot(0x04, IRON, 0d01, 0d01);
                },
                gourd_x__aura_formula = @install() {
                    debug_subtext("B=16");
                    // aura formula
                    _loot_chest(0x02, ASH, 0d05); // TODO
                },
                gourd_x__1_anihilation_amulet = @install() {
                    debug_subtext("B=17");
                    _loot_chest(0x01, ANNIHILATION_AMULET, 0d01);
                },
                gourd_x__5_ash = @install() {
                    debug_subtext("B=18");
                    _loot_chest(0x02, ASH, 0d05);
                },
                gourd_x__1_atlas_medallion = @install() {
                    debug_subtext("B=19");
                    _loot_chest(0x03, ATLAS_MEDALLION, 0d01);
                },
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // north
                    add_enemy(DRAKE, 0d58, 0d28);

                    add_enemy(SLIME, 0d36, 0d27);

                    // center
                    add_enemy(DRAKE, 0d59, 0d71);

                    add_enemy(SLIME, 0d40, 0d63);

                    // south
                    add_enemy(SLIME, 0d79, 0d116);
                }

                default_init_room(True, True);
            }
        };

        area castle() {
            enum CASTLE {
                MUSIC = MUSIC.EBON_KEEP,
            }

            map castle_center(NOBILIA_NORTH) {
                // sniff=vanilla

                enum entrance {
                    north = entrance(0x40, 0x04, SOUTH),
                    south_1 = entrance(0x72, 0x38, NORTH),
                    south_2 = entrance(0x4c, 0x38, NORTH),
                    south_3 = entrance(0x08, 0x38, NORTH),

                    guard = entrance(0d63, 0d15, NONE, {
                        face(BOY, NORTH);
                        animate(BOY, ONCE, ANIMATION_ALL.KNOCKBACK);

                        subtext("[SLOW]Back on the streets with you!");
                    }),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum ROOM {
                    BEE_COLLECTED = memory(FLAG, SRAM),
                    BEE_TRIGGERED = memory(FLAG, TEMP),
                }

                enum stepon_trigger {
                    exit_north = @install() {
                        map_transition(castle_throne_room, south, NORTH);
                    },
                    exit_south_3 = @install() {
                        map_transition(market_west, north, SOUTH);
                    },
                    exit_south_2 = @install() {
                        map_transition(gate, north, SOUTH);
                    },
                    exit_south_1 = @install() {
                        map_transition(castle_bridges, west, SOUTH);
                    },
                    guard_right = @install() {
                        debug_subtext("S=4");
                    },
                    guard_left = @install() {
                        debug_subtext("S=5");
                    },
                }

                enum b_trigger {
                    chicken_1 = @install() {
                        debug_subtext("B=0");
                    },
                    chicken_2 = @install() {
                        debug_subtext("B=1");
                    },
                    chicken_3 = @install() {
                        debug_subtext("B=2");
                    },
                    farmer = @install() {
                        debug_subtext("B=3");
                    },
                    guard = @install() {
                        debug_subtext("B=4");

                        if(MEMORY.TICKET_FOR_EXHIBITION < 0d1) {
                            dialog("[SLOW]Bring me a ticket from the market first and you can try your luck in the arena.[B]");
                        } else {
                            question("[SLOW]Enter a ticket[CHOICE]Yes.[CHOICE]No.");

                            if(MEMORY.QUESTION_ANSWER == 0d0) {
                                MEMORY.TICKET_FOR_EXHIBITION--;

                                map_transition(duel_arena_waiting_room, fall, NONE);
                            }
                        }
                    },
                    b_trigger_5 = @install() {
                        debug_subtext("B=5");
                        _loot(0x01, WATER, 0d01, 0d01);
                    },
                    b_trigger_6 = @install() {
                        debug_subtext("B=6");
                        _loot(0x02, WATER, 0d01, 0d02);
                    },
                    b_trigger_7 = @install() {
                        debug_subtext("B=7");
                        _loot(0x03, WATER, 0d01, 0d00);
                    },
                    b_trigger_8 = @install() {
                        debug_subtext("B=8");
                        _loot(0x04, OIL, 0d01, 0d02);
                    },
                    b_trigger_9 = @install() {
                        debug_subtext("B=9");
                        _loot(0x05, OIL, 0d01, 0d01);
                    },

                    b_trigger_10 = @install() {
                        debug_subtext("B=10");
                        _loot(0x06, CRYSTAL, 0d01, 0d02);
                    },
                    b_trigger_11 = @install() {
                        debug_subtext("B=11");
                        _loot(0x07, CRYSTAL, 0d01, 0d03);
                    },
                    b_trigger_12 = @install() {
                        debug_subtext("B=12");
                        _loot(0x08, CLAY, 0d01, 0d01);
                    },
                    b_trigger_13 = @install() {
                        debug_subtext("B=13");
                        _loot(0x09, CLAY, 0d01, 0d02);
                    },
                    b_trigger_14 = @install() {
                        debug_subtext("B=14");
                        _loot(0x0a, CLAY, 0d01, 0d00);
                    },
                    b_trigger_15 = @install() {
                        debug_subtext("B=15");
                        _loot(0x0b, VINEGAR, 0d01, 0d01);
                    },
                    b_trigger_16 = @install() {
                        debug_subtext("B=16");
                        _loot(0x0c, VINEGAR, 0d01, 0d00);
                    },
                    b_trigger_17 = @install() {
                        debug_subtext("B=17");
                        _loot(0x0d, VINEGAR, 0d01, 0d03); // same as B=18
                    },
                    b_trigger_18 = @install() {
                        debug_subtext("B=18");
                        _loot(0x0d, VINEGAR, 0d01, 0d03);// same as B=17
                    },
                    b_trigger_19 = @install() {
                        debug_subtext("B=19");
                        _loot(0x0e, ATLAS_MEDALLION, 0d01, 0d00);
                    },
                }

                @install()
                fun stone_lifted() {
                    if!(ROOM.BEE_TRIGGERED) {
                        ROOM.BEE_TRIGGERED = True;

                        if!(ROOM.BEE_COLLECTED) {
                            add_bee(0d86, 0d20, reference(@install() {
                                bee_collected(ROOM.BEE_COLLECTED);
                            }));
                        }
                    }
                }

                fun trigger_enter() {
                    add_levitate_stone(0d86, 0d20, reference(@install() {
                        guard_levitate_stone(0d1);

                        stone_lifted();
                    }));
                    special_script(LEVITATE, reference(stone_lifted));

                    default_init_room(False, False);

                    place_statue(VIGOR, 0d64, 0d32);
                }
            };

            map market_west(IVOR_MARKET) {
                enum entrance {
                    north = entrance(0x2a, 0x01, SOUTH),
                    east = entrance(0x39, 0xc3, WEST),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_north = @install() {
                        map_transition(castle_center, south_3, NORTH);
                    },
                    exit_east = @install() {
                        map_transition(castle_fire_pit, west, EAST);
                    },
                }

                fun trigger_enter() {
                    add_enemy(VILLAGER_3_6, 0d9, 0d31, INACTIVE);
                    face(LAST_ENTITY, EAST);
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        question("[SLOW]Do you want to trade for iron?[CHOICE]5 Limestone…[CHOICE]5 Vinegar…[CHOICE]3 Bones…", 0d5);

                        if(MEMORY.QUESTION_ANSWER == 0d0) { // limestone
                            trade_items(IRON, 0d1, LIMESTONE, 0d5);
                        } else if(MEMORY.QUESTION_ANSWER == 0d1) { // vinegar
                            trade_items(IRON, 0d1, VINEGAR, 0d5);
                        } else if(MEMORY.QUESTION_ANSWER == 0d2) { // bone
                            trade_items(IRON, 0d1, BONE, 0d3);
                        }

                        control(BOTH);
                    }));

                    add_enemy(VILLAGER_3_5, 0d9, 0d58, INACTIVE);
                    face(LAST_ENTITY, EAST);
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        question("[SLOW]Do you want to trade for mushrooms?[CHOICE]1 Water…");

                        if(MEMORY.QUESTION_ANSWER == 0d0) { // water
                            dialog("[SLOW]Sorry, I'm all out for today…[B]");
                        }

                        control(BOTH);
                    }));

                    add_enemy(VILLAGER_2_1, 0d9, 0d116, INACTIVE);
                    face(LAST_ENTITY, EAST);
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        question("[SLOW]TICKETS… TICKETS…[CHOICE]100 Souls…");

                        if(MEMORY.QUESTION_ANSWER == 0d0) { // Souls
                            trade_items(TICKET_FOR_EXHIBITION, 0d1, MONEY, 0d100);
                        }

                        control(BOTH);
                    }));

                    init_map(0x0, 0x0, 0x3a, 0xcc);
                    default_init_room(False, False);
                }
            };

            map castle_throne_room(PALACE) {
                enum entrance {
                    south = entrance(0x31, 0x21, NORTH),

                    cinematic_enter = entrance(0x37, 0x01, NORTH),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum ROOM {
                    FAKE_EXIT_ID = memory(WORD, TEMP),

                    KING = memory(WORD, TEMP),
                    FACE = memory(WORD, TEMP),

                    IRON_THRONE_COUNT = memory(BYTE, SRAM),
                    IRON_THRONE_THRESHOLD = 0d4,

                    CLAIMED_SWORD_2 = memory(FLAG, SRAM),
                    CLAIMED_SWORD_3 = memory(FLAG, SRAM),
                    CLAIMED_SWORD_4 = memory(FLAG, SRAM),

                    CLAIMED_AXE_1 = memory(FLAG, SRAM),
                    CLAIMED_AXE_2 = memory(FLAG, SRAM),
                    CLAIMED_AXE_3 = memory(FLAG, SRAM),
                    CLAIMED_AXE_4 = memory(FLAG, SRAM),

                    CLAIMED_SPEAR_1 = memory(FLAG, SRAM),
                    CLAIMED_SPEAR_2 = memory(FLAG, SRAM),
                    CLAIMED_SPEAR_3 = memory(FLAG, SRAM),
                    CLAIMED_SPEAR_4 = memory(FLAG, SRAM),

                    CLAIMED_BAZOOKA = memory(FLAG, SRAM),
                }

                fun fake_exit() {
                    map_transition(castle_center, north, SOUTH);
                }

                @install()
                @async()
                fun fake_exit_scanner() {
                    attach_to_script(ROOM.FAKE_EXIT_ID);

                    while(True) {
                        arg[0x00] = <ACTIVE>[X];
                        arg[0x02] = <ACTIVE>[Y];
                        arg[0x04] = <SCRIPT_OWNER>[X];
                        arg[0x06] = <SCRIPT_OWNER>[Y];

                        if(arg[0x00] < arg[0x04]) {
                            arg[0x08] = arg[0x04] - arg[0x00];
                        } else {
                            arg[0x08] = arg[0x00] - arg[0x04];
                        }

                        if(arg[0x02] < arg[0x06]) {
                            arg[0x0a] = arg[0x06] - arg[0x02];
                        } else {
                            arg[0x0a] = arg[0x02] - arg[0x06];
                        }

                        if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                            fake_exit();
                            end();
                        }

                        yield();
                    }
                }

                @install()
                fun debug_triggered() {
                    set(FLAG.REVEALER);
                    subtext("Revealer learned.");
                    sleep(0x20);
                    select_alchemy(REVEALER);

                    destroy(SCRIPT_OWNER);
                }
                
                @install()
                @async()
                fun face_logic(entity) {
                    attach_to_script(entity);

                    while(alive(<SCRIPT_OWNER>)) {
                        object[0x00] = arg[0x10];
                        arg[0x10]++;
                        debug_memory(arg[0x10], 0d0);

                        sound(0x76);
                        sleep(0d180);
                    }
                }
                fun add_face(x, y) {
                    add_enemy(FACE_ENTITY, x, y);
                    ROOM.FACE = <LAST_ENTITY>;

                    face_logic(<LAST_ENTITY>);
                }

                fun check_iron_throne_reward() {
                    if(ROOM.IRON_THRONE_COUNT >= ROOM.IRON_THRONE_THRESHOLD) {
                        _dialog("[SLOW]Your contribution to the iron throne will be honored.[B]");

                        reward(REVEALER);
                        
                        control(BOTH);
                        end();
                    }
                }

                @install()
                fun update_removed_weapons() {
                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.SWORD_2) && !FLAG.SWORD_2) {
                        unlock(SWORD_1);
                    }
                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.SWORD_3) && !FLAG.SWORD_3) {
                        unlock(SWORD_1);
                    }
                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.SWORD_4) && !FLAG.SWORD_4) {
                        unlock(SWORD_1);
                    }

                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.AXE_1) && !FLAG.AXE_1) {
                        unlock(SWORD_1);
                    }
                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.AXE_2) && !FLAG.AXE_2) {
                        unlock(SWORD_1);
                    }
                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.AXE_3) && !FLAG.AXE_3) {
                        unlock(SWORD_1);
                    }
                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.AXE_4) && !FLAG.AXE_4) {
                        unlock(SWORD_1);
                    }

                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.SPEAR_1) && !FLAG.SPEAR_1) {
                        unlock(SWORD_1);
                    }
                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.SPEAR_2) && !FLAG.SPEAR_2) {
                        unlock(SWORD_1);
                    }
                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.SPEAR_3) && !FLAG.SPEAR_3) {
                        unlock(SWORD_1);
                    }
                    if((MEMORY.CURRENT_WEAPON == WEAPON_INDEX.SPEAR_4) && !FLAG.SPEAR_4) {
                        unlock(SWORD_1);
                    }
                }

                fun forfeit_weapon(claimed, weapon:FLAG) {
                    if!(claimed) {
                        claimed = True;

                        sound(PURCHASE);

                        weapon = False;
                        ROOM.IRON_THRONE_COUNT++;
                        update_removed_weapons();
                    }
                }

                fun iron_throne_trade_sword() {
                    while(MEMORY.QUESTION_ANSWER != 0xffff) {
                        if(False) {
                            text_start();
                        } else {
                            control(NONE);
                            open_message_box(DEFAULT, 0x0a, 0x02, 0x14, 0d20);
                        }

                        if((!ROOM.CLAIMED_SWORD_2) && FLAG.SWORD_2) {
                            text("[CHOICE]Gladiator Sword…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if((!ROOM.CLAIMED_SWORD_3) && FLAG.SWORD_3) {
                            text("[CHOICE]Crusader Sword…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if((!ROOM.CLAIMED_SWORD_4) && FLAG.SWORD_4) {
                            text("[CHOICE]Neutron Blade…");
                        } else {
                            text("[CHOICE]…");
                        }

                        await_answer();
                        text_end();

                        if(MEMORY.QUESTION_ANSWER != 0xffff) {
                            if(MEMORY.QUESTION_ANSWER == 0d0) {
                                forfeit_weapon(ROOM.CLAIMED_SWORD_2, SWORD_2);
                            } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                                forfeit_weapon(ROOM.CLAIMED_SWORD_3, SWORD_3);
                            } else if(MEMORY.QUESTION_ANSWER == 0d2) {
                                forfeit_weapon(ROOM.CLAIMED_SWORD_4, SWORD_4);
                            }

                            check_iron_throne_reward();
                        }
                    }
                }
                fun iron_throne_trade_axe() {
                    while(MEMORY.QUESTION_ANSWER != 0xffff) {
                        if(False) {
                            text_start();
                        } else {
                            control(NONE);
                            open_message_box(DEFAULT, 0x0a, 0x02, 0x14, 0d20);
                        }

                        if((!ROOM.CLAIMED_AXE_1) && FLAG.AXE_1) {
                            text("[CHOICE]Spider's Claw…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if((!ROOM.CLAIMED_AXE_2) && FLAG.AXE_2) {
                            text("[CHOICE]Bronze Axe…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if((!ROOM.CLAIMED_AXE_3) && FLAG.AXE_3) {
                            text("[CHOICE]Knight Basher…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if((!ROOM.CLAIMED_AXE_4) && FLAG.AXE_4) {
                            text("[CHOICE]Atom Smasher…");
                        } else {
                            text("[CHOICE]…");
                        }

                        await_answer();
                        text_end();

                        if(MEMORY.QUESTION_ANSWER != 0xffff) {
                            if(MEMORY.QUESTION_ANSWER == 0d0) {
                                forfeit_weapon(ROOM.CLAIMED_AXE_1, AXE_1);
                            } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                                forfeit_weapon(ROOM.CLAIMED_AXE_2, AXE_2);
                            } else if(MEMORY.QUESTION_ANSWER == 0d2) {
                                forfeit_weapon(ROOM.CLAIMED_AXE_3, AXE_3);
                            } else if(MEMORY.QUESTION_ANSWER == 0d3) {
                                forfeit_weapon(ROOM.CLAIMED_AXE_4, AXE_4);
                            }

                            check_iron_throne_reward();
                        }
                    }
                }
                fun iron_throne_trade_spear() {
                    while(MEMORY.QUESTION_ANSWER != 0xffff) {
                        if(False) {
                            text_start();
                        } else {
                            control(NONE);
                            open_message_box(DEFAULT, 0x0a, 0x02, 0x14, 0d20);
                        }

                        if((!ROOM.CLAIMED_SPEAR_1) && FLAG.SPEAR_1) {
                            text("[CHOICE]Horn Spear…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if((!ROOM.CLAIMED_SPEAR_2) && FLAG.SPEAR_2) {
                            text("[CHOICE]Bronze Spear…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if((!ROOM.CLAIMED_SPEAR_3) && FLAG.SPEAR_3) {
                            text("[CHOICE]Lance…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if((!ROOM.CLAIMED_SPEAR_4) && FLAG.SPEAR_4) {
                            text("[CHOICE]Laser Lance…");
                        } else {
                            text("[CHOICE]…");
                        }

                        await_answer();
                        text_end();

                        if(MEMORY.QUESTION_ANSWER != 0xffff) {
                            if(MEMORY.QUESTION_ANSWER == 0d0) {
                                forfeit_weapon(ROOM.CLAIMED_SPEAR_1, SPEAR_1);
                            } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                                forfeit_weapon(ROOM.CLAIMED_SPEAR_2, SPEAR_2);
                            } else if(MEMORY.QUESTION_ANSWER == 0d2) {
                                forfeit_weapon(ROOM.CLAIMED_SPEAR_3, SPEAR_3);
                            } else if(MEMORY.QUESTION_ANSWER == 0d3) {
                                forfeit_weapon(ROOM.CLAIMED_SPEAR_4, SPEAR_4);
                            }

                            check_iron_throne_reward();
                        }
                    }
                }
                // @install()
                fun iron_throne_trade() {
                    dialog("[SLOW]Forfeit 4 of your weapons weapons and I'll grant you a formula.[B]");

                    // MEMORY.QUESTION_ANSWER = 0xffff;
                    // while(MEMORY.QUESTION_ANSWER == 0xffff) {
                        if(False) {
                            text_start();
                        } else {
                            control(NONE);
                            open_message_box(DEFAULT, 0x0a, 0x02, 0x14, 0d20);
                        }

                        // text("[SLOW]What weapon do you want to turn in?");

                        if(FLAG.SWORD_2 || FLAG.SWORD_3 || FLAG.SWORD_4) {
                            text("[CHOICE]Sword…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if(FLAG.AXE_1 || FLAG.AXE_2 || FLAG.AXE_3 || FLAG.AXE_4) {
                            text("[CHOICE]Axe…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if(FLAG.SPEAR_1 || FLAG.SPEAR_2 || FLAG.SPEAR_3 || FLAG.SPEAR_4) {
                            text("[CHOICE]Spear…");
                        } else {
                            text("[CHOICE]…");
                        }
                        if(FLAG.BAZOOKA) {
                            text("[CHOICE]Bazooka…");
                        } else {
                            text("[CHOICE]…");
                        }
                        
                        await_answer();
                        
                        text_end();

                        if(MEMORY.QUESTION_ANSWER == 0d0) {
                            if(FLAG.SWORD_2 || FLAG.SWORD_3 || FLAG.SWORD_4) {
                                iron_throne_trade_sword();
                            }
                        } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                            if(FLAG.AXE_1 || FLAG.AXE_2 || FLAG.AXE_3 || FLAG.AXE_4) {
                                iron_throne_trade_axe();
                            }
                        } else if(MEMORY.QUESTION_ANSWER == 0d2) {
                            if(FLAG.SPEAR_1 || FLAG.SPEAR_2 || FLAG.SPEAR_3 || FLAG.SPEAR_4) {
                                iron_throne_trade_spear();
                            }
                        } else if(MEMORY.QUESTION_ANSWER == 0d3) {
                            forfeit_weapon(ROOM.CLAIMED_BAZOOKA, BAZOOKA);

                            check_iron_throne_reward();
                        }
                    // }
                }

                @install()
                fun king_triggered() {
                    if(ROOM.IRON_THRONE_COUNT < ROOM.IRON_THRONE_THRESHOLD) {
                        iron_throne_trade();
                    } else {
                        debug_subtext("TODO");
                    }

                    control(BOTH);
                }

                fun add_king(x, y) {
                    add_enemy(BOY_BLACK, x, y, INVINCIBLE);
                    ROOM.KING = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, B, reference(king_triggered));

                    animate(LAST_ENTITY, FREEZE, ANIMATION_BOY.SWIRL_EXIT);

                    if(False) {
                        sleep(0d300);

                        while(True) {
                            teleport(ROOM.KING, 0d49, 0d17);
                            animate(ROOM.KING, FREEZE, ANIMATION_BOY.SWIRL_EXIT);
                            sleep(0d300);

                            teleport(ROOM.KING, 0d49, 0d16);
                            animate(ROOM.KING, FREEZE, ANIMATION_BOY.DRAGGED);
                            sleep(0d300);
                        }
                    }
                }

                fun trigger_enter() {
                    if(FLAG.DEBUG) {
                        if!(FLAG.REVEALER) {
                            add_debug_entity(0x27, 0x15, reference(debug_triggered));
                        }
                    }

                    if(False) {
                        add_face(0d61, 0d03);
                    }

                    add_king(0d49, 0d17);

                    default_init_room(False, False);

                    add_enemy(PLACEHOLDER, 0x31, 0x21);
                    ROOM.FAKE_EXIT_ID = <LAST_ENTITY>;
                    sleep(0x10);
                    fake_exit_scanner();
                }
            };

            map castle_fire_pit(FIREPIT_NOBILIA) {
                enum entrance {
                    west = entrance(0x05, 0x1b, EAST),

                    cutscene_landing = entrance(0x0b, 0x1b, NONE),
                    
                    bonfire = entrance(0d45, 0d17, NONE, { bonfire_wakeup(-0d40, 0d8, -0d32, 0d32); }),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    b_trigger_0 = @install() {
                        debug_subtext("S=0");
                    },
                    exit_west = @install() {
                        map_transition(market_west, east, WEST);
                    },
                }

                enum ROOM {
                    DEBUG = False,

                    PIT_IGNITED = memory(FLAG, SRAM),
                    FIRE_ORB_TRIGGER_COUNTER = memory(WORD, TEMP),
                }

                fun ignite_pit() {
                    object[0x00] = 0x01; // ignite firepit

                    bonfire(0d45, 0d17, SOULS_MEMORY.BONFIRE_CASTLE_PIT);
                    attribute(LAST_ENTITY, INVISIBLE, True);
                    <LAST_ENTITY>[Z_LEVEL] = <BOY>[Z_LEVEL];
                }

                @install()
                fun firepit_damage() {
                    check_damage_type(FIRE, ROOM.FIRE_ORB_TRIGGER_COUNTER);

                    if(ROOM.FIRE_ORB_TRIGGER_COUNTER) {
                        ROOM.FIRE_ORB_TRIGGER_COUNTER = 0x00;
                        set(ROOM.PIT_IGNITED);
                        destroy(SCRIPT_OWNER);

                        set(SOULS_MEMORY.BONFIRE_CASTLE_PIT);
                        ignite_pit();
                    } else {
                        heal(SCRIPT_OWNER, 0x00, False);
                        // damage(SCRIPT_OWNER, 0x00, True);
                    }

                    // reset_alchemy_types();
                }

                fun trigger_enter() {
                    // object[0x00] = 0x01; // ignite fire
                    // object[0x01] = 0x02; // show windwalker_collision

                    if((!ROOM.PIT_IGNITED) && (!SOULS_MEMORY.BONFIRE_CASTLE_PIT)) {
                        add_enemy(FACE_ENTITY, 0d45, 0d17);
                        attribute(LAST_ENTITY, INVISIBLE, True);
                        attach_script(LAST_ENTITY, DAMAGE, reference(firepit_damage));

                        reset_alchemy_types();
                    } else {
                        ignite_pit();
                    }

                    default_init_room(False, False);
                }
            };

            map castle_bridges(IVOR_BRIDGE) {
                enum entrance {
                    east = entrance(0x8b, 0x28, WEST),
                    west = entrance(0x01, 0x29, EAST),

                    door_east = entrance(0x5f, 0x28, EAST),
                    door_west = entrance(0x2d, 0x29, WEST),

                    balcony_east_1 = entrance(0x4f, 0x0f, EAST),
                    balcony_east_2 = entrance(0x4f, 0x19, EAST),
                    balcony_east_3 = entrance(0x4f, 0x23, EAST),

                    balcony_west_1 = entrance(0x3f, 0x23, WEST),
                    balcony_west_2 = entrance(0x3f, 0x19, WEST),
                    balcony_west_3 = entrance(0x3f, 0x0f, WEST),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_door_east = @install() {
                        debug_subtext("S=0");
                    },
                    exit_door_west = @install() {
                        map_transition(castle_balconies, stairs_west, EAST);
                    },
                    exit_east = @install() {
                        debug_subtext("S=2");
                    },
                    balcony_east_3 = @install() {
                        debug_subtext("S=3");
                    },
                    balcony_east_2 = @install() {
                        debug_subtext("S=4");
                    },
                    balcony_east_1 = @install() {
                        debug_subtext("S=5");
                    },
                    exit_west = @install() {
                        map_transition(castle_center, south_1, WEST);
                    },
                    balcony_west_1 = @install() {
                        map_transition(castle_balconies, balcony_west_1, EAST);
                    },
                    balcony_west_2 = @install() {
                        map_transition(castle_balconies, balcony_west_2, EAST);
                    },
                    balcony_west_3 = @install() {
                        map_transition(castle_balconies, balcony_west_3, EAST);
                    },
                }

                fun trigger_enter() {
                    init_map(0x00, 0x00, 0x3c, 0x74);
                    
                    fade_in();
                }
            };

            map castle_balconies(IVOR_ROOMS_2) {
                enum entrance {
                    balcony_east_1 = entrance(0x75, 0x1a, WEST),
                    balcony_east_2 = entrance(0x75, 0x3c, WEST),
                    balcony_east_3 = entrance(0x75, 0x5e, WEST),

                    balcony_west_1 = entrance(0x05, 0x5e, EAST),
                    balcony_west_2 = entrance(0x05, 0x3c, EAST),
                    balcony_west_3 = entrance(0x05, 0x1a, EAST),

                    stairs_east = entrance(0x45, 0x39, EAST),
                    stairs_west = entrance(0x35, 0x39, WEST),

                    vent_east_1 = entrance(0x67, 0x23, NONE),
                    vent_east_2 = entrance(0x67, 0x67, NONE),

                    vent_west_1 = entrance(0x13, 0x67, NONE),
                    vent_west_2 = entrance(0x13, 0x45, NONE),
                    vent_west_3 = entrance(0x13, 0x23, NONE),
                }

                enum soundtrack {
                    default = soundtrack(CASTLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    door_3 = @install() {
                        debug_subtext("S=0");

                        error_locked(NONE); // TODO: should be EAST/WEST
                    },
                    door_2 = @install() {
                        debug_subtext("S=1");
                    },
                    door_1 = @install() {
                        debug_subtext("S=2");

                        error_locked(NONE); // TODO: should be EAST/WEST
                    },
                    door_east_3 = nop(),
                    door_east_2 = nop(),
                    door_east_1 = nop(),
                    vent_2 = @install() {
                        debug_subtext("S=6");
                    },
                    vent_1 = @install() {
                        debug_subtext("S=7");
                    },
                    vent_1 = @install() {
                        debug_subtext("S=8");
                    },
                    vent_2 = @install() {
                        debug_subtext("S=9");
                    },

                    vent_3 = @install() {
                        debug_subtext("S=10");
                    },
                    stairs_east = nop(),
                    stairs = @install() {
                        debug_subtext("S=12");

                        map_transition(castle_bridges, door_west, EAST);
                    },
                    balcony_east_3 = nop(),
                    balcony_east_2 = nop(),
                    balcony_east_1 = nop(),
                    balcony_1 = @install() {
                        debug_subtext("S=16");

                        map_transition(castle_bridges, balcony_west_1, WEST);
                    },
                    balcony_2 = @install() {
                        debug_subtext("S=17");

                        map_transition(castle_bridges, balcony_west_2, WEST);
                    },
                    balcony_3 = @install() {
                        debug_subtext("S=18");

                        map_transition(castle_bridges, balcony_west_3, WEST);
                    },
                }

                enum b_trigger {
                    sniff__1_water_1 = nop(), // east room 3
                    sniff__1_water_1 = @install() { // west room 1
                        debug_subtext("B=1");
                        _loot(0x20, WATER, 0d01, 0d01);
                    },
                    sniff__1_acorns_1 = nop(), // east room 2 (south)
                    sniff__1_acorns_1 = @install() { // west room 2
                        debug_subtext("B=3");
                        _loot(0x1d, ACORNS, 0d01, 0d01);
                    },
                    sniff__1_acorns_1 = @install() { // west room 3
                        debug_subtext("B=4");
                        _loot(0x1c, ACORNS, 0d01, 0d01);
                    },
                    sniff__1_feather_1 = @install() { // west halls (south)
                        debug_subtext("B=5");
                        _loot(0x1b, FEATHER, 0d01, 0d01);
                    },
                    sniff__1_feather_1 = nop(), // east room 2 (north)
                    sniff__1_feather_1 = @install() { // west halls (north)
                        debug_subtext("B=7");
                        _loot(0x19, FEATHER, 0d01, 0d01);
                    },
                    sniff__1_ethanol_1 = nop(), // east room 1 (north)
                    sniff__1_ethanol_1 = @install() { // west room 3 (north)
                        debug_subtext("B=9");
                        _loot(0x17, ETHANOL, 0d01, 0d01);
                    },

                    sniff__1_ash_1 = nop(),// east halls (south, window)
                    sniff__1_ash_1 = @install() { // west halls (south)
                        debug_subtext("B=11");
                        _loot(0x15, ASH, 0d01, 0d01);
                    },
                    sniff__1_iron_1 = nop(), // east room 1
                    sniff__1_iron_1 = @install() { // west room 3
                        debug_subtext("B=13");
                        _loot(0x13, IRON, 0d01, 0d01);
                    },
                    chest_east_3__1_roots = nop(), // east room 3
                    chest_west_1__1_wax = @install() { // west room 1
                        debug_subtext("B=15");
                        _loot_chest(0x07, MUD_PEPPER, 0d01);
                    },
                    chest_x__1_water = @install() { // ???
                        debug_subtext("B=16");
                        _loot_chest(0x20, WATER, 0d01); // same as B=17
                    },
                    chest_x__1_water = @install() { // ???
                        debug_subtext("B=17");
                        _loot(0x20, WATER, 0d01, 0d00); // same as B=16
                    },
                }

                fun init_room(index) {
                    if(index == 0d0) {
                        init_map(0x00, 0x00, 0x38, 0x74);
                    } else if(index == 0d1) {
                        init_map(0x42, 0x00, 0x78, 0x74);
                    }
                }

                fun trigger_enter() {
                    // object[0x00] = 0x7e; // door_west_1
                    object[0x01] = 0x7e; // door_west_2
                    // object[0x02] = 0x7e; // door_west_3
                    // object[0x03] = 0x7e; // door_east_3
                    // object[0x04] = 0x7e; // door_east_2
                    // object[0x05] = 0x7e; // door_east_1

                    init_room(0d0);
                    fade_in();
                }
            };

            group duel_arena() {
                enum AREA_DUEL_ARENA {
                    DEFAULT_MUSIC = MUSIC.BOSS_ARENA,
                }

                map duel_arena_waiting_room(ARENA_ROOM) {
                    enum entrance {
                        north = entrance(0x14, 0x13, SOUTH),
                        
                        fall = entrance(0d19, 0d30, NONE, { crash_both(); }),
                    }

                    enum soundtrack {
                        default = soundtrack(AREA_DUEL_ARENA.DEFAULT_MUSIC, 0xff)
                    }

                    enum stepon_trigger {
                        exit_north = @install() {
                            debug_subtext("S=0");

                            map_transition(duel_arena, south, NORTH);
                        },
                    }

                    enum b_trigger {
                        gourd_west = @install() {
                            debug_subtext("B=0");
                            _loot_chest(0x01, CHEST_2_1, 0x01);
                            // _loot_chest(0x01, CHEST_2_2, 0x01);
                            // _loot_chest(0x01, CHEST_2_3, 0x01);
                        },
                        secret_passage = @install() { // empty
                            debug_subtext("B=1");
                        },
                        gourd_east = @install() {
                            debug_subtext("B=2");
                            _loot_chest(0x02, PETAL, 0x01);
                        },
                        gourd_hidden_1_1 = @install() {
                            debug_subtext("B=3");
                            _loot_chest(0x03, WAX, 0x01);
                        },
                        gourd_hidden_1_2 = @install() {
                            debug_subtext("B=4");
                            _loot_chest(0x04, CALL_BEADS, 0x01);
                        },
                        gourd_hidden_1_3 = @install() {
                            debug_subtext("B=5");
                            _loot_chest(0x05, GLOVE_2_1, 0x01);
                            // _loot_chest(0x02, GLOVE_2_2, 0x01);
                            // _loot_chest(0x02, GLOVE_2_3, 0x01);
                        },
                        gourd_hidden_2_1 = @install() {
                            debug_subtext("B=6");
                            _loot_chest(0x06, WAX, 0x01);
                        },
                        gourd_hidden_2_2 = @install() {
                            debug_subtext("B=7");
                            _loot_chest(0x07, CALL_BEADS, 0x01);
                        },
                        gourd_hidden_2_3 = @install() {
                            debug_subtext("B=8");
                            _loot_chest(0x08, HELM_2_1, 0x01);
                            // _loot_chest(0x02, HELM_2_2, 0x01);
                            // _loot_chest(0x02, HELM_2_3, 0x01);
                        },
                    }

                    fun trigger_enter() {
                        object[0x00] = 0x04; // open door

                        // object[0x01] = 0x01; // loot gourd_west
                        // object[0x02] = 0x01; // loot gourd_east

                        // object[0x03] = 0x01; // loot gourd_hidden_1_1
                        // object[0x04] = 0x01; // loot gourd_hidden_1_2
                        // object[0x05] = 0x01; // loot gourd_hidden_1_3

                        // object[0x06] = 0x01; // loot gourd_hidden_2_1
                        // object[0x07] = 0x01; // loot gourd_hidden_2_2
                        // object[0x08] = 0x01; // loot gourd_hidden_2_3

                        CUSTOM_FLAG.NO_DOG = True;

                        default_init_room(False, False);
                    }
                };

                map duel_arena(ARENA) {
                    enum entrance {
                        north_cinematic = entrance(0x20, 0x07, NONE),
                        south = entrance(0x22, 0x69, NORTH) // 0x22, 0x6a
                    }

                    enum soundtrack {
                        default = soundtrack(AREA_DUEL_ARENA.DEFAULT_MUSIC, 0xff)
                    }

                    enum ROOM {
                        enemy_1 = MOSQUITO,
                        enemy_2 = FLOWER_PURPLE,
                        enemy_3 = LIZARD,
                        enemy_4 = TUMBLING_WEED,

                        enemy_5 = MINITAUR,
                        enemy_6 = BOY_BLACK,
                        enemy_7 = STERLING,

                        LOCK = memory(FLAG, TEMP),

                        GUARD_LEFT = 0d8,
                        GUARD_RIGHT = 0d496,
                        GUARD_COOLDOWN = 0d180,

                        HIT_COUNT_KILL = 0d3,
                        HIT_COUNT = memory(WORD, TEMP),
                        KILL_COUNT = memory(BYTE, SRAM),

                        HIT_COUNT_BOY = memory(WORD, TEMP),

                        ID_ENEMY = memory(WORD, TEMP),
                    }

                    fun reset_camera() {
                        set_camera(TILE_CENTER, 0d32, 0d84, 0x20);
                        wait(CAMERA_PAN_Y);
                        wait(CAMERA_PAN_X);
                    }

                    @install()
                    @async()
                    fun side_guard_scanner() {
                        while(True) {
                            if(<BOY>[X] >= ROOM.GUARD_RIGHT) {
                                face(BOY, EAST);
                                animate(BOY, ONCE, ANIMATION_ALL.KNOCKBACK);

                                sleep(ROOM.GUARD_COOLDOWN);
                            } else if(<BOY>[X] <= ROOM.GUARD_LEFT) {
                                face(BOY, WEST);
                                animate(BOY, ONCE, ANIMATION_ALL.KNOCKBACK);

                                sleep(ROOM.GUARD_COOLDOWN);
                            }

                            yield();
                        }
                    }

                    @install()
                    @async()
                    fun lock_scanner() {
                        while(True) {
                            if(ROOM.LOCK != arg[0x10]) {
                                arg[0x10] = ROOM.LOCK;

                                if(arg[0x14] > 0d0) {
                                    arg[0x12] = randrange(0d3);
                                    if(arg[0x12] == 0d0) {
                                        arg[0x14] = 0d79;
                                    } else if(arg[0x12] == 0d1) {
                                        arg[0x14] = 0d84;
                                    } else {
                                        arg[0x14] = 0d89;
                                    }
                                } else {
                                    arg[0x14] = <BOY>[Y] >> 0d3;
                                }

                                while((arg[0x16] == arg[0x14]) || arg[0x16] == 0d0) {
                                    arg[0x12] = randrange(0d3);
                                    if(arg[0x12] == 0d0) {
                                        arg[0x16] = 0d79;
                                    } else if(arg[0x12] == 0d1) {
                                        arg[0x16] = 0d84;
                                    } else {
                                        arg[0x16] = 0d89;
                                    }
                                }

                                if(arg[0x10]) {
                                    attribute(ROOM.ID_ENEMY, INVINCIBLE_TEMP, True);
                                    attribute(BOY, INVINCIBLE_TEMP, True);

                                    teleport(ROOM.ID_ENEMY, 0d25, arg[0x16]);
                                    teleport(BOY, 0d38, arg[0x14]);

                                    if(True) {
                                        attribute(ROOM.ID_ENEMY, ROOT, True);
                                        attribute(BOY, ROOT, True);
                                    }

                                    while((ROOM.ID_ENEMY[FLAGS_1] & ATTRIBUTE_FLAGS.IN_ANIMATION) || (<BOY>[FLAGS_1] & ATTRIBUTE_FLAGS.IN_ANIMATION)) {
                                        teleport(ROOM.ID_ENEMY, 0d25, arg[0x16]);
                                        teleport(BOY, 0d38, arg[0x14]);

                                        yield();
                                    }

                                    if(True) {
                                        attribute(ROOM.ID_ENEMY, ROOT, False);
                                        attribute(BOY, ROOT, False);
                                    }

                                    animate(ROOM.ID_ENEMY, ONCE, ANIMATION_ALL.DEFAULT);
                                } else {
                                    attribute(ROOM.ID_ENEMY, INVINCIBLE_TEMP, False);
                                    attribute(BOY, INVINCIBLE_TEMP, False);

                                    free_camera();
                                }
                            }

                            if(arg[0x10]) {
                                if(False) {
                                    teleport(ROOM.ID_ENEMY, 0d25, arg[0x16]);
                                } else {
                                    if(ROOM.ID_ENEMY[X] > 0d200) {
                                        ROOM.ID_ENEMY[X] = 0d200;
                                    }
                                }

                                if(False) {
                                    teleport(BOY, 0d38, arg[0x14]);
                                } else {
                                    if(<BOY>[X] < 0d308) {
                                        <BOY>[X] = 0d308;
                                    }   
                                }
                            }

                            yield();
                        }
                    }

                    fun dialog_reward() {
                        control(NONE);

                        reward(SOULS_MEMORY.REWARD_ARENA_DUEL);
                        
                        dialog("[SLOW]…Um, you actually won…?[B]Well fought. Don't just gamble your reward away.[B]");

                        map_transition(castle_center, guard, NONE);
                    }
                    fun dialog_no_enemy() {
                        sleep(0d600);
                        control(NONE);
                        
                        dialog("[SLOW]There are no more enemies left for you.[B]");

                        map_transition(castle_center, guard, NONE);
                    }

                    fun stall() {
                        ROOM.LOCK = True;

                        reset_camera();
                        sleep(0d60);

                        ROOM.LOCK = False;
                    }

                    @install()
                    fun prepare_next_enemy() {
                        ROOM.HIT_COUNT = 0d0;
                        ROOM.HIT_COUNT_BOY = 0d0;

                        if(ROOM.ID_ENEMY[HP] > 0d0) {
                            destroy(ROOM.ID_ENEMY);
                        }

                        if(ROOM.KILL_COUNT == 0d0) {
                            add_enemy(ROOM.enemy_1, 0d32, 0d84);
                        } else if(ROOM.KILL_COUNT == 0d1) {
                            add_enemy(ROOM.enemy_2, 0d32, 0d84);
                        } else if(ROOM.KILL_COUNT == 0d2) {
                            add_enemy(ROOM.enemy_3, 0d32, 0d84);
                        } else if(ROOM.KILL_COUNT == 0d3) {
                            add_enemy(ROOM.enemy_4, 0d32, 0d84);
                        } else if(ROOM.KILL_COUNT == 0d4) {
                            add_enemy(ROOM.enemy_5, 0d32, 0d84);
                        } else if(ROOM.KILL_COUNT == 0d5) {
                            add_enemy(ROOM.enemy_6, 0d32, 0d84);
                        } else if(ROOM.KILL_COUNT == 0d6) {
                            add_enemy(ROOM.enemy_7, 0d32, 0d84);
                            attach_sterling_script(<LAST_ENTITY>, False, 0d30, 0d38, 0d60, 0d664, 0d999);
                        } else if(ROOM.KILL_COUNT == 0d7) {
                            ROOM.KILL_COUNT++;
                            dialog_reward();
                        } else {
                            dialog_no_enemy();
                        }

                        ROOM.ID_ENEMY = <LAST_ENTITY>;

                        attach_script(LAST_ENTITY, DAMAGE_DEATH, reference(hit_enemy));
                        attach_script(BOY, DAMAGE_DEATH, reference(hit_boy));

                        teleport(ROOM.ID_ENEMY, 0d25, 0d84);
                        teleport(BOY, 0d38, 0d84);

                        face(ROOM.ID_ENEMY, EAST);
                        face(BOY, WEST);

                        stall();
                    }

                    @install()
                    fun reset() {
                        yield();
                        
                        attribute(ROOM.ID_ENEMY, INVINCIBLE_TEMP, True);
                        attribute(BOY, INVINCIBLE_TEMP, True);

                        if(False) {
                            heal(ROOM.ID_ENEMY, 0d0, False);
                            heal(BOY, 0d0, False);
                        }

                        teleport(ROOM.ID_ENEMY, 0d25, 0d84);
                        teleport(BOY, 0d38, 0d84);

                        face(ROOM.ID_ENEMY, EAST);
                        face(BOY, WEST);

                        stall();
                    }

                    fun hit() {
                        if((<BOY>[HP] <= 0d0) || (ROOM.ID_ENEMY[HP] <= 0d0)) {
                            subtext("TKO!");
                        } else {
                            MEMORY.STRING_PARAMETER_1 = ROOM.HIT_COUNT;
                            MEMORY.STRING_PARAMETER_2 = ROOM.HIT_COUNT_BOY;
                            subtext("[MEM1]:[MEM2]");
                        }
                    }

                    @install()
                    fun hit_boy() {
                        sound(ARENA_CHEER);

                        ROOM.HIT_COUNT_BOY++;

                        hit();
                        
                        if((<BOY>[HP] <= 0d0) || (ROOM.HIT_COUNT_BOY >= ROOM.HIT_COUNT_KILL)) {
                            attach_script(BOY, DEATH, reference(boy_death));
                            damage(BOY, 0d999, True);
                        } else {
                            reset();
                        }
                    }
                    @install()
                    fun hit_enemy() {
                        sound(ARENA_CHEER);

                        if(ROOM.ID_ENEMY[DAMAGE_TYPE] != DAMAGE_TYPE.BOY_ATTACK) {
                            heal(ROOM.ID_ENEMY, 0d999, True);
                            
                            damage(BOY, 0d5, True);
                            hit_boy();
                            
                            end();
                        }

                        ROOM.HIT_COUNT++;

                        hit();

                        if((ROOM.HIT_COUNT >= ROOM.HIT_COUNT_KILL) || (ROOM.ID_ENEMY[HP] <= 0d0)) {
                            ROOM.HIT_COUNT = 0d0;
                            ROOM.KILL_COUNT++;

                            prepare_next_enemy();
                        } else {
                            reset();
                        }
                    }

                    fun trigger_enter() {
                        init_map(0x00, 0x30, 0x40, 0x70);

                        CUSTOM_FLAG.NO_DOG = True;
                        default_init_room(False, False);

                        walk(BOY, TILE_ABSOLUTE, 0d38, 0d84, BOY, BOY);
                        lock_scanner();
                        side_guard_scanner();

                        if(False) {
                            ROOM.KILL_COUNT = 0d6;
                        }
                        prepare_next_enemy();
                    }
                };
            };
        };
    };
};

area northwest_inbetwixx() {
    map northwest_inbetwixx(RIVER) {
        // sniff=vanilla

        enum entrance {
            east = entrance(0x44, 0x44, WEST),
            west = entrance(0x01, 0x3d, EAST),
            cave = entrance(0x41, 0x0b, SOUTH)
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            DEBUG = False,

            LIFT_ID = memory(WORD, TEMP),
            LIFT_POSITION = memory(BYTE, SRAM),
            CENTER_LINE = 0d272,

            SECRET_PASSAGE_TRIGGER = memory(WORD, TEMP),
            SECRET_PASSAGE_DISTANCE = 0x10,
        }

        fun init_lift(position) {
            if(ROOM.LIFT_POSITION == 0d0) {
                ROOM.LIFT_POSITION = position;
            }

            if(ROOM.LIFT_POSITION == 0d1) {
                add_placeholder(LIFT_MOVING, 0d16, 0d15, ONCE_FREEZE);
            } else if(ROOM.LIFT_POSITION == 0d2) {
                add_placeholder(LIFT_MOVING, 0d33, 0d15, ONCE_FREEZE);
            } else if(ROOM.LIFT_POSITION == 0d3) {
                add_placeholder(LIFT_MOVING, 0d49, 0d15, ONCE_FREEZE);
            }

            ROOM.LIFT_ID = <LAST_ENTITY>;
        }

        @install()
        fun move_lift(lift_id, position, dry) {
            if(ROOM.LIFT_POSITION == position) {
                end();
            }

            if(position == 0d1) {
                arg[0x10] = 0d128;
            } else if(position == 0d2) {
                arg[0x10] = 0d264;
            } else if(position == 0d3) {
                arg[0x10] = 0d392;
            }

            if!(dry) {
                if((<BOY>[X] < ROOM.CENTER_LINE) ^ (<DOG>[X] < ROOM.CENTER_LINE)) {
                    arg[0x12] = True;
                }

                if(arg[0x12]) {
                    walk(ACTIVE, COORDINATE_ABSOLUTE, lift_id[X], lift_id[Y], ACTIVE, NONE);
                    face(ACTIVE, SOUTH);
                } else {
                    walk(ACTIVE, COORDINATE_ABSOLUTE, lift_id[X] - 0d8, lift_id[Y], NONE, NONE);
                    walk(INACTIVE, COORDINATE_ABSOLUTE, lift_id[X] + 0d8, lift_id[Y], BOTH, NONE);
                    face(ACTIVE, SOUTH);
                    face(INACTIVE, SOUTH);
                }
            }

            animate(lift_id, LOOP, ANIMATION_PLACEHOLDER.LIFT_MOVING);

            while(lift_id[X] > arg[0x10]) {
                lift_id[X]--;

                if!(dry) {
                    if(arg[0x12]) {
                        <ACTIVE>[X] = lift_id[X];
                        <ACTIVE>[Y] = lift_id[Y];
                    } else {
                        <ACTIVE>[X] = lift_id[X] - 0d8;
                        <ACTIVE>[Y] = lift_id[Y];

                        <INACTIVE>[X] = lift_id[X] + 0d8;
                        <INACTIVE>[Y] = lift_id[Y];
                    }
                }

                yield();
            }
            while(lift_id[X] < arg[0x10]) {
                lift_id[X]++;

                if!(dry) {
                    if(arg[0x12]) {
                        <ACTIVE>[X] = lift_id[X];
                        <ACTIVE>[Y] = lift_id[Y];
                    } else {
                        <ACTIVE>[X] = lift_id[X] - 0d8;
                        <ACTIVE>[Y] = lift_id[Y];

                        <INACTIVE>[X] = lift_id[X] + 0d8;
                        <INACTIVE>[Y] = lift_id[Y];
                    }
                }

                yield();
            }

            animate(lift_id, ONCE_FREEZE, ANIMATION_PLACEHOLDER.LIFT_MOVING);

            if!(dry) {
                if(arg[0x12]) {
                    walk(ACTIVE, TILE_RELATIVE_DIRECT, 0d0, 0d1, ACTIVE, ACTIVE);
                } else {
                    walk(ACTIVE, TILE_RELATIVE_DIRECT, 0d0, 0d1, NONE, BOTH);
                    walk(INACTIVE, TILE_RELATIVE_DIRECT, 0d0, 0d1, BOTH, BOTH);
                }
            }

            ROOM.LIFT_POSITION = position;
        }

        enum stepon_trigger {
            lift_west = @install() {
                debug_subtext("S=0");

                if(ROOM.LIFT_POSITION == 0d1) {
                    move_lift(ROOM.LIFT_ID, 0d3);
                }
            },
            lift_east = @install() {
                debug_subtext("S=1");

                if(ROOM.LIFT_POSITION == 0d3) {
                    move_lift(ROOM.LIFT_ID, 0d1);
                }
            },
            exit_west = @install() {
                map_transition(volcano, east, WEST);
            },
            bridge_east = @install() {
                // pit_act2_between(0x0250);

                debug_subtext("S=3");

                generic_act2_dog_bridge_jump(WEST, 0x29, 0x3c);
            },
            bridge_west = @install() {
                debug_subtext("S=4");

                generic_act2_dog_bridge_jump(EAST, 0x20, 0x3c);
            },
            stepon_5 = @install() {
                debug_subtext("S=5");
            },
            stepon_6 = @install() {
                map_transition(northern_waterfall, south, NORTH);
            },
            stepon_7 = @install() {
                debug_subtext("S=7");
            },
            stepon_8 = @install() {
                debug_subtext("S=8");
            },
            exit_west = @install() {
                map_transition(inbetwixx, west_2, EAST);
            }
        }

        enum b_trigger {
            sniff__1_water_1 = @install() {
                debug_subtext("B=0");
                _loot(0x0c, WATER, 0d01, 0d01);
            },
            sniff__1_water_1 = @install() {
                debug_subtext("B=1");
                _loot(0x0b, WATER, 0d01, 0d01);
            },
            sniff__1_roots_2 = @install() {
                debug_subtext("B=2");
                _loot(0x0a, ROOTS, 0d01, 0d02);
            },
            sniff__1_ash_2 = @install() {
                debug_subtext("B=3");
                _loot(0x09, ASH, 0d01, 0d02);
            },
            sniff__1_wax_1 = @install() {
                debug_subtext("B=4");
                _loot(0x08, WAX, 0d01, 0d01);
            },
            sniff__1_brimstone_2 = @install() {
                debug_subtext("B=5");
                _loot(0x07, BRIMSTONE, 0d01, 0d02);
            },
            sniff__1_brimstone = @install() {
                debug_subtext("B=6");
                _loot(0x06, BRIMSTONE, 0d01, 0d00);
            },
            sniff__1_limestone_1 = @install() {
                debug_subtext("B=7");
                _loot(0x05, LIMESTONE, 0d01, 0d01);
            },
            sniff__1_limestone_2 = @install() {
                debug_subtext("B=8");
                _loot(0x04, LIMESTONE, 0d01, 0d02);
            },
            sniff__1_ethanol_1 = @install() {
                debug_subtext("B=9");
                _loot(0x03, ETHANOL, 0d01, 0d01);
            },

            sniff__1_ethanol_2 = @install() {
                debug_subtext("B=10");
                _loot(0x02, ETHANOL, 0d01, 0d02);
            },
            sniff__1_ethanol_1 = @install() {
                debug_subtext("B=11");
                _loot(0x01, ETHANOL, 0d01, 0d01);
            },
            axe2_wall = @install() {
                _axe2_wall(0x00);
            }
        }

        @install()
        @async()
        fun hidden_exit_check() {
            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = ROOM.SECRET_PASSAGE_TRIGGER[X];
                arg[0x06] = ROOM.SECRET_PASSAGE_TRIGGER[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= ROOM.SECRET_PASSAGE_DISTANCE) && (arg[0x0a] <= ROOM.SECRET_PASSAGE_DISTANCE)) {
                    map_transition(river, right, NORTH);
                    end();
                }
                yield();

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }
            }
        }
        
        fun trigger_enter() {
            init_lift(0d2);
            if(ROOM.LIFT_POSITION == 0d2) {
                add_frippo_switch(0d33, 0d15 + 0d1, reference(@install() {
                    if(<ACTIVE>[X] < ROOM.CENTER_LINE) {
                        move_lift(ROOM.LIFT_ID, 0d1, True);
                    } else {
                        move_lift(ROOM.LIFT_ID, 0d3, True);
                    }
                }));
            }

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // east
                add_enemy(BUZZARD_1, 0d50, 0d26);

                // west
                add_enemy(BUZZARD_1, 0d15, 0d14);
                add_enemy(FLOWER_PURPLE, 0d12, 0d38);
            }

            default_init_room(True, True);

            subtext("North West Inbetwixx");

            add_enemy(PLACEHOLDER, 0x17, 0x00);
            ROOM.SECRET_PASSAGE_TRIGGER = <LAST_ENTITY>;

            if(SOULS_MEMORY.WITH_BOAT_RIDE) {
                hidden_exit_check();
            }

            bomb_wall_trigger(0x00, 0x01, 0d64, 0d17);
        }
    };

    map northern_waterfall(WATERFALL) {
        enum entrance {
            south = entrance(0x11, 0x3f, NORTH)
        }

        enum soundtrack {
            default = soundtrack(WATERFALL_AMBIENT, 0xff)
        }

        @install()
        fun waterfall_triggered() {
            if(False) {
                generic_yeet_waterfall();
                map_transition(junkyard_northwest, crash_north, NONE);
            } else {
                error_dlc(NONE);
            }
        }

        enum stepon_trigger {
            stepon_0 = waterfall_triggered(),
            stepon_1 = waterfall_triggered(),
            stepon_2 = waterfall_triggered(),
            stepon_3 = waterfall_triggered(),
            stepon_4 = waterfall_triggered(),
            stepon_5 = waterfall_triggered(),
            stepon_6 = @install() {
                map_transition(northwest_inbetwixx, cave, SOUTH);
            }
        }

        fun trigger_enter() {
            default_init_room(True, True);
        }
    };
};

area east_inbetwixx() {
    map east_inbetwixx(SANDPITS) {
        // chests=vanilla
        // sniff=vanilla

        enum entrance {
            east = entrance(0x73, 0x22, WEST),
            cave = entrance(0x42, 0x1a, SOUTH),
            south_1 = entrance(0x44, 0x9e, NORTH),
            south_2 = entrance(0x33, 0x9e, NORTH),
            west_1 = entrance(0x01, 0x2a, EAST),
            west_2 = entrance(0x01, 0x22, EAST),
            west_3 = entrance(0x01, 0x15, EAST)
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum ROOM {
            BRANCH_USED = memory(FLAG, SRAM),
        }

        enum BOSS {
            DEBUG = False,
            PROGRESS = memory(FLAG, TEMP),

            ID = memory(WORD, TEMP),

            PIT_THRESHOLD = 0d03,

            PIT_1_TIMER = memory(WORD, TEMP),
            PIT_2_TIMER = memory(WORD, TEMP),
            PIT_3_TIMER = memory(WORD, TEMP),
            PIT_4_TIMER = memory(WORD, TEMP),
        }

        fun fog_wall(exit_direction:DIRECTION) {
            if(BOSS.PROGRESS) {
                fog_wall_inside(!SOULS_MEMORY.DEAD_PIT_EGG, exit_direction);
            }
        }

        enum stepon_trigger {
            center_bottleneck = nop(),
            stepon_1 = @install() {
                debug_subtext("S=1");
            },
            sandpit_5_2_west = nop(),
            sandpit_5_2_north = nop(),
            sandpit_4_1_east = nop(),
            sandpit_4_1_south = nop(),
            sandpit_4_1 = nop(),
            sandpit_2_north = nop(),
            sandpit_2 = nop(),
            sandpit_8_east = nop(),

            sandpit_6_north = nop(),
            sandpit_6_west = nop(),
            sandpit_6 = nop(),
            sandpit_9 = nop(),
            sandpit_10_3 = nop(),
            sandpit_10_2 = nop(),
            sandpit_10_1 = nop(),
            sandpit_8 = nop(),
            sandpit_7 = nop(),
            sandpit_5_1 = nop(),

            sandpit_4_2 = nop(),
            sandpit_3_2 = nop(),
            stepon_22 = @install() {
                debug_subtext("S=22");
            },
            stepon_23 = @install() {
                debug_subtext("S=23");
            },
            exit_west_1 = @install() {
                fog_wall(NONE); // EAST

                map_transition(east_inbetwixx, west_3, WEST);
            },
            exit_cave = @install() {
                fog_wall(SOUTH);
                
                map_transition(jaguar_cave, south, NORTH);
            },
            exit_south_1 = @install() {
                fog_wall(NONE); // NORTH
                
                map_transition(east_crossing, crash, SOUTH);
            },
            exit_south_2 = @install() {
                fog_wall(NONE); // NORTH
                
                map_transition(east_crossing, north, SOUTH);
            },
            exit_west_2 = @install() {
                fog_wall(NONE); // EAST
                
                map_transition(inbetwixx, east, WEST);
            },
            exit_west_3 = @install() {
                fog_wall(NONE); // EAST
                
                map_transition(east_inbetwixx, west_1, WEST);
            },

            sandpit_1_1 = nop(),
            sandpit_1_1_west = nop(),
            sandpit_3_2_west = nop(),
            sandpit_4_2_south = nop(),
            sandpit_5_1_south = nop(),
            sandpit_7_north = nop(),
            sandpit_9_north = nop(),
            sandpit_10_2_north = nop(),
            sandpit_10_3_north = nop(),
            sandpit_cave_north = nop(),

            sandpit_cave = nop(),
            sandpit_5_1_north = nop(),
            sandpit_1_2_west = nop(),
            sandpit_1_2_east = nop(),
            sandpit_3_1_north = nop(),
            sandpit_2_east = nop(),
            sandpit_3_1_south = nop(),
            sandpit_4_3_west = nop(),
            sandpit_4_3_north = nop(),
            sandpit_4_3 = nop(),

            sandpit_5_2 = nop(),
            sandpit_1_2 = nop(),
            sandpit_3_1 = nop(),
            sandpit_4_1 = nop(),
            sandpit_8_west = nop(),
            sandpit_8_north = nop(),
            sandpit_10_3_east = nop(),
            sanpit_7_south = nop(),
            sanpit_7_east = nop(),
            sandpit_3_2_east = nop(),

            sandpit_4_2_north = nop(),
            sandpit_4_2_east = nop(),
            sandpit_10_1_north = nop(),
            sandpit_10_1_west = nop(),
            exit_east = @install() {
                fog_wall(NONE); // WEST
                
                map_transition(eastern_barrier, west, EAST);
            }
        }

        enum b_trigger {
            sniff__1_wax = @install() {
                debug_subtext("B=0");
                _loot(0x2c, WAX, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("B=1");
                _loot(0x2e, WAX, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("B=2");
                _loot(0x2d, WAX, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("B=3");
                _loot(0x16, WAX, 0d01, 0d00);
            },
            gourd_south__4_crystal = @install() {
                debug_subtext("B=4");
                _loot_chest(0x02, CRYSTAL, 0d04);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=5");
                _loot(0x17, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=6");
                _loot(0x18, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=7");
                _loot(0x19, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=8");
                _loot(0x1a, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=9");
                _loot(0x1b, ASH, 0d01, 0d00);
            },

            sniff__1_ash = @install() {
                debug_subtext("B=10");
                _loot(0x1c, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=11");
                _loot(0x1d, ASH, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=12");
                _loot(0x1e, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=13");
                _loot(0x1f, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=14");
                _loot(0x20, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=15");
                _loot(0x21, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=16");
                _loot(0x22, ROOTS, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=17");
                _loot(0x23, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=18");
                _loot(0x24, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=19");
                _loot(0x25, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=20");
                _loot(0x26, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=21");
                _loot(0x29, CLAY, 0d01, 0d00);
            },
            gourd_hidden_west__1_clay = @install() {
                debug_subtext("B=22");
                _loot_chest(0x29, CLAY, 0d01);
            },
            gourd_hidden_north_3__1_water = @install() {
                debug_subtext("B=23");
                _loot_chest(0x2a, WATER, 0d01);
            },
            gourd_hidden_north_2__1_biscuit = @install() {
                debug_subtext("B=24");
                _loot_chest(0x28, BISCUIT, 0d01);
            },
            gourd_hidden_north_1__1_clay = @install() {
                debug_subtext("B=25");
                _loot_chest(0x27, CLAY, 0d01);
            },
            gourd_west__1_petal = @install() {
                debug_subtext("B=26");
                _loot_chest(0x00, PETAL, 0d01);
            },
            gourd_north__4_wax = @install() {
                debug_subtext("B=27");
                _loot_chest(0x01, WAX, 0d04);
            }
        }

        fun open_sandpits(open) {
            if(open) {
                object[0x03] = 0x04; // open sandpit_2
                object[0x04] = 0x04; // open sandpit_1
                object[0x05] = 0x04; // open sandpit_4
                object[0x06] = 0x04; // open sandpit_5
                object[0x07] = 0x04; // open sandpit_6
                object[0x08] = 0x04; // open sandpit_7
                object[0x09] = 0x04; // open sandpit_8
                object[0x0a] = 0x04; // open sandpit_9
                object[0x0b] = 0x04; // open sandpit_10
                object[0x0c] = 0x04; // open sandpit_12_1
                object[0x0d] = 0x04; // open sandpit_12_2
                object[0x0e] = 0x04; // open sandpit_12_3
                object[0x0f] = 0x04; // open sandpit_cave
                object[0x10] = 0x04; // open sandpit_5
                object[0x11] = 0x04; // open sandpit_6
                object[0x12] = 0x04; // open sandpit_2
                object[0x13] = 0x04; // open sandpit_3
                object[0x14] = 0x04; // open sandpit_4
            }
        }

        fun init_room() {
            default_init_room(True, True);
        }

        fun pit_triggered(entity, index) {
            if(entity[GENERAL_PURPOSE] != index) {
                entity[GENERAL_PURPOSE] = index;
            } else {
                damage(entity, 0x100, True);
            }
        }
        fun pit_triggered_boy(index) {
            if(<BOY>[GENERAL_PURPOSE] != index) {
                <BOY>[GENERAL_PURPOSE] = index;
            } else {
                damage(BOY, 0x10, True);
            }
        }

        fun pit_scanner_entity(entity, threshold, trigger_damage, sleep) {
            arg[0x10] = entity[CURRENT_GROUND] & 0xff;

            if(((arg[0x10] > 0d40) && (arg[0x10] < 0d47)) || ((arg[0x10] == 0d40) && (entity[GENERAL_PURPOSE] > 0d00)) || ((arg[0x10] == 0d47) && (entity[GENERAL_PURPOSE] > 0d00))) {
                entity[GENERAL_PURPOSE] += (entity[CURRENT_GROUND] & 0xff) - 0d30;

                if(entity[GENERAL_PURPOSE] > threshold) {
                    entity[GENERAL_PURPOSE] = 0x00;
                    damage(entity, trigger_damage, True);

                    sleep(sleep);
                }
            } else {
                entity[GENERAL_PURPOSE] = 0x00;
            }

            // sleep(0d03);
            yield();
        }
        @install()
        @async()
        fun pit_scanner_boy() {
            while(True) {
                pit_scanner_entity(<BOY>, 0d300, 0d05, 0d120);
            }
        }
        @install()
        @async()
        fun pit_scanner_dog() {
            while(True) {
                pit_scanner_entity(<DOG>, 0d300, 0d05, 0d120);
            }
        }
        @install()
        @async()
        fun pit_scanner_boss() {
            while(alive(BOSS.ID)) {
                pit_scanner_entity(BOSS.ID, 0d300, 0d100, 0d60);
            }
        }

        @install()
        fun boss_defeated() {
            if(BOSS.DEBUG) {
                subtext("boss defeated");
            }
            
            souls_boss_defeated(DEAD_PIT_EGG, REWARD_PIT_EGG);

            unset(BOSS.PROGRESS);
        }
        @install()
        fun boss_triggered() {
            if!(BOSS.PROGRESS) {
                BOSS.PROGRESS = True;

                if(BOSS.DEBUG) {
                    subtext("boss triggered");
                }

                push_music(BOSS);

                attach_script(BOSS.ID, DEATH, reference(boss_defeated));

                control(BOSS.ID, False);
            }
        }

        fun trigger_enter() {
            open_sandpits(True);

            if!(SOULS_MEMORY.DEAD_PIT_EGG) {
                add_enemy(MEGATAUR, 0d56, 0d68, INACTIVE);
                animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_ENTER);
                attach_script(LAST_ENTITY, DAMAGE, reference(boss_triggered));
                <LAST_ENTITY>[HP] = 0d600;
                BOSS.ID = <LAST_ENTITY>;
            }

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // north
                add_enemy(TUMBLING_WEED, 0d42, 0d42);

                // center
                add_enemy(TUMBLING_WEED, 0d18, 0d90);

                // center
                add_enemy(TUMBLING_WEED, 0d68, 0d147);

                // upstairs east
                add_enemy(SLIME, 0d11, 0d109);
                
                add_enemy(SLIME, 0d11, 0d65);

                // upstairs north
                add_enemy(SLIME, 0d57, 0d34);

                // upstairs east
                add_enemy(TUMBLING_WEED, 0d76, 0d89);
                add_enemy(SLIME, 0d76, 0d114);
            }

            init_room();

            if!(ROOM.BRANCH_USED) {
                branch_lady(0d78, 0d44, NORTH, reference(@install() {
                    guard_branch_lady(ROOM.BRANCH_USED);
                }));
            }

            pit_scanner_boy();
            yield();
            pit_scanner_dog();
            yield();
            pit_scanner_boss();
        }
    };

    map jaguar_cave(PYRAMID_CAVE) {
        enum entrance {
            south = entrance(0x15, 0x23, NORTH),

            teleporter = entrance(0d23, 0d18, NONE, { teleporter_in(SOUTH); }),
        }

        enum stepon_trigger {
            exit_south = @install() {
                map_transition(east_inbetwixx, cave, SOUTH);
            },
            exit_teleporter = @install() {
                debug_subtext("S=1");

                teleporter_out(0d23, 0d18);
                map_transition(cave_gauge, teleporter, NONE);
            },
        }

        fun trigger_enter() {
            fade_in();
        }
    };

    map east_crossing(BLIMP_EXTERIOR) {
        // chests=vanilla
        // sniff=vanilla

        enum entrance {
            north = entrance(0x27, 0x01, SOUTH),
            cave = entrance(0x15, 0x1a, SOUTH),
            east = entrance(0x3f, 0x4b, WEST),
            west = entrance(0x01, 0x4b, EAST),

            elevator_top = entrance(0x0d, 0x2b, SOUTH),
            elevator_bottom = entrance(0x1b, 0x47, SOUTH),

            crash = entrance(0x32, 0x1e, NONE, { crash_both(); }),
            bonfire = entrance(0d45, 0d68, NONE, { bonfire_wakeup(0d0, 0d8, 0d24, 0d0); }),
        }

        enum soundtrack {
            default = soundtrack(SEWER_AMBIENT_WATER, 0xff)
        }

        enum ROOM {
            DEBUG = False,

            STONE_TRIGGERED = memory(FLAG, SRAM),
            STONE_DOOR_TRIGGERED = memory(FLAG, SRAM),

            ID_STONE = memory(WORD, TEMP),
            ID_STONE_BOMB = memory(WORD, TEMP),
            ID_STONE_HOLE = memory(WORD, TEMP),
        }

        @install()
        fun ravine_triggered() {
            generic_fall(0d100, 0d170);

            if(CUSTOM_MEMORY.CURRENT_ARMOR_ARMLET == ARMOR_STATS.GLOVE_3_2) {
                damage(BOTH, 0d20, True);
            } else {
                damage(BOTH, 0d80, True);
            }

            yield();

            if(<BOY>[HP] > 0x00) {
                sleep(0d60);

                map_transition(radahn_arena, center, NONE);
            } else {
                dust_unreachable(0d47, 0d6);
            }
        }

        enum stepon_trigger {
            ravine_1 = ravine_triggered(),
            ravine_2 = ravine_triggered(),
            ravine_3 = ravine_triggered(),
            ravine_4 = ravine_triggered(),
            ravine_5 = ravine_triggered(),
            ravine_6 = ravine_triggered(),
            ravine_7 = ravine_triggered(),
            ravine_8 = ravine_triggered(),
            ravine_9 = ravine_triggered(),
            ravine_10 = ravine_triggered(),

            ravine_11 = ravine_triggered(),
            ravine_12 = ravine_triggered(),
            ravine_13 = ravine_triggered(),
            ravine_14 = ravine_triggered(),
            ravine_15 = ravine_triggered(),
            ravine_16 = ravine_triggered(),
            ravine_17 = ravine_triggered(),
            ravine_18 = ravine_triggered(),
            ravine_19 = ravine_triggered(),
            exit_east = @install() {
                map_transition(ship, west, EAST);
            },

            exit_cave = @install() {
                if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                    error_wrong_side(SOUTH);
                } else {
                    map_transition(radahn_exit, south_1, NORTH);
                }
            },
            exit_west = @install() {
                map_transition(eastern_river, east, WEST);
            },
            elevator_bottom = @install() {
                map_transition(dungeon_volcano, south_2, NORTH);
            },
            elevator_top = @install() {
                map_transition(dungeon_volcano, south_1, NORTH);
            },
            exit_north = @install() {
                map_transition(east_inbetwixx, south_2, NORTH);
            }
        }

        enum b_trigger {
            sniff__1_ethanol_3 = @install() {
                debug_subtext("B=0");
                _loot(0x01, ETHANOL, 0d01, 0d03);
            },
            sniff__1_ethanol_1 = @install() {
                debug_subtext("B=1");
                _loot(0x02, ETHANOL, 0d01, 0d01);
            },
            sniff__1_ethanol_2 = @install() {
                debug_subtext("B=2");
                _loot(0x03, ETHANOL, 0d01, 0d02);
            },
            sniff__1_ethanol = @install() {
                debug_subtext("B=3");
                _loot(0x04, ETHANOL, 0d01, 0d00);
            },
            sniff__1_roots_1 = @install() {
                debug_subtext("B=4");
                _loot(0x05, ROOTS, 0d01, 0d01);
            },
            sniff__1_limestone = @install() {
                debug_subtext("B=5");
                _loot(0x06, LIMESTONE, 0d01, 0d01);
            },
            sniff__1_limestone_2 = @install() {
                debug_subtext("B=6");
                _loot(0x07, LIMESTONE, 0d01, 0d02);
            },
            sniff__1_wax_1 = @install() {
                debug_subtext("B=7");
                _loot(0x08, WAX, 0d01, 0d01);
            },
            sniff__1_wax = @install() {
                debug_subtext("B=8");
                _loot(0x09, WAX, 0d01, 0d00);
            },
            sniff__1_wax_2 = @install() {
                debug_subtext("B=9");
                _loot(0x0a, WAX, 0d01, 0d02);
            },

            sniff__1_vinegar_2 = @install() {
                debug_subtext("B=10");
                _loot(0x0b, VINEGAR, 0d01, 0d02);
            },
            sniff__1_bone_3 = @install() {
                debug_subtext("B=11");
                _loot(0x0c, BONE, 0d01, 0d03);
            },
            sniff__1_brimstone_1 = @install() {
                debug_subtext("B=12");
                _loot(0x0d, BRIMSTONE, 0d01, 0d01);
            },
            sniff__1_brimstone_2 = @install() {
                debug_subtext("B=13");
                _loot(0x0e, BRIMSTONE, 0d01, 0d02);
            },
            gourd_1__1_call_beads = @install() {
                debug_subtext("B=14");
                _loot_chest(0x0f, CALL_BEADS, 0d01);
            },
            gourd_2__200_money = @install() {
                debug_subtext("B=15");
                _loot_chest(0x10, MONEY, 0d200);
            }
        }

        @install()
        fun stone_triggered() {
            if(<ACTIVE> == <BOY>) {
                animate(BOY, ONCE, SLASH_2);

                <SCRIPT_OWNER>[VELOCITY] = 0x30;
                sleep(0x50);

                object[0x00] = 0x01;
                destroy(SCRIPT_OWNER);

                set(ROOM.STONE_TRIGGERED);
            }
        }

        @install()
        fun stone_door_triggered() {
            error_wrong_side(SOUTH);
        }

        fun tiny_bridge(connected) {
            if(connected) {
                object[0x11] = 0x01;
            } else {
                object[0x11] = 0x00;
            }
        }

        @install()
        fun stone_hole_triggered() {
            set(ROOM.STONE_DOOR_TRIGGERED);

            destroy(ROOM.ID_STONE);
            destroy(ROOM.ID_STONE_BOMB);
            destroy(ROOM.ID_STONE_HOLE);

            tiny_bridge(True);
        }

        @install()
        @async()
        fun stack_stone_bomb() {
            while(alive(ROOM.ID_STONE)) {
                ROOM.ID_STONE[X] = ROOM.ID_STONE_BOMB[X];
                ROOM.ID_STONE[Y] = ROOM.ID_STONE_BOMB[Y];
                yield();
            }
        }
        
        @install()
        @async()
        fun stone_hole_scanner() {
            while(True) {
                arg[0x00] = ROOM.ID_STONE[X];
                arg[0x02] = ROOM.ID_STONE[Y];
                arg[0x04] = ROOM.ID_STONE_HOLE[X];
                arg[0x06] = ROOM.ID_STONE_HOLE[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x0a) && (arg[0x0a] <= 0x0a)) {
                    stone_hole_triggered();
                    end();
                }

                yield();

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }
            }
        }
        
        fun init_room() {
            default_init_room(True, True);
        }

        @install()
        fun debug_triggered() {
            stone_triggered();

            destroy(SCRIPT_OWNER);
        }

        fun trigger_enter() {
            if(FLAG.DEBUG) {
                if!(ROOM.STONE_TRIGGERED) {
                    add_debug_entity(0x24, 0x06, reference(debug_triggered));
                }
            }

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // upstairs
                add_enemy(RAPTOR_GREEN, 0d26, 0d48);
                add_enemy(RAPTOR_PURPLE, 0d28, 0d25);

                // downstairs
                add_enemy(RAPTOR_GREEN, 0d39, 0d80);
                add_enemy(RAPTOR_PURPLE, 0d17, 0d71);
            }

            if!(ROOM.STONE_TRIGGERED) {
                add_enemy(STONE_ROUND, 0x24, 0x18);
                attach_script(LAST_ENTITY, B, reference(stone_triggered));
            } else {
                object[0x00] = 0x01;
            }

            bonfire(0d45, 0d68, SOULS_MEMORY.BONFIRE_EAST_CROSSING);

            if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                add_enemy(STONE_ROUND, 0x15, 0x1b);
                attach_script(LAST_ENTITY, B, reference(stone_door_triggered));
            } else if!(ROOM.STONE_DOOR_TRIGGERED) {
                if(False) {
                    add_enemy(STONE_ROUND, 0x00, 0x00);
                    ROOM.ID_STONE = <LAST_ENTITY>;

                    add_enemy(BOMB, 0x15, 0x22);
                    attach_script(LAST_ENTITY, DAMAGE, reference(enemy_triggered_invincible_with_knockback));
                    ROOM.ID_STONE_BOMB = <LAST_ENTITY>;
                    attribute(LAST_ENTITY, INVISIBLE, True);

                    stack_stone_bomb();

                    add_enemy(PLACEHOLDER, 0x2f, 0x2e);
                    ROOM.ID_STONE_HOLE = <LAST_ENTITY>;
                } else {
                    add_heavy_stone(0x15, 0x22);
                }

                stone_hole_scanner(0x15, 0x22);
            } else {
                tiny_bridge(True);
            }

            default_init_room(True, False);
        }
    };

    area arena_ravine() {
        map radahn_arena(RAPTORS) {
            // sniff=vanilla
            
            enum entrance {
                north = entrance(0x1b, 0x03, SOUTH),
                south = entrance(0x1d, 0x33, NORTH),

                left = entrance(0x15, 0x1c, NONE),
                center = entrance(0x1e, 0x21, NONE),
                right = entrance(0x2a, 0x23, NONE)
            }

            enum soundtrack {
                default = soundtrack(BOSS_JUNGLE, 0xff)
            }

            enum stepon_trigger {
                exit_north = nop(),
                exit_south = @install() {
                    fog_wall_inside(!SOULS_MEMORY.DEAD_ARENA_RADAHN, NORTH);
                    map_transition(radahn_exit, north, SOUTH);
                },
                center = nop(),
            }

            enum b_trigger {
                sniff__1_crystal_1 = @install() {
                    debug_subtext("B=0");
                    _loot(0x09, CRYSTAL, 0d01, 0d01);
                },
                sniff__1_oil_1 = @install() {
                    debug_subtext("B=1");
                    _loot(0x08, OIL, 0d01, 0d01);
                },
                sniff__1_crystal_2 = @install() {
                    debug_subtext("B=2");
                    _loot(0x07, CRYSTAL, 0d01, 0d02);
                },
                sniff__1_water_2 = @install() {
                    debug_subtext("B=3");
                    _loot(0x06, WATER, 0d01, 0d02);
                },
            }

            fun close_exits(close) {
                if(close) {
                    object[0x04] = 0x04;
                } else {
                    object[0x05] = 0x04;
                }
            }

            enum BOSS {
                DEBUG = False,

                RIDER_ID = memory(WORD, TEMP),
                MOUNT_ID = memory(WORD, TEMP),

                PHASE = memory(WORD, TEMP),
                TIMER = memory(WORD, TEMP),

                HP = 0d1000,

                COUNTDOWN = 0d03,

                // p1

                P1_THRESHOLD = 0d800,
                P1_TIME_BEFORE_SALVAGE = 0d420,

                // p2

                P2_THRESHOLD = 0d500,
                P2_TIME_BEFORE_SALVAGE = 0d420,

                RANDOM_SPELL = memory(WORD, TEMP),
                TIME_BEFORE_RANDOM_SPELL = 0d720,
            }

            fun boss_killed() {
                souls_boss_defeated(DEAD_ARENA_RADAHN, REWARD_ARENA_RADAHN);

                object[0x04] = 0x00;
            }

            @install()
            @async()
            fun stack_t01_offset() {
                while(alive(BOSS.MOUNT_ID)) {
                    BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                    BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y] - 0x15;
                    yield();
                }
            }

            fun cast_salvage(target:CHARACTER, count, level) {
                // TODO: flash/fireball, depending whether or not it's dodgeable?

                animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_CAST_1);

                if(count > 0d2) {
                    cast(BOSS.RIDER_ID, target, FIREBALL, level);
                }
                cast(BOSS.RIDER_ID, target, FLASH, level);
                if(count > 0d2) {
                    cast(BOSS.RIDER_ID, target, FIREBALL, level);
                }
                cast(BOSS.RIDER_ID, target, FLASH, level);
            }

            @install()
            fun boss_damage() {
                // animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_DAMAGE);

                if(BOSS.PHASE == 0x00) {
                    BOSS.TIMER = 0x00;

                    if(BOSS.RIDER_ID[HP] < BOSS.P1_THRESHOLD) {
                        BOSS.PHASE = 0x01;
                    }
                } else if(BOSS.PHASE == 0x01) {
                    if(BOSS.RIDER_ID[HP] < BOSS.P2_THRESHOLD) {
                        BOSS.PHASE = 0x02;
                    }
                } else if(BOSS.PHASE == 0x02) {
                    BOSS.TIMER -= 0x60;
                }

                if(BOSS.DEBUG) {
                    MEMORY.STRING_PARAMETER_1 = BOSS.RIDER_ID[HP];
                    MEMORY.STRING_PARAMETER_2 = BOSS.HP;

                    subtext("Rider = [MEM1]/[MEM2]");
                }
            }

            @install()
            @async()
            fun boss_watcher() {
                if(BOSS.DEBUG) {
                    subtext("phase 0");
                }

                while(BOSS.PHASE == 0x00) {
                    if(BOSS.TIMER > BOSS.P1_TIME_BEFORE_SALVAGE) {
                        cast_salvage(ACTIVE, 0d2, 0x00);

                        BOSS.TIMER = 0x00;
                    }
                
                    if(BOSS.RIDER_ID[PALETTE] != 0x0400) { // TODO: buggy, since menu resets paletts
                        BOSS.TIMER++;
                    }

                    if(False) {
                        debug_memory(BOSS.TIMER, BOSS.RIDER_ID[PALETTE]);
                        sleep(0d60);
                    }

                    yield();
                }

                if(BOSS.DEBUG) {
                    subtext("phase 1");
                }

                BOSS.TIMER = 0x0000;
                cast(BOSS.RIDER_ID, BOSS.RIDER_ID, FORCE_FIELD, 0x05);
                cast(BOSS.RIDER_ID, ACTIVE, CONFOUND, 0x05);

                while(BOSS.PHASE == 0x01) {
                    if(BOSS.TIMER > BOSS.P2_TIME_BEFORE_SALVAGE) {
                        cast_salvage(ACTIVE, 0d4, 0x00);

                        BOSS.TIMER = 0x00;
                    }
                
                    if(BOSS.RIDER_ID[PALETTE] != 0x0400) { // TODO: buggy, since menu resets paletts
                        BOSS.TIMER++;
                    }
                    yield();
                }

                BOSS.TIMER = 0x0000;
                cast(BOSS.RIDER_ID, BOSS.RIDER_ID, FORCE_FIELD, 0x05);
                cast(BOSS.RIDER_ID, ACTIVE, CONFOUND, 0x05);

                while(BOSS.PHASE == 0x01) {
                    BOSS.TIMER++;

                    if(BOSS.TIMER > BOSS.TIME_BEFORE_RANDOM_SPELL) {
                        BOSS.TIMER = 0x0000;

                        BOSS.RANDOM_SPELL = randrange(0x03);

                        if(BOSS.RANDOM_SPELL == 0x00) {
                            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, FORCE_FIELD, 0x05);
                            cast(BOSS.RIDER_ID, ACTIVE, CONFOUND, 0x05);
                        } else if(BOSS.RANDOM_SPELL == 0x01) {
                            cast(BOSS.RIDER_ID, ACTIVE, DRAIN, 0x30);
                        } else if(BOSS.RANDOM_SPELL == 0x02) {
                            cast(BOSS.RIDER_ID, ACTIVE, PLAGUE, 0x01);
                        } 
                    }
                    yield();
                }

                if(BOSS.DEBUG) {
                    subtext("phase 2");
                }

                boss_killed();
            }

            fun spawn_boss(x, y) {
                add_enemy(VERMINATOR, x, y);
                <LAST_ENTITY>[HP] = BOSS.HP;
                BOSS.RIDER_ID = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DAMAGE, reference(boss_damage));
                attribute(LAST_ENTITY, ROOT, True);

                add_enemy(RAPTOR_BLACK, x, y);
                BOSS.MOUNT_ID = <LAST_ENTITY>;
                // attribute(LAST_ENTITY, ROOT, True);
            }

            fun trigger_enter() {
                if!(FLAG.IN_ANIMATION) {
                    crash_both();
                }

                default_init_room(True, False);
                character_selection(BOY);

                if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                    close_exits(True);

                    spawn_boss(0x10, 0x13);
                    stack_t01_offset();
                    boss_watcher();
                }
            }
        };
    };

    map eastern_barrier(CROSSING_ACT3) {
        enum entrance {
            north = entrance(0x14, 0x05, SOUTH), // entrance(0x17, 0x01, SOUTH),
            east = entrance(0x2b, 0x11, WEST),
            west = entrance(0x06, 0x18, EAST),
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum stepon_trigger {
            exit_west = @install() {
                map_transition(east_inbetwixx, east, WEST);
            },
            stepon_1 = @install() {
                debug_subtext("S=1");
            },
            exit_north = @install() {
                fog_wall_outside(True, SOUTH);
                map_transition(graveyard, south, NORTH);
            },
            exit_east = @install() {
                // TODO: EAST-NONE doesn't make the player walk
                map_transition(pipe_entrance, pipe_west, EAST);
            },
        }

        enum b_trigger {
            barrier = @install() {
                _axe2_wall(0x00);
            },
        }

        fun trigger_enter() {
            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // downstairs
                add_enemy(FLOWER_PURPLE, 0d18, 0d28);

                // upstairs
                add_enemy(FLOWER_PURPLE, 0d30, 0d11);
            }

            default_init_room(True, True);

            bomb_wall_trigger(0x00, 0x01, 0d20, 0x8); // TODO: has a hitbox that blocks the player
        }
    };

    map graveyard(GRAVEYARD) {
        // sniff=vanilla

        enum entrance {
            north = entrance(0x32, 0x0f, SOUTH),
            south = entrance(0x2f, 0x5f, NORTH)
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
            // default = soundtrack(BOSS, 0xff)
        }

        enum BOSS {
            DEBUG = False,
            IN_PROGRESS = memory(WORD, TEMP),

            RIDER_ID = memory(WORD, TEMP),
            MOUNT_ID = memory(WORD, TEMP),

            PHASE = memory(WORD, TEMP),
            TIMER = memory(WORD, TEMP),

            HP = 0x03e8, // 1000

            COUNTDOWN = 0x03,

            STOMP_ENTITY = memory(WORD, TEMP),
            STOMP_DISTANCE = 0x20,
            STOMP_COOL_DOWN_TIMER = memory(WORD, TEMP),
            STOMP_COOL_DOWN = 0x100,
            STOMP_DAMAGE_CLOSE = 0x50,
            STOMP_DAMAGE = 0x10,
            STOMP_EXPLOSION_DISTANCE = 0x30,

            // p1

            P1_THRESHOLD = 0x320, // 800
            P1_TIME_BEFORE_SALVAGE = 0x500,

            // p2

            P2_THRESHOLD = 0x1f4, // 500
            P2_TIME_BEFORE_SALVAGE = 0x300,

            RANDOM_SPELL = memory(WORD, TEMP),
            TIME_BEFORE_RANDOM_SPELL = 0x300,
        }

        fun boss_killed() {
            walk(BOSS.MOUNT_ID, COORDINATE_ABSOLUTE_DIRECT, 0x00, 0x00, NONE);

            souls_boss_defeated(DEAD_STOMPY_RADAHN, REWARD_STOMPY_RADAHN);

            BOSS.IN_PROGRESS = 0x00;

            object[0x1f] = 0x00;
        }

        @install()
        @async()
        fun stomp() {
            BOSS.RIDER_ID[VELOCITY] = 0x38;
            BOSS.MOUNT_ID[VELOCITY] = 0x30;

            // attribute(BOSS.MOUNT_ID, ROOT, True);
            // animate(BOSS.MOUNT_ID, LOOP, ANIMATION_ENEMY.STERLING_FLY_1);

            sleep(0x60);

            add_placeholder(ANIMATION_PLACEHOLDER.EXPLOSION_GREEN_3, 0x00, 0x00);
            BOSS.STOMP_ENTITY = <LAST_ENTITY>;
            <LAST_ENTITY>[X] = BOSS.MOUNT_ID[X];
            <LAST_ENTITY>[Y] = BOSS.MOUNT_ID[Y] + 0x10;

            arg[0x00] = BOSS.STOMP_ENTITY[X];
            arg[0x02] = BOSS.STOMP_ENTITY[Y];
            arg[0x04] = <BOY>[X];
            arg[0x06] = <BOY>[Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= BOSS.STOMP_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_DISTANCE)) {
                damage(BOY, BOSS.STOMP_DAMAGE_CLOSE, True);
            } else if((arg[0x08] <= BOSS.STOMP_EXPLOSION_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_EXPLOSION_DISTANCE)) {
                damage(BOY, BOSS.STOMP_DAMAGE, True);
            }

            if(BOSS.DEBUG) {
                debug_memory(arg[0x08], arg[0x0a]);
                sleep(0x20);
            }

            sleep(0x30);
            destroy(BOSS.STOMP_ENTITY);
            // attribute(BOSS.MOUNT_ID, ROOT, False);
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while(alive(BOSS.MOUNT_ID)) {
                BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y] - 0x15;
                yield();

                if(BOSS.STOMP_COOL_DOWN_TIMER == 0x0000) {
                    arg[0x00] = BOSS.MOUNT_ID[X];
                    arg[0x02] = BOSS.MOUNT_ID[Y];
                    arg[0x04] = <ACTIVE>[X];
                    arg[0x06] = <ACTIVE>[Y];

                    if(arg[0x00] < arg[0x04]) {
                        arg[0x08] = arg[0x04] - arg[0x00];
                    } else {
                        arg[0x08] = arg[0x00] - arg[0x04];
                    }

                    if(arg[0x02] < arg[0x06]) {
                        arg[0x0a] = arg[0x06] - arg[0x02];
                    } else {
                        arg[0x0a] = arg[0x02] - arg[0x06];
                    }

                    if((arg[0x08] <= BOSS.STOMP_DISTANCE) && (arg[0x0a] <= BOSS.STOMP_DISTANCE)) {
                        BOSS.STOMP_COOL_DOWN_TIMER = BOSS.STOMP_COOL_DOWN;

                        stomp();
                        call_async(ADDRESS.STERLING_ROAR);
                    }
                    yield();

                    // if(BOSS.DEBUG) {
                    //     debug_memory(arg[0x08], arg[0x0a]);
                    //     sleep(0x20);
                    // }
                } else {
                    BOSS.STOMP_COOL_DOWN_TIMER--;
                }
            }
        }

        fun cast_salvage(target:CHARACTER, level) {
            animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_CAST_1);
            cast(BOSS.RIDER_ID, target, FIREBALL, level);
            cast(BOSS.RIDER_ID, target, FLASH, level);
            cast(BOSS.RIDER_ID, target, FIREBALL, level);
            cast(BOSS.RIDER_ID, target, FLASH, level);
        }

        @install()
        fun boss_damage() {
            // animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_DAMAGE);

            if(BOSS.PHASE == 0x00) {
                BOSS.TIMER = 0x00;

                if(BOSS.RIDER_ID[HP] < BOSS.P1_THRESHOLD) {
                    BOSS.PHASE = 0x01;
                }
            }
            if(BOSS.PHASE == 0x01) {
                if(BOSS.RIDER_ID[HP] < BOSS.P2_THRESHOLD) {
                    BOSS.PHASE = 0x02;
                }
            }
            if(BOSS.PHASE == 0x02) {
                BOSS.TIMER -= 0x60;
            }

            if(BOSS.DEBUG) {
                MEMORY.STRING_PARAMETER_1 = BOSS.RIDER_ID[HP];
                MEMORY.STRING_PARAMETER_2 = BOSS.HP;

                subtext("Rider = [MEM1]/[MEM2]");
            }
        }

        @install()
        @async()
        fun boss_watcher() {
            if(BOSS.DEBUG) {
                subtext("phase 0");
            }

            while(BOSS.PHASE == 0x00) {
                if(BOSS.TIMER > BOSS.P1_TIME_BEFORE_SALVAGE) {
                    cast_salvage(ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[0x0b] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER++;
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext("phase 1");
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, FORCE_FIELD, 0x05);
            cast(BOSS.RIDER_ID, ACTIVE, CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                if(BOSS.TIMER > BOSS.P2_TIME_BEFORE_SALVAGE) {
                    cast_salvage(ACTIVE, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[PALETTE] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER++;
                }
                yield();
            }

            BOSS.TIMER = 0x0000;
            BOSS.STOMP_COOL_DOWN_TIMER = BOSS.STOMP_COOL_DOWN;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, FORCE_FIELD, 0x05);
            cast(BOSS.RIDER_ID, ACTIVE, CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                BOSS.TIMER++;

                if(BOSS.TIMER > BOSS.TIME_BEFORE_RANDOM_SPELL) {
                    BOSS.TIMER = 0x0000;

                    BOSS.RANDOM_SPELL = randrange(0x03);

                    if(BOSS.RANDOM_SPELL == 0x00) {
                        cast(BOSS.RIDER_ID, BOSS.RIDER_ID, FORCE_FIELD, 0x05);
                        cast(BOSS.RIDER_ID, ACTIVE, CONFOUND, 0x05);
                    } else if(BOSS.RANDOM_SPELL == 0x01) {
                        cast(BOSS.RIDER_ID, ACTIVE, DRAIN, 0x30);
                    } else if(BOSS.RANDOM_SPELL == 0x02) {
                        cast(BOSS.RIDER_ID, ACTIVE, PLAGUE, 0x01);
                    } 
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext("phase 2");
            }

            boss_killed();
        }

        fun spawn_boss(x, y) {
            add_enemy(VERMINATOR, x, y);
            <LAST_ENTITY>[HP] = BOSS.HP;
            BOSS.RIDER_ID = <LAST_ENTITY>;
            attach_script(LAST_ENTITY, DAMAGE, reference(boss_damage));
            attribute(LAST_ENTITY, ROOT, True);
            // attribute(LAST_ENTITY, NO_CLIP, True);

            // add_enemy(STERLING, x, y);
            add_enemy(FORESTDRAKE, x, y);
            BOSS.MOUNT_ID = <LAST_ENTITY>;
            // attach_sterling_script_to_last_entity();
            // attribute(LAST_ENTITY, ROOT, True);
        }

        enum stepon_trigger {
            exit_north = @install() {
                debug_subtext("S=0");
            },
            exit_south = @install() {
                fog_wall_inside(!SOULS_MEMORY.DEAD_STOMPY_RADAHN, NORTH);

                map_transition(eastern_barrier, north, SOUTH);
            },
            spawn_boss = @install() {
                if!(SOULS_MEMORY.DEAD_STOMPY_RADAHN) {
                    if!(BOSS.IN_PROGRESS) {
                        push_music(BOSS);
                        spawn_boss(0x39, 0x23);
                        control(BOSS.MOUNT_ID, True);
                        stack_t01_offset();

                        set_camera(COORDINATE_CORNER, 0x0108, 0xa0, 0x18);
                        walk(BOY, TILE_ABSOLUTE, 0x2d, 0x25, NONE);
                        walk(DOG, TILE_ABSOLUTE, 0x36, 0x25, BOTH, BOTH);
                        free_camera();

                        BOSS.IN_PROGRESS = True;
                        object[0x1f] = 0x7e;
                        
                        control(BOSS.MOUNT_ID, False);
                        boss_watcher();
                    }
                }
            }
        }

        enum b_trigger {
            sniff__1_ash = @install() {
                debug_subtext("B=0");
                _loot(0x0c, ASH, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=1");
                _loot(0x02, OIL, 0d01, 0d00);
            },
            sniff__1_ash_1 = @install() {
                debug_subtext("B=2");
                _loot(0x06, ASH, 0d01, 0d01);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=3");
                _loot(0x0e, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=4");
                _loot(0x0f, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=5");
                _loot(0x07, ASH, 0d01, 0d00);
            },
            sniff__1_wax_1 = @install() {
                debug_subtext("B=6");
                _loot(0x1b, WAX, 0d01, 0d01);
            },
            sniff__1_wax_2 = @install() {
                debug_subtext("B=7");
                _loot(0x1c, WAX, 0d01, 0d02);
            },
            sniff__1_ash_1 = @install() {
                debug_subtext("B=8");
                _loot(0x11, ASH, 0d01, 0d01);
            },
            sniff__1_ash_2 = @install() {
                debug_subtext("B=9");
                _loot(0x18, ASH, 0d01, 0d02);
            },

            sniff__1_clay_2 = @install() {
                debug_subtext("B=10");
                _loot(0x05, CLAY, 0d01, 0d02);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=11");
                _loot(0x09, CLAY, 0d01, 0d00);
            },
            sniff__1_oil_2 = @install() {
                debug_subtext("B=12");
                _loot(0x19, OIL, 0d01, 0d02);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=13");
                _loot(0x12, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=14");
                _loot(0x15, ROOTS, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=15");
                _loot(0x08, OIL, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=16");
                _loot(0x0a, CLAY, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=17");
                _loot(0x01, WATER, 0d01, 0d00);
            },
            sniff__1_wter_1 = @install() {
                debug_subtext("B=18");
                _loot(0x03, WATER, 0d01, 0d01);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=19");
                _loot(0x0d, ROOTS, 0d01, 0d00);
            },

            sniff__1_roots_1 = @install() {
                debug_subtext("B=20");
                _loot(0x1d, ROOTS, 0d01, 0d01);
            },
            sniff__1_roots_3 = @install() {
                debug_subtext("B=21");
                _loot(0x1a, ROOTS, 0d01, 0d03);
            },
            sniff__1_water_2 = @install() {
                debug_subtext("B=22");
                _loot(0x13, WATER, 0d01, 0d02);
            },
            sniff__1_clay_1 = @install() {
                debug_subtext("B=23");
                _loot(0x04, CLAY, 0d01, 0d01);
            },
            sniff__1_roots_2 = @install() {
                debug_subtext("B=24");
                _loot(0x0b, ROOTS, 0d01, 0d02);
            },
            sniff__1_water = @install() {
                debug_subtext("B=25");
                _loot(0x1e, WATER, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=26");
                _loot(0x10, ROOTS, 0d01, 0d00);
            },
            sniff__1_clay_1 = @install() {
                debug_subtext("B=27");
                _loot(0x17, CLAY, 0d01, 0d01);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=28");
                _loot(0x16, ASH, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=29");
                _loot(0x14, CLAY, 0d01, 0d00);
            }
        }

        fun trigger_enter() {
            default_init_room(True, True);
        }
    };

    area pipe_maze() {
        enum PIPE_MAZE {
            MARIO_BOSS_ROOM_OPEND = memory(FLAG, SRAM),
            HIDDEN_ROOM_OPEND = memory(FLAG, SRAM),

            MUSIC_ENTRANCE = 0x72,
            MUSIC_MAZE = 0x72,
        }

        map pipe_entrance(PIPEMAZE_ROOMS) {
            // sniff=none

            enum entrance {
                pipe_east = entrance(0x2d, 0x17, NONE),
                south = entrance(0x1a, 0x2f, NORTH),
                pipe_west = entrance(0x07, 0x17, NONE),

                bonfire = entrance(0d14, 0d31, NONE, { bonfire_wakeup(-0d32, 0d8, 0d32, 0d8); }),
            }
            
            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff)
            }

            enum ROOM {
                DEBUG = False,

                SECRET_PASSAGE_TRIGGER = memory(WORD, TEMP),
                SECRET_PASSAGE_DISTANCE = 0x20,

                GOURD = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                switch_triggered = nop(),
                exit_room_switch = nop(),
                exit_room_gate = nop(),
                exit_room_empty = nop(),
                exit_north_1 = @install() {
                    map_transition(pipe_entrance_left, pipe_switch, NORTH);
                },
                exit_north_2 = @install() {
                    map_transition(pipe_maze, pipe_east, NORTH);
                },
                jump_room_switch = nop(),
                jump_room_gate = nop(),
                exit_south = @install() {
                    map_transition(pipe_caves_1, north, SOUTH);
                },
                jump_empty_room = nop(),

                exit_gate = nop(),
                approach_gate = nop(),
            }

            fun gourd_looted() {
                bonfire(0d14, 0d31, SOULS_MEMORY.BONFIRE_PIPES);
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                b_trigger_2 = @install() {
                    debug_subtext("B=2");
                },
                b_trigger_3 = @install() {
                    debug_subtext("B=3");
                },
                b_trigger_4 = @install() {
                    debug_subtext("B=4");
                },
                b_trigger_5 = @install() {
                    debug_subtext("B=5");
                },
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                b_trigger_7 = @install() {
                    debug_subtext("B=7");
                },
                b_trigger_8 = @install() {
                    debug_subtext("B=8");
                },
                b_trigger_9 = @install() {
                    sound(WEIRD_SOUND);
                    set(ROOM.GOURD);
                    object[0x07] = 0x02; // loot gourd_entrance
                    gourd_looted();
                },

                b_trigger_10 = @install() {
                    debug_subtext("B=10");
                },
                b_trigger_11 = @install() {
                    debug_subtext("B=11");
                },
                b_trigger_12 = @install() {
                    debug_subtext("B=12");
                },
                b_trigger_13 = @install() {
                    debug_subtext("B=13");
                },
            }

            @install()
            @async()
            fun hidden_exit_check() {
                while(True) {
                    arg[0x00] = <ACTIVE>[X];
                    arg[0x02] = <ACTIVE>[Y];
                    arg[0x04] = ROOM.SECRET_PASSAGE_TRIGGER[X];
                    arg[0x06] = ROOM.SECRET_PASSAGE_TRIGGER[Y];

                    if(arg[0x00] < arg[0x04]) {
                        arg[0x08] = arg[0x04] - arg[0x00];
                    } else {
                        arg[0x08] = arg[0x00] - arg[0x04];
                    }

                    if(arg[0x02] < arg[0x06]) {
                        arg[0x0a] = arg[0x06] - arg[0x02];
                    } else {
                        arg[0x0a] = arg[0x02] - arg[0x06];
                    }

                    if((arg[0x08] <= ROOM.SECRET_PASSAGE_DISTANCE) && (arg[0x0a] <= ROOM.SECRET_PASSAGE_DISTANCE)) {
                        map_transition(eastern_barrier, east, WEST);
                        end();
                    }
                    yield();

                    if(ROOM.DEBUG) {
                        debug_memory(arg[0x08], arg[0x0a]);
                        sleep(0x20);
                    }
                }
            }

            @install()
            fun test_triggered() {
                if(PIPE_MAZE.HIDDEN_ROOM_OPEND) {
                    map_transition(pipe_caves_side, pipe, EAST);
                } else {
                    error_contraption(NONE);
                }
            }
            
            @install()
            fun debug_triggered() {
                set(PIPE_MAZE.HIDDEN_ROOM_OPEND);

                destroy(SCRIPT_OWNER);
            }

            fun trigger_enter() {
                if(FLAG.DEBUG) {
                    if!(PIPE_MAZE.HIDDEN_ROOM_OPEND) {
                        add_debug_entity(0x2F, 0x1b, reference(debug_triggered));
                    }
                }

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    add_enemy(RAT, 0d38, 0d33);
                }

                if(ROOM.GOURD) {
                    object[0x07] = 0x02; // loot gourd_entrance
                    gourd_looted();
                } else {
                    object[0x07] = 0x01; // loot gourd_entrance
                }
                // bonfire(0x1e, 0x22);

                default_init_room(True, False);

                if(SOULS_MEMORY.BIG_MUSHROOM) {
                    CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.MARIO;
                }

                add_enemy(PLACEHOLDER, 0x2d, 0x16);
                attach_script(LAST_ENTITY, B, reference(test_triggered));
                
                add_enemy(PLACEHOLDER, 0x05, 0x16);
                ROOM.SECRET_PASSAGE_TRIGGER = <LAST_ENTITY>;

                sleep(0x10);
                hidden_exit_check();
            }
        };

        map pipe_entrance_left(PIPEMAZE_ROOMS) {
            // sniff=none

            enum entrance {
                pipe_switch = entrance(0xbf, 0x23, NONE),
                pipe_gate = entrance(0x87, 0x1f, NONE),
                gate = entrance(0x98, 0x10, SOUTH),
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff)
            }

            enum stepon_trigger {
                switch_triggered = @install() {
                    debug_subtext("S=0");

                    if!(PIPE_MAZE.HIDDEN_ROOM_OPEND) {
                        sound(MAGMA_HARDENING);

                        notification_door_opened();

                        set(PIPE_MAZE.HIDDEN_ROOM_OPEND);
                    }
                },
                exit_room_switch = @install() {
                    debug_subtext("S=1");

                    map_transition(mosquito_arena, right, NORTH);
                },
                exit_room_gate = @install() {
                    debug_subtext("S=2");

                    map_transition(pipe_maze, pipe_west, NONE);
                },
                exit_room_empty = nop(),
                exit_north_1 = nop(),
                exit_north_2 = nop(),
                jump_room_switch = @install() {
                    debug_subtext("S=6");

                    call(0x94af0d);
                },
                jump_room_gate = @install() {
                    debug_subtext("S=7");

                    call(0x94af34);
                },
                exit_south = nop(),
                jump_empty_room = nop(),

                exit_gate = @install() {
                    debug_subtext("S=10");

                    map_transition(mario_dungeon_boss, south, NORTH);
                },
                approach_gate = @install() {
                    debug_subtext("S=11");

                    if!(PIPE_MAZE.MARIO_BOSS_ROOM_OPEND) {
                        subtext("Locked by a mechanism.");
                    }
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                b_trigger_2 = @install() {
                    debug_subtext("B=2");
                },
                b_trigger_3 = @install() {
                    debug_subtext("B=3");
                },
                b_trigger_4 = @install() {
                    debug_subtext("B=4");
                },
                b_trigger_5 = @install() {
                    debug_subtext("B=5");
                },
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                b_trigger_7 = @install() {
                    debug_subtext("B=7");
                },
                b_trigger_8 = @install() {
                    debug_subtext("B=8");
                },
                b_trigger_9 = @install() {
                    debug_subtext("B=9");
                },

                b_trigger_10 = @install() {
                    debug_subtext("B=10");
                },
                b_trigger_11 = @install() {
                    debug_subtext("B=11");
                },
                b_trigger_12 = @install() {
                    debug_subtext("B=12");
                },
                b_trigger_13 = @install() {
                    debug_subtext("B=13");
                },
            }

            fun open_gate() {
                object[0x06] = 0x7e; // open gate
            }

            @install()
            fun debug_triggered() {
                PIPE_MAZE.MARIO_BOSS_ROOM_OPEND = True;
                open_gate();

                destroy(SCRIPT_OWNER);
            }

            fun trigger_enter() {
                if(PIPE_MAZE.MARIO_BOSS_ROOM_OPEND) {
                    open_gate();
                }

                if(FLAG.DEBUG) {
                    if!(PIPE_MAZE.MARIO_BOSS_ROOM_OPEND) {
                        add_debug_entity(0x9c, 0x17, reference(debug_triggered));
                    }
                }

                default_init_room(True, False);

                if(SOULS_MEMORY.BIG_MUSHROOM) {
                    CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.MARIO;
                }
            }
        };

        map mosquito_arena(RAPTORS) {
            // sniff=vanilla

            enum entrance {
                north = entrance(0x1b, 0x03, SOUTH),
                south = entrance(0x1d, 0x33, NORTH),

                left = entrance(0x15, 0x1c, NONE),
                center = entrance(0x1e, 0x21, NONE),
                right = entrance(0x2a, 0x23, NONE)
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff),
                boss = soundtrack(BOSS_JUNGLE, 0xff),
            }

            enum stepon_trigger {
                exit_north = @install() {
                    fog_wall_inside(!SOULS_MEMORY.DEAD_ARENA_MOSQUITO, SOUTH);

                    map_transition(pipe_caves_1, south_2, NORTH);
                },
                exit_south = nop(),
                center = nop(),
            }
                
            enum b_trigger {
                sniff__1_crystal_1 = @install() {
                    debug_subtext("B=0");
                    _loot(0x09, CRYSTAL, 0d01, 0d01);
                },
                sniff__1_oil_1 = @install() {
                    debug_subtext("B=1");
                    _loot(0x08, OIL, 0d01, 0d01);
                },
                sniff__1_crystal_2 = @install() {
                    debug_subtext("B=2");
                    _loot(0x07, CRYSTAL, 0d01, 0d02);
                },
                sniff__1_water_2 = @install() {
                    debug_subtext("B=3");
                    _loot(0x06, WATER, 0d01, 0d02);
                },
            }

            enum BOSS {
                PROGRESS = memory(FLAG, TEMP),
                BOSS_ID = memory(WORD, TEMP),

                BOSS_START_X = memory(WORD, TEMP),
                BOSS_START_Y = memory(WORD, TEMP),
                BOSS_START_TIMER = memory(WORD, TEMP),

                MOSQUITO_1_ID = memory(WORD, TEMP),
                MOSQUITO_1_X = 0x13,
                MOSQUITO_1_Y = 0x19,
                MOSQUITO_2_ID = memory(WORD, TEMP),
                MOSQUITO_2_X = 0x29,
                MOSQUITO_2_Y = 0x1b,
                MOSQUITO_3_ID = memory(WORD, TEMP),
                MOSQUITO_3_X = 0x13,
                MOSQUITO_3_Y = 0x29,
                MOSQUITO_4_ID = memory(WORD, TEMP),
                MOSQUITO_4_X = 0x29,
                MOSQUITO_4_Y = 0x2b,
            }

            fun close_exits(close) {
                if(close) {
                    object[0x04] = 0x04;
                } else {
                    object[0x05] = 0x04;
                }
            }

            @install()
            fun boss_defeated() {
                BOSS.PROGRESS = False;

                souls_boss_defeated(DEAD_ARENA_MOSQUITO, REWARD_ARENA_MOSQUITO);

                close_exits(False);

                damage(BOSS.MOSQUITO_1_ID, 0d999, True);
                damage(BOSS.MOSQUITO_2_ID, 0d999, True);
                damage(BOSS.MOSQUITO_3_ID, 0d999, True);
                damage(BOSS.MOSQUITO_4_ID, 0d999, True);
            }

            fun mosquito_dead(id, x, y) {
                if(BOSS.PROGRESS) {
                    // yield();
                    animate(SCRIPT_OWNER, ONCE_FREEZE, ANIMATION_ENEMY.GORE);
                    attribute(SCRIPT_OWNER, INVINCIBLE, True);

                    if((BOSS.BOSS_ID[X] >= MEMORY.CAMERA_X_MIN) && ((BOSS.BOSS_ID[X] <= MEMORY.CAMERA_X_MAX)) && (BOSS.BOSS_ID[Y] >= MEMORY.CAMERA_Y_MIN) && ((BOSS.BOSS_ID[Y] <= MEMORY.CAMERA_Y_MAX))) {
                        cast(id, BOSS.BOSS_ID, FIREBALL, 0d250);
                    } else {
                        cast(id, BOY, FIREBALL, 0d10);
                    }

                    sleep(0d30);
                    animate(SCRIPT_OWNER, ONCE_FREEZE, INVISIBLE);
                    teleport(id, x, y);
                    sleep(0d90);

                    // full_heal(SCRIPT_OWNER, 0x10, False);
                    animate(SCRIPT_OWNER, ONCE, DEFAULT);
                    <SCRIPT_OWNER>[PALETTE] = 0x0a00;
                    attribute(SCRIPT_OWNER, INVINCIBLE, False);
                }
            }

            @install()
            fun mosquito_1_dead() {
                mosquito_dead(BOSS.MOSQUITO_1_ID, BOSS.MOSQUITO_1_X, BOSS.MOSQUITO_1_Y);
            }
            @install()
            fun mosquito_2_dead() {
                mosquito_dead(BOSS.MOSQUITO_2_ID, BOSS.MOSQUITO_2_X, BOSS.MOSQUITO_2_Y);
            }
            @install()
            fun mosquito_3_dead() {
                mosquito_dead(BOSS.MOSQUITO_3_ID, BOSS.MOSQUITO_3_X, BOSS.MOSQUITO_3_Y);
            }
            @install()
            fun mosquito_4_dead() {
                mosquito_dead(BOSS.MOSQUITO_4_ID, BOSS.MOSQUITO_4_X, BOSS.MOSQUITO_4_Y);
            }

            fun spawn_mosquito(id, x, y, script_id) {
                add_enemy(MOSQUITO, x, y);
                id = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DAMAGE, script_id);
            }

            @install()
            @async()
            fun lock_temporary() {
                BOSS.BOSS_START_X = BOSS.BOSS_ID[X];
                BOSS.BOSS_START_Y = BOSS.BOSS_ID[Y];

                while(BOSS.BOSS_START_TIMER < 0d120) {
                    BOSS.BOSS_START_TIMER++;

                    BOSS.BOSS_ID[X] = BOSS.BOSS_START_X;
                    BOSS.BOSS_ID[Y] = BOSS.BOSS_START_Y;

                    yield();
                }
            }

            fun init_room() {
                default_init_room(True, False);
            }

            fun trigger_enter() {
                if!(FLAG.IN_ANIMATION) {
                    crash_both();
                }
                
                if!(SOULS_MEMORY.DEAD_ARENA_MOSQUITO) {
                    push_music(BOSS_JUNGLE);

                    close_exits(True);

                    add_enemy(MAGMAR, 0x1e, 0x21);
                    animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
                    BOSS.BOSS_ID = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, DEATH, reference(boss_defeated));
                    lock_temporary();

                    CUSTOM_FLAG.NO_DOG = True;
                    init_room();

                    BOSS.PROGRESS = True;

                    spawn_mosquito(BOSS.MOSQUITO_1_ID, BOSS.MOSQUITO_1_X, BOSS.MOSQUITO_1_Y, reference(mosquito_1_dead));
                    sleep(0x40);
                    spawn_mosquito(BOSS.MOSQUITO_2_ID, BOSS.MOSQUITO_2_X, BOSS.MOSQUITO_2_Y, reference(mosquito_2_dead));
                    sleep(0x20);
                    spawn_mosquito(BOSS.MOSQUITO_3_ID, BOSS.MOSQUITO_3_X, BOSS.MOSQUITO_3_Y, reference(mosquito_3_dead));
                    sleep(0x20);
                    spawn_mosquito(BOSS.MOSQUITO_4_ID, BOSS.MOSQUITO_4_X, BOSS.MOSQUITO_4_Y, reference(mosquito_4_dead));
                } else {
                    object[0x04] = 0x04;
                    object[0x05] = 0x04;

                    init_room();
                }
            }
        };

        map pipe_caves_1(VOLCANO_ROOMS) { // variant: room_nss
            // sniff=none

            enum entrance {
                north = entrance(0x9e, 0x05, SOUTH),
                south_1 = entrance(0x9e, 0x37, NORTH),
                south_2 = entrance(0x84, 0x37, NORTH),
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_room_ns_south = nop(),
                exit_room_sw_west = nop(),
                exit_room_ns_north = nop(),
                exit_room_sw_south = nop(),
                exit_room_nne_north_1 = nop(),

                exit_room_es_south = nop(),
                exit_room_es_east = nop(),
                exit_room_nne_north_2 = nop(),
                exit_south_2 = @install() {
                    if!(SOULS_MEMORY.DEAD_ARENA_MOSQUITO) {
                        error_wrong_side(NORTH);
                    } else {
                        map_transition(mosquito_arena, north, SOUTH);
                    }
                },
                exit_south_1 = @install() {
                    map_transition(pipe_caves_2, north, SOUTH);
                },
                exit_north = @install() {
                    map_transition(pipe_entrance, south, NORTH);
                },
                exit_room_alchemist_north = nop(),
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                sniff_room_alchemist__1_ash = nop(),
                gourd_cave_outside__3_wax = nop(),
                gourd_cave_outside__1_wax = nop(),
                gourd_room_ns__4_ash = nop(),
                gourd_room_sw__4_ash = nop(),
                gourd_main__1_call_bead = nop(),
                gourd_alchemist_west__3_water = nop(),
                gourd_room_s__2_wax = nop(),
                gourd_room_s__3_ash = nop(),
                gourd_alchemist_hidden_2__5_wax = nop(),
                gourd_alchemist_hidden_1__6_water = nop(),
                sniff__1_ash = @install() {
                    debug_subtext("B=11");
                    _loot_chest(0x05, ASH, 0d04);
                },
                sniff_room_sw__1_water = nop(),
                sniff_room_nne__1_water = nop(),
                sniff_room_ns__1_clay = nop(),
                sniff__1_roots = @install() {
                    debug_subtext("B=15");
                    _loot(0x0b, ROOTS, 0d01, 0d00);
                },
                sniff_room_nne__1_roots = nop(),
                sniff_room_main__1_roots = nop(),
                sniff_cave_outside__1_roots = nop(),
                sniff_room_es__1_oil = nop(),
                sniff_room_s__1_oil = nop(),
                sniff_room_nw__1_oil = nop(),
                sniff__1_wax = @install() {
                    debug_subtext("B=22");
                    _loot(0x12, WAX, 0d01, 0d00);
                },
                sniff_room_ns__1_wax = nop(),
                sniff_room_main__1_wax = nop(),
            }

            fun init_room(index) {
                if(index == 0x01) {
                    init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                } else if(index == 0x02) {
                    init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                } else if(index == 0x03) {
                    init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                } else if(index == 0x04) {
                    init_map(0xb4, 0x04, 0xfc, 0x36); // room_alchemist
                } else if(index == 0x05) {
                    init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                } else if(index == 0x06) {
                    init_map(0x40, 0x38, 0x80, 0x6c); // room_nne
                } else if(index == 0x07) {
                    init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                } else if(index == 0x08) {
                    init_map(0xb4, 0x3c, 0xf8, 0x96); // room_entrance
                } else if(index == 0x09) {
                    init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                } else if(index == 0x0a) {
                    init_map(0x3f, 0x89, 0x6c, 0xb2); // room_s
                } else if(index == 0x0b) {
                    init_map(0xba, 0x3c, 0xf8, 0x96); // room_shop
                }
            }

            fun trigger_enter() {
                init_room(0x03);

                default_init_room(True, False);

                if(SOULS_MEMORY.BIG_MUSHROOM) {
                    CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.MARIO;
                }
            }
        };
        map pipe_caves_2(VOLCANO_ROOMS) { // variant: room_alchemist
            // chests=vanilla
            // sniff=none
            
            enum entrance {
                north = entrance(0xd0, 0x05, SOUTH),
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_room_ns_south = nop(),
                exit_room_sw_west = nop(),
                exit_room_ns_north = nop(),
                exit_room_sw_south = nop(),
                exit_room_nne_north_1 = nop(),

                exit_room_es_south = nop(),
                exit_room_es_east = nop(),
                exit_room_nne_north_2 = nop(),
                exit_room_nss_south_2 = nop(),
                exit_room_nss_south_1 = nop(),
                exit_room_nss_north = nop(),
                exit_north = @install() {
                    map_transition(pipe_caves_1, south_1, NORTH);
                },
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                sniff__1_ash = @install() {
                    debug_subtext("B=0");
                    _loot(0x17, ASH, 0d01, 0d00);
                },
                gourd_cave_outside__3_wax = nop(),
                gourd_cave_outside__1_wax = nop(),
                gourd_room_ns__4_ash = nop(),
                gourd_room_sw__4_ash = nop(),
                gourd_main__1_call_bead = nop(),
                gourd_west__3_water = @install() {
                    debug_subtext("B=6");
                    _loot_chest(0x02, WATER, 0d03);
                },
                gourd_room_s__2_wax = nop(),
                gourd_room_s__3_ash = nop(),
                gourd_hidden_2__5_wax = @install() {
                    debug_subtext("B=9");
                    _loot_chest(0x06, WAX, 0d05);
                },
                gourd_hidden_1__6_water = @install() {
                    debug_subtext("B=10");
                    _loot_chest(0x07, WATER, 0d06);
                },
                sniff__1_ash = @install() {
                    debug_subtext("B=11");
                    _loot_chest(0x05, ASH, 0d04);
                },
                sniff_room_sw__1_water = nop(),
                sniff_room_nne__1_water = nop(),
                sniff_room_ns__1_clay = nop(),
                sniff_room_nss__1_roots = nop(),
                sniff_room_nne__1_roots = nop(),
                sniff_room_main__1_roots = nop(),
                sniff_cave_outside__1_roots = nop(),
                sniff_room_es__1_oil = nop(),
                sniff_room_s__1_oil = nop(),
                sniff_room_nw__1_oil = nop(),
                sniff_room_nss__1_wax = nop(),
                sniff_room_ns__1_wax = nop(),
                sniff_room_main__1_wax = nop(),
            }

            fun init_room(index) {
                if(index == 0x01) {
                    init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                } else if(index == 0x02) {
                    init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                } else if(index == 0x03) {
                    init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                } else if(index == 0x04) {
                    init_map(0xb4, 0x04, 0xfc, 0x36); // room_alchemist
                } else if(index == 0x05) {
                    init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                } else if(index == 0x06) {
                    init_map(0x40, 0x38, 0x80, 0x6c); // room_nne
                } else if(index == 0x07) {
                    init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                } else if(index == 0x08) {
                    init_map(0xb4, 0x3c, 0xf8, 0x96); // room_entrance
                } else if(index == 0x09) {
                    init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                } else if(index == 0x0a) {
                    init_map(0x3f, 0x89, 0x6c, 0xb2); // room_s
                } else if(index == 0x0b) {
                    init_map(0xba, 0x3c, 0xf8, 0x96); // room_shop
                }
            }

            @install()
            fun stone_locked() {
                add_enemy(STONE_ROUND, 0d222, 0d39);
                attach_script(LAST_ENTITY, B, reference(installed_error_unknown));

                init_map(0xb4, 0x04, 0xe0, 0x36); // room_alchemist
            }
            @install()
            fun stone_unlocked() {
                add_enemy(STONE_ROUND, 0d222, 0d39);
                // add_enemy(STONE_ROUND, 0xdc, 0x26);

                init_room(0x04);
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_SIDE_QUESTS || (NPC_MARIO.PROGRESS == 0d0)) {
                    if(NPC_MARIO.PROGRESS < 0d1) {
                        stone_locked();
                    } else if(NPC_MARIO.PROGRESS == 0d1) {
                        add_enemy(STONE_ROUND, 0d222, 0d39);
                        attach_script(LAST_ENTITY, B, reference(npc_mario_dialog_1));

                        if(NPC_MARIO.SUB_PROGRESS > 0x00) {
                            add_souls_npc_mario(0d229, 0d39, INACTIVE);
                            face(LAST_ENTITY, WEST);

                            init_room(0x04);
                        } else {
                            init_map(0xb4, 0x04, 0xe0, 0x36); // room_alchemist
                        }
                    } else {
                        stone_unlocked();
                    }
                } else {
                    stone_locked();
                }
                
                default_init_room(True, False);

                if(SOULS_MEMORY.BIG_MUSHROOM) {
                    CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.MARIO;
                }

                fake_walls();
            }
        };

        map pipe_caves_side(IVOR_SEWERS_EXTERIOR) {
            enum entrance {
                west = entrance(0x05, 0x0b, EAST),
                pipe = entrance(0x05, 0x15, NONE),

                cinematic_east = entrance(0x2d, 0x7, NONE),
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_ENTRANCE, 0xff)
            }

            enum stepon_trigger {
                pipe = @install() {
                    pit_act3_sewers();
                },
                exit_west = @install() {
                    map_transition(pipe_caves_1, south_2, WEST);
                },
            }

            @install()
            fun debug_triggered() {
                set(SOULS_MEMORY.BIG_MUSHROOM);
                CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.MARIO;

                destroy(SCRIPT_OWNER);
            }

            fun trigger_enter() {
                if(FLAG.DEBUG) {
                    if!(SOULS_MEMORY.BIG_MUSHROOM) {
                        add_debug_entity(0x0c, 0x0e, reference(debug_triggered));
                    }
                }

                if(SOULS_MEMORY.WITH_SIDE_QUESTS) {
                    if(NPC_MARIO.PROGRESS == 0d2) {
                        add_souls_npc_mario(0d13, 0d32);
                        // NPC_MARIO.ID = <LAST_ENTITY>;
                        attach_script(LAST_ENTITY, B, reference(npc_mario_dialog_2));
                    }
                }

                default_init_room(True, True);

                if(SOULS_MEMORY.BIG_MUSHROOM) {
                    CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.MARIO;
                }
            }
        };

        map pipe_maze(PIPEMAZE) {
            enum entrance {
                pipe_east = entrance(0x67, 0x94, NONE),
                pipe_west = entrance(0x5b, 0x94, NONE),
            }

            enum soundtrack {
                default = soundtrack(PIPE_MAZE.MUSIC_MAZE, 0xff)
            }

            fun pit_west_1_triggered() {
                map_transition(mario_prison_2, crash, NONE);
            }
            fun pit_west_2_triggered() {
                map_transition(mario_prison_1, crash, NONE);
            }
            fun pit_west_3_triggered() {
                map_transition(mario_prison_4, crash, NONE);
            }
            fun pit_west_4_triggered() {
                map_transition(mario_prison_5, pipe, NONE);
            }
            fun pit_west_5_triggered() {
                map_transition(mario_prison_3, crash, NONE);
            }

            fun pit_east_1_triggered() {
                map_transition(town_center, crash, NONE);
            }
            fun pit_east_2_triggered() {
                map_transition(town_market, crash, NONE);
            }
            fun pit_east_3_triggered() {
                map_transition(town_level_1, crash, NONE);
            }
            fun pit_east_4_triggered() {
                map_transition(town_level_2, crash, NONE);
            }
            fun pit_east_5_triggered() {
                map_transition(town_level_3, crash, NONE);
            }

            enum stepon_trigger {
                pit_west_3_west = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.EAST);
                    pit_west_3_triggered();
                },
                exit_room_nw_west = @install() {
                    debug_subtext("S=1");
                },
                crossing_pit_east_3_2 = @install() {
                    object[0x06] = 0x00;
                },
                crossing_pit_east_1_3 = @install() {
                    object[0x06] = 0x01;
                },
                crossing_pit_west_1_top = @install() {
                    debug_subtext("S=4");
                },
                crossing_pit_west_4_2_top = @install() {
                    debug_subtext("S=5");
                },
                crossing_pit_west_1_bottom = @install() {
                    debug_subtext("S=6");
                },
                crossing_pit_west_4_2_bottom = @install() {
                    debug_subtext("S=7");
                },
                crossing_pit_west_3_2_bottom = @install() {
                    debug_subtext("S=8");
                },
                crossing_pit_west_3_2_top = @install() {
                    debug_subtext("S=9");
                },

                crossing_pit_west_1_4_top_1 = @install() {
                    debug_subtext("S=10");
                },
                crossing_pit_west_1_4_top_2 = @install() {
                    debug_subtext("S=11");
                },
                crossing_pit_west_1_4_bottom_2 = @install() {
                    debug_subtext("S=12");
                },
                crossing_pit_west_1_4_bottom_1 = @install() {
                    debug_subtext("S=13");
                },
                crossing_pit_west_4_top = @install() {
                    debug_subtext("S=14");
                },
                crossing_pit_west_4_bottom = @install() {
                    debug_subtext("S=15");
                },
                crossing_pit_west_1_3_top = @install() {
                    debug_subtext("S=16");
                },
                crossing_pit_west_1_3_bottom = @install() {
                    debug_subtext("S=17");
                },
                crossing_pit_east_1_2 = @install() {
                    object[0x07] = 0x01;
                },
                pit_west_3_north = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.SOUTH);
                    pit_west_3_triggered();
                },

                pit_west_3_east = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.WEST);
                    pit_west_3_triggered();
                },
                pit_west_3_south = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.NORTH);
                    pit_west_3_triggered();
                },
                pit_west_4_north = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.SOUTH);
                    pit_west_4_triggered();
                },
                pit_west_4_east = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.WEST);
                    pit_west_4_triggered();
                },
                pit_west_4_south = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.NORTH);
                    pit_west_4_triggered();
                },
                pit_west_5_north = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.SOUTH);
                    pit_west_5_triggered();
                },
                pit_west_5_west = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.EAST);
                    pit_west_5_triggered();
                },
                pit_west_2_west = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.EAST);
                    pit_west_2_triggered();
                },
                pit_west_2_north = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.SOUTH);
                    pit_west_2_triggered();
                },
                pit_west_2_east = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.WEST);
                    pit_west_2_triggered();
                },

                pit_west_1_west = @install() {
                    generic_yeet(<ACTIVE>, DIRECTION.EAST);
                    pit_west_1_triggered();
                },
                pit_east_1_north = @install() {
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x002d;
                    // <0x24b7> = 0x0000;

                    // call(0x94ac56);

                    generic_yeet(<ACTIVE>, DIRECTION.SOUTH);
                    pit_east_1_triggered();
                },
                pit_east_1_south = @install() {
                    // <0x24b3> = 0x002a;
                    // <0x24b5> = 0x0023;
                    // <0x24b7> = 0x0000;
                    
                    // call(0x94ac56);

                    generic_yeet(<ACTIVE>, DIRECTION.NORTH);
                    pit_east_1_triggered();
                },
                pit_east_5_north = @install() {
                    // <0x24c3> = 0x0008;
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x002d;
                    // <0x24b7> = 0x0000;
                    // call(0x94ac56);

                    generic_yeet(<ACTIVE>, DIRECTION.SOUTH);
                    pit_east_5_triggered();
                },
                pit_east_4_south = @install() {
                    // <0x24c3> = 0x0007;
                    // <0x24b3> = 0x002a;
                    // <0x24b5> = 0x0023;
                    // <0x24b7> = 0x0000;
                    // call(0x94ac56);

                    generic_yeet(<ACTIVE>, DIRECTION.NORTH);
                    pit_east_4_triggered();
                },
                pit_east_3_north = @install() {
                    // <0x24c3> = 0x0009;
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x002d;
                    // <0x24b7> = 0x0000;
                    // call(0x94ac56);

                    generic_yeet(<ACTIVE>, DIRECTION.SOUTH);
                    pit_east_3_triggered();
                },
                pit_east_3_west = @install() {
                    // <0x24c3> = 0x0009;
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x0022;
                    // <0x24b7> = 0x0016;
                    // call(0x94ac56);

                    generic_yeet(<ACTIVE>, DIRECTION.EAST);
                    pit_east_3_triggered();
                },
                pit_east_2_north = @install() {
                    // <0x24c3> = 0x000a;
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x002d;
                    // <0x24b7> = 0x0000;
                    // call(0x94ac56);

                    generic_yeet(<ACTIVE>, DIRECTION.SOUTH);
                    pit_east_2_triggered();
                },
                pit_east_2_east = @install() {
                    // <0x24c3> = 0x000a;
                    // <0x24b3> = 0x0002;
                    // <0x24b5> = 0x0022;
                    // <0x24b7> = -0x0011;
                    // call(0x94ac56);

                    generic_yeet(<ACTIVE>, DIRECTION.WEST);
                    pit_east_2_triggered();
                },
            }

            fun trigger_enter() {
                default_init_room(True, False);

                if(SOULS_MEMORY.BIG_MUSHROOM) {
                    CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.MARIO;
                }

                // west
                add_enemy(FRIPPO, 0d91, 0d125);

                // east
                if(True) {
                    // south west
                    add_enemy(RAT_RED, 0d103, 0d120);
                    attach_sterling_script(<LAST_ENTITY>, False, 0d20, 0d130, 0d85, 0d784, 0d999);

                    add_enemy(RAT_RED, 0d103, 0d84); // 0d116, 0d77);
                    attach_sterling_script(<LAST_ENTITY>, False, 0d20, 0d130, 0d85, 0d784, 0d999); // TODO: doesn't trigger anymore

                    // south east
                    add_enemy(RAT_RED, 0d154, 0d111);
                    attach_sterling_script(<LAST_ENTITY>, False, 0d20, 0d130, 0d85, 0d784, 0d999);

                    add_enemy(RAT_RED, 0d139, 0d103);
                    attach_sterling_script(<LAST_ENTITY>, False, 0d20, 0d130, 0d85, 0d784, 0d999);

                    <BOY>[GENERAL_PURPOSE] = 0d0;
                    while(True) {
                        if(<BOY>[GENERAL_PURPOSE] > 0d0) {
                            // debug_subtext("boy grabbed");

                            dust_unreachable(0d103, 0d136);

                            end();
                        }

                        sleep(0d10);
                    }
                }
            }
        };

        area mario_dungeon() {
            enum MARIO {
                DEFAULT_MUSIC = MUSIC.SWAMP_AMBIENT,

                ROOMS_CLEARED = memory(BYTE, SRAM),
                ROOMS_REQUIRED = 0d5,
            }

            group mario_helper() {
                fun exit_mario_prison() {
                    map_transition(pipe_entrance, pipe_east, NORTH);
                }
                fun room_cleared(flag) {
                    if!(flag) {
                        set(flag);

                        MARIO.ROOMS_CLEARED++;

                        if(MARIO.ROOMS_CLEARED == MARIO.ROOMS_REQUIRED) {
                            PIPE_MAZE.MARIO_BOSS_ROOM_OPEND = True;
                            notification_door_opened();
                        }
                    }
                }

                fun update_condition(doors_opened, doors, enemies_killed, enemies) {
                    if(doors == 0d0) {
                        MEMORY.STRING_PARAMETER_1 = enemies_killed;
                        MEMORY.STRING_PARAMETER_2 = enemies;
                        
                    } else if(enemies == 0d0) {
                        MEMORY.STRING_PARAMETER_1 = doors_opened;
                        MEMORY.STRING_PARAMETER_2 = doors;
                    }

                    subtext("[MEM1]/[MEM2]");
                }
                fun room_condition(room_cleared_flag, doors_opened, doors, enemies_killed, enemies) {
                    if(False) {
                        debug_memory(doors_opened, doors);
                        sleep(0d60);
                        debug_memory(enemies_killed, enemies);
                        sleep(0d60);
                    }

                    if((doors == 0d0) && (enemies > 0d0)) {
                        MEMORY.STRING_PARAMETER_1 = enemies;
                        subtext("Kill [MEM1] enemies");
                    } else if((doors > 0d0) && (enemies == 0d0)) {
                        MEMORY.STRING_PARAMETER_1 = doors;
                        subtext("Open [MEM1] doors");
                    } else {
                        subtext("Reach the door");
                        end();
                    }

                    while((doors_opened < doors) || (enemies_killed < enemies)) {
                        yield();
                    }

                    subtext("The door has opened");

                    room_cleared(room_cleared_flag);
                }

                fun door_triggered(object_id, room_cleared_flag) {
                    if!(room_cleared_flag) {
                        error_contraption(NONE);
                        end();
                    }

                    // TODO: vanilla_act3_sewer_door
                    object[object_id] = 0x01; // opens door

                    exit_mario_prison();
                }


                fun koopa_rolling(enemy) {
                    animate(SCRIPT_OWNER, LOOP, ANIMATION_ENEMY.LIZARD_ROLL);

                    if(True) {
                        if(<BOY>[Y] < enemy[Y]) {
                            arg[0x10] = enemy[Y] - <BOY>[Y];
                        } else {
                            arg[0x10] = <BOY>[Y] - enemy[Y];
                        }

                        if(arg[0x10] <= 0d5) {
                            if(<BOY>[X] > enemy[X]) {
                                face(enemy, WEST);
                            } else if(<BOY>[X] < enemy[X]) {
                                face(enemy, EAST);
                            }
                        } else {
                            if(<BOY>[Y] > enemy[Y]) {
                                face(enemy, NORTH);
                            } else if(<BOY>[Y] < enemy[Y]) {
                                face(enemy, SOUTH);
                            }
                        }
                    }

                    while(enemy[GENERAL_PURPOSE] == 0d2) {
                        arg[0x12] = enemy[X];
                        arg[0x14] = enemy[Y];
                        sleep(0d5);
                        
                        if((enemy[X] == arg[0x12]) && (enemy[Y] == arg[0x14])) {
                            if(enemy[FACE_DIRECTION] == FACE_DIRECTION.NORTH) {
                                face(enemy, SOUTH);
                            } else if(enemy[FACE_DIRECTION] == FACE_DIRECTION.EAST) {
                                face(enemy, WEST);
                            } else if(enemy[FACE_DIRECTION] == FACE_DIRECTION.SOUTH) {
                                face(enemy, NORTH);
                            } else if(enemy[FACE_DIRECTION] == FACE_DIRECTION.WEST) {
                                face(enemy, EAST);
                            }
                        }
                    }
                }
                fun add_mario_koopa(x, y, crash) {
                    add_enemy(LIZARD, x, y);
                    attach_to_script(LAST_ENTITY);
                    attach_script(SCRIPT_OWNER, DAMAGE, reference(@install() {
                        if(<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0d1) { // make koopa roll
                            <SCRIPT_OWNER>[GENERAL_PURPOSE] = 0d2;

                            heal(SCRIPT_OWNER, 0x00, False);

                            yield();
                            
                            koopa_rolling(<SCRIPT_OWNER>, { nop(); });
                        } else { // make koopa duck
                            <SCRIPT_OWNER>[GENERAL_PURPOSE] = 0d1;
                            
                            yield();
                            animate(SCRIPT_OWNER, ONCE_FREEZE, ANIMATION_ENEMY.LIZARD_DUCK_1);
                        }
                    }));
                    
                    if(crash) {
                        animate(SCRIPT_OWNER, LOOP, ANIMATION_ENEMY.LIZARD_ROLL);
                        attribute(SCRIPT_OWNER, ROOT, True);

                        if(True) {
                            <SCRIPT_OWNER>[Z] = 0d4000;
                            yield();
                            while(<SCRIPT_OWNER>[Z] > 0d0) {
                                yield();
                            }
                        }

                        if(True) {
                            <SCRIPT_OWNER>[VELOCITY] = 0d30;
                            yield();
                            while(<SCRIPT_OWNER>[Z] > 0d0) {
                                yield();
                            }
                        }

                        attribute(SCRIPT_OWNER, ROOT, False);
                        animate(SCRIPT_OWNER, ONCE, DEFAULT);
                    }
                }
                fun add_mario_fireflower(x, y) {
                    add_enemy(FLOWER_ORANGE, x, y);

                    attach_script(LAST_ENTITY, B, reference(@install() {
                        destroy(SCRIPT_OWNER);
                        fake_loot();

                        CUSTOM_FLAG.START_MARIO_FIREFLOWER = True;
                    }));
                }

                @install()
                @async()
                fun stack_boy_yoshi(entity) {
                    attach_to_script(entity);

                    while(alive(<SCRIPT_OWNER>)) {
                        <BOY>[X] = <SCRIPT_OWNER>[X];
                        <BOY>[Y] = <SCRIPT_OWNER>[Y] - 0x0a;

                        if((<BOY>[FACE_DIRECTION] != arg[0x10]) || (arg[0x12] > 0d40)) {
                            arg[0x12] = 0d0;

                            if(<BOY>[FACE_DIRECTION] == FACE_DIRECTION.NORTH) {
                                face(SCRIPT_OWNER, SOUTH);
                                walk(SCRIPT_OWNER, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X], <SCRIPT_OWNER>[Y] - 0d64, NONE);
                            } else if(<BOY>[FACE_DIRECTION] == FACE_DIRECTION.EAST) {
                                face(SCRIPT_OWNER, WEST);
                                walk(SCRIPT_OWNER, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X] + 0d64, <SCRIPT_OWNER>[Y], NONE);
                            } else if(<BOY>[FACE_DIRECTION] == FACE_DIRECTION.SOUTH) {
                                face(SCRIPT_OWNER, NORTH);
                                walk(SCRIPT_OWNER, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X], <SCRIPT_OWNER>[Y] + 0d64, NONE);
                            } else if(<BOY>[FACE_DIRECTION] == FACE_DIRECTION.WEST) {
                                face(SCRIPT_OWNER, EAST);
                                walk(SCRIPT_OWNER, COORDINATE_ABSOLUTE, <SCRIPT_OWNER>[X] - 0d64, <SCRIPT_OWNER>[Y], NONE);
                            }

                            arg[0x10] = <BOY>[FACE_DIRECTION];
                        } else {
                            arg[0x12]++;
                        }

                        sleep(0x01);
                    }
                }

                fun add_yoshi(x, y) {
                    add_enemy(RAPTOR_GREEN, x, y);
                    // add_enemy(RAPTOR_GREEN, 0x36, 0x30, INACTIVE);
                    control(LAST_ENTITY, True);
                    attribute(LAST_ENTITY, INVINCIBLE, True);
                }
            };

            map mario_prison_1(IVOR_EBON_PRISON) { // goombas
                enum entrance {
                    door = entrance(0x2e, 0x11, SOUTH),
                    cave_1 = entrance(0x18, 0x1d, SOUTH),
                    cave_2 = entrance(0x47, 0x11, SOUTH),
                    cave_3 = entrance(0x56, 0x39, SOUTH),
                    // ???
                    cave_5 = entrance(0x47, 0x3d, SOUTH),
                    cave_6 = entrance(0x21, 0x39, SOUTH),
                    cave_7 = entrance(0x0c, 0x2f, SOUTH),

                    crash = entrance(0x36, 0x35, NONE, { crash_both(); }),
                }

                enum soundtrack {
                    default = soundtrack(MARIO.DEFAULT_MUSIC, 0xff)
                }

                enum ROOM {
                    DEBUG = False,

                    ROOM_CLEARED = memory(FLAG, SRAM),

                    ENEMY_COUNT = memory(WORD, TEMP),
                    KILL_COUNT = memory(WORD, TEMP),
                    KILLS_REQUIRED = 0d7,
                    GATE_COUNT = memory(WORD, TEMP),
                    GATES_REQUIRED = 0d0,

                    CELL_1_CLEARED = memory(FLAG, TEMP),
                    CELL_2_CLEARED = memory(FLAG, TEMP),
                    CELL_3_CLEARED = memory(FLAG, TEMP),
                    CELL_4_CLEARED = memory(FLAG, TEMP),
                    CELL_5_CLEARED = memory(FLAG, TEMP),
                    CELL_6_CLEARED = memory(FLAG, TEMP),
                    CELL_7_CLEARED = memory(FLAG, TEMP),
                }

                fun add_mario_frippo(x, y) {
                    add_enemy(FRIPPO, x, y);
                    attach_script(LAST_ENTITY, DEATH, reference(@install() {
                        ROOM.ENEMY_COUNT--;
                        ROOM.KILL_COUNT++;

                        update_condition(ROOM.GATE_COUNT, ROOM.GATES_REQUIRED, ROOM.KILL_COUNT, ROOM.KILLS_REQUIRED);
                    }));

                    ROOM.ENEMY_COUNT++;
                }

                fun init_gate(index, flag) {
                    if(flag) {
                        ROOM.GATE_COUNT++;

                        if(index == 0x01) {
                            object[0x00] = 0x01; // press switch_1
                            object[0x01] = 0x7e; // opens gate_1
                        } else if(index == 0x02) {
                            object[0x08] = 0x01; // press switch_2
                            object[0x07] = 0x7e; // opens gate_2
                        } else if(index == 0x03) {
                            object[0x0a] = 0x01; // press switch_3
                            object[0x09] = 0x7e; // opens gate_3
                        } else if(index == 0x04) {
                            object[0x0e] = 0x01; // press switch_4
                            object[0x0c] = 0x7e; // opens gate_4
                        } else if(index == 0x05) {
                            object[0x0d] = 0x01; // press switch_5
                            object[0x0b] = 0x7e; // opens gate_5
                        } else if(index == 0x06) {
                            object[0x05] = 0x01; // press switch_6
                            object[0x04] = 0x7e; // opens gate_6
                        } else if(index == 0x07) {
                            object[0x03] = 0x01; // press switch_7
                            object[0x02] = 0x7e; // opens gate_7
                        }
                    }
                }

                fun open_gate(index, flag) {
                    if(flag) {
                        end();
                    } else {
                        set(flag);

                        ROOM.GATE_COUNT++;

                        if(ROOM.DEBUG) {
                            debug_memory(ROOM.GATE_COUNT, ROOM.ENEMY_COUNT);
                        }

                        update_condition(ROOM.GATE_COUNT, ROOM.GATES_REQUIRED, ROOM.KILL_COUNT, ROOM.KILLS_REQUIRED);
                    }

                    if(index == 0x01) {
                        object[0x00] = 0x01; // press switch_1

                        object[0x01] = 0x01; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x02; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x03; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x7e; // opens gate_1
                    } else if(index == 0x02) {
                        object[0x08] = 0x01; // press switch_2

                        object[0x07] = 0x01; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x02; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x03; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x7e; // opens gate_2
                    } else if(index == 0x03) {
                        object[0x0a] = 0x01; // press switch_3

                        object[0x09] = 0x01; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x02; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x03; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x7e; // opens gate_3
                    } else if(index == 0x04) {
                        object[0x0e] = 0x01; // press switch_4

                        object[0x0c] = 0x01; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x02; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x03; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x7e; // opens gate_4
                    } else if(index == 0x05) {
                        object[0x0d] = 0x01; // press switch_5

                        object[0x0b] = 0x01; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x02; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x03; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x7e; // opens gate_5
                    } else if(index == 0x06) {
                        object[0x05] = 0x01; // press switch_6

                        object[0x04] = 0x01; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x02; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x03; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x7e; // opens gate_6
                    } else if(index == 0x07) {
                        object[0x03] = 0x01; // press switch_7

                        object[0x02] = 0x01; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x02; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x03; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x7e; // opens gate_7
                    }
                }

                fun switch_triggered(index, flag, x, y) {
                    if!(ROOM.ROOM_CLEARED) {
                        open_gate(index, flag);

                        add_mario_frippo(x, y);
                    }
                }

                enum stepon_trigger {
                    switch_6 = @install() {
                        switch_triggered(0x06, ROOM.CELL_6_CLEARED, 0x20, 0x3b);
                    },
                    switch_5 = @install() {
                        switch_triggered(0x05, ROOM.CELL_5_CLEARED, 0x47, 0x3f);
                    },
                    switch_4 = @install() {
                        switch_triggered(0x04, ROOM.CELL_4_CLEARED, 0x54, 0x3b);
                    },
                    switch_3 = @install() {
                        switch_triggered(0x03, ROOM.CELL_3_CLEARED, 0x53, 0x1d);
                    },
                    switch_2 = @install() {
                        switch_triggered(0x02, ROOM.CELL_2_CLEARED, 0x47, 0x13);
                    },
                    switch_7 = @install() {
                        switch_triggered(0x07, ROOM.CELL_7_CLEARED, 0x0d, 0x31);
                    },
                    switch_1 = @install() {
                        switch_triggered(0x01, ROOM.CELL_1_CLEARED, 0x18, 0x1e);
                    },
                    exit_door = @install() {
                        door_triggered(0x06, ROOM.ROOM_CLEARED);
                    },
                    stepon_8 = @install() {
                        debug_subtext("S=8");
                    },
                    stepon_9 = @install() {
                        debug_subtext("S=9");
                    },

                    stepon_10 = @install() {
                        debug_subtext("S=10");
                    },
                    stepon_11 = @install() {
                        debug_subtext("S=11");
                    },
                    stepon_12 = @install() {
                        debug_subtext("S=12");
                    },
                    stepon_13 = @install() {
                        debug_subtext("S=13");
                    },
                    stepon_14 = @install() {
                        debug_subtext("S=14");
                    },
                    pipe_3_1 = @install() {
                        debug_subtext("S=15");
                    },
                    pipe_1_1 = @install() {
                        debug_subtext("S=16");
                    },
                    pipe_2_1 = @install() {
                        debug_subtext("S=17");
                    },
                    pipe_2_2 = @install() {
                        debug_subtext("S=18");
                    },
                    pipe_2_3 = @install() {
                        debug_subtext("S=19");
                    },

                    pipe_1_2 = @install() {
                        debug_subtext("S=20");
                    },
                    pipe_1_3 = @install() {
                        debug_subtext("S=21");
                    },
                    pipe_1_4 = @install() {
                        debug_subtext("S=22");
                    },
                    pipe_3_2 = @install() {
                        debug_subtext("S=23");
                    },
                    pipe_3_3 = @install() {
                        debug_subtext("S=24");
                    },
                    pipe_3_4 = @install() {
                        debug_subtext("S=25");
                    },
                    exit_cell_2 = @install() {
                        debug_subtext("S=26");
                    },
                    exit_cell_3 = @install() {
                        debug_subtext("S=27");
                    },
                    exit_cell_4 = @install() {
                        debug_subtext("S=28");
                    },
                    exit_cell_5 = @install() {
                        debug_subtext("S=29");
                    },

                    exit_cell_6 = @install() {
                        debug_subtext("S=30");
                    },
                    exit_cell_7 = @install() {
                        debug_subtext("S=31");
                    },
                }

                enum b_trigger {
                    cell_1_gourd = @install() {
                        debug_subtext("B=0");
                    },
                }

                fun trigger_enter() {
                    if(ROOM.ROOM_CLEARED) {
                        set(ROOM.CELL_1_CLEARED);
                        object[0x00] = 0x01; // press switch_1
                        object[0x01] = 0x7e; // opens gate_1
                        set(ROOM.CELL_2_CLEARED);
                        object[0x08] = 0x01; // press switch_2
                        object[0x07] = 0x7e; // opens gate_2
                        set(ROOM.CELL_3_CLEARED);
                        object[0x0a] = 0x01; // press switch_3
                        object[0x09] = 0x7e; // opens gate_3
                        set(ROOM.CELL_4_CLEARED);
                        object[0x0e] = 0x01; // press switch_4
                        object[0x0c] = 0x7e; // opens gate_4
                        set(ROOM.CELL_5_CLEARED);
                        object[0x0d] = 0x01; // press switch_5
                        object[0x0b] = 0x7e; // opens gate_5
                        set(ROOM.CELL_6_CLEARED);
                        object[0x05] = 0x01; // press switch_6
                        object[0x04] = 0x7e; // opens gate_6
                        set(ROOM.CELL_7_CLEARED);
                        object[0x03] = 0x01; // press switch_7
                        object[0x02] = 0x7e; // opens gate_7
                    }

                    mario_init(False, False);

                    if!(ROOM.ROOM_CLEARED) {
                        room_condition(ROOM.ROOM_CLEARED, ROOM.GATE_COUNT, ROOM.GATES_REQUIRED, ROOM.KILL_COUNT, ROOM.KILLS_REQUIRED);
                    }
                }
            };

            map mario_prison_2(IVOR_EBON_PRISON) { // bowser gate
                enum entrance {
                    door = entrance(0x2e, 0x11, SOUTH),
                    cave_1 = entrance(0x18, 0x1d, SOUTH),
                    cave_2 = entrance(0x47, 0x11, SOUTH),
                    cave_3 = entrance(0x56, 0x39, SOUTH),
                    // ???
                    cave_5 = entrance(0x47, 0x3d, SOUTH),
                    cave_6 = entrance(0x21, 0x39, SOUTH),
                    cave_7 = entrance(0x0c, 0x2f, SOUTH),

                    crash = entrance(0x36, 0x35, NONE, { crash_both(); }),
                }

                enum soundtrack {
                    default = soundtrack(MARIO.DEFAULT_MUSIC, 0xff)
                }

                enum ROOM {
                    DEBUG = True,

                    ENEMY_COUNT = memory(WORD, TEMP),
                    KILL_COUNT = memory(WORD, TEMP),
                    KILLS_REQUIRED = 0d0,
                    GATE_COUNT = memory(WORD, TEMP),
                    GATES_REQUIRED = 0d0,

                    ROOM_CLEARED = memory(FLAG, SRAM),
                }

                fun init_gate(index) {
                    if(index == 0x01) {
                        object[0x00] = 0x01; // press switch_1
                        object[0x01] = 0x01; // opens gate_1
                    } else if(index == 0x02) {
                        object[0x08] = 0x01; // press switch_2
                        object[0x07] = 0x02; // opens gate_2
                    } else if(index == 0x03) {
                        object[0x0a] = 0x01; // press switch_3
                        object[0x09] = 0x03; // opens gate_3
                    } else if(index == 0x04) {
                        object[0x0e] = 0x01; // press switch_4
                        object[0x0c] = 0x01; // opens gate_4
                    } else if(index == 0x05) {
                        object[0x0d] = 0x01; // press switch_5
                        object[0x0b] = 0x02; // opens gate_5
                    } else if(index == 0x06) {
                        object[0x05] = 0x01; // press switch_6
                        object[0x04] = 0x03; // opens gate_6
                    } else if(index == 0x07) {
                        object[0x03] = 0x01; // press switch_7
                        object[0x02] = 0x01; // opens gate_7
                    }
                }

                enum stepon_trigger {
                    switch_6 = nop(),
                    switch_5 = nop(),
                    switch_4 = nop(),
                    switch_3 = nop(),
                    switch_2 = nop(),
                    switch_7 = nop(),
                    switch_1 = nop(),
                    exit_door = @install() {
                        room_cleared(ROOM.ROOM_CLEARED);

                        door_triggered(0x06, ROOM.ROOM_CLEARED);
                    },
                    stepon_8 = @install() {
                        debug_subtext("S=8");
                    },
                    stepon_9 = @install() {
                        debug_subtext("S=9");
                    },

                    stepon_10 = @install() {
                        debug_subtext("S=10");
                    },
                    stepon_11 = @install() {
                        debug_subtext("S=11");
                    },
                    stepon_12 = @install() {
                        debug_subtext("S=12");
                    },
                    stepon_13 = @install() {
                        debug_subtext("S=13");
                    },
                    stepon_14 = @install() {
                        debug_subtext("S=14");
                    },
                    pipe_3_1 = @install() {
                        debug_subtext("S=15");
                    },
                    pipe_1_1 = @install() {
                        debug_subtext("S=16");
                    },
                    pipe_2_1 = @install() {
                        debug_subtext("S=17");
                    },
                    pipe_2_2 = @install() {
                        debug_subtext("S=18");
                    },
                    pipe_2_3 = @install() {
                        debug_subtext("S=19");
                    },

                    pipe_1_2 = @install() {
                        debug_subtext("S=20");
                    },
                    pipe_1_3 = @install() {
                        debug_subtext("S=21");
                    },
                    pipe_1_4 = @install() {
                        debug_subtext("S=22");
                    },
                    pipe_3_2 = @install() {
                        debug_subtext("S=23");
                    },
                    pipe_3_3 = @install() {
                        debug_subtext("S=24");
                    },
                    pipe_3_4 = @install() {
                        debug_subtext("S=25");
                    },
                    exit_cell_2 = @install() {
                        debug_subtext("S=26");
                    },
                    exit_cell_3 = @install() {
                        debug_subtext("S=27");
                    },
                    exit_cell_4 = @install() {
                        debug_subtext("S=28");
                    },
                    exit_cell_5 = @install() {
                        debug_subtext("S=29");
                    },

                    exit_cell_6 = @install() {
                        debug_subtext("S=30");
                    },
                    exit_cell_7 = @install() {
                        debug_subtext("S=31");
                    },
                }

                enum b_trigger {
                    cell_1_gourd = @install() {
                        debug_subtext("B=0");
                    },
                }

                enum BOSS {
                    DEBUG = False,

                    ID = memory(WORD, TEMP),

                    RNG = memory(WORD, TEMP),
                }

                fun shoot_boss(x, y) {
                    shoot_entity_absolute(BOSS.ID, SPEAR, x, y, 0x30, 0x00);
                }

                @install()
                @async()
                fun boss_ai_yump() {
                    while((BOSS.ID[Y] - 0x0a) < <BOY>[Y]) {
                        BOSS.RNG = randrange(0x04);
                        if(BOSS.RNG == 0x00) {
                            BOSS.ID[VELOCITY] = 0x10;
                            sleep(0x10);
                        } else if(BOSS.RNG == 0x01) {
                            BOSS.ID[VELOCITY] = 0x20;
                            sleep(0x20);
                        } else if(BOSS.RNG == 0x02) {
                            BOSS.ID[VELOCITY] = 0x30;
                            sleep(0x30);
                        }

                        sleep(0x30);
                    }
                }

                @install()
                @async()
                fun boss_ai_hammer() {
                    sleep(0d160);

                    while((BOSS.ID[Y] - 0d10) < <BOY>[Y]) {
                        BOSS.RNG = 0d1 + randrange(0d8);
                        if(BOSS.DEBUG) {
                            subtext("rng");
                        }
                        
                        animate(BOSS.ID, LOOP, ANIMATION_ENEMY.LIZARD_TALK);
                        ai_move_projectile_toss(BOSS.ID, SPEAR, <BOY>, BOSS.RNG);
                        animate(BOSS.ID, LOOP, DEFAULT);

                        sleep(0x50);
                    }
                }

                @install()
                @async()
                fun anti_yump() {
                    while((BOSS.ID[Y] - 0x0a) < <BOY>[Y]) {
                        // if(BOSS.ID[Y] < (<BOY>[Y] - 0x0a)) {
                        if(True) {
                            if((BOSS.ID[VELOCITY] > 0x00) && (<BOY>[VELOCITY] > 0x00)) {
                                damage(BOY, 0x01, True);
                            }
                        }
                        yield();
                    }
                }

                fun add_bowser_blocker(x, y) {
                    add_enemy(LIZARD, x, y, INACTIVE_IMORTAL);
                    animate(LAST_ENTITY, LOOP, ANIMATION_PLACEHOLDER.PILLAR_VIGOR);
                }

                fun add_bowser(x, y) {
                    add_enemy(LIZARD_BLACK, x, y);
                    attribute(LAST_ENTITY, ROOT, True);
                    attribute(LAST_ENTITY, INVINCIBLE, True);
                    BOSS.ID = <LAST_ENTITY>;
                    animate(LAST_ENTITY, LOOP, DEFAULT);

                    ROOM.ENEMY_COUNT++;

                    // anti_yump();
                    boss_ai_yump();
                    boss_ai_hammer();
                }

                fun trigger_enter() {
                    init_gate(0x01);
                    init_gate(0x02);
                    init_gate(0x03);
                    init_gate(0x04);
                    init_gate(0x05);
                    init_gate(0x06);
                    init_gate(0x07);

                    if!(ROOM.ROOM_CLEARED) {
                        add_bowser(0x2e, 0x19);
                        push_music(BOSS_MINI);
                    }
                    add_bowser_blocker(0x2e + 0x03, 0x19 - 0x01);
                    add_bowser_blocker(0x2e - 0x03, 0x19 - 0x01);

                    mario_init(False, False);

                    if!(ROOM.ROOM_CLEARED) {
                        CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.NORMAL;

                        room_condition(ROOM.ROOM_CLEARED, ROOM.GATE_COUNT, ROOM.GATES_REQUIRED, ROOM.KILL_COUNT, ROOM.KILLS_REQUIRED);
                    }
                }
            };

            map mario_prison_3(IVOR_EBON_PRISON) { // yoshi (sorry)
                enum entrance {
                    door = entrance(0x2e, 0x11, SOUTH),
                    cave_1 = entrance(0x18, 0x1d, SOUTH),
                    cave_2 = entrance(0x47, 0x11, SOUTH),
                    cave_3 = entrance(0x56, 0x39, SOUTH),
                    // ???
                    cave_5 = entrance(0x47, 0x3d, SOUTH),
                    cave_6 = entrance(0x21, 0x39, SOUTH),
                    cave_7 = entrance(0x0c, 0x2f, SOUTH),

                    crash = entrance(0x36, 0x35, NONE, { crash_both(); }),
                }

                enum soundtrack {
                    default = soundtrack(MARIO.DEFAULT_MUSIC, 0xff)
                }

                enum ROOM {
                    DEBUG = True,

                    ROOM_CLEARED = memory(FLAG, SRAM),

                    ENEMY_COUNT = memory(WORD, TEMP),
                    KILL_COUNT = memory(WORD, TEMP),
                    KILLS_REQUIRED = 0d0,
                    GATE_COUNT = memory(WORD, TEMP),
                    GATES_REQUIRED = 0d7,

                    CELL_1_CLEARED = memory(FLAG, TEMP),
                    CELL_2_CLEARED = memory(FLAG, TEMP),
                    CELL_3_CLEARED = memory(FLAG, TEMP),
                    CELL_4_CLEARED = memory(FLAG, TEMP),
                    CELL_5_CLEARED = memory(FLAG, TEMP),
                    CELL_6_CLEARED = memory(FLAG, TEMP),
                    CELL_7_CLEARED = memory(FLAG, TEMP),
                }

                fun add_mario_frippo(x, y) {
                    add_enemy(FRIPPO, x, y);

                    ROOM.ENEMY_COUNT++;
                }

                fun init_gate(index, flag) {
                    if(flag) {
                        ROOM.GATE_COUNT++;

                        if(index == 0x01) {
                            object[0x00] = 0x01; // press switch_1
                            object[0x01] = 0x7e; // opens gate_1
                        } else if(index == 0x02) {
                            object[0x08] = 0x01; // press switch_2
                            object[0x07] = 0x7e; // opens gate_2
                        } else if(index == 0x03) {
                            object[0x0a] = 0x01; // press switch_3
                            object[0x09] = 0x7e; // opens gate_3
                        } else if(index == 0x04) {
                            object[0x0e] = 0x01; // press switch_4
                            object[0x0c] = 0x7e; // opens gate_4
                        } else if(index == 0x05) {
                            object[0x0d] = 0x01; // press switch_5
                            object[0x0b] = 0x7e; // opens gate_5
                        } else if(index == 0x06) {
                            object[0x05] = 0x01; // press switch_6
                            object[0x04] = 0x7e; // opens gate_6
                        } else if(index == 0x07) {
                            object[0x03] = 0x01; // press switch_7
                            object[0x02] = 0x7e; // opens gate_7
                        }
                    }
                }

                fun open_gate(index, flag) {
                    if(flag) {
                        end();
                    } else {
                        set(flag);

                        ROOM.GATE_COUNT++;

                        if(ROOM.DEBUG) {
                            debug_memory(ROOM.GATE_COUNT, ROOM.ENEMY_COUNT);
                        }

                        update_condition(ROOM.GATE_COUNT, ROOM.GATES_REQUIRED, ROOM.KILL_COUNT, ROOM.KILLS_REQUIRED);
                    }

                    if(index == 0x01) {
                        object[0x00] = 0x01; // press switch_1

                        object[0x01] = 0x01; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x02; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x03; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x7e; // opens gate_1
                    } else if(index == 0x02) {
                        object[0x08] = 0x01; // press switch_2

                        object[0x07] = 0x01; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x02; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x03; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x7e; // opens gate_2
                    } else if(index == 0x03) {
                        object[0x0a] = 0x01; // press switch_3

                        object[0x09] = 0x01; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x02; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x03; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x7e; // opens gate_3
                    } else if(index == 0x04) {
                        object[0x0e] = 0x01; // press switch_4

                        object[0x0c] = 0x01; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x02; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x03; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x7e; // opens gate_4
                    } else if(index == 0x05) {
                        object[0x0d] = 0x01; // press switch_5

                        object[0x0b] = 0x01; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x02; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x03; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x7e; // opens gate_5
                    } else if(index == 0x06) {
                        object[0x05] = 0x01; // press switch_6

                        object[0x04] = 0x01; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x02; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x03; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x7e; // opens gate_6
                    } else if(index == 0x07) {
                        object[0x03] = 0x01; // press switch_7

                        object[0x02] = 0x01; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x02; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x03; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x7e; // opens gate_7
                    }
                }

                enum stepon_trigger {
                    switch_6 = @install() {
                        open_gate(0x06, ROOM.CELL_6_CLEARED);

                        add_mario_frippo(0x20, 0x3b);
                    },
                    switch_5 = @install() {
                        open_gate(0x05, ROOM.CELL_5_CLEARED);

                        add_mario_frippo(0x47, 0x3f);
                    },
                    switch_4 = @install() {
                        open_gate(0x04, ROOM.CELL_4_CLEARED);

                        add_mario_frippo(0x54, 0x3b);
                    },
                    switch_3 = @install() {
                        open_gate(0x03, ROOM.CELL_3_CLEARED);

                        add_mario_frippo(0x53, 0x1d);
                    },
                    switch_2 = @install() {
                        open_gate(0x02, ROOM.CELL_2_CLEARED);

                        add_mario_frippo(0x47, 0x13);
                    },
                    switch_7 = @install() {
                        open_gate(0x07, ROOM.CELL_7_CLEARED);

                        add_mario_frippo(0x0d, 0x31);
                    },
                    switch_1 = @install() {
                        open_gate(0x01, ROOM.CELL_1_CLEARED);

                        add_mario_frippo(0x18, 0x1e);
                    },
                    exit_door = @install() {
                        door_triggered(0x06, ROOM.ROOM_CLEARED);
                    },
                    stepon_8 = @install() {
                        debug_subtext("S=8");
                    },
                    stepon_9 = @install() {
                        debug_subtext("S=9");
                    },

                    stepon_10 = @install() {
                        debug_subtext("S=10");
                    },
                    stepon_11 = @install() {
                        debug_subtext("S=11");
                    },
                    stepon_12 = @install() {
                        debug_subtext("S=12");
                    },
                    stepon_13 = @install() {
                        debug_subtext("S=13");
                    },
                    stepon_14 = @install() {
                        debug_subtext("S=14");
                    },
                    pipe_3_1 = @install() {
                        debug_subtext("S=15");
                    },
                    pipe_1_1 = @install() {
                        debug_subtext("S=16");
                    },
                    pipe_2_1 = @install() {
                        debug_subtext("S=17");
                    },
                    pipe_2_2 = @install() {
                        debug_subtext("S=18");
                    },
                    pipe_2_3 = @install() {
                        debug_subtext("S=19");
                    },

                    pipe_1_2 = @install() {
                        debug_subtext("S=20");
                    },
                    pipe_1_3 = @install() {
                        debug_subtext("S=21");
                    },
                    pipe_1_4 = @install() {
                        debug_subtext("S=22");
                    },
                    pipe_3_2 = @install() {
                        debug_subtext("S=23");
                    },
                    pipe_3_3 = @install() {
                        debug_subtext("S=24");
                    },
                    pipe_3_4 = @install() {
                        debug_subtext("S=25");
                    },
                    exit_cell_2 = @install() {
                        debug_subtext("S=26");
                    },
                    exit_cell_3 = @install() {
                        debug_subtext("S=27");
                    },
                    exit_cell_4 = @install() {
                        debug_subtext("S=28");
                    },
                    exit_cell_5 = @install() {
                        debug_subtext("S=29");
                    },

                    exit_cell_6 = @install() {
                        debug_subtext("S=30");
                    },
                    exit_cell_7 = @install() {
                        debug_subtext("S=31");
                    },
                }

                enum b_trigger {
                    cell_1_gourd = @install() {
                        debug_subtext("B=0");
                    },
                }

                fun trigger_enter() {
                    if(ROOM.ROOM_CLEARED) {
                        set(ROOM.CELL_1_CLEARED);
                        object[0x00] = 0x01; // press switch_1
                        object[0x01] = 0x7e; // opens gate_1
                        set(ROOM.CELL_2_CLEARED);
                        object[0x08] = 0x01; // press switch_2
                        object[0x07] = 0x7e; // opens gate_2
                        set(ROOM.CELL_3_CLEARED);
                        object[0x0a] = 0x01; // press switch_3
                        object[0x09] = 0x7e; // opens gate_3
                        set(ROOM.CELL_4_CLEARED);
                        object[0x0e] = 0x01; // press switch_4
                        object[0x0c] = 0x7e; // opens gate_4
                        set(ROOM.CELL_5_CLEARED);
                        object[0x0d] = 0x01; // press switch_5
                        object[0x0b] = 0x7e; // opens gate_5
                        set(ROOM.CELL_6_CLEARED);
                        object[0x05] = 0x01; // press switch_6
                        object[0x04] = 0x7e; // opens gate_6
                        set(ROOM.CELL_7_CLEARED);
                        object[0x03] = 0x01; // press switch_7
                        object[0x02] = 0x7e; // opens gate_7
                    }

                    mario_init(False, False);

                    add_yoshi(0x36, 0x30);
                    stack_boy_yoshi(<LAST_ENTITY>);

                    if!(ROOM.ROOM_CLEARED) {
                        room_condition(ROOM.ROOM_CLEARED, ROOM.GATE_COUNT, ROOM.GATES_REQUIRED, ROOM.KILL_COUNT, ROOM.KILLS_REQUIRED);
                    }
                }
            };

            map mario_prison_4(IVOR_EBON_PRISON) { // koopas
                enum entrance {
                    door = entrance(0x2e, 0x11, SOUTH),
                    cave_1 = entrance(0x18, 0x1d, SOUTH),
                    cave_2 = entrance(0x47, 0x11, SOUTH),
                    cave_3 = entrance(0x56, 0x39, SOUTH),
                    // ???
                    cave_5 = entrance(0x47, 0x3d, SOUTH),
                    cave_6 = entrance(0x21, 0x39, SOUTH),
                    cave_7 = entrance(0x0c, 0x2f, SOUTH),

                    crash = entrance(0x36, 0x35, NONE, { crash_both(); }),
                }

                enum soundtrack {
                    default = soundtrack(MARIO.DEFAULT_MUSIC, 0xff)
                }

                enum ROOM {
                    DEBUG = False,

                    ROOM_CLEARED = memory(FLAG, SRAM),

                    ENEMY_COUNT = memory(WORD, TEMP),
                    KILL_COUNT = memory(WORD, TEMP),
                    KILLS_REQUIRED = 0d7,
                    GATE_COUNT = memory(WORD, TEMP),
                    GATES_REQUIRED = 0d0,

                    CELL_1_CLEARED = memory(FLAG, TEMP),
                    CELL_2_CLEARED = memory(FLAG, TEMP),
                    CELL_3_CLEARED = memory(FLAG, TEMP),
                    CELL_4_CLEARED = memory(FLAG, TEMP),
                    CELL_5_CLEARED = memory(FLAG, TEMP),
                    CELL_6_CLEARED = memory(FLAG, TEMP),
                    CELL_7_CLEARED = memory(FLAG, TEMP),
                }

                fun add_mario_frippo(x, y) {
                    add_enemy(FRIPPO, x, y);
                    attach_script(LAST_ENTITY, DEATH, reference(@install() {
                        ROOM.ENEMY_COUNT--;
                        ROOM.KILL_COUNT++;

                        update_condition(ROOM.GATE_COUNT, ROOM.GATES_REQUIRED, ROOM.KILL_COUNT, ROOM.KILLS_REQUIRED);
                    }));

                    ROOM.ENEMY_COUNT++;
                }

                fun init_gate(index, flag) {
                    if(flag) {
                        ROOM.GATE_COUNT++;

                        if(index == 0x01) {
                            object[0x00] = 0x01; // press switch_1
                            object[0x01] = 0x7e; // opens gate_1
                        } else if(index == 0x02) {
                            object[0x08] = 0x01; // press switch_2
                            object[0x07] = 0x7e; // opens gate_2
                        } else if(index == 0x03) {
                            object[0x0a] = 0x01; // press switch_3
                            object[0x09] = 0x7e; // opens gate_3
                        } else if(index == 0x04) {
                            object[0x0e] = 0x01; // press switch_4
                            object[0x0c] = 0x7e; // opens gate_4
                        } else if(index == 0x05) {
                            object[0x0d] = 0x01; // press switch_5
                            object[0x0b] = 0x7e; // opens gate_5
                        } else if(index == 0x06) {
                            object[0x05] = 0x01; // press switch_6
                            object[0x04] = 0x7e; // opens gate_6
                        } else if(index == 0x07) {
                            object[0x03] = 0x01; // press switch_7
                            object[0x02] = 0x7e; // opens gate_7
                        }
                    }
                }

                fun open_gate(index, flag) {
                    if(flag) {
                        end();
                    } else {
                        set(flag);

                        ROOM.GATE_COUNT++;

                        if(ROOM.DEBUG) {
                            debug_memory(ROOM.GATE_COUNT, ROOM.ENEMY_COUNT);
                        }

                        update_condition(ROOM.GATE_COUNT, ROOM.GATES_REQUIRED, ROOM.KILL_COUNT, ROOM.KILLS_REQUIRED);
                    }

                    if(index == 0x01) {
                        object[0x00] = 0x01; // press switch_1

                        object[0x01] = 0x01; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x02; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x03; // opens gate_1
                        sleep(0x10);
                        object[0x01] = 0x7e; // opens gate_1
                    } else if(index == 0x02) {
                        object[0x08] = 0x01; // press switch_2

                        object[0x07] = 0x01; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x02; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x03; // opens gate_2
                        sleep(0x10);
                        object[0x07] = 0x7e; // opens gate_2
                    } else if(index == 0x03) {
                        object[0x0a] = 0x01; // press switch_3

                        object[0x09] = 0x01; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x02; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x03; // opens gate_3
                        sleep(0x10);
                        object[0x09] = 0x7e; // opens gate_3
                    } else if(index == 0x04) {
                        object[0x0e] = 0x01; // press switch_4

                        object[0x0c] = 0x01; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x02; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x03; // opens gate_4
                        sleep(0x10);
                        object[0x0c] = 0x7e; // opens gate_4
                    } else if(index == 0x05) {
                        object[0x0d] = 0x01; // press switch_5

                        object[0x0b] = 0x01; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x02; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x03; // opens gate_5
                        sleep(0x10);
                        object[0x0b] = 0x7e; // opens gate_5
                    } else if(index == 0x06) {
                        object[0x05] = 0x01; // press switch_6

                        object[0x04] = 0x01; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x02; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x03; // opens gate_6
                        sleep(0x10);
                        object[0x04] = 0x7e; // opens gate_6
                    } else if(index == 0x07) {
                        object[0x03] = 0x01; // press switch_7

                        object[0x02] = 0x01; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x02; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x03; // opens gate_7
                        sleep(0x10);
                        object[0x02] = 0x7e; // opens gate_7
                    }
                }

                fun switch_triggered(index, flag, x, y) {
                    if!(ROOM.ROOM_CLEARED) {
                        open_gate(index, flag);

                        add_mario_frippo(x, y);
                    }
                }

                enum stepon_trigger {
                    switch_6 = @install() {
                        switch_triggered(0x06, ROOM.CELL_6_CLEARED, 0x20, 0x3b);
                    },
                    switch_5 = @install() {
                        switch_triggered(0x05, ROOM.CELL_5_CLEARED, 0x47, 0x3f);
                    },
                    switch_4 = @install() {
                        switch_triggered(0x04, ROOM.CELL_4_CLEARED, 0x54, 0x3b);
                    },
                    switch_3 = @install() {
                        switch_triggered(0x03, ROOM.CELL_3_CLEARED, 0x53, 0x1d);
                    },
                    switch_2 = @install() {
                        switch_triggered(0x02, ROOM.CELL_2_CLEARED, 0x47, 0x13);
                    },
                    switch_7 = @install() {
                        switch_triggered(0x07, ROOM.CELL_7_CLEARED, 0x0d, 0x31);
                    },
                    switch_1 = @install() {
                        switch_triggered(0x01, ROOM.CELL_1_CLEARED, 0x18, 0x1e);
                    },
                    exit_door = @install() {
                        door_triggered(0x06, ROOM.ROOM_CLEARED);
                    },
                    stepon_8 = @install() {
                        debug_subtext("S=8");
                    },
                    stepon_9 = @install() {
                        debug_subtext("S=9");
                    },

                    stepon_10 = @install() {
                        debug_subtext("S=10");
                    },
                    stepon_11 = @install() {
                        debug_subtext("S=11");
                    },
                    stepon_12 = @install() {
                        debug_subtext("S=12");
                    },
                    stepon_13 = @install() {
                        debug_subtext("S=13");
                    },
                    stepon_14 = @install() {
                        debug_subtext("S=14");
                    },
                    pipe_3_1 = @install() {
                        debug_subtext("S=15");
                    },
                    pipe_1_1 = @install() {
                        debug_subtext("S=16");
                    },
                    pipe_2_1 = @install() {
                        debug_subtext("S=17");
                    },
                    pipe_2_2 = @install() {
                        debug_subtext("S=18");
                    },
                    pipe_2_3 = @install() {
                        debug_subtext("S=19");
                    },

                    pipe_1_2 = @install() {
                        debug_subtext("S=20");
                    },
                    pipe_1_3 = @install() {
                        debug_subtext("S=21");
                    },
                    pipe_1_4 = @install() {
                        debug_subtext("S=22");
                    },
                    pipe_3_2 = @install() {
                        debug_subtext("S=23");
                    },
                    pipe_3_3 = @install() {
                        debug_subtext("S=24");
                    },
                    pipe_3_4 = @install() {
                        debug_subtext("S=25");
                    },
                    exit_cell_2 = @install() {
                        debug_subtext("S=26");
                    },
                    exit_cell_3 = @install() {
                        debug_subtext("S=27");
                    },
                    exit_cell_4 = @install() {
                        debug_subtext("S=28");
                    },
                    exit_cell_5 = @install() {
                        debug_subtext("S=29");
                    },

                    exit_cell_6 = @install() {
                        debug_subtext("S=30");
                    },
                    exit_cell_7 = @install() {
                        debug_subtext("S=31");
                    },
                }

                enum b_trigger {
                    cell_1_gourd = @install() {
                        debug_subtext("B=0");
                    },
                }

                fun trigger_enter() {
                    if(ROOM.ROOM_CLEARED) {
                        set(ROOM.CELL_1_CLEARED);
                        object[0x00] = 0x01; // press switch_1
                        object[0x01] = 0x7e; // opens gate_1
                        set(ROOM.CELL_2_CLEARED);
                        object[0x08] = 0x01; // press switch_2
                        object[0x07] = 0x7e; // opens gate_2
                        set(ROOM.CELL_3_CLEARED);
                        object[0x0a] = 0x01; // press switch_3
                        object[0x09] = 0x7e; // opens gate_3
                        set(ROOM.CELL_4_CLEARED);
                        object[0x0e] = 0x01; // press switch_4
                        object[0x0c] = 0x7e; // opens gate_4
                        set(ROOM.CELL_5_CLEARED);
                        object[0x0d] = 0x01; // press switch_5
                        object[0x0b] = 0x7e; // opens gate_5
                        set(ROOM.CELL_6_CLEARED);
                        object[0x05] = 0x01; // press switch_6
                        object[0x04] = 0x7e; // opens gate_6
                        set(ROOM.CELL_7_CLEARED);
                        object[0x03] = 0x01; // press switch_7
                        object[0x02] = 0x7e; // opens gate_7
                    }

                    mario_init(False, False);

                    add_mario_koopa(0x36, 0x30, False);

                    if!(ROOM.ROOM_CLEARED) {
                        room_condition(ROOM.ROOM_CLEARED, ROOM.GATE_COUNT, ROOM.GATES_REQUIRED, ROOM.KILL_COUNT, ROOM.KILLS_REQUIRED);
                    }
                }
            };

            map mario_prison_5(IVOR_SEWERS) {
                enum entrance {
                    door = entrance(0x66, 0x0d, SOUTH),
                    pipe = entrance(0x49, 0x0d, SOUTH),

                    east = entrance(0xdf, 0x66, WEST),
                }

                enum soundtrack {
                    default = soundtrack(MARIO.DEFAULT_MUSIC, 0xff)
                }

                enum ROOM {
                    DEBUG = False,

                    ROOM_CLEARED = memory(FLAG, SRAM),

                    ENEMY_COUNT = memory(WORD, TEMP),
                    KILL_COUNT = memory(WORD, TEMP),
                    KILLS_REQUIRED = 0d0,
                    GATE_COUNT = memory(WORD, TEMP),
                    GATES_REQUIRED = 0d0,

                    YOSHI_ID = memory(WORD, TEMP),
                }

                enum stepon_trigger {
                    exit_pipe = @install() {
                        debug_subtext("S=0");
                    },
                    exit_door = @install() {
                        debug_subtext("S=1");

                        room_cleared(ROOM.ROOM_CLEARED);

                        door_triggered(0x00, ROOM.ROOM_CLEARED);
                    },
                    exit_east_2 = @install() {
                        debug_subtext("S=2");
                    },
                    exit_east_1 = @install() {
                        debug_subtext("S=3");
                    },
                }

                enum b_trigger {
                    b_trigger_0 = @install() {
                        debug_subtext("B=0");
                    },
                    b_trigger_1 = @install() {
                        debug_subtext("B=1");
                    },
                    b_trigger_2 = @install() {
                        debug_subtext("B=2");
                    },
                    b_trigger_3 = @install() {
                        debug_subtext("B=3");
                    },
                    b_trigger_4 = @install() {
                        debug_subtext("B=4");
                    },
                    b_trigger_5 = @install() {
                        debug_subtext("B=5");
                    },
                    b_trigger_6 = @install() {
                        debug_subtext("B=6");
                    },
                    b_trigger_7 = @install() {
                        debug_subtext("B=7");
                    },
                }

                fun trigger_enter() {
                    mario_init(False, False);

                    if(False) {
                        add_yoshi(0d72, 0d27);
                        ROOM.YOSHI_ID = <LAST_ENTITY>;
                        attach_script(LAST_ENTITY, B, reference(@install() {
                            stack_boy_yoshi(<SCRIPT_OWNER>);
                            attach_script(SCRIPT_OWNER, B, reference(nop));
                        }));
                    }

                    add_mario_fireflower(0d214, 0d111);

                    // object[0x00] = 0x01; // open door
                    // object[0x01] = 0x01; // open chest_4_1
                    // object[0x02] = 0x01; // open chest_4_2
                    // object[0x03] = 0x01; // open chest_3_1
                    // object[0x04] = 0x01; // open chest_3_2
                    // object[0x05] = 0x01; // open chest_3_3
                    // object[0x06] = 0x01; // open chest_2
                    // object[0x07] = 0x01; // open chest_1_1
                    // object[0x08] = 0x01; // open chest_1_2

                    if!(ROOM.ROOM_CLEARED) {
                        room_condition(ROOM.ROOM_CLEARED, ROOM.GATE_COUNT, ROOM.GATES_REQUIRED, ROOM.KILL_COUNT, ROOM.KILLS_REQUIRED);
                    }
                }
            };

            map mario_dungeon_boss(MAGMAR) {
                enum entrance {
                    south = entrance(0x18, 0x47, NORTH)
                }

                enum soundtrack {
                    default = soundtrack(PIPE_MAZE.MUSIC_MAZE, 0xff)
                }

                enum BOSS {
                    DEBUG = False,
                    PROGRESS = memory(FLAG, TEMP),

                    ID = memory(WORD, TEMP),

                    PHASE = memory(WORD, TEMP),
                    RNG = memory(WORD, TEMP),
                    ENEMY_COUNT = memory(WORD, TEMP),

                    HIT_COUNTER = memory(WORD, TEMP), // TODO: byte
                    HIT_COUNTER_KOOPA_THRESHOLD = 0d3,

                    SHELL_COLLISION = 0d15,
                    SHELL_DAMAGE = 0d50,

                    HP = 0d500,
                    P0_HP_THRESHOLD = 0d300,
                }

                enum stepon_trigger {
                    exit_south = @install() {
                        fog_wall_inside(!SOULS_MEMORY.DEAD_BOWSER, NORTH);

                        map_transition(pipe_entrance_left, gate, SOUTH);
                    }
                }

                group boss_ai() {
                    fun boss_defeated() {
                        souls_boss_defeated(DEAD_BOWSER, REWARD_BOWSER);

                        unset(BOSS.PROGRESS);
                    }

                    fun check_phase() {
                        if(_dead(BOSS.ID)) {
                            BOSS.PHASE = 0d10;
                        } else if(BOSS.PHASE == 0d0) {
                            debug_memory(BOSS.ID[HP], BOSS.P0_HP_THRESHOLD);

                            if(BOSS.ID[HP] < BOSS.P0_HP_THRESHOLD) {
                                BOSS.PHASE = 0d1;
                            }
                        }
                    }

                    @install()
                    fun boss_hit() {
                        // subtext("bang");
                        damage(BOSS.ID, BOSS.SHELL_DAMAGE, True);
                        check_phase();
                    }
                    @install()
                    @async()
                    fun koopa_collision_scanner(entity_1, entity_2) {
                        range_checker(entity_1, entity_2, BOSS.SHELL_COLLISION, BOSS.SHELL_COLLISION, {
                            if(<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0d2) {
                                if(False) {
                                    subtext("POW");
                                }

                                BOSS.ENEMY_COUNT--;
                                destroy(<SCRIPT_OWNER>);
                                boss_hit();
                            }
                        });
                    }
                    fun spawn_koopa() {
                        if(BOSS.ENEMY_COUNT <= 0d0) {
                            BOSS.ENEMY_COUNT++;

                            add_mario_koopa(0d24, 0d46, True);
                            koopa_collision_scanner(<LAST_ENTITY>, BOSS.ID);
                        }
                    }

                    fun boss_cast() {
                        animate(BOSS.ID, ONCE, ANIMATION_ENEMY.LIZARD_TALK);
                        face(BOSS.ID, SOUTH);
                    }
                    @install()
                    @async()
                    fun boss_ai() {
                        if(BOSS.DEBUG) {
                            subtext("phase 0");
                        }
                        
                        while(BOSS.PHASE <= 0d0) {
                            BOSS.RNG = randrange(0d4);
                            if(False && BOSS.DEBUG) {
                                subtext("rng");
                            }
                            
                            if(BOSS.RNG == 0d0) {
                                spawn_koopa();
                            } else if(BOSS.RNG == 0d1) {
                                boss_cast();
                                
                                ai_move_projectile_toss(BOSS.ID, SPEAR, <BOY>, 0d1);
                            } else if(BOSS.RNG == 0d2) {
                                boss_cast();

                                shoot_entity_entity(BOSS.ID, ONION, BOY, 0x10, 0xff);
                            } else if(BOSS.RNG == 0d3) {
                                nop();
                            }

                            sleep(0d180); // TODO
                        }

                        if(BOSS.DEBUG) {
                            subtext("phase 1");
                        }

                        add_mario_fireflower(0d8, 0d31);
                        add_mario_fireflower(0d38, 0d31);
                        
                        while(BOSS.PHASE <= 0d1) {
                            BOSS.RNG = randrange(0d3);
                            if(False && BOSS.DEBUG) {
                                subtext("rng");
                            }
                            
                            if(BOSS.RNG == 0d0) {
                                boss_cast();
                                
                                ai_move_projectile_toss(BOSS.ID, SPEAR, <BOY>, 0d3 + randrange(0d3));
                            } else if(BOSS.RNG == 0d1) {
                                boss_cast();

                                shoot_entity_entity(BOSS.ID, ONION, BOY, 0d20, 0xff);
                                sleep(0d10);
                                shoot_entity_entity(BOSS.ID, ONION, BOY, 0d10, 0xff);
                            } else if(BOSS.RNG == 0d2) {
                                nop();
                            }

                            sleep(0d180); // TODO
                        }

                        if(BOSS.DEBUG) {
                            subtext("yatta");
                        }

                        boss_defeated();
                    }

                    @install()
                    fun boss_damage() {
                        check_phase();

                        BOSS.HIT_COUNTER++;
                        if(BOSS.DEBUG) {
                            debug_memory(BOSS.HIT_COUNTER, BOSS.HIT_COUNTER_KOOPA_THRESHOLD);
                        }
                        if(BOSS.HIT_COUNTER >= BOSS.HIT_COUNTER_KOOPA_THRESHOLD) {
                            BOSS.HIT_COUNTER = 0d0;
                            
                            spawn_koopa();
                        }
                    }
                    
                    fun add_mario_enemy_bowser(x, y) {
                        add_enemy(LIZARD_BLACK, x, y);
                        BOSS.ID = <LAST_ENTITY>;
                        <LAST_ENTITY>[HP] = BOSS.HP;
                        attach_script(LAST_ENTITY, DAMAGE, reference(boss_damage));

                        boss_ai();
                    }
                };

                fun trigger_enter() {
                    if!(SOULS_MEMORY.DEAD_BOWSER) {
                        add_mario_enemy_bowser(0x18, 0x23);
                        push_music(BOSS);
                        set(BOSS.PROGRESS);
                    }

                    mario_init(False, False);
                }
            };
        };
    };
};

area southern_jungle() {
    enum AREA_SOUTHERN_JUNGLE {
        WATER_REMOVED = memory(FLAG, SRAM),
    }

    area southern_camp() {
        map eastern_waterfall(WATERFALL) {
            enum entrance {
                south = entrance(0x11, 0x3f, NORTH)
            }

            enum soundtrack {
                default = soundtrack(WATERFALL_AMBIENT, 0xff)
            }

            enum ROOM {
                GATE_DEACTIVATED = memory(FLAG, SRAM),
            }

            @install()
            fun waterfall_triggered() {
                if(False) {
                    generic_yeet_waterfall();
                    map_transition(junkyard_northwest, crash_south, NONE);
                } else {
                    error_dlc(NONE);
                }
            }

            enum stepon_trigger {
                stepon_0 = waterfall_triggered(),
                stepon_1 = waterfall_triggered(),
                stepon_2 = waterfall_triggered(),
                stepon_3 = waterfall_triggered(),
                stepon_4 = waterfall_triggered(),
                stepon_5 = waterfall_triggered(),
                stepon_6 = @install() {
                    map_transition(eastern_river, north, SOUTH);
                }
            }

            fun trigger_enter() {
                rimsala_gate(0d17, 0d40, ROOM.GATE_DEACTIVATED, reference(@install() {
                    control(SCRIPT_OWNER, True);

                    ROOM.GATE_DEACTIVATED = True;
                }));

                default_init_room(True, True);
            }
        };

        map eastern_river(HORACE) {
            // sniff=vanilla
            
            enum entrance {
                north = entrance(0x53, 0x04, SOUTH),
                east = entrance(0x81, 0x31, WEST),
                south = entrance(0x55, 0x6e, NORTH),
            }

            enum soundtrack {
                default = soundtrack(SEWER_AMBIENT_WATER, 0xff)
            }

            enum stepon_trigger {
                stepon_0 = @install() {
                    debug_subtext("S=0");
                },
                stepon_1 = @install() {
                    debug_subtext("S=1");
                },
                stepon_2 = @install() {
                    debug_subtext("S=2");
                },
                exit_north = @install() {
                    map_transition(eastern_waterfall, south, NORTH);
                },
                exit_east = @install() {
                    map_transition(east_crossing, west, EAST);
                },
                exit_south = @install() {
                    map_transition(pyramid, north, SOUTH);
                },
            }

            enum b_trigger {
                sniff__1_ethanol_3 = @install() {
                    debug_subtext("B=0");
                    _loot(0x02, ETHANOL, 0d01, 0d03);
                },
                sniff__1_roots_1 = @install() {
                    debug_subtext("B=1");
                    _loot(0x03, ROOTS, 0d01, 0d01);
                },
                sniff__1_wax_2 = @install() {
                    debug_subtext("B=2");
                    _loot(0x04, WAX, 0d01, 0d02);
                },
                sniff__1_limestone = @install() {
                    debug_subtext("B=3");
                    _loot(0x05, LIMESTONE, 0d01, 0d00);
                },
                sniff__1_limestone_2 = @install() {
                    debug_subtext("B=4");
                    _loot(0x06, LIMESTONE, 0d01, 0d02);
                },
                sniff__1_water_1 = @install() {
                    debug_subtext("B=5");
                    _loot(0x07, WATER, 0d01, 0d01);
                },
                sniff__1_vinegar_2 = @install() {
                    debug_subtext("B=6");
                    _loot(0x08, VINEGAR, 0d01, 0d02);
                },
                sniff__1_ash_2 = @install() {
                    debug_subtext("B=7");
                    _loot(0x09, ASH, 0d01, 0d02);
                },
                sniff__1_bone = @install() {
                    debug_subtext("B=8");
                    _loot(0x0a, BONE, 0d01, 0d00);
                },
                sniff__1_bone = @install() {
                    debug_subtext("B=9");
                    _loot(0x0b, BONE, 0d01, 0d00);
                },

                sniff__1_brimstone_1 = @install() {
                    debug_subtext("B=10");
                    _loot(0x0c, BRIMSTONE, 0d01, 0d01);
                },
                sniff__1_brimstone_1 = @install() {
                    debug_subtext("B=11");
                    _loot(0x0d, BRIMSTONE, 0d01, 0d01);
                },
                sniff__1_brimstone = @install() {
                    debug_subtext("B=12");
                    _loot(0x0e, BRIMSTONE, 0d01, 0d00);
                },
                sniff__1_water = @install() {
                    debug_subtext("B=13");
                    _loot(0x0f, WATER, 0d01, 0d00);
                },
                sniff__1_crystal_2 = @install() {
                    debug_subtext("B=14");
                    _loot(0x10, CRYSTAL, 0d01, 0d02);
                },
                sniff__1_clay_1 = @install() {
                    debug_subtext("B=15");
                    _loot(0x11, CLAY, 0d01, 0d01);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=16");
                    _loot(0x12, ROOTS, 0d01, 0d00);
                },
                sniff__1_roots_1 = @install() {
                    debug_subtext("B=17");
                    _loot(0x13, ROOTS, 0d01, 0d01);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=18");
                    _loot(0x14, CLAY, 0d01, 0d00);
                },
                sniff__1_oil_2 = @install() {
                    debug_subtext("B=19");
                    _loot(0x15, OIL, 0d01, 0d02);
                },
            }

            fun remove_water(remove) {
                if(remove) {
                    object[0x00] = 0x01;
                    object[0x01] = 0x01;
                } else {
                    object[0x00] = 0x00;
                    object[0x01] = 0x00;
                }
            }

            fun trigger_enter() {
                // object[0x00] = 0x01;
                // object[0x01] = 0x01;

                if!(AREA_SOUTHERN_JUNGLE.WATER_REMOVED) {
                    add_enemy(REVEALER_TARGET_ENTITY, 0x52, 0x26);
                    special_script(REVEALER, reference(@install() {
                        destroy(SCRIPT_OWNER);

                        remove_water(True);

                        AREA_SOUTHERN_JUNGLE.WATER_REMOVED = True;
                    }));

                    add_debug_entity(0x5b, 0x23, reference(@install() {
                        revealer_triggered();

                        destroy(SCRIPT_OWNER);
                    }));
                } else {
                    remove_water(True);
                }

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // east
                    add_enemy(RAPTOR_PURPLE, 0d95, 0d30);

                    add_enemy(RAPTOR_PURPLE, 0d99, 0d63);

                    add_enemy(FLOWER_PURPLE, 0d96, 0d60);

                    // west
                    add_enemy(RAPTOR_GREEN, 0d40, 0d47);

                    add_enemy(RAPTOR_GREEN, 0d61, 0d81);

                    // river
                    if(AREA_SOUTHERN_JUNGLE.WATER_REMOVED) {
                        add_enemy(RAPTOR_PURPLE, 0d82, 0d38);
                    }
                }

                default_init_room(True, True);

                place_statue(HORACE, 0d90, 0d75);
            }
        };
    };

    area pyramid() {
        enum AREA_PYRAMID {
            MUSIC = MUSIC.JUNGLE_AMBIENT_BIRDS,
        }

        map pyramid(PYRAMID_EXTERIOR) {
            // sniff=vanilla

            @install()
            @async()
            fun entrance_water() {
                control(NONE);

                arg[0x10] = <BOY>[Y];
                arg[0x12] = <BOY>[X] + 0d40;

                _teleport(DOG, <BOY>[X] + 0d24, <BOY>[Y]);
                face(DOG, WEST);

                face(BOY, EAST);
                <BOY>[Y] += 0d75;

                animate(BOY, LOOP, ANIMATION_BOY.SLEEP_WATER);
                sleep(0d30);

                while(<BOY>[Y] > arg[0x10]) {
                    <BOY>[Y]--;
                    sleep(0d3);
                }

                if(False) {
                    animate(BOY, ONCE, ANIMATION_BOY.SLEEP_DOWN);

                    while(<BOY>[Y] > 0d1020) {
                        <BOY>[Y]--;
                        sleep(0d3);
                    }

                    animate(BOY, ONCE, ANIMATION_BOY.LOOT);
                } else {
                    animate(BOY, LOOP, ANIMATION_BOY.DRAGGED);
                    animate(DOG, LOOP, ANIMATION_DOG.ACT1_DRAGGING);

                    while(<BOY>[X] < arg[0x12]) {
                        <BOY>[X]++;
                        <DOG>[X] = <BOY>[X] + 0d24;
                        sleep(0d3);
                    }
                }

                control(BOTH);
            }

            enum entrance {
                north = entrance(0x66, 0x04, SOUTH),
                east = entrance(0xa3, 0x71, WEST),

                cave_tiny = entrance(0x87, 0x84, SOUTH),

                pyramid_1_1 = entrance(0x4c, 0x6b, SOUTH),
                pyramid_2_1 = entrance(0x46, 0x4e, SOUTH),
                pyramid_2_2 = entrance(0x5e, 0x4e, SOUTH),
                pyramid_3_1 = entrance(0x52, 0x38, SOUTH),
                pyramid_3_2 = entrance(0x5b, 0x33, EAST),

                wings = entrance(0x3d, 0x71, NONE),

                water = entrance(0d95, 0d130, NONE, { entrance_water(); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_PYRAMID.MUSIC, 0xff)
            }

            @install()
            fun pit_triggered() {
                guard_z();
                
                generic_fall(0d100, 0d1030);

                dust_unreachable(0d143, 0d108);
                damage(BOTH, 0d999, True);
                sleep(0d30);
                damage(BOTH, SYSTEM.HP_MAX, False);
            }

            enum stepon_trigger {
                stepon_0 = @install() {
                    debug_subtext("S=0");
                },
                door_tiny = @install() {
                    debug_subtext("S=1");

                    map_transition(pyramid_cave, south, NORTH);
                },
                pit_1 = pit_triggered(),
                pit_2 = pit_triggered(),
                pit_3 = pit_triggered(),
                stairs_bottom = @install() {
                    debug_subtext("S=5");
                },
                switch_left = @install() {
                    debug_subtext("S=6");

                    error_switch(NONE);
                },
                switch_right = @install() {
                    debug_subtext("S=7");

                    error_switch(NONE);
                },
                switch_bottom_south = @install() {
                    debug_subtext("S=8");
                },
                switch_bottom_west = @install() {
                    debug_subtext("S=9");
                },

                pit_4 = pit_triggered(),
                pit_5 = pit_triggered(),
                pit_6 = pit_triggered(),
                pit_7 = pit_triggered(),
                pit_8 = pit_triggered(),
                exit_east = @install() {
                    map_transition(flowers, west, EAST);
                },
                stepon_16 = @install() {
                    debug_subtext("S=16");
                },
                door_2_1 = @install() {
                    debug_subtext("S=17");

                    error_dead_end(SOUTH);
                },
                door_2_2 = @install() {
                    debug_subtext("S=18");

                    error_dead_end(SOUTH);
                },
                door_3_2 = @install() {
                    debug_subtext("S=19");

                    error_dead_end(EAST);
                },

                switch_bottom = @install() {
                    debug_subtext("S=20");

                    error_switch(NONE);
                },
                stepon_21 = @install() {
                    debug_subtext("S=21");
                },
                switch_left_west = @install() {
                    debug_subtext("S=22");
                },
                switch_left_south = @install() {
                    debug_subtext("S=23");
                },
                switch_right_east = @install() {
                    debug_subtext("S=24");
                },
                switch_right_south = @install() {
                    debug_subtext("S=25");
                },
                exit_north = @install() {
                    map_transition(eastern_river, south, NORTH);
                },
            }

            enum b_trigger {
                sniff__1_wax_1 = @install() {
                    debug_subtext("B=0");
                    _loot(0x10, WAX, 0d01, 0d01);
                },
                sniff__1_wax_1 = @install() {
                    debug_subtext("B=1");
                    _loot(0x11, WAX, 0d01, 0d01);
                },
                sniff__1_wax_1 = @install() {
                    debug_subtext("B=2");
                    _loot(0x12, WAX, 0d01, 0d01);
                },
                sniff__1_ash_1 = @install() {
                    debug_subtext("B=3");
                    _loot(0x13, ASH, 0d01, 0d01);
                },
                sniff__1_ash_1 = @install() {
                    debug_subtext("B=4");
                    _loot(0x14, ASH, 0d01, 0d01);
                },
                sniff__1_ash_1 = @install() {
                    debug_subtext("B=5");
                    _loot(0x15, ASH, 0d01, 0d01);
                },
                sniff__1_bone_1 = @install() {
                    debug_subtext("B=6");
                    _loot(0x16, BONE, 0d01, 0d01);
                },
                sniff__1_bone_1 = @install() {
                    debug_subtext("B=7");
                    _loot(0x17, BONE, 0d01, 0d01);
                },
                sniff__1_bone_1 = @install() {
                    debug_subtext("B=8");
                    _loot(0x18, BONE, 0d01, 0d01);
                },
                sniff__1_brimstone_1 = @install() {
                    debug_subtext("B=9");
                    _loot(0x19, BRIMSTONE, 0d01, 0d01);
                },

                sniff__1_brimstone_1 = @install() {
                    debug_subtext("B=10");
                    _loot(0x1a, BRIMSTONE, 0d01, 0d01);
                },
                sniff__1_brimstone_1 = @install() {
                    debug_subtext("B=11");
                    _loot(0x1b, BRIMSTONE, 0d01, 0d01);
                },
                sniff__1_brimstone_1 = @install() {
                    debug_subtext("B=12");
                    _loot(0x1c, BRIMSTONE, 0d01, 0d01);
                },
                sniff__1_water_1 = @install() {
                    debug_subtext("B=13");
                    _loot(0x1d, WATER, 0d01, 0d01);
                },
                sniff__1_limestone_1 = @install() {
                    debug_subtext("B=14");
                    _loot(0x1e, LIMESTONE, 0d01, 0d01);
                },
                sniff__1_limestone_1 = @install() {
                    debug_subtext("B=15");
                    _loot(0x1f, LIMESTONE, 0d01, 0d01);
                },
                sniff__1_roots_1 = @install() {
                    debug_subtext("B=16");
                    _loot(0x20, ROOTS, 0d01, 0d01);
                },
                sniff__1_roots_1 = @install() {
                    debug_subtext("B=17");
                    _loot(0x21, ROOTS, 0d01, 0d01);
                },
                sniff__1_roots_1 = @install() {
                    debug_subtext("B=18");
                    _loot(0x22, ROOTS, 0d01, 0d01);
                },
                sniff__1_vinegar_1 = @install() {
                    debug_subtext("B=19");
                    _loot(0x23, VINEGAR, 0d01, 0d01);
                },
            }

            enum ROOM {
                DEBUG = False,

                BRIDGE_SIZE = 0d45,
                BRIDGE_REVEALED = memory(FLAG, SRAM),
                BRIDGE_REVEALER_ENTITY = memory(WORD, TEMP),

                TRI_STONE_LOOTED = memory(FLAG, SRAM),
            }

            @install()
            fun message_triggered() {
                player_message_triggered();

                subtext("shortcut ahead, therefore try jumping"); // https://soapstone.retzudo.com/04j243v
            }

            @install()
            @async()
            fun revealer_approached() {
                range_checker(ROOM.BRIDGE_REVEALER_ENTITY, <ACTIVE>, ROOM.BRIDGE_SIZE, ROOM.BRIDGE_SIZE, { pit_triggered(); });
            }

            @install()
            fun tri_stones_triggered() {
                if!(ROOM.TRI_STONE_LOOTED) {
                    set(ROOM.TRI_STONE_LOOTED);

                    fake_loot();
                    subtext("todo");
                }
            }

            fun remove_water(remove) {
                if(remove) {
                    object[0x04] = 0x01;
                    object[0x05] = 0x01;
                    object[0x06] = 0x01;
                    object[0x07] = 0x01;
                    object[0x08] = 0x01;
                    object[0x09] = 0x01;
                    object[0x0a] = 0x01;
                } else {
                    object[0x04] = 0x00;
                    object[0x05] = 0x00;
                    object[0x06] = 0x00;
                    object[0x07] = 0x00;
                    object[0x08] = 0x00;
                    object[0x09] = 0x00;
                    object[0x0a] = 0x00;
                }
            }

            fun trigger_enter() {
                if(AREA_SOUTHERN_JUNGLE.WATER_REMOVED) {
                    remove_water(True);
                }

                if(False) {
                    if!(ROOM.BRIDGE_REVEALED) {
                        add_enemy(REVEALER_TARGET_ENTITY, 0d148, 0d119);
                        ROOM.BRIDGE_REVEALER_ENTITY = <LAST_ENTITY>;

                        special_script(REVEALER, reference(@install() {
                            set(ROOM.BRIDGE_REVEALED);
                            object[0x0b] = 0x7e;
                            sleep(0x29);
                            destroy(ROOM.BRIDGE_REVEALER_ENTITY);
                        }));
                        revealer_approached();
                    } else {
                        revealer_triggered();
                    }
                } else {
                    add_enemy(PLACEHOLDER, 0d148, 0d119);
                    ROOM.BRIDGE_REVEALER_ENTITY = <LAST_ENTITY>;

                    revealer_approached();
                }

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if(AREA_SOUTHERN_JUNGLE.WATER_REMOVED) {
                        // river east
                        add_enemy(DRAKE, 0d136, 0d71);

                        // river west
                        add_enemy(SPIDER_GREEN, 0d43, 0d29);
                        add_enemy(DRAKE, 0d50, 0d125);
                        
                        // river south
                        add_enemy(SPIDER_GREEN, 0d103, 0d141);
                    }

                    // pyramid entry
                    add_enemy(DRAKE, 0d61, 0d114);
                }

                add_enemy(REVEALER_TARGET_ENTITY, 0d92, 0d134);
                special_script(REVEALER, reference(@install() {
                    destroy(SCRIPT_OWNER);

                    remove_water(True);

                    AREA_SOUTHERN_JUNGLE.WATER_REMOVED = True;
                }));

                default_init_room(True, True);

                player_message(0d134, 0d122, reference(message_triggered));

                if!(ROOM.TRI_STONE_LOOTED) {
                    add_enemy(PLACEHOLDER, 0d23, 0d134);
                    attach_script(LAST_ENTITY, B, reference(tri_stones_triggered));
                }

                no_clip_box(0d1126, 0d892, 0d1240, 0d956);

                if(False) {
                    fake_pit_scanner(0d512, 0d643, 0d543, 0d684, True, False, True, False);
                    fake_pit_scanner(0d699, 0d643, 0d735, 0d691, True, False, True, False);
                }
            }
        };

        map pyramid_cave(PYRAMID_CAVE) {
            fun check_water() {
                map_transition(pyramid, water, NONE);
                end();
            }

            enum entrance {
                south = entrance(0x15, 0x23, NORTH),

                teleporter = entrance(0d23, 0d18, NONE, {
                    check_water();
                    teleporter_in(SOUTH);
                }),
            }

            enum soundtrack {
                default = soundtrack(AREA_PYRAMID.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_south = @install() {
                    map_transition(pyramid, cave_tiny, SOUTH);
                },
                exit_teleporter = @install() {
                    debug_subtext("S=1");

                    teleporter_out(0d23, 0d17);
                    map_transition(desert_cave, teleporter, NONE);
                },
            }

            fun trigger_enter() {
                fade_in();
            }
        };
    };

    map flowers(FLOWERS) {
        // gourd=vanilla
        // sniff=vanilla

        enum entrance {
            north = entrance(0x62, 0x0b, SOUTH),
            west = entrance(0x04, 0x1f, EAST),

            crash = entrance(0x64, 0x5b, NONE),
        }

        enum soundtrack {
            default = soundtrack(JUNGLE_AMBIENT, 0xff)
        }

        enum stepon_trigger {
            exit_north = @install() {
                map_transition(northern_jungle, south, NORTH);
            },
            exit_south = @install() {
                map_transition(pyramid, east, WEST);
            },
        }

        enum b_trigger {
            gourd__15_money = @install() {
                debug_subtext("B=0");
                _loot_chest(0x05, MONEY, 0d15);
            },
            gourd__1_petal = @install() {
                debug_subtext("B=1");
                _loot_chest(0x00, PETAL, 0d01);
            },
            gourd__1_petal = @install() {
                debug_subtext("B=2");
                _loot_chest(0x02, PETAL, 0d01);
            },
            gourd__1_nectar = @install() {
                debug_subtext("B=3");
                _loot_chest(0x04, NECTAR, 0d01);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=4");
                _loot(0x1c, CLAY, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=5");
                _loot(0x1b, ASH, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=6");
                _loot(0x1a, ROOTS, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=7");
                _loot(0x19, WATER, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=8");
                _loot(0x18, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=9");
                _loot(0x17, ASH, 0d01, 0d00);
            },

            sniff__1_water = @install() {
                debug_subtext("B=10");
                _loot(0x16, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=11");
                _loot(0x15, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=12");
                _loot(0x14, WATER, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=13");
                _loot(0x13, ROOTS, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=14");
                _loot(0x12, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=15");
                _loot(0x11, WATER, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=16");
                _loot(0x10, ROOTS, 0d01, 0d00);
            },
            sniff__2_roots = @install() {
                debug_subtext("B=17");
                _loot(0x0e, CLAY, 0d02, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=18");
                _loot(0x0f, WATER, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=19");
                _loot(0x0d, ROOTS, 0d01, 0d00);
            },

            sniff__1_water = @install() {
                debug_subtext("B=20");
                _loot(0x0b, WATER, 0d01, 0d00);
            },
            sniff__2_roots = @install() {
                debug_subtext("B=21");
                _loot(0x09, ROOTS, 0d02, 0d00); // same as B=22
            },
            sniff__2_roots = @install() {
                debug_subtext("B=22");
                _loot(0x09, ROOTS, 0d02, 0d00); // same as B=21
            },
            gourd__1_oil = @install() {
                debug_subtext("B=23");
                _loot_chest(0x01, OIL, 0x01);
            },
            gourd__shell_helmet = @install() {
                debug_subtext("B=24");
                _loot_chest(0x03, HELM_1_2, 0x01);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=25");
                _loot(0x0a, ROOTS, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=26");
                _loot(0x07, ASH, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=27");
                _loot(0x08, WATER, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=28");
                _loot(0x0c, ROOTS, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=29");
                _loot(0x1d, WATER, 0d01, 0d00);
            },

            sniff__1_roots = @install() {
                debug_subtext("B=30");
                _loot(0x1e, ROOTS, 0d01, 0d00);
            },
        }

        enum ROOM {
            DEBUG = False,

            LIFT_TRIGGER = memory(WORD, TEMP),
            LIFT_CORD = memory(WORD, TEMP),
            LIFT_TRIGGER_RADIUS = 0x20,
            LIFT_START = 0x0fff,
            LIFT_END = 0x30,
            LIFT_SPEED_INCREMEND = 0x01,
            LIFT_SPEED_SLEEP = 0x05,
        }

        @install()
        fun lift_triggered() {
            control(NONE);

            add_placeholder(LIFT_CORD_VERTICAL, 0x00, 0x00);
            ROOM.LIFT_CORD = <LAST_ENTITY>;
            ROOM.LIFT_CORD[X] = ROOM.LIFT_TRIGGER[X];
            ROOM.LIFT_CORD[Y] = ROOM.LIFT_TRIGGER[Y] - 0xb0;
            ROOM.LIFT_CORD[Z] = ROOM.LIFT_START;

            ROOM.LIFT_TRIGGER[Z] = ROOM.LIFT_START;
            yield();
            animate(ROOM.LIFT_TRIGGER, LOOP, ANIMATION_PLACEHOLDER.LIFT_MOVING);

            sleep(0x50);

            animate(ROOM.LIFT_TRIGGER, ONCE_FREEZE, ANIMATION_PLACEHOLDER.LIFT_MOVING);

            walk(DOG, COORDINATE_ABSOLUTE, ROOM.LIFT_TRIGGER[X] - 0x0a, ROOM.LIFT_TRIGGER[Y], NONE);
            walk(BOY, COORDINATE_ABSOLUTE, ROOM.LIFT_TRIGGER[X] + 0x0a, ROOM.LIFT_TRIGGER[Y], BOTH);

            face(BOY, SOUTH);
            face(DOG, SOUTH);

            animate(ROOM.LIFT_TRIGGER, LOOP, ANIMATION_PLACEHOLDER.LIFT_MOVING);

            while(arg[0x00] < ROOM.LIFT_END) {
                ROOM.LIFT_TRIGGER[VELOCITY] = arg[0x00];
                ROOM.LIFT_CORD[VELOCITY] = arg[0x00];
                <BOY>[VELOCITY] = arg[0x00];
                <DOG>[VELOCITY] = arg[0x00];

                arg[0x00] += ROOM.LIFT_SPEED_INCREMEND;
                sleep(ROOM.LIFT_SPEED_SLEEP);
            }

            map_transition(tree_house, door, NONE);
        }
        
        @install()
        @async()
        fun hidden_lift_check() {
            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = ROOM.LIFT_TRIGGER[X];
                arg[0x06] = ROOM.LIFT_TRIGGER[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= ROOM.LIFT_TRIGGER_RADIUS) && (arg[0x0a] <= ROOM.LIFT_TRIGGER_RADIUS)) {
                    lift_triggered();
                    end();
                }
                yield();

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x08], arg[0x0a]);
                    sleep(0x20);
                }
            }
        }
        
        fun trigger_enter() {
            init_map(0x00, 0x02, 0x80, 0x96);

            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // north (west entrance)
                add_enemy(RAPTOR_PURPLE, 0d49, 0d59);
                
                // north east (north entrance)
                add_enemy(RAPTOR_GREEN, 0d101, 0d41);

                // east
                add_enemy(SPIDER, 0d102, 0d87);

                // west
                add_enemy(RAPTOR_GREEN, 0d19, 0d80);

                // center
                add_enemy(SPIDER, 0d49, 0d84);

                // south east
                add_enemy(SPIDER, 0d78, 0d113);

                add_enemy(RAPTOR_GREEN, 0d110, 0d132);
            }

            default_init_room(True, True);

            add_enemy(PLACEHOLDER, 0x72, 0x75);
            ROOM.LIFT_TRIGGER = <LAST_ENTITY>;

            hidden_lift_check();
        }
    };

    map tree_house(STRONGHEART) {
        // chests=vanilla
        
        enum entrance {
            door = entrance(0x12, 0x23, NORTH)
        }

        enum stepon_trigger {
            door = @install() {
                map_transition(flowers, crash, NONE);
            }
        }

        enum b_trigger {
            gourd_1__1_oil = @install() {
                debug_subtext("B=0");
                _loot_chest(0x00, OIL, 0d01);
            },
            gourd_2__1_wax = @install() {
                debug_subtext("B=1");
                _loot_chest(0x02, WAX, 0d01);
            },
            gourd_3__1_wax = @install() {
                debug_subtext("B=2");
                _loot_chest(0x01, WAX, 0d01);
            },
        }

        fun trigger_enter() {
            default_init_room(True, False);
        }
    };

    area northern_jungle() {
        map northern_jungle(NORTH_JUNGLE) {
            // chest=vanilla
            // sniff=vanilla

            enum entrance {
                north = entrance(0x56, 0x05, SOUTH),
                south = entrance(0x07, 0x4d, NORTH),

                cave_1 = entrance(0x08, 0x0f, SOUTH),
                cave_2 = entrance(0x48, 0x13, SOUTH),

                wings = entrance(0x0f, 0x3f, NONE),
            }

            enum soundtrack {
                default = soundtrack(JUNGLE_AMBIENT, 0xff)
            }

            enum stepon_trigger {
                exit_north = @install() {
                    map_transition(jungle_firepit, south, NORTH);
                },
                cave_2 = @install() {
                    debug_subtext("S=1");
                },
                cave_1 = @install() {
                    debug_subtext("S=2");

                    map_transition(jungle_portal, south, NORTH);
                },
                exit_south = @install() {
                    map_transition(flowers, north, SOUTH);
                },
            }
            
            enum b_trigger {
                sniff__1_water = @install() {
                    debug_subtext("B=0");
                    _loot(0x02, WATER, 0d01, 0d00);
                },
                sniff__1_water = @install() {
                    debug_subtext("B=1");
                    _loot(0x03, WATER, 0d01, 0d00);
                },
                sniff__1_water = @install() {
                    debug_subtext("B=2");
                    _loot(0x04, WATER, 0d01, 0d00);
                },
                sniff__1_water = @install() {
                    debug_subtext("B=3");
                    _loot(0x05, WATER, 0d01, 0d00);
                },
                sniff__1_water = @install() {
                    debug_subtext("B=4");
                    _loot(0x06, WATER, 0d01, 0d00);
                },
                sniff__1_water = @install() {
                    debug_subtext("B=5");
                    _loot(0x07, WATER, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=6");
                    _loot(0x08, OIL, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=7");
                    _loot(0x09, OIL, 0d01, 0d00);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=8");
                    _loot(0x0a, ROOTS, 0d01, 0d00);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=9");
                    _loot(0x0b, ROOTS, 0d01, 0d00);
                },

                sniff__1_roots = @install() {
                    debug_subtext("B=10");
                    _loot(0x0c, ROOTS, 0d01, 0d00);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=11");
                    _loot(0x0d, ROOTS, 0d01, 0d00);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=12");
                    _loot(0x0e, ROOTS, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=13");
                    _loot(0x0f, CLAY, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=14");
                    _loot(0x10, CLAY, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=15");
                    _loot(0x11, CLAY, 0d01, 0d00);
                },
                sniff__1_ash = @install() {
                    debug_subtext("B=16");
                    _loot(0x12, ASH, 0d01, 0d00);
                },
                sniff__1_ash = @install() {
                    debug_subtext("B=17");
                    _loot(0x13, ASH, 0d01, 0d00);
                },
                sniff__1_ash = @install() {
                    debug_subtext("B=18");
                    _loot(0x14, ASH, 0d01, 0d00);
                },
                sniff__1_wax = @install() {
                    debug_subtext("B=19");
                    _loot(0x15, WAX, 0d01, 0d00);
                },

                sniff__1_wax = @install() {
                    debug_subtext("B=20");
                    _loot(0x16, WAX, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=21");
                    _loot_chest(0x00, CLAY, 0d01);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=22");
                    _loot_chest(0x01, NECTAR, 0d01);
                },
            }
            
            fun trigger_enter() {
                init_map(0x00, 0x00, 0x63, 0x4f);

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // right path
                    // add_enemy(RAPTOR_GREEN, 0d41, 0d57);

                    add_enemy(RAPTOR_GREEN, 0d58, 0d48);
                    add_enemy(RAPTOR_GREEN, 0d58, 0d48);

                    // right pocket
                    add_enemy(RAPTOR_PURPLE, 0d69, 0d48);
                    // add_enemy(RAPTOR_PURPLE, 0d78, 0d56);
                }

                default_init_room(True, True);
            }
        };

        map jungle_portal(PYRAMID_CAVE) {
            enum entrance {
                south = entrance(0x15, 0x23, NORTH),

                teleporter = entrance(0d23, 0d18, NONE, { teleporter_in(SOUTH); }),
            }
            
            enum soundtrack {
                default = soundtrack(JUNGLE_AMBIENT, 0xff)
            }

            enum stepon_trigger {
                exit_south = @install() {
                    debug_subtext("S=0");

                    map_transition(northern_jungle, cave_1, SOUTH);
                },
                exit_teleporter = @install() {
                    debug_subtext("S=1");

                    teleporter_out(0d23, 0d17);
                    map_transition(junkyard_northeast, teleporter, NONE);
                },
            }

            fun trigger_enter() {
                fade_in();
            }
        };
    };

    map jungle_firepit(FIREPIT_JUNGLE) {
        // sniff=vanilla

        enum entrance {
            south = entrance(0x17, 0x2c, NORTH),

            bonfire = entrance(0d15, 0d23, NONE, { bonfire_wakeup(0d8, 0d32, 0d40, 0d16); }),
        }

        enum soundtrack {
            default = soundtrack(JUNGLE_AMBIENT, 0xff)
        }

        enum stepon_trigger {
            exit_south = @install() {
                map_transition(northern_jungle, north, SOUTH);
            },
            windwalker = @install() {
                debug_subtext("S=1");
            },
        }

        enum b_trigger {
            sniff__1_clay_2 = @install() {
                debug_subtext("B=0");
                _loot(0x06, CLAY, 0d01, 0d02);
            },
            sniff__1_ash_1 = @install() {
                debug_subtext("B=1");
                _loot(0x05, ASH, 0d01, 0d01);
            },
            sniff__1_oil_1 = @install() {
                debug_subtext("B=2");
                _loot(0x04, OIL, 0d01, 0d01);
            },
            sniff__1_oil_3 = @install() {
                debug_subtext("B=3");
                _loot(0x03, OIL, 0d01, 0d03);
            },
        }

        enum ROOM {
            DEBUG = False,

            STATUE_REVEALED = memory(FLAG, SRAM),

            PIT_IGNITED = memory(FLAG, SRAM),
            FIRE_ORB_TRIGGER_COUNTER = memory(WORD, TEMP),
        }

        fun ignite_pit() {
            object[0x01] = 0x01; // ignite firepit

            bonfire(0d15, 0d23, SOULS_MEMORY.BONFIRE_JUNGLE_PIT);
            attribute(LAST_ENTITY, INVISIBLE, True);
            <LAST_ENTITY>[Z_LEVEL] = <BOY>[Z_LEVEL];
        }

        @install()
        fun firepit_damage() {
            check_damage_type(FIRE, ROOM.FIRE_ORB_TRIGGER_COUNTER);

            if(ROOM.FIRE_ORB_TRIGGER_COUNTER) {
                ROOM.FIRE_ORB_TRIGGER_COUNTER = 0x00;
                set(ROOM.PIT_IGNITED);
                ignite_pit();
                destroy(SCRIPT_OWNER);

                set(SOULS_MEMORY.BONFIRE_JUNGLE_PIT);
            } else {
                heal(SCRIPT_OWNER, 0x00, False);
                // damage(SCRIPT_OWNER, 0x00, True);
            }

            // reset_alchemy_types();
        }

        fun show_statue(show) {
            if(show) {
                object[0x02] = 0x01; // show dog_statue

                place_statue(DOG, 0d26, 0d19);
            } else {
                object[0x02] = 0x00; // show dog_statue
            }
        }

        @install()
        fun revealer_triggered() {
            show_statue(True);

            destroy(SCRIPT_OWNER);
        }

        fun trigger_enter() {
            // object[0x00] = 0x02; // add windwalker_hitbox
            // object[0x01] = 0x01; // ignite firepit
            // object[0x02] = 0x01; // show dog_statue

            if!(ROOM.PIT_IGNITED) {
                add_enemy(FACE_ENTITY, 0d14, 0d22);
                attribute(LAST_ENTITY, INVISIBLE, True);
                attach_script(LAST_ENTITY, DAMAGE, reference(firepit_damage));

                reset_alchemy_types();
            } else {
                ignite_pit();
            }

            if!(ROOM.STATUE_REVEALED) {
                add_enemy(REVEALER_TARGET_ENTITY, 0d26, 0d16);

                special_script(REVEALER, reference(revealer_triggered));
            } else {
                show_statue(True);
            }

            default_init_room(True, True);
        }
    };
};

area town() {
    enum AREA_TOWN_TEMPLE {
        SECRET_PASSAGE_OPENED = memory(FLAG, SRAM),
        SECRET_PASSAGE_2_OPENED = memory(FLAG, SRAM),

        MUSIC_TOWN = 0x42,
    }

    map town_market_alley(IVOR_MARKET) {
        enum entrance {
            north = entrance(0x2a, 0x01, SOUTH),
            east = entrance(0x39, 0xc3, WEST),
        }

        enum soundtrack {
            default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
        }

        enum stepon_trigger {
            exit_north = @install() {
                map_transition(town_temple, south, NORTH);
            },
            exit_east = @install() {
                map_transition(town_center, west_2, EAST);
            },
        }

        fun trigger_enter() {
            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // south
                add_enemy(RAT, 0d23, 0d179);

                // north
                add_enemy(MAGGOT, 0d9, 0d31);
                add_enemy(MAGGOT, 0d39, 0d38);

                add_enemy(MAGGOT_RED, 0d39, 0d13);
            }

            init_map(0x0, 0x0, 0x3a, 0xcc);
            default_init_room(False, False);
        }
    };

    area temple() {
        enum AREA_TEMPLE {
            MUSIC = MUSIC.HALLS_1,

            // level 0
            NORTHERN_WALL = 0d408,

            // level 1
            UNLOCKED_LEVEL_1 = memory(FLAG, SRAM),

            // level 2
            UNLOCKED_LEVEL_2 = memory(FLAG, SRAM),
            BOSS_KEY = memory(FLAG, SRAM),
        }

        @install()
        @async()
        fun fake_northern_wall() {
            init_map(0x00, 0x30, 0x50, 0x8a);

            while(True) {
                if(<BOY>[Y] < AREA_TEMPLE.NORTHERN_WALL) {
                    <BOY>[Y] = AREA_TEMPLE.NORTHERN_WALL;
                }
                if(<DOG>[Y] < AREA_TEMPLE.NORTHERN_WALL) {
                    <DOG>[Y] = AREA_TEMPLE.NORTHERN_WALL;
                }

                yield();
            }
        }

        fun open_elevator(open) {
            sound(MECHANICAL_MOVEMENT);

            if(open) {
                sound(ELEVATOR_DOOR);
                object[0x05] = 0d1; // open elevator
                sleep(0d20);

                sound(ELEVATOR_DOOR);
                object[0x05] = 0d2; // open elevator
                sleep(0d20);

                sound(ELEVATOR_DOOR);
                object[0x05] = 0d3; // open elevator
                sleep(0d20);

                sound(ELEVATOR_DOOR);
                object[0x05] = 0d4; // open elevator
                sleep(0d20);
            } else {
                sound(ELEVATOR_DOOR);
                object[0x05] = 0d3; // open elevator
                sleep(0d20);

                sound(ELEVATOR_DOOR);
                object[0x05] = 0d2; // open elevator
                sleep(0d20);

                sound(ELEVATOR_DOOR);
                object[0x05] = 0d1; // open elevator
                sleep(0d20);

                sound(ELEVATOR_DOOR);
                object[0x05] = 0d0; // open elevator
                sleep(0d20);
            }
        }

        @install()
        @async()
        fun _elevator_entrance() {
            sleep(0d50);

            open_elevator(False);
        }
        fun elevator_entrance() {
            object[0x05] = 0d4;

            _elevator_entrance();
        }

        @install()
        fun elevator_leave() {
            if(False) {
                map_transition(town_temple, elevator, NONE); // TODO: walk out again
            } else {
                open_elevator(True);

                walk(BOY, TILE_ABSOLUTE, 0d43, 0d82, NONE);
                walk(DOG, TILE_ABSOLUTE, 0d39, 0d82, BOTH);

                open_elevator(False);

                control(BOTH);
            }
        }

        fun elevator_triggered(current_level) {
            if!(AREA_TEMPLE.UNLOCKED_LEVEL_1) {
                error_contraption(SOUTH);

                end();
            }

            control(NONE);

            open_elevator(True);

            walk(BOY, TILE_ABSOLUTE, 0d43, 0d73, NONE);
            walk(DOG, TILE_ABSOLUTE, 0d39, 0d73, BOTH);

            face(BOY, SOUTH);
            face(DOG, SOUTH);
            
            open_elevator(False);

            // map_transition(town_temple_underground, elevator, NONE);

            if(AREA_TEMPLE.UNLOCKED_LEVEL_2) {
                _question("[SLOW]Press a button:[CHOICE]1[CHOICE]2[CHOICE]3");
            } else if(AREA_TEMPLE.UNLOCKED_LEVEL_1) {
                _question("[SLOW]Press a button:[CHOICE]1[CHOICE]2");
            }

            if(MEMORY.QUESTION_ANSWER == 0d00) {
                if(current_level == 0d0) {
                    elevator_leave();
                } else {
                    map_transition(town_temple, elevator, NONE);
                }
            } else if(MEMORY.QUESTION_ANSWER == 0d01) {
                if(current_level == 0d1) {
                    elevator_leave();
                } else {
                    map_transition(town_temple_underground, elevator, NONE);
                }
            } else if(MEMORY.QUESTION_ANSWER == 0d02) {
                if(current_level == 0d2) {
                    elevator_leave();
                } else {
                    map_transition(town_temple_underground_castle, elevator, NONE);
                }
            } else {
                elevator_leave();
            }
        }

        area level_0() {
            map town_temple(HALLS_CENTER) {
                // chests=nothing

                enum entrance {
                    north = entrance(0x29, 0x03, SOUTH),
                    east_1 = entrance(0x4b, 0x3f, WEST),
                    east_2 = entrance(0x49, 0x5d, WEST),
                    south = entrance(0x29, 0x8b, NORTH),
                    west_1 = entrance(0x09, 0x5d, EAST),
                    west_2 = entrance(0x09, 0x3f, EAST),

                    // elevator = entrance(0x29, 0x49, NONE),
                    elevator = entrance(0x29, 0x4c, SOUTH, { elevator_entrance(); }),
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    stepon_0 = @install() {
                        debug_subtext("S=0");
                    },
                    stepon_1 = @install() {
                        debug_subtext("S=1");
                    },
                    stepon_2 = @install() {
                        debug_subtext("S=2");
                    },
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    stepon_4 = @install() {
                        debug_subtext("S=4");
                    },
                    stepon_5 = @install() {
                        debug_subtext("S=5");
                    },
                    exit_south = @install() {
                        map_transition(town_market_alley, north, SOUTH);
                    },
                    door_west_2 = @install() {
                        map_transition(town_temple_north_west, east, WEST);
                    },
                    door_west_1 = @install() {
                        debug_subtext("S=8");
                    },
                    door_east_2 = @install() {
                        if(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                            map_transition(town_level_2, west, EAST);
                        } else {
                            error_contraption(WEST);
                        }
                    },

                    door_east_1 = @install() {
                        fog_wall_outside(!SOULS_MEMORY.DEAD_TEMPLE_MINITAUR, WEST);

                        map_transition(town_temple_switch, west, EAST);
                    },
                    stepon_11 = @install() {
                        debug_subtext("S=11");
                    },
                    switch_triggered = @install() {
                        debug_subtext("S=12");
                    },
                    stepon_13 = @install() {
                        debug_subtext("S=13");
                    },
                    stepon_14 = @install() {
                        debug_subtext("S=14");
                    },
                    stepon_15 = @install() {
                        debug_subtext("S=15");
                    },
                    stepon_16 = @install() {
                        debug_subtext("S=16");
                    },
                    stepon_17 = @install() {
                        debug_subtext("S=17");
                    },
                    stepon_18 = @install() {
                        debug_subtext("S=18");
                    },
                    stepon_19 = @install() {
                        debug_subtext("S=19");
                    },

                    stepon_20 = @install() {
                        debug_subtext("S=20");
                    },
                    stepon_21 = @install() {
                        debug_subtext("S=21");
                    },
                    stepon_22 = @install() {
                        debug_subtext("S=22");
                    },
                    stepon_23 = @install() {
                        debug_subtext("S=23");
                    },
                    stepon_24 = @install() {
                        debug_subtext("S=24");
                    },
                    stepon_25 = @install() {
                        debug_subtext("S=25");
                    },
                    stepon_26 = @install() {
                        debug_subtext("S=26");
                    },
                    stepon_27 = @install() {
                        debug_subtext("S=27");
                    },
                    stepon_28 = @install() {
                        debug_subtext("S=28");
                    },
                    stepon_29 = @install() {
                        debug_subtext("S=29");
                    },

                    stepon_30 = @install() {
                        debug_subtext("S=30");
                    },
                    elevator = @install() {
                        elevator_triggered(0d0);
                    },
                }

                enum b_trigger {
                    gourd_1__2_VINEGAR = nop(),
                    gourd_2__1_NECTAR = nop(),
                }

                fun open_doors(open) {
                    if(open) {
                        object[0x09] = 0x01; // NE
                        object[0x03] = 0x01; // NW

                        object[0x08] = 0x01; // SE
                        object[0x07] = 0x01; // SW

                    } else {
                        object[0x09] = 0x00; // NE
                        object[0x03] = 0x00; // NW

                        object[0x08] = 0x00; // SE
                        object[0x07] = 0x00; // SW

                    }
                }

                @install()
                fun debug_triggered() {
                    set(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED);
                    set(AREA_TEMPLE.UNLOCKED_LEVEL_1);
                    set(AREA_TEMPLE.UNLOCKED_LEVEL_2);

                    destroy(SCRIPT_OWNER);
                }

                fun trigger_enter() {
                    // object[0x00] = 0x7e; // enroll bridge
                    // object[0x01] = 0x01; // open gourde_2
                    // object[0x02] = 0x01; // open gourde_1
                    // object[0x03] = 0x01; // open door_NW
                    // object[0x04] = 0x04; // open door_boss
                    // object[0x05] = 0x7e; // open elevator
                    // object[0x06] = 0x01; // activate bridge_switch
                    // object[0x07] = 0x01; // open door_SW
                    // object[0x08] = 0x01; // open door_SE
                    // object[0x09] = 0x01; // open door_NE
                    // object[0x0a] = 0x01; // activate switch
                    // object[0x0b] = 0x01; // show bridge_left_1
                    // object[0x0c] = 0x01; // show bridge_left_2
                    // object[0x0d] = 0x01; // show bridge_left_3
                    // object[0x0e] = 0x01; // show bridge_right_1
                    // object[0x0f] = 0x01; // show bridge_right_2
                    // object[0x10] = 0x01; // show bridge_right_3
                    // object[0x11] = 0x01; // show bridge_right_4

                    if!(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                        add_debug_entity(0d69, 0d87, reference(debug_triggered));
                    }

                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // east
                        add_enemy(MAGGOT_RED, 0d65, 0d78);

                        // south
                        add_enemy(MAGGOT_RED, 0d50, 0d109);
                        add_enemy(MAGGOT_RED, 0d63, 0d110);

                        // west
                        add_enemy(MAGGOT_RED, 0d26, 0d73);
                    }

                    open_doors(True);
                    object[0x07] = 0x00; // SW

                    fake_northern_wall();
                    default_init_room(False, False);
                }
            };

            map town_temple_north_west(HALLS_SW) {
                // chests=vanilla

                enum entrance {
                    north = entrance(0x24, 0x2e, SOUTH),
                    east = entrance(0x3b, 0x3f, WEST),
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum ROOM {
                    LEFT_OPENED = memory(FLAG, SRAM),
                    CENTER_OPENED = memory(FLAG, SRAM),
                    RIGHT_TRIGGERED = memory(FLAG, TEMP),
                }

                enum stepon_trigger {
                    exit_east = @install() {
                        map_transition(town_temple, west_2, EAST);
                    },
                    stepon_1 = @install() {
                        debug_subtext("S=1");
                    },
                    switch_2 = @install() {
                        if((!ROOM.LEFT_OPENED) && (!ROOM.CENTER_OPENED)) {
                            object[0x01] = 0x7e; // activate switch_2

                            if!(ROOM.RIGHT_TRIGGERED) {
                                set(ROOM.CENTER_OPENED);
                                object[0x04] = 0x00; // gate 2
                            } else {
                                set(ROOM.LEFT_OPENED);
                                object[0x03] = 0x00; // gate 1
                            }
                        }
                    },
                    switch_1 = @install() {
                        if((!ROOM.LEFT_OPENED) && (!ROOM.CENTER_OPENED)) {

                            object[0x00] = 0x7e; // activate switch_1

                            if!(ROOM.RIGHT_TRIGGERED) {
                                set(ROOM.LEFT_OPENED);
                                object[0x03] = 0x00; // gate 1
                            } else {
                                set(ROOM.CENTER_OPENED);
                                object[0x04] = 0x00; // gate 2
                            }
                        }
                    },
                    switch_3 = @install() {
                        set(ROOM.RIGHT_TRIGGERED);

                        object[0x05] = 0x01; // gate 3
                        object[0x02] = 0x01; // activate switch_3
                    },
                    exit_north = @install() {
                        map_transition(town_temple_boss, south, NORTH);
                    },
                }

                enum b_trigger {
                    gourd_2__3_brimstone = @install() {
                        debug_subtext("B=0");
                        _loot_chest(0x08, LIMESTONE_TABLET, 0d01);
                    },
                    gourd_1_2__1_nectar = @install() {
                        debug_subtext("B=1");
                        _loot_chest(0x07, NECTAR, 0d01);
                    },
                    gourd_1_1__1_wings = @install() {
                        debug_subtext("B=2");
                        _loot_chest(0x06, WINGS, 0d01);
                    },
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // north
                        add_enemy(MAGGOT_RED, 0d49, 0d38);

                        // south
                        add_enemy(MAGGOT_RED, 0d31, 0d75);

                        // center
                        add_enemy(BOY, 0d36, 0d61, INACTIVE_IMORTAL);
                    }

                    if!(ROOM.LEFT_OPENED) {
                        object[0x03] = 0x03; // gate 1
                    } else {
                        object[0x00] = 0x7e; // activate switch_1
                    }
                    if!(ROOM.CENTER_OPENED) {
                        object[0x04] = 0x03; // gate 2
                    } else {
                        object[0x01] = 0x7e; // activate switch_2
                    }
                    object[0x05] = 0x02; // gate 3
                    if(ROOM.LEFT_OPENED || ROOM.CENTER_OPENED) {
                        object[0x02] = 0x7e; // activate switch_3
                    }

                    default_init_room(False, False);
                }
            };

            map town_temple_boss(MEGATAUR) {
                enum entrance {
                    south = entrance(0x41, 0x53, NORTH)
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_south = @install() {
                        map_transition(town_temple_north_west, north, SOUTH);
                    }
                }

                enum ROOM {
                    COLLECTIBLE_LOOTED = memory(FLAG, SRAM),
                }

                @install()
                fun debug_triggered() {
                    set(ROOM.COLLECTIBLE_LOOTED);
                    collectible_collected();

                    destroy(SCRIPT_OWNER);
                }

                fun trigger_enter() {
                    if!(ROOM.COLLECTIBLE_LOOTED) {
                        add_collectible(0x01, 0d64, 0d66, reference(debug_triggered));
                    }

                    init_map(0x30, 0x30 + 0x06, 0x50, 0x4c + 0x06);
                    default_init_room(False, False);
                }
            };

            map town_temple_switch(HALLS_SE) {
                enum entrance {
                    west = entrance(0x01, 0x1b, EAST),
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum BOSS {
                    DEBUG = False,

                    DEFAULT_Z = 0x10,

                    RIDER_ID = memory(WORD, TEMP),
                    MOUNT_ID = memory(WORD, TEMP),
                    TMP_ID = memory(WORD, TEMP),

                    PHASE = memory(WORD, TEMP),
                    TIMER = memory(WORD, TEMP),

                    DISMOUNT = memory(WORD, TEMP),

                    COUNTDOWN = 0d03,

                    HP_MINITAUR = 0d200,
                    HP_MEGATAUR = 0d200,

                    P0_HIT_COUNTER = memory(WORD, TEMP),
                    P0_HP_THRESHOLD = 0d100,

                    P1_HIT_COUNTER = memory(WORD, TEMP),
                }

                fun show_switch(show) {
                    if(show) {
                        object[0x00] = 0x0a;
                    } else {
                        object[0x00] = 0x00;
                    }
                }

                @install()
                fun boss_defeated() {
                    souls_boss_defeated(DEAD_TEMPLE_MINITAUR, REWARD_TEMPLE_MINITAUR);

                    show_switch(True);
                }
                fun switch_activated() {
                    if!(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                        set(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED);
                        set(AREA_TEMPLE.UNLOCKED_LEVEL_1);

                        generic_switch_floor(0x00, True);
                    }
                }

                enum stepon_trigger {
                    exit_west = @install() {
                        fog_wall_inside(!SOULS_MEMORY.DEAD_TEMPLE_MINITAUR, EAST);

                        map_transition(town_temple, east_1, WEST);
                    },
                    switch = @install() {
                        switch_activated();
                    }
                }

                fun knockback_check(entity) {
                    if((entity[CURRENT_GROUND] & 0xff) != 0d16) {
                        if(True) {
                            if(BOSS.DEBUG) {
                                debug_memory(entity[CURRENT_GROUND], 0d0);
                            }

                            // _drag(entity, BOSS.MOUNT_ID[X], BOSS.MOUNT_ID[Y]);
                            _drag(SCRIPT_OWNER, 0d22 << 0d0003, 0d32 << 0d0003);
                            entity[Z_LEVEL] = BOSS.DEFAULT_Z;
                        } else {
                            heal(SCRIPT_OWNER, 0d0, False);
                            animate(SCRIPT_OWNER, ONCE, DEFAULT);

                            attribute(SCRIPT_OWNER, NO_CLIP, True);

                            while(<SCRIPT_OWNER>[CURRENT_GROUND] != 0d16) {
                                sleep(0d30);
                            }

                            attribute(SCRIPT_OWNER, NO_CLIP, False);
                        }

                        end();
                    }
                }

                @install()
                fun rider_damage() {
                    if(BOSS.PHASE == 0d00) {
                        BOSS.DISMOUNT += 0d240;
                        // attribute(BOSS.RIDER_ID, NO_CLIP, False);

                        if(script[0x9] == 0x200) { // TODO: too easy? megataur doesn't have magic resist
                            BOSS.PHASE = 0d2;
                            end();
                        }

                        knockback_check(<SCRIPT_OWNER>);
                        sleep(0d20);
                        knockback_check(<SCRIPT_OWNER>);
                    } else if(BOSS.PHASE == 0d01) {
                        BOSS.DISMOUNT += 0d240;
                        // attribute(BOSS.RIDER_ID, NO_CLIP, False);
                        animate(BOSS.RIDER_ID, ONCE, DEFAULT);

                        knockback_check(<SCRIPT_OWNER>);
                        sleep(0d20);
                        knockback_check(<SCRIPT_OWNER>);
                    }
                }
                @install()
                fun mount_damage() {
                    if(BOSS.PHASE == 0d00) {
                        BOSS.P0_HIT_COUNTER++;

                        if((BOSS.MOUNT_ID[HP] < BOSS.P0_HP_THRESHOLD) || (script[0x9] & 0x200)) {
                            BOSS.PHASE = 0d01;
                            end();
                        }

                        if(BOSS.DEBUG) {
                            debug_memory(BOSS.P0_HIT_COUNTER, BOSS.MOUNT_ID[HP]);
                        }
                    } if(BOSS.PHASE == 0d01) {
                        BOSS.P1_HIT_COUNTER++;

                        if(BOSS.DEBUG) {
                            debug_memory(BOSS.P1_HIT_COUNTER, BOSS.MOUNT_ID[HP]);
                        }

                        if(script[0x9] & 0x200) {
                            BOSS.PHASE = 0d02;
                            end();
                        }
                    }
                }

                @install()
                @async()
                fun boss_watcher() {
                    if(BOSS.DEBUG) {
                        subtext("phase 0");
                    }

                    while(BOSS.PHASE == 0d00) {
                        if(BOSS.DISMOUNT == 0d05) {
                            _drag(BOSS.RIDER_ID, BOSS.MOUNT_ID[X], BOSS.MOUNT_ID[Y] - 0d30);
                            // attribute(BOSS.RIDER_ID, NO_CLIP, True);
                            animate(BOSS.RIDER_ID, ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_EXIT);
                            animate(BOSS.MOUNT_ID, ONCE, SLASH_1);
                        } else if(BOSS.DISMOUNT == 0d01) {
                            BOSS.RIDER_ID[Z_LEVEL] = BOSS.DEFAULT_Z;
                        } else if(BOSS.DISMOUNT == 0d00) {
                            if(BOSS.DISMOUNT == 0d00) {
                                BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                                BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y] - 0d30;
                            }
                        }
                    
                        if(BOSS.DISMOUNT > 0d00) { // TODO: buggy, since menu resets paletts
                            BOSS.DISMOUNT--;
                        }

                        yield();
                    }

                    if(BOSS.DEBUG) {
                        subtext("phase 1");
                    }

                    BOSS.TMP_ID = BOSS.RIDER_ID;
                    BOSS.RIDER_ID = BOSS.MOUNT_ID;
                    BOSS.MOUNT_ID = BOSS.TMP_ID;

                    attach_script(BOSS.RIDER_ID, DAMAGE_DEATH, reference(rider_damage));
                    attach_script(BOSS.MOUNT_ID, DAMAGE_DEATH, reference(mount_damage));

                    yield();

                    BOSS.DISMOUNT = 0d240;
                    _drag(BOSS.RIDER_ID, BOSS.MOUNT_ID[X], BOSS.MOUNT_ID[Y] - 0d30);
                    BOSS.RIDER_ID[Z_LEVEL] = BOSS.DEFAULT_Z;
                    animate(BOSS.MOUNT_ID, ONCE, DEFAULT);

                    // walk(BOSS.MOUNT_ID, TILE_ABSOLUTE_DIRECT, 0d22, 0d32, NONE);
                    _drag(BOSS.MOUNT_ID, 0d22 << 0d0003, 0d32 << 0d0003);
                    BOSS.MOUNT_ID[Z_LEVEL] = BOSS.DEFAULT_Z;

                    while(BOSS.PHASE == 0d01) {
                        if(BOSS.DISMOUNT == 0d05) {
                            _drag(BOSS.RIDER_ID, BOSS.MOUNT_ID[X], BOSS.MOUNT_ID[Y] - 0d30);
                            // attribute(BOSS.RIDER_ID, NO_CLIP, True);
                            animate(BOSS.RIDER_ID, ONCE_FREEZE, ANIMATION_ENEMY.MEGATAUR_EXIT);
                        } else if(BOSS.DISMOUNT == 0d01) {
                            BOSS.RIDER_ID[Z_LEVEL] = BOSS.DEFAULT_Z;
                        } else if(BOSS.DISMOUNT == 0d00) {
                            if(BOSS.DISMOUNT == 0d00) {
                                BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                                BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y] - 0d30;
                            }
                        }
                    
                        if(BOSS.DISMOUNT > 0d00) { // TODO: buggy, since menu resets paletts
                            BOSS.DISMOUNT--;
                        }

                        yield();
                    }

                    if(BOSS.DEBUG) {
                        subtext("yatta");
                    }

                    if(alive(BOSS.MOUNT_ID)) {
                        destroy(BOSS.MOUNT_ID);
                    }
                    if(alive(BOSS.RIDER_ID)) {
                        destroy(BOSS.RIDER_ID);
                    }

                    boss_defeated();
                }

                fun spawn_boss(x, y) {
                    add_enemy(MINITAUR, x, y);
                    BOSS.MOUNT_ID = <LAST_ENTITY>;
                    <LAST_ENTITY>[HP] = BOSS.HP_MINITAUR;
                    attach_script(LAST_ENTITY, DAMAGE_DEATH, reference(mount_damage));

                    add_enemy(MEGATAUR, x, y);
                    BOSS.RIDER_ID = <LAST_ENTITY>;
                    <LAST_ENTITY>[HP] = BOSS.HP_MEGATAUR;
                    attach_script(LAST_ENTITY, DAMAGE_DEATH, reference(rider_damage));

                    animate(BOSS.RIDER_ID, FREEZE, ANIMATION_ENEMY.MEGATAUR_ENTER);
                    
                    boss_watcher();
                }

                fun trigger_enter() {
                    if!(SOULS_MEMORY.DEAD_TEMPLE_MINITAUR) {
                        show_switch(False);

                        spawn_boss(0d36, 0d36);

                        push_music(BOSS);
                    } else {
                        if(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                            object[0x00] = 0x0b;
                        } else {
                            show_switch(True);
                        }
                    }

                    default_init_room(False, False);
                }
            };
        };

        area level_1() {
            map town_temple_underground(HALLS_CENTER) {
                // chests=nothing

                enum entrance {
                    north = entrance(0x29, 0x03, SOUTH),
                    east_1 = entrance(0x4b, 0x3f, WEST),
                    east_2 = entrance(0x49, 0x5d, WEST),
                    south = entrance(0x29, 0x8b, NORTH),
                    west_1 = entrance(0x09, 0x5d, EAST),
                    west_2 = entrance(0x09, 0x3f, EAST),

                    // elevator = entrance(0x29, 0x49, NONE),
                    elevator = entrance(0x29, 0x4c, SOUTH, { elevator_entrance(); }),
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum ROOM {
                    DEBUG = False,

                    BOSS_DOOR_OPENED = memory(FLAG, SRAM),
                    FIREPIT_UNLOCKED = memory(FLAG, SRAM),
                    DOOR_WALL_BOSS_OPENED = memory(FLAG, SRAM),
                    STONE_OFFSET = 0d8 * 0d4,

                    BRIDGE_LEFT = memory(WORD, TEMP),
                    BRIDGE_REVEALED_LEFT = memory(FLAG, SRAM),
                    BRIDGE_RIGHT = memory(WORD, TEMP),
                    BRIDGE_REVEALED_RIGHT = memory(FLAG, SRAM),
                }

                @install()
                fun pit_triggered() {
                    generic_fall(0d100, 0d295);

                    dust_unreachable(0d38, 0d36);
                    damage(BOTH, 0d999, True);
                    sleep(0d30);
                    damage(BOTH, SYSTEM.HP_MAX, False);
                }

                @install()
                fun switch_triggered() {
                    object[0x06] = 0x7e;

                    while(arg[0x10] <= 0d7) {
                        arg[0x10]++;

                        sleep(0d9);
                        sound(0x2c);
                        object[0x00] = arg[0x10];
                    }

                    while(arg[0x12] <= 0d4) {
                        arg[0x12]++;

                        sleep(0d9);
                        sound(0x76);
                        object[0x04] = arg[0x12];
                    }
                }

                enum stepon_trigger {
                    spear_check = @install() {
                        debug_subtext("S=0");

                        if!(ROOM.BOSS_DOOR_OPENED) {
                            guard_spear_2(NORTH, MEMORY.CAMERA_X_MIN, 0x0008);
                            
                            ROOM.BOSS_DOOR_OPENED = True;
                            switch_triggered();
                        }
                    },
                    pit_5 = pit_triggered(),
                    pit_4 = pit_triggered(),
                    pit_3 = pit_triggered(),
                    pit_2 = pit_triggered(),
                    pit_1 = pit_triggered(),
                    exit_south = @install() {
                        if(AREA_TEMPLE.UNLOCKED_LEVEL_2) {
                            map_transition(town_temple_underground_castle_stairs, north_2, SOUTH);
                        } else {
                            error_wrong_side(NORTH);
                        }
                    },
                    door_west_2 = @install() {
                        debug_subtext("S=7");

                        fog_wall_outside(!SOULS_MEMORY.DEAD_WALL, EAST);
                        map_transition(town_temple_underground_wall_boss, fake_lift, WEST);
                    },
                    door_west_1 = @install() {
                        map_transition(town_temple_underground_castle_south_west, east_1, WEST);
                    },
                    door_east_2 = @install() {
                        debug_subtext("S=9");

                        if(ROOM.FIREPIT_UNLOCKED) {
                            map_transition(town_temple_underground_firepit, west, EAST);
                        }
                    },

                    door_east_1 = @install() {
                        debug_subtext("S=10");

                        error_wrong_side(WEST);
                    },
                    door_boss = @install() {
                        debug_subtext("S=11");

                        fog_wall_outside(!SOULS_MEMORY.DEAD_TEMPLE_SQUAD, SOUTH);
                        map_transition(town_temple_underground_boss, south, NORTH);
                    },
                    switch_triggered = @install() {
                        debug_subtext("S=12");
                    },
                    pit_6 = pit_triggered(),
                    pit_13 = pit_triggered(),
                    pit_12 = pit_triggered(),
                    pit_11 = pit_triggered(),
                    pit_10 = pit_triggered(),
                    pit_7 = pit_triggered(),
                    pit_8 = pit_triggered(),

                    pit_9 = pit_triggered(),
                    pit_13 = pit_triggered(),
                    pit_14 = pit_triggered(),
                    pit_15 = pit_triggered(),
                    pit_16 = pit_triggered(),
                    pit_20 = pit_triggered(),
                    pit_19 = pit_triggered(),
                    pit_17 = pit_triggered(),
                    pit_18 = pit_triggered(),
                    revealer_left = @install() {
                        debug_subtext("S=29");
                    },

                    revealer_right = @install() {
                        debug_subtext("S=30");
                    },
                    elevator = @install() {
                        elevator_triggered(0d1);
                    },
                }

                enum b_trigger {
                    gourd_1__2_VINEGAR = @install() {
                        debug_subtext("B=0");
                        
                        _loot_chest(0x02, LIMESTONE_TABLET, 0d01);
                    },
                    gourd_2__1_NECTAR = @install() {
                        debug_subtext("B=1");
                        
                        _loot_chest(0x01, MUD_PEPPER, 0d01);
                    },
                }

                @install()
                @async()
                fun revealer_approached(entity) {
                    range_checker(entity, <ACTIVE>, 0x20, 0x20, { pit_triggered(); });
                }

                fun open_doors(open) {
                    if(open) {
                        object[0x09] = 0x01; // NE
                        // object[0x03] = 0x01; // NW

                        // object[0x08] = 0x01; // SE
                        object[0x07] = 0x01; // SW

                    } else {
                        object[0x09] = 0x00; // NE
                        // object[0x03] = 0x00; // NW

                        // object[0x08] = 0x00; // SE
                        object[0x07] = 0x00; // SW

                    }
                }
                fun show_bridge_left() {
                    object[0x0b] = 0x01; // show bridge_left_1
                    object[0x0c] = 0x01; // show bridge_left_2
                    object[0x0d] = 0x01; // show bridge_left_3
                }
                fun show_bridge_right() {
                    object[0x0e] = 0x01; // show bridge_right_1
                    object[0x0f] = 0x01; // show bridge_right_2
                    object[0x10] = 0x01; // show bridge_right_3
                    object[0x11] = 0x01; // show bridge_right_4
                }

                fun trigger_enter() {
                    // object[0x00] = 0x7e; // enroll bridge
                    // object[0x01] = 0x01; // open gourde_2
                    // object[0x02] = 0x01; // open gourde_1
                    // object[0x03] = 0x01; // open door_NW
                    // object[0x04] = 0x04; // open door_boss
                    // object[0x05] = 0x7e; // open elevator
                    // object[0x06] = 0x01; // activate bridge_switch
                    // object[0x07] = 0x01; // open door_SW
                    // object[0x08] = 0x01; // open door_SE
                    // object[0x09] = 0x01; // open door_NE
                    // object[0x0a] = 0x01; // activate switch
                    // object[0x0b] = 0x01; // show bridge_left_1
                    // object[0x0c] = 0x01; // show bridge_left_2
                    // object[0x0d] = 0x01; // show bridge_left_3
                    // object[0x0e] = 0x01; // show bridge_right_1
                    // object[0x0f] = 0x01; // show bridge_right_2
                    // object[0x10] = 0x01; // show bridge_right_3
                    // object[0x11] = 0x01; // show bridge_right_4

                    if(ROOM.BOSS_DOOR_OPENED) {
                        object[0x00] = 0x7e; // enroll bridge
                        object[0x06] = 0x01; // activate bridge_switch
                        object[0x04] = 0x04; // open door_boss
                    }

                    if(ROOM.BRIDGE_REVEALED_RIGHT) {
                        show_bridge_right();
                    } else {
                        add_enemy(REVEALER_TARGET_ENTITY, 0d51, 0d32);
                        ROOM.BRIDGE_RIGHT = <LAST_ENTITY>;

                        revealer_approached(<LAST_ENTITY>);
                    }
                    if(ROOM.BRIDGE_REVEALED_LEFT) {
                        show_bridge_left();
                    } else {
                        add_enemy(REVEALER_TARGET_ENTITY, 0d32, 0d32);
                        ROOM.BRIDGE_LEFT = <LAST_ENTITY>;

                        revealer_approached(<LAST_ENTITY>);
                    }
                    special_script(REVEALER, reference(@install() {
                        if(<SCRIPT_OWNER> == ROOM.BRIDGE_LEFT) {
                            set(ROOM.BRIDGE_REVEALED_LEFT);

                            show_bridge_left();

                            destroy(SCRIPT_OWNER);
                        } else if(<SCRIPT_OWNER> == ROOM.BRIDGE_RIGHT) {
                            set(ROOM.BRIDGE_REVEALED_RIGHT);

                            show_bridge_right();

                            destroy(SCRIPT_OWNER);
                        }
                    }));

                    add_levitate_stone(0d8, 0d62, reference(@install() {
                        guard_levitate_stone(0d1);

                        object[0x03] = 0x01; // open door_NW
                        ROOM.DOOR_WALL_BOSS_OPENED = True;
                    }));
                    if(ROOM.DOOR_WALL_BOSS_OPENED) {
                        <LAST_ENTITY>[X] += ROOM.STONE_OFFSET;

                        object[0x03] = 0x01; // open door_NW
                    }
                    special_script(LEVITATE, reference(@install() {
                        if(<SCRIPT_OWNER>[FLAGS_2] & ATTRIBUTE_FLAGS.INVINCIBLE_TEMP) {
                            end();
                        }

                        attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, True);

                        if!(ROOM.DOOR_WALL_BOSS_OPENED) {
                            sleep(0d60);

                            ROOM.DOOR_WALL_BOSS_OPENED = True;
                            object[0x03] = 0x01; // open door_NW

                            sleep(0d60);

                            while(arg[0x10] < ROOM.STONE_OFFSET) {
                                arg[0x10]++;

                                <SCRIPT_OWNER>[X]++;

                                sleep(0d3);
                            }

                            sleep(0d360 - 0d3 * ROOM.STONE_OFFSET);
                        } else {
                            sleep(0d120);

                            while(arg[0x10] < ROOM.STONE_OFFSET) {
                                arg[0x10]++;

                                <SCRIPT_OWNER>[X]--;

                                sleep(0d3);
                            }

                            sleep(0d360 - 0d3 * ROOM.STONE_OFFSET);

                            ROOM.DOOR_WALL_BOSS_OPENED = False;
                            object[0x03] = 0x00; // open door_NW
                        }

                        attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, False);
                    }));

                    set(AREA_TEMPLE.UNLOCKED_LEVEL_1);

                    open_doors(True);

                    if!(ROOM.FIREPIT_UNLOCKED) {
                        add_enemy(PLACEHOLDER, 0d77, 0d92);
                        attach_script(LAST_ENTITY, B, reference(@install() {
                            control(NONE);

                            ROOM.FIREPIT_UNLOCKED = True;
                            
                            sound(WEIRD_SOUND);
                            object[0x08] = 0x01; // open door_SE
                            sleep(0d30);

                            map_transition(town_temple_underground_firepit, west, EAST);
                        }));
                    } else {
                        object[0x08] = 0x01; // open door_SE
                    }

                    default_init_room(True, False);
                }
            };

            map town_temple_underground_firepit(FIREPIT_NOBILIA) {
                enum entrance {
                    west = entrance(0x05, 0x1b, EAST),

                    cutscene_landing = entrance(0x0b, 0x1b, NONE),
                    
                    bonfire = entrance(0d45, 0d17, NONE, { bonfire_wakeup(-0d40, 0d8, -0d32, 0d32); }),
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    b_trigger_0 = @install() {
                        debug_subtext("S=0");
                    },
                    exit_west = @install() {
                        map_transition(town_temple_underground, east_2, WEST);
                    },
                }

                enum ROOM {
                    DEBUG = False,

                    PIT_IGNITED = memory(FLAG, SRAM),
                    FIRE_ORB_TRIGGER_COUNTER = memory(WORD, TEMP),
                }

                fun ignite_pit() {
                    object[0x00] = 0x01; // ignite firepit

                    bonfire(0d45, 0d17, SOULS_MEMORY.BONFIRE_TEMPLE_PIT);
                    attribute(LAST_ENTITY, INVISIBLE, True);
                    <LAST_ENTITY>[Z_LEVEL] = <BOY>[Z_LEVEL];
                }

                @install()
                fun firepit_damage() {
                    check_damage_type(FIRE, ROOM.FIRE_ORB_TRIGGER_COUNTER);

                    if(ROOM.FIRE_ORB_TRIGGER_COUNTER) {
                        ROOM.FIRE_ORB_TRIGGER_COUNTER = 0x00;
                        set(ROOM.PIT_IGNITED);
                        destroy(SCRIPT_OWNER);

                        set(SOULS_MEMORY.BONFIRE_TEMPLE_PIT);
                        ignite_pit();
                    } else {
                        heal(SCRIPT_OWNER, 0x00, False);
                        // damage(SCRIPT_OWNER, 0x00, True);
                    }

                    // reset_alchemy_types();
                }

                fun trigger_enter() {
                    // object[0x00] = 0x01; // ignite fire
                    // object[0x01] = 0x02; // show windwalker_collision

                    if!(ROOM.PIT_IGNITED) {
                        add_enemy(FACE_ENTITY, 0d45, 0d17);
                        attribute(LAST_ENTITY, INVISIBLE, True);
                        attach_script(LAST_ENTITY, DAMAGE, reference(firepit_damage));

                        reset_alchemy_types();
                    } else {
                        ignite_pit();
                    }

                    default_init_room(True, False);
                }
            };

            map town_temple_underground_wall_boss(HALLS_BRIDGE) {
                enum entrance {
                    test = entrance(0x21, 0x95, NORTH),
                    
                    fake_lift = entrance(0d76, 0d66, NONE, { crash_both(); }),
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum BOSS {
                    DEBUG = False,

                    ID = memory(WORD, TEMP),
                    BARRIER_1_ID = memory(WORD, TEMP),
                    BARRIER_2_ID = memory(WORD, TEMP),

                    BRIDGE_3 = memory(WORD, TEMP),
                    BRIDGE_3_RESTORED = memory(FLAG, TEMP),
                    BRIDGE_6 = memory(WORD, TEMP),
                    BRIDGE_6_RESTORED = memory(FLAG, TEMP),
                    BRIDGE_12 = memory(WORD, TEMP),
                    BRIDGE_12_RESTORED = memory(FLAG, TEMP),
                }

                fun bridge_triggered(flag) {
                    if!(flag) {
                        // debug_subtext("ded");

                        generic_fall(0d50, 0d1100);

                        dust_unreachable(0d39, 0d129);
                        damage(BOTH, 0d999, True);
                        sleep(0d30);
                        damage(BOTH, SYSTEM.HP_MAX, False);
                    }
                }

                fun update_camera_limit(x) {
                    if(False) {
                        _init_map(0d0, 0d0, x, 0d164 << 0d0003);
                    } else {
                        MEMORY.CAMERA_BOUNDRY_X_END = x + 0d5;
                    }
                }

                @install()
                fun boss_defeated() {
                    destroy(BOSS.BARRIER_1_ID);
                    destroy(BOSS.BARRIER_2_ID);

                    if(alive(BOSS.ID)) {
                        destroy(BOSS.ID);
                    }

                    souls_boss_defeated(DEAD_WALL, REWARD_WALL);

                    update_camera_limit(0xfff);
                }

                enum stepon_trigger {
                    stepon_0 = @install() {
                        debug_subtext("S=0");
                    },
                    gate_lift = @install() {
                        debug_subtext("S=1");
                    },
                    lift = @install() {
                        debug_subtext("S=2");
                    },
                    switch_monk = @install() {
                        debug_subtext("S=3");
                    },
                    switch_circle_1 = @install() {
                        debug_subtext("S=4");
                    },
                    switch_circle_5 = @install() {
                        debug_subtext("S=5");
                    },
                    switch_circle_4 = @install() {
                        debug_subtext("S=6");
                    },
                    switch_circle_6 = @install() {
                        debug_subtext("S=7");
                    },
                    switch_circle_3 = @install() {
                        debug_subtext("S=8");
                    },
                    switch_circle_2 = @install() {
                        debug_subtext("S=9");
                    },

                    switch_gate = @install() {
                        debug_subtext("S=10");
                    },
                    bridge_1 = @install() {
                        debug_subtext("S=11");
                    },
                    bridge_2 = @install() {
                        debug_subtext("S=12");
                    },
                    bridge_18 = @install() {
                        debug_subtext("S=13");
                    },
                    bridge_19 = @install() {
                        debug_subtext("S=14");
                    },
                    bridge_3 = @install() {
                        debug_subtext("S=15");
                    },
                    bridge_4 = @install() {
                        debug_subtext("S=16");
                    },
                    bridge_5 = @install() {
                        debug_subtext("S=17");

                        bridge_triggered(BOSS.BRIDGE_3_RESTORED);
                    },
                    bridge_6 = @install() {
                        debug_subtext("S=18");
                    },
                    bridge_7 = @install() {
                        debug_subtext("S=19");
                    },

                    bridge_8 = @install() {
                        debug_subtext("S=20");

                        bridge_triggered(BOSS.BRIDGE_6_RESTORED);
                    },
                    bridge_9 = @install() {
                        debug_subtext("S=21");
                    },
                    bridge_10 = @install() {
                        debug_subtext("S=22");
                    },
                    bridge_11 = @install() {
                        debug_subtext("S=23");
                    },
                    bridge_12 = @install() {
                        debug_subtext("S=24");
                    },
                    bridge_13 = @install() {
                        debug_subtext("S=25");
                    },
                    bridge_14 = @install() {
                        debug_subtext("S=26");

                        bridge_triggered(BOSS.BRIDGE_12_RESTORED);
                    },
                    bridge_15 = @install() {
                        debug_subtext("S=27");
                    },
                    bridge_16 = @install() {
                        debug_subtext("S=28");
                    },
                    bridge_17 = @install() {
                        debug_subtext("S=29");
                    },

                    secret_passage_1 = @install() {
                        debug_subtext("S=30");
                    },
                    secret_passage_2 = @install() {
                        debug_subtext("S=31");
                    },
                }

                enum b_trigger {
                    lift = @install() {
                        debug_subtext("B=0");

                        if!(SOULS_MEMORY.DEAD_WALL) {
                            boss_defeated();
                        }
                    },
                    gourd__3_honey = @install() {
                        debug_subtext("B=1");
                        _loot_chest(0x20, HONEY, 0d03);
                    },
                }

                fun move_left(x) {
                    arg[0x12] = x;

                    while(arg[0x12] > 0d0) {
                        arg[0x12]--;
                        <SCRIPT_OWNER>[X]--;

                        update_camera_limit(<SCRIPT_OWNER>[X]);

                        yield();
                    }
                }
                fun move_right(x) {
                    arg[0x12] = x;

                    while(arg[0x12] > 0d0) {
                        arg[0x12]--;
                        <SCRIPT_OWNER>[X]++;

                        update_camera_limit(<SCRIPT_OWNER>[X]);

                        yield();
                    }
                }

                @install()
                @async()
                fun _barage(y_offset, level) {
                    shoot_entity_offset_relative(BOSS.ID, ONION, 0d0, y_offset, -0d30, 0d0, 0d20, 0d0);

                    sleep(0d20);
                    shoot_entity_offset_relative(BOSS.ID, ONION, 0d0, y_offset, -0d100, 0d0, 0d20, 0d0);

                    sleep(0d20);
                    shoot_entity_offset_relative(BOSS.ID, ONION, 0d0, y_offset, -0d150, 0d0, 0d20, 0d0);

                    sleep(0d20);
                    shoot_entity_offset_relative(BOSS.ID, ONION, 0d0, y_offset, -0d200, 0d0, 0d20, 0d0);

                    // sleep(0d20);
                    // shoot_entity_offset_relative(BOSS.ID, ONION, 0d0, y_offset, -0d250, 0d0, 0d20, 0d0);
                }
                fun prepare_rng() {
                    // debug_memory(<BOY>[Y], BOSS.ID[Y]);

                    if(randrange(0d2) == 0d0) {
                        if(<BOY>[Y] > BOSS.ID[Y]) { // boy south of boss
                            arg[0x14] = <BOY>[Y] - BOSS.ID[Y];

                            if(arg[0x14] < 0d15) {
                                arg[0x14] = 0d0;
                            } else {
                                arg[0x14] = 0d30;
                            }
                        } else { // boy north of boss
                            arg[0x14] = BOSS.ID[Y] - <BOY>[Y];

                            if(arg[0x14] < 0d15) {
                                arg[0x14] = 0d0;
                            } else {
                                arg[0x14] = -0d30;
                            }
                        }

                        arg[0x12] = arg[0x14];
                    } else {
                        arg[0x12] = randrange(0d3);

                        if(arg[0x12] == 0d0) {
                            arg[0x12] = -0d30;
                        } else if(arg[0x12] == 0d1) {
                            arg[0x12] = 0d0;
                        } else {
                            arg[0x12] = 0d30;
                        }
                    }

                    // debug_memory(<BOY>[Y] - BOSS.ID[Y], arg[0x14]);
                }
                @install()
                @async()
                fun barage(repeat, level) {
                    while(arg[0x10] < repeat) {
                        arg[0x10]++;

                        prepare_rng();

                        _barage(arg[0x12], level);

                        sleep(0d60);
                    }
                }

                @install()
                @async()
                fun movement_watcher() {
                    attach_to_script(BOSS.ID);

                    while(alive(<SCRIPT_OWNER>)) {
                        arg[0x10] = <SCRIPT_OWNER>[HP];

                        sleep(0d180);

                        arg[0x12] = arg[0x10] - <SCRIPT_OWNER>[HP];

                        if(BOSS.DEBUG) {
                            debug_memory(<SCRIPT_OWNER>[HP], arg[0x12]);
                        }

                        sound(0x76);
                        sleep(0d30);

                        if(arg[0x12] == 0d0) {
                            move_left(0d40);
                        } else if(arg[0x12] > 0d80) {
                            move_right(0d80);
                        } else if(arg[0x12] > 0d10) {
                            move_right(0d40);
                        }
                        sound(0x76);

                        if(arg[0x14] > 0d0) {
                            arg[0x14]--;
                        } else {
                            barage(0d2, 0d1);

                            if(0d2 > 0d1) {
                                arg[0x14] = 0d2 - 0d1;
                            }
                        }
                    }
                }

                fun punish_position(entity, x) {
                    if(alive(entity)) {
                        if(entity[X] > (BOSS.ID[X] - x)) {
                            sound(TESLA);

                            face(entity, EAST);
                            damage(entity, 0d5, True);
                        }
                    }
                }

                @install()
                @async()
                fun stack_t0123() {
                    while(alive(BOSS.ID)) {
                        BOSS.BARRIER_1_ID[X] = BOSS.ID[X] - 0d40;
                        BOSS.BARRIER_2_ID[X] = BOSS.ID[X] - 0d40;

                        sleep(0d2);

                        punish_position(<BOY>, 0d50);
                        punish_position(<DOG>, 0d20);
                    }
                }

                @install()
                fun levitate_triggered() {
                    teleport(SCRIPT_OWNER, 0d0, 0d0);

                    if(<SCRIPT_OWNER> == BOSS.BRIDGE_3) {
                        object[0x13] = 0x00;
                        BOSS.BRIDGE_3_RESTORED = True;
                    } else if(<SCRIPT_OWNER> == BOSS.BRIDGE_6) {
                        object[0x16] = 0x00;
                        BOSS.BRIDGE_6_RESTORED = True;
                    } else if(<SCRIPT_OWNER> == BOSS.BRIDGE_12) {
                        object[0x1c] = 0x00;
                        BOSS.BRIDGE_12_RESTORED = True;
                    }

                    destroy(SCRIPT_OWNER);
                }

                fun trigger_enter() {
                    // object[0x00] = 0x7e; // light arena_spawn_left
                    // object[0x01] = 0x7e; // light arena_spawn_right
                    object[0x02] = 0x7e; // open arena_lift_gate
                    // object[0x03] = 0x7e; // open lift_gate
                    // object[0x04] = 0x01; // active lift_switch
                    // object[0x05] = 0x01; // active switch_circle_1
                    // object[0x06] = 0x01; // active switch_circle_2
                    // object[0x07] = 0x01; // active switch_circle_6
                    // object[0x08] = 0x01; // active switch_circle_3
                    // object[0x09] = 0x01; // active switch_circle_5
                    // object[0x0a] = 0x01; // active switch_circle_4
                    // object[0x0b] = 0x01; // active switch_gate_2
                    // object[0x0c] = 0x01; // active switch_gate_1
                    // object[0x0d] = 0x01; // active switch_monk
                    object[0x0e] = 0x7e; // open gate_arena
                    // object[0x0f] = 0x7e; // open gate_switch_circle
                    object[0x10] = 0x7e; // close gate
                    // object[0x20] = 0x7e; // loot gourd

                    default_init_room(True, False);

                    if!(SOULS_MEMORY.DEAD_WALL) {
                        while(<BOY>[Y] < 0d930) {
                            yield();
                        }

                        add_placeholder(SPARK_LEFT, 0d41, 0d131);
                        BOSS.BARRIER_1_ID = <LAST_ENTITY>;
                        add_placeholder(SPARK_LEFT, 0d41, 0d137);
                        BOSS.BARRIER_2_ID = <LAST_ENTITY>;

                        add_enemy(AEGIS_ENTITY, 0d48, 0d131); // 0d44, 0d131
                        BOSS.ID = <LAST_ENTITY>;
                        attach_script(LAST_ENTITY, DEATH, reference(boss_defeated));
                        // add_placeholder(SKELETON_SHIP_1, 0d41, 0d131);

                        walk(BOY, TILE_ABSOLUTE, 0d30, 0d133, BOY, BOY);
                        face(BOY, EAST);

                        stack_t0123();
                        update_camera_limit(<LAST_ENTITY>[X]);

                        movement_watcher();

                        teleport(DOG, 0d0, 0d0);

                        push_music(BOSS);

                        // object[0x11] = 0x7e; // collapse bridge_1
                        // object[0x12] = 0x7e; // collapse bridge_2
                        object[0x13] = 0x7e; // collapse bridge_3
                        // object[0x14] = 0x7e; // collapse bridge_4
                        // object[0x15] = 0x7e; // collapse bridge_5
                        // object[0x16] = 0x7e; // collapse bridge_6
                        // object[0x17] = 0x7e; // collapse bridge_7
                        // object[0x18] = 0x7e; // collapse bridge_8
                        // object[0x19] = 0x7e; // collapse bridge_9
                        // object[0x1a] = 0x7e; // collapse bridge_10
                        // object[0x1b] = 0x7e; // collapse bridge_11
                        object[0x1c] = 0x7e; // collapse bridge_12
                        // object[0x1d] = 0x7e; // collapse bridge_13
                        // object[0x1e] = 0x7e; // collapse bridge_14
                        // object[0x1f] = 0x7e; // collapse bridge_15

                        if(False) {
                            add_enemy(REVEALER_TARGET_ENTITY, 0d54, 0d129); // bridge_3, trigger=17
                            BOSS.BRIDGE_3 = <LAST_ENTITY>;

                            // add_enemy(REVEALER_TARGET_ENTITY, 0d65, 0d129); // bridge_6, trigger=20
                            // BOSS.BRIDGE_6 = <LAST_ENTITY>;
                            BOSS.BRIDGE_6_RESTORED = True;

                            add_enemy(REVEALER_TARGET_ENTITY, 0d89, 0d129); // bridge_12, trigger=26
                            BOSS.BRIDGE_12 = <LAST_ENTITY>;

                            special_script(REVEALER, reference(levitate_triggered));
                        } else {
                            add_enemy(STONE, 0d54, 0d138, STONE_LEVITATE_INVISIBLE); // bridge_3, trigger=17
                            BOSS.BRIDGE_3 = <LAST_ENTITY>;

                            // add_enemy(REVEALER_TARGET_ENTITY, 0d65, 0d138, STONE_LEVITATE); // bridge_6, trigger=20
                            // BOSS.BRIDGE_6 = <LAST_ENTITY>;
                            BOSS.BRIDGE_6_RESTORED = True;

                            add_enemy(STONE, 0d89, 0d138, STONE_LEVITATE_INVISIBLE); // bridge_12, trigger=26
                            BOSS.BRIDGE_12 = <LAST_ENTITY>;

                            special_script(LEVITATE, reference(levitate_triggered));
                        }
                    }
                }
            };

            map town_temple_underground_boss(MEGATAUR) {
                enum entrance {
                    south = entrance(0x41, 0x53, NORTH)
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum BOSS {
                    DEBBUG = False,

                    PROGRESS = memory(FLAG, TEMP),

                    SQUAD_COUNT = 0d5,
                    SQUAD_CHARGED = memory(WORD, TEMP),

                    SQUAD_REQURIED = 0d5,
                    SQUAD_REQURIED_COUNT = memory(WORD, TEMP),

                    SQUAD_1 = memory(WORD, TEMP),
                    SQUAD_2 = memory(WORD, TEMP),
                    SQUAD_3 = memory(WORD, TEMP),
                    SQUAD_4 = memory(WORD, TEMP),
                    SQUAD_5 = memory(WORD, TEMP),

                    PALETTE_DONOR = memory(WORD, TEMP),
                }

                enum stepon_trigger {
                    exit_south = @install() {
                        if(BOSS.PROGRESS) {
                            fog_wall_inside(!SOULS_MEMORY.DEAD_TEMPLE_SQUAD, NORTH);
                        }

                        map_transition(town_temple_underground, north, SOUTH);
                    }
                }

                fun boss_defeated() {
                    damage(BOSS.SQUAD_1, 0d999, True);
                    damage(BOSS.SQUAD_2, 0d999, True);
                    damage(BOSS.SQUAD_3, 0d999, True);
                    damage(BOSS.SQUAD_4, 0d999, True);
                    damage(BOSS.SQUAD_5, 0d999, True);

                    BOSS.PROGRESS = False;
                    souls_boss_defeated(DEAD_TEMPLE_SQUAD, REWARD_TEMPLE_SQUAD);
                }

                fun squad_killed() {
                    BOSS.SQUAD_REQURIED_COUNT++;

                    if(BOSS.SQUAD_REQURIED_COUNT >= BOSS.SQUAD_REQURIED) {
                        boss_defeated();
                        end();
                    }
                }

                @install()
                fun squad_death() {
                    if((BOSS.SQUAD_CHARGED == 0d0) || (BOSS.SQUAD_CHARGED == <SCRIPT_OWNER>[GENERAL_PURPOSE])) {
                        BOSS.SQUAD_CHARGED = <SCRIPT_OWNER>[GENERAL_PURPOSE];

                        squad_killed();

                        yield();

                        while(arg[0x14] == 0d0) {
                            arg[0x10] = randrange(BOSS.SQUAD_COUNT) + 0d1;

                            if(arg[0x10] != <SCRIPT_OWNER>[GENERAL_PURPOSE]) {
                                if(arg[0x10] == 0d1) {
                                    arg[0x12] = BOSS.SQUAD_1;
                                } else if(arg[0x10] == 0d2) {
                                    arg[0x12] = BOSS.SQUAD_2;
                                } else if(arg[0x10] == 0d3) {
                                    arg[0x12] = BOSS.SQUAD_3;
                                } else if(arg[0x10] == 0d4) {
                                    arg[0x12] = BOSS.SQUAD_4;
                                } else if(arg[0x10] == 0d5) {
                                    arg[0x12] = BOSS.SQUAD_5;
                                }

                                if(_alive(arg[0x12])) {
                                    arg[0x14] = arg[0x10];
                                }
                            }

                            yield();
                        }

                        BOSS.SQUAD_CHARGED = arg[0x10];
                        // BOSS.SQUAD_CHARGED = 0d0;

                        attribute(BOY, INVINCIBLE_TEMP, True);

                        attribute(arg[0x12], ROOT, True);
                        animate(arg[0x12], LOOP, DEFAULT);
                        shoot_entity_entity_offset(<SCRIPT_OWNER>, LIGHTNING_BALL, arg[0x12], 0d0, -(0d50), 0d60, 0d0);
                        sleep(0d20);
                        attribute(BOY, INVINCIBLE_TEMP, False);
                        sleep(0d100);

                        if(_alive(arg[0x12])) {
                            attribute(arg[0x12], ROOT, False);
                            animate(arg[0x12], ONCE, DEFAULT);

                            if(BOSS.DEBBUG) {
                                debug_memory(<SCRIPT_OWNER>[GENERAL_PURPOSE], arg[0x14]);
                            }

                            while(_alive(arg[0x12])) {
                                if(arg[0x12][PALETTE] != BOSS.PALETTE_DONOR[PALETTE]) {
                                    arg[0x12][PALETTE] = BOSS.PALETTE_DONOR[PALETTE];
                                }
                                
                                sleep(0d5);
                            }
                        }
                    }

                    destroy(SCRIPT_OWNER);
                }

                fun spawn_oglin(x, y, memory, index) {
                    // debug_subtext("oglin");

                    add_enemy(OGLIN, x, y);
                    memory = <LAST_ENTITY>;
                    <LAST_ENTITY>[GENERAL_PURPOSE] = index;
                    attach_script(LAST_ENTITY, DEATH, reference(squad_death));

                    // attribute(LAST_ENTITY, NO_CLIP, True);
                    attribute(LAST_ENTITY, INVINCIBLE_TEMP, True);
                    animate(LAST_ENTITY, ONCE, SLASH_2);

                    sleep(0d60);

                    attribute(LAST_ENTITY, INVINCIBLE_TEMP, False);
                    // attribute(LAST_ENTITY, NO_CLIP, False);

                    attribute(LAST_ENTITY, True, True);
                }

                fun add_squad(x, y) {
                    while(BOSS.PROGRESS) {
                        if(dead(BOSS.SQUAD_1)) {
                            spawn_oglin(x, y, BOSS.SQUAD_1, 0d1);
                        } else if(dead(BOSS.SQUAD_2)) {
                            spawn_oglin(x, y, BOSS.SQUAD_2, 0d2);
                        } else if(dead(BOSS.SQUAD_3)) {
                            spawn_oglin(x, y, BOSS.SQUAD_3, 0d3);
                        } else if(dead(BOSS.SQUAD_4)) {
                            spawn_oglin(x, y, BOSS.SQUAD_4, 0d4);
                        } else if(dead(BOSS.SQUAD_5)) {
                            spawn_oglin(x, y, BOSS.SQUAD_5, 0d5);
                        }

                        sleep(0d60);
                    }
                }

                fun trigger_enter() {
                    character_selection(BOY);
                    // attribute(BOY, INVINCIBLE_TEMP, True);

                    add_enemy(DOG_1_BLACK, 0d0, 0d0, INVISBLE_INVINCIBLE_INACTIVE);
                    BOSS.PALETTE_DONOR = <LAST_ENTITY>;

                    if!(SOULS_MEMORY.DEAD_TEMPLE_SQUAD) {
                        set(BOSS.PROGRESS);
                        push_music(BOSS);

                        default_init_room(False, False);

                        add_squad(0d64, 0d32);
                    } else {
                        default_init_room(False, False);
                    }

                    // 0d64, 0d22
                    // 0d64, 0d40
                }
            };
        };

        area level_2() {
            map town_temple_underground_castle(HALLS_CENTER) {
                // chests=nothing

                enum entrance {
                    north = entrance(0x29, 0x03, SOUTH),
                    east_1 = entrance(0x4b, 0x3f, WEST),
                    east_2 = entrance(0x49, 0x5d, WEST),
                    south = entrance(0x29, 0x8b, NORTH),
                    west_1 = entrance(0x09, 0x5d, EAST),
                    west_2 = entrance(0x09, 0x3f, EAST),

                    // elevator = entrance(0x29, 0x49, NONE),
                    elevator = entrance(0x29, 0x4c, SOUTH, { elevator_entrance(); }),
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    stepon_0 = @install() {
                        debug_subtext("S=0");
                    },
                    stepon_1 = @install() {
                        debug_subtext("S=1");
                    },
                    stepon_2 = @install() {
                        debug_subtext("S=2");
                    },
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    stepon_4 = @install() {
                        debug_subtext("S=4");
                    },
                    stepon_5 = @install() {
                        debug_subtext("S=5");
                    },
                    exit_south = @install() {
                        map_transition(town_temple_underground_castle_stairs, north_1, SOUTH);
                    },
                    door_west_2 = @install() {
                        debug_subtext("S=7");
                    },
                    door_west_1 = @install() {
                        map_transition(town_temple_underground_castle_south_west, east_2, WEST);
                    },
                    door_east_2 = @install() {
                        map_transition(town_temple_underground_castle_south_east, west, EAST);
                    },

                    door_east_1 = @install() {
                        debug_subtext("S=10");
                    },
                    stepon_11 = @install() {
                        debug_subtext("S=11");
                    },
                    switch_triggered = @install() {
                        debug_subtext("S=12");
                    },
                    stepon_13 = @install() {
                        debug_subtext("S=13");
                    },
                    stepon_14 = @install() {
                        debug_subtext("S=14");
                    },
                    stepon_15 = @install() {
                        debug_subtext("S=15");
                    },
                    stepon_16 = @install() {
                        debug_subtext("S=16");
                    },
                    stepon_17 = @install() {
                        debug_subtext("S=17");
                    },
                    stepon_18 = @install() {
                        debug_subtext("S=18");
                    },
                    stepon_19 = @install() {
                        debug_subtext("S=19");
                    },

                    stepon_20 = @install() {
                        debug_subtext("S=20");
                    },
                    stepon_21 = @install() {
                        debug_subtext("S=21");
                    },
                    stepon_22 = @install() {
                        debug_subtext("S=22");
                    },
                    stepon_23 = @install() {
                        debug_subtext("S=23");
                    },
                    stepon_24 = @install() {
                        debug_subtext("S=24");
                    },
                    stepon_25 = @install() {
                        debug_subtext("S=25");
                    },
                    stepon_26 = @install() {
                        debug_subtext("S=26");
                    },
                    stepon_27 = @install() {
                        debug_subtext("S=27");
                    },
                    stepon_28 = @install() {
                        debug_subtext("S=28");
                    },
                    stepon_29 = @install() {
                        debug_subtext("S=29");
                    },

                    stepon_30 = @install() {
                        debug_subtext("S=30");
                    },
                    elevator = @install() {
                        elevator_triggered(0d2);
                    },
                }

                enum b_trigger {
                    gourd_1__2_VINEGAR = @install() {
                        debug_subtext("B=0");
                        // _loot_chest(0x02, VINEGAR, 0d02);
                    },
                    gourd_2__1_NECTAR = @install() {
                        debug_subtext("B=1");
                        // _loot_chest(0x01, NECTAR, 0d01);
                    },
                }

                fun open_doors(open) {
                    if(open) {
                        object[0x09] = 0x01; // NE
                        object[0x03] = 0x01; // NW

                        object[0x08] = 0x01; // SE
                        object[0x07] = 0x01; // SW
                    } else {
                        object[0x09] = 0x00; // NE
                        object[0x03] = 0x00; // NW

                        object[0x08] = 0x00; // SE
                        object[0x07] = 0x00; // SW
                    }
                }

                fun trigger_enter() {
                    set(AREA_TEMPLE.UNLOCKED_LEVEL_2);

                    fake_northern_wall();

                    open_doors(True);

                    default_init_room(True, False);
                }
            };

            map town_temple_underground_castle_stairs(EBON_HALL) {
                enum entrance {
                    test = entrance(0x10, 0x10, NONE),

                    north_1 = entrance(0x14, 0x4b, SOUTH),
                    north_2 = entrance(0x40, 0x11, SOUTH),
                    south = entrance(0x25, 0x75, NORTH),
                    west = entrance(0x07, 0x53, EAST),
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_west = @install() {
                        debug_subtext("S=0");
                    },
                    exit_north_1 = @install() {
                        debug_subtext("S=1");

                        map_transition(town_temple_underground_castle, south, NORTH);
                    },
                    exit_south = @install() {
                        debug_subtext("S=2");
                    },
                    exit_north_2 = @install() {
                        debug_subtext("S=3");

                        map_transition(town_temple_underground, south, NORTH);
                    },
                    stairs_helper_1 = @install() {
                        debug_subtext("S=4");

                        vanilla_a3_stairs_helper(0x04, 0x44, 0x34, True);
                    },
                    stairs_helper_2 = @install() {
                        debug_subtext("S=5");

                        vanilla_a3_stairs_helper(0x04, 0x44, 0x2e, False);
                    },
                    stairs_helper_3 = @install() {
                        debug_subtext("S=6");

                        vanilla_a3_stairs_helper(0x03, 0x44, 0x24, True);
                    },
                    stairs_helper_4 = @install() {
                        debug_subtext("S=7");

                        vanilla_a3_stairs_helper(0x03, 0x44, 0x1e, False);
                    },
                }

                fun trigger_enter() {
                    // object[0x00] = 0x7e; // enroll bridge
                    // object[0x01] = 0x01; // open gourde_2
                    // object[0x02] = 0x01; // open gourde_1
                    // object[0x03] = 0x01; // open door_NW
                    // object[0x04] = 0x04; // open door_boss
                    // object[0x05] = 0x7e; // open elevator
                    // object[0x06] = 0x01; // activate bridge_switch
                    // object[0x07] = 0x01; // open door_SW
                    // object[0x08] = 0x01; // open door_SE
                    // object[0x09] = 0x01; // open door_NE
                    // object[0x0a] = 0x01; // activate switch
                    // object[0x0b] = 0x01; // show bridge_left_1
                    // object[0x0c] = 0x01; // show bridge_left_2
                    // object[0x0d] = 0x01; // show bridge_left_3
                    // object[0x0e] = 0x01; // show bridge_right_1
                    // object[0x0f] = 0x01; // show bridge_right_2
                    // object[0x10] = 0x01; // show bridge_right_3
                    // object[0x11] = 0x01; // show bridge_right_4

                    default_init_room(True, False);
                }
            };
            
            map town_temple_underground_castle_south_east(NARIS) {
                enum entrance {
                    east = entrance(0x77, 0x29, WEST),
                    west = entrance(0x07, 0x28, EAST),
                }

                enum soundtrack {
                    default = soundtrack(WIND_AMBIENT_BIRDS_2, 0xff)
                }

                enum stepon_trigger {
                    exit_west = @install() {
                        map_transition(town_temple_underground_castle, east_2, WEST);
                    },
                    exit_east = @install() {
                        set(AREA_TOWN_TEMPLE.SECRET_PASSAGE_2_OPENED);
                        map_transition(town_level_1, door_1_3_back, EAST);
                    },
                }

                enum b_trigger {
                    gourd_north__8_oil = @install() {
                        debug_subtext("B=0");

                        _loot_chest(0x07, OIL, 0d08);
                    },
                    gourd_south__500_money = @install() {
                        debug_subtext("B=1");

                        _loot_chest(0x03, MONEY, 0d500);
                    },
                }

                fun open_boss_door(open) {
                    if(open) {
                        object[0x01] = 0x00;
                    } else {
                        object[0x01] = 0x01;
                    }
                }

                fun boss_defeated() {
                    SOULS_MEMORY.BOSSES_DEFEATED_COUNTER++;
                    SOULS_MEMORY.PROGRESS_COUNTER++;

                    set(SOULS_MEMORY.DEAD_NARIS);
                }

                enum BOSS {
                    DEBUG = True,

                    RIDER_ID = memory(WORD, TEMP),
                    MOUNT_ID = memory(WORD, TEMP),

                    BOSS_HP = 0d2000,

                    GUESS_RNG = memory(WORD, TEMP),
                    ANGER_LEVEL = 0x0000,

                    P1_THRESHOLD = 0x00,
                }

                @install()
                fun naris_opening() {
                    dialog("[SLOW]Hi![PAUSE:29] I'm Naris, the smartest boy in Ebon Keep.[PAUSE:51] I bet you're not as smart as me![B]");
                }

                // @install()
                fun spawn_enemies(enemy_id) {
                    add_enemy(enemy_id, 0x00, 0x00);
                    <LAST_ENTITY>[X] = BOSS.MOUNT_ID[X];
                    <LAST_ENTITY>[Y] = BOSS.MOUNT_ID[Y];
                    add_enemy(enemy_id, 0x00, 0x00);
                    <LAST_ENTITY>[X] = BOSS.MOUNT_ID[X];
                    <LAST_ENTITY>[Y] = BOSS.MOUNT_ID[Y];
                }

                @install()
                fun young_naris_question() {
                    control(BOSS.MOUNT_ID, True);
                    MEMORY.STRING_PARAMETER_1 = 0x00;
                    MEMORY.STRING_PARAMETER_2 = 0x01;

                    question("Guess the number of marbles in my hand and I'll give you something.[B]What's your guess?[PAUSE:3d][CHOICE][MEM1].[CHOICE][MEM2].");

                    BOSS.GUESS_RNG = randrange(0x02);

                    if(MEMORY.QUESTION_ANSWER == BOSS.GUESS_RNG) {
                        if(BOSS.DEBUG) {
                            subtext("yay");
                        }

                        damage(BOSS.MOUNT_ID, 0x29a, True);
                    } else if(MEMORY.QUESTION_ANSWER == 0d0) {
                        if(BOSS.DEBUG) {
                            subtext("nay 0");
                        }

                        spawn_enemies(ENEMY.MAGGOT);
                    } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                        if(BOSS.DEBUG) {
                            subtext("nay 1");
                        }

                        spawn_enemies(ENEMY.MOSQUITO);
                    }

                    if(BOSS.DEBUG) {
                        sleep(0x30);
                        debug_memory(MEMORY.QUESTION_ANSWER, BOSS.GUESS_RNG);
                    }

                    control(BOSS.MOUNT_ID, False);
                }
                @install()
                fun old_naris_question() {
                    control(BOSS.MOUNT_ID, True);
                    MEMORY.STRING_PARAMETER_1 = 0x00;
                    MEMORY.STRING_PARAMETER_2 = 0x01;
                    MEMORY.STRING_PARAMETER_3 = 0x02;

                    question("Guess the number of marbles in my hand and I'll give you something.[B]What's your guess?[PAUSE:3d][CHOICE][MEM1].[CHOICE][MEM2].[CHOICE][0xa3].");

                    BOSS.GUESS_RNG = randrange(0x03);

                    if(MEMORY.QUESTION_ANSWER == BOSS.GUESS_RNG) {
                        if(BOSS.DEBUG) {
                            subtext("yay");
                        }

                        damage(BOSS.MOUNT_ID, 0x29a, True);
                    } else if(MEMORY.QUESTION_ANSWER == 0d0) {
                        if(BOSS.DEBUG) {
                            subtext("nay 0");
                        }

                        spawn_enemies(ENEMY.MAGGOT);
                    } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                        if(BOSS.DEBUG) {
                            subtext("nay 1");
                        }

                        spawn_enemies(ENEMY.MOSQUITO);
                    } else if(MEMORY.QUESTION_ANSWER == 0d2) {
                        if(BOSS.DEBUG) {
                            subtext("nay 2");
                        }

                        spawn_enemies(ENEMY.SKELESNAIL);
                    }

                    if(BOSS.DEBUG) {
                        sleep(0x30);
                        debug_memory(MEMORY.QUESTION_ANSWER, BOSS.GUESS_RNG);
                    }

                    control(BOSS.MOUNT_ID, False);
                }
                
                fun spawn_young_naris() {
                    add_enemy(VILLAGER_3_2, 0d64, 0d35);
                    BOSS.MOUNT_ID = <LAST_ENTITY>;
                    attach_script(LAST_ENTITY, B, reference(naris_opening));
                    <LAST_ENTITY>[HP] = BOSS.BOSS_HP;
                }

                fun spawn_old_naris() {
                    add_enemy(VILLAGER_3_5, 0x00, 0x00);
                    <LAST_ENTITY>[X] = BOSS.MOUNT_ID[X];
                    <LAST_ENTITY>[Y] = BOSS.MOUNT_ID[Y];
                    BOSS.MOUNT_ID = <LAST_ENTITY>;
                }

                @install()
                @async()
                fun boss_watcher() {
                    if(BOSS.DEBUG) {
                        subtext("phase 0");
                    }

                    while(BOSS.RIDER_ID[HP] >= SYSTEM.HP_MAX) {
                        yield();
                    }

                    attach_script(BOSS.RIDER_ID, DAMAGE, reference(young_naris_question));

                    if(BOSS.DEBUG) {
                        subtext("phase 1");
                    }

                    while(alive(BOSS.MOUNT_ID)) {
                        yield();
                    }

                    spawn_old_naris();
                    attach_script(BOSS.RIDER_ID, DAMAGE, reference(old_naris_question));

                    if(BOSS.DEBUG) {
                        subtext("phase 2");
                    }

                    while(alive(BOSS.MOUNT_ID)) {
                        yield();
                    }

                    destroy(BOSS.RIDER_ID);

                    if(BOSS.DEBUG) {
                        subtext("yatta");
                    }

                    boss_defeated();
                }

                @install()
                @async()
                fun stack_t01() {
                    while(alive(BOSS.RIDER_ID)) {
                        BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                        BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y];
                        yield();
                    }
                }

                @install()
                fun debug_triggered() {
                    set(AREA_TEMPLE.BOSS_KEY);

                    destroy(SCRIPT_OWNER);
                }

                @install()
                fun door_triggered() {
                    if(AREA_TEMPLE.BOSS_KEY) {
                        open_boss_door(True);
                        sound(DOOR);
                    } else {
                        error_locked(NORTH);
                    }
                }

                fun trigger_enter() {
                    // object[0x03] = 0x01; // open gourd_south
                    object[0x02] = 0x01; // close door_south_1
                    object[0x01] = 0x01; // close door_south_2
                    object[0x00] = 0x01; // close door_south_3

                    // object[0x07] = 0x01; // open gourd_north
                    object[0x04] = 0x01; // close door_north_1
                    object[0x05] = 0x01; // close door_north_2
                    object[0x06] = 0x01; // close door_north_3

                    default_init_room(True, False);

                    add_enemy(PLACEHOLDER, 0d64, 0d60);
                    attach_script(LAST_ENTITY, B, reference(door_triggered));

                    if!(AREA_TEMPLE.BOSS_KEY) {
                        add_debug_entity(0d69, 0d47, reference(debug_triggered));
                    }

                    if!(SOULS_MEMORY.DEAD_NARIS) {
                        add_enemy(LIZARD, 0x14, 0x14, FLAG_ENEMY.INACTIVE_INVISIBLE);
                        BOSS.RIDER_ID = <LAST_ENTITY>;
                        attribute(LAST_ENTITY, INVISIBLE, True);
                        attribute(LAST_ENTITY, ROOT, True);
                        <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;

                        spawn_young_naris();
                        teleport(LAST_ENTITY, 0d96, 0d76);

                        boss_watcher();
                        stack_t01();
                    }
                }
            };

            map town_temple_underground_castle_south_west(MUNGOLA) {
                enum entrance {
                    east_1 = entrance(0x39, 0x15, WEST),
                    east_2 = entrance(0x39, 0x24, WEST)
                }

                enum soundtrack {
                    default = soundtrack(AREA_TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    stairs = @install() {
                        debug_subtext("S=0");
                    },
                    exit_east_1 = @install() {
                        map_transition(town_temple_underground, west_1, EAST);
                    },
                    exit_east_2 = @install() {
                        map_transition(town_temple_underground_castle, west_1, EAST);
                    }
                }

                fun trigger_enter() {
                    // object[0x00] = 0x01; // shake banner_2
                    // object[0x01] = 0x01; // shake banner_4
                    // object[0x02] = 0x01; // shake banner_5
                    // object[0x03] = 0x01; // shake banner_1
                    // object[0x04] = 0x01; // shake banner_3
                    // object[0x05] = 0x01; // change mungola_1 (scalp - 0:hidden, 1:shown, 2:dead)
                    // object[0x06] = 0x01; // change mungola_2 (eye_left - 0:hidden, 1:hidden_wink, 2:shown, 3:dead)
                    // object[0x07] = 0x01; // change mungola_3 (mouth_left - 0:hidden, 2:shown, 3:shown_teeth, 4:dead)
                    // object[0x08] = 0x01; // shake banner_2_more
                    // object[0x09] = 0x01; // change mungola_4 (eye_right - 0:hidden, 1:hidden_wink, 2:shown, 3:dead)
                    // object[0x0a] = 0x01; // change mungola_5 (mouth_left - 0:hidden, 2:shown, 3:shown_teeth, 4:dead)
                    // object[0x0b] = 0x01; // change mungola_6 (chin - 0:hidden, 1:shown, 2:dead)
                    // object[0x0c] = 0x01; // open hole
                    // object[0x0d] = 0x01; // unblock stairs
                    // object[0x0e] = 0x01; // close exit_east_2

                    default_init_room(True, False);            
                }
            };
        };
    };

    area town_level_0() {
        map town_center(NOBILIA_SQUARE) {
            enum entrance {
                north = entrance(0x2c, 0x03, SOUTH),
                east = entrance(0x5b, 0x37, WEST),
                west_1 = entrance(0x01, 0x40, EAST),
                west_2 = entrance(0x01, 0x14, EAST),

                door = entrance(0x08, 0x5d, SOUTH, { generic_door(True, False); }),

                crash = entrance(0x2c, 0x39, NONE, { crash_both(); }),
                bonfire = entrance(0d44, 0d58, NONE, { bonfire_wakeup(0d0, 0d8, 0d0, -0d8); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
            }

            enum stepon_trigger {
                exit_east = @install() {
                    map_transition(town_market, west, EAST);
                },
                exit_door = @install() {
                    generic_door(False, False);
                    map_transition(town_room, south, NORTH);
                },
                exit_north = @install() {
                    map_transition(town_level_1, south, NORTH);
                },
                exit_west_1 = @install() {
                    map_transition(town_bridge, east, WEST);
                },
                exit_west_2 = @install() {
                    map_transition(town_market_alley, east, WEST);
                },
            }

            enum b_trigger {
                guard_south = @install() {
                    debug_subtext("B=0");
                },
                guard_center_1 = @install() {
                    debug_subtext("B=1");
                },
                guard_center_2 = @install() {
                    debug_subtext("B=2");
                },
                guard_north = @install() {
                    debug_subtext("B=3");
                },
                b_trigger_4 = @install() {
                    debug_subtext("B=4");
                },
            }

            fun trigger_enter() {
                generic_door(True, False);

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // north
                    add_enemy(PIRATE_ANCHOR, 0d16, 0d20);

                    // east
                    add_enemy(RAT, 0d83, 0d42);

                    // west
                    add_enemy(SLIME, 0d7, 0d59);
                }

                if(False) {
                    add_souls_npc_smith_key(0d79, 0d95);
                    face(LAST_ENTITY, WEST);
                }

                // object[0x0e] = 0x01;

                // object[0x00] = 0x01; // show crowd_1_1
                // object[0x01] = 0x01; // show crowd_1_2
                // object[0x02] = 0x01; // show crowd_1_3
                // object[0x03] = 0x01; // show crowd_1_4
                // object[0x04] = 0x01; // show crowd_1_5
                // object[0x05] = 0x01; // show crowd_2_1
                // object[0x06] = 0x01; // show crowd_2_2
                // object[0x07] = 0x01; // show crowd_2_3
                // object[0x08] = 0x01; // show crowd_2_4
                // object[0x09] = 0x01; // show crowd_2_5
                // object[0x0a] = ???
                // object[0x0b] = same as crowd_2_2 ???
                // object[0x0c] = same as crowd_1_3 ???
                object[0x0d] = 0x02; // show statue, crater, statue_reparing
                // object[0x0e] = 0x01; // show guard_statue

                bonfire(0d44, 0d58, SOULS_MEMORY.BONFIRE_TOWN_CENTER);

                default_init_room(False, False);
            }
        };

        map town_room(CRUSTICIA_CAVES) { // variant: tavern
            // chest=todo

            enum entrance {
                south = entrance(0x6f, 0x51, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
            }

            enum stepon_trigger {
                monk = nop(),
                monk_trigger_west = nop(),
                monk_trigger_south = nop(),
                exit_cave_hammock = nop(),
                exit_south = @install() {
                    fog_wall_inside(!SOULS_MEMORY.DEAD_TAVERN_BOXERS, NORTH);

                    map_transition(town_center, door, SOUTH);
                },
                exit_ship_small = nop(),
                exit_cave_crates = nop(),
                exit_cave_monk = nop(),
            }

            enum b_trigger {
                gourd_hammock = nop(),
                gourd_monk_1 = nop(),
                gourd_monk_2 = nop(),
                gourd_crates = nop(),
                groud = @install() {
                    _loot_chest(0x06, LOOT_REWARD.WATER, 0x01);
                },
                gourd_ship = nop(),
                barkeeper = @install() {
                    debug_subtext("B=6");
                },
            }

            enum ROOM {
                RIDER_1_ID = memory(WORD, TEMP),
                MOUNT_1_ID = memory(WORD, TEMP),
                RIDER_2_ID = memory(WORD, TEMP),
                MOUNT_2_ID = memory(WORD, TEMP),
                RIDER_3_ID = memory(WORD, TEMP),
                MOUNT_3_ID = memory(WORD, TEMP),

                HITS_BOXER_1 = memory(WORD, TEMP),
                HITS_BOXER_2 = memory(WORD, TEMP),
                HITS_BOXER_3 = memory(WORD, TEMP),

                HITS_THRESHOLD = 0x05,

                BOXERS_BEATEN = memory(WORD, TEMP),

                BOXERS_BEATEN_THRESHOLD = 0x03,
            }

            @install()
            @async()
            fun stack_boxer1() {
                while(alive(ROOM.RIDER_1_ID)) {
                    ROOM.RIDER_1_ID[X] = ROOM.MOUNT_1_ID[X];
                    ROOM.RIDER_1_ID[Y] = ROOM.MOUNT_1_ID[Y];
                    yield();
                }
            }
            @install()
            @async()
            fun stack_boxer2() {
                while(alive(ROOM.RIDER_2_ID)) {
                    ROOM.RIDER_2_ID[X] = ROOM.MOUNT_2_ID[X];
                    ROOM.RIDER_2_ID[Y] = ROOM.MOUNT_2_ID[Y];
                    yield();
                }
            }
            @install()
            @async()
            fun stack_boxer3() {
                while(alive(ROOM.RIDER_3_ID)) {
                    ROOM.RIDER_3_ID[X] = ROOM.MOUNT_3_ID[X];
                    ROOM.RIDER_3_ID[Y] = ROOM.MOUNT_3_ID[Y];
                    yield();
                }
            }

            fun boxer_hit(rider_id, mount_id, hit_counter) { // TODO: buggy
                hit_counter++;

                debug_memory(hit_counter, ROOM.HITS_THRESHOLD);

                if(hit_counter >= ROOM.HITS_THRESHOLD) {
                    add_enemy(PLACEHOLDER, 0x00, 0x00);
                    animate(LAST_ENTITY, ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                    <LAST_ENTITY>[X] = rider_id[X];
                    <LAST_ENTITY>[Y] = rider_id[Y];

                    destroy(mount_id);
                    destroy(rider_id);

                    ROOM.BOXERS_BEATEN++;
                    
                }
            }

            fun boxer_killed() {
                ROOM.BOXERS_BEATEN++;

                if(ROOM.BOXERS_BEATEN >= ROOM.BOXERS_BEATEN_THRESHOLD) {
                    souls_boss_defeated(DEAD_TAVERN_BOXERS, REWARD_TAVERN_BOXERS);
                }
            }

            @install()
            fun boxer1dead() {
                // boxer_hit(ROOM.RIDER_1_ID, ROOM.MOUNT_1_ID ,ROOM.HITS_BOXER_1);

                ROOM.HITS_BOXER_1++;

                if(ROOM.HITS_BOXER_1 >= ROOM.HITS_THRESHOLD) {
                    add_enemy(PLACEHOLDER, 0x00, 0x00);
                    animate(LAST_ENTITY, ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                    <LAST_ENTITY>[X] = ROOM.RIDER_1_ID[X];
                    <LAST_ENTITY>[Y] = ROOM.RIDER_1_ID[Y];

                    destroy(ROOM.MOUNT_1_ID);
                    destroy(ROOM.RIDER_1_ID);

                    boxer_killed();
                }
            }
            @install()
            fun boxer2dead() {
                // boxer_hit(ROOM.RIDER_2_ID, ROOM.MOUNT_2_ID ,ROOM.HITS_BOXER_2);

                ROOM.HITS_BOXER_2++;

                if(ROOM.HITS_BOXER_2 >= ROOM.HITS_THRESHOLD) {
                    add_enemy(PLACEHOLDER, 0x00, 0x00);
                    animate(LAST_ENTITY, ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                    <LAST_ENTITY>[X] = ROOM.RIDER_2_ID[X];
                    <LAST_ENTITY>[Y] = ROOM.RIDER_2_ID[Y];

                    destroy(ROOM.RIDER_2_ID);
                    destroy(ROOM.MOUNT_2_ID);

                    boxer_killed();
                }
            }
            @install()
            fun boxer3dead() {
                // boxer_hit(ROOM.RIDER_3_ID, ROOM.MOUNT_3_ID ,ROOM.HITS_BOXER_3);

                ROOM.HITS_BOXER_3++;

                if(ROOM.HITS_BOXER_3 >= ROOM.HITS_THRESHOLD) {
                    add_enemy(PLACEHOLDER, 0x00, 0x00);
                    animate(LAST_ENTITY, ONCE, ANIMATION_PLACEHOLDER.GORE_RED);
                    <LAST_ENTITY>[X] = ROOM.RIDER_3_ID[X];
                    <LAST_ENTITY>[Y] = ROOM.RIDER_3_ID[Y];

                    destroy(ROOM.RIDER_3_ID);
                    destroy(ROOM.MOUNT_3_ID);

                    boxer_killed();
                }
            }

            fun add_boxer(id_rider, id_mount, enemy:ENEMY, x, y, trigger) {
                add_enemy(enemy, x, y);
                id_rider = <LAST_ENTITY>;
                <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
                attach_script(LAST_ENTITY, DAMAGE, trigger);
                add_enemy(MAGGOT_RED, x, y);
                id_mount = <LAST_ENTITY>;
                attribute(LAST_ENTITY, INVISIBLE, True);
                attribute(LAST_ENTITY, INVINCIBLE_TEMP, True);
            }

            fun init_room(index) {
                if(index == 0x00) {
                    init_map(0x00, 0x00, 0x2e, 0x2a); // hammock
                } else if(index == 0x01) {
                    init_map(0x00, 0x38, 0x26, 0x5c); // crates
                } else if(index == 0x02) {
                    init_map(0x32, 0x36, 0x56, 0x52); // ship
                } else if(index == 0x03) {
                    // init_map(0x58, 0x30, 0x86, 0x4e); // tavern
                    init_map(0x58, 0x30, 0x86, 0x50); // tavern
                } else if(index == 0x04) {
                    init_map(0x40, 0x00, 0x66, 0x24); // monk
                }
            }

            fun trigger_enter() {
                init_room(0x03);

                if!(SOULS_MEMORY.DEAD_TAVERN_BOXERS) {
                    push_music(BOSS_MINI);

                    add_boxer(ROOM.RIDER_1_ID, ROOM.MOUNT_1_ID, BOXER_1, 0x5c, 0x49, reference(boxer1dead));
                    add_boxer(ROOM.RIDER_2_ID, ROOM.MOUNT_2_ID, BOXER_2, 0x80, 0x3d, reference(boxer2dead));
                    add_boxer(ROOM.RIDER_3_ID, ROOM.MOUNT_3_ID, BOXER_2, 0x80, 0x45, reference(boxer3dead));

                    stack_boxer1();
                    stack_boxer2();
                    stack_boxer3();
                }

                default_init_room(False, False);
            }
        };

        map town_market(NOBILIA_MARKET) {
            fun enter_from_door() {
                generic_door(True, False);
            }
            fun enter_from_side() {
                _generic_open_doors(False, False);
            }

            enum entrance {
                north_1 = entrance(0x0f, 0x08, SOUTH, { enter_from_side(); }),
                north_2 = entrance(0x30, 0x08, SOUTH, { enter_from_side(); }),
                north_3 = entrance(0x54, 0x08, SOUTH, { enter_from_side(); }),
                east_1 = entrance(0x5f, 0x18, WEST, { enter_from_side(); }),
                east_2 = entrance(0x5f, 0x46, WEST, { enter_from_side(); }),
                west = entrance(0x05, 0x4b, EAST, { enter_from_side(); }),

                door_1 = entrance(0x5c, 0x3a, SOUTH, { enter_from_door(); }),
                door_2 = entrance(0x5a, 0x72, SOUTH, { enter_from_door(); }),

                crash = entrance(0x45, 0x7b, NONE, { enter_from_side(); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
                // default = soundtrack(WIND_AMBIENT_BIRDS_2, 0xff)
            }

            enum stepon_trigger {
                prophet_south = @install() {
                    debug_subtext("S=0");
                },
                prophet_east = @install() {
                    debug_subtext("S=1");
                },
                prophet_north = @install() {
                    debug_subtext("S=2");
                },
                exit_north_2 = @install() {
                    debug_subtext("S=3");
                },
                exit_north_3 = @install() {
                    debug_subtext("S=4");
                },
                exit_north_1 = @install() {
                    debug_subtext("S=5");
                },
                exit_east_1 = @install() {
                    debug_subtext("S=6");
                },
                exit_east_2 = @install() {
                    debug_subtext("S=7");
                },
                exit_west = @install() {
                    map_transition(town_center, east, WEST);
                },
                door_1 = @install() {
                    control(NONE);
                    face(ACTIVE, NORTH);

                    generic_door(False, False);
                    map_transition(town_arena_entry, south_2, NORTH);
                },

                door_2 = @install() {
                    control(NONE);
                    face(ACTIVE, NORTH);

                    generic_door(False, False);
                    map_transition(town_market, east_1, NORTH);
                },
            }

            enum b_trigger {
                person_4_1__chicken_feeding = @install() {
                    debug_subtext("B=0");
                },
                chicken_xx = @install() {
                    debug_subtext("B=1");
                },
                chicken_xx = @install() {
                    debug_subtext("B=2");
                },
                prophet = @install() {
                    debug_subtext("B=3");
                },
                vendor_10_5__glove = @install() {
                    debug_subtext("B=4");
                },
                vendor_10_4__silver_sheath = @install() {
                    debug_subtext("B=5");
                },
                vendor_10_3__appraisal = @install() {
                    debug_subtext("B=6");
                },
                vendor_10_2__moxa_stick = @install() {
                    debug_subtext("B=7");
                },
                vendor_10_1__sun_stone = @install() {
                    debug_subtext("B=8");
                },
                vendor_7_2__limestone_tablet = @install() {
                    debug_subtext("B=9");

                    question("[SLOW]Do you want to trade for Mud Pepper?[CHOICE]1 Dry Ice…", 0d5);

                    if(MEMORY.QUESTION_ANSWER == 0d0) { // dry ice
                        trade_items(MUD_PEPPER, 0d5, DRY_ICE, 0d1);
                    }

                    control(BOTH);
                },

                vendor_7_1__jeweled_scarab = @install() { // scarab lady
                    debug_subtext("B=10");

                    question("[SLOW]Do you want to trade for Mushrooms?[CHOICE]5 Limestone…[CHOICE]5 Vinegar…[CHOICE]3 Bones…", 0d5);

                    if(MEMORY.QUESTION_ANSWER == 0d0) { // limestone
                        trade_items(MUSHROOM, 0d1, LIMESTONE, 0d5);
                    } else if(MEMORY.QUESTION_ANSWER == 0d1) { // vinegar
                        trade_items(MUSHROOM, 0d1, VINEGAR, 0d5);
                    } else if(MEMORY.QUESTION_ANSWER == 0d2) { // bone
                        trade_items(MUSHROOM, 0d1, BONE, 0d3);
                    }

                    control(BOTH);
                },
                vendor_9_2__helmet = @install() {
                    debug_subtext("B=11");
                },
                vendor_9_1__ruby_heart = @install() {
                    debug_subtext("B=12");
                },
                vendor_8_2__jade_disk = @install() {
                    debug_subtext("B=13");
                },
                vendor_8_1__beads = @install() {
                    debug_subtext("B=14");
                },
                vendor_6_1__beads = @install() {
                    debug_subtext("B=15");
                },
                vendor_5_4__currency = @install() {
                    debug_subtext("B=16");
                },
                b_trigger_17 = @install() {
                    debug_subtext("B=17");
                },
                vendor_5_2__spice = @install() {
                    debug_subtext("B=18");
                },
                vendor_5_1__perfume = @install() {
                    debug_subtext("B=19");
                },

                vendor_4_1__rice = @install() {
                    debug_subtext("B=20");
                },
                vendor_4_2__beads = @install() {
                    debug_subtext("B=21");
                },
                vendor_4_3__tapestry = @install() {
                    debug_subtext("B=22");
                },
                vendor_3_4__polish = @install() {
                    debug_subtext("B=23");
                },
                vendor_3_3__chest = @install() {
                    debug_subtext("B=24");
                },
                vendor_3_2__amulet = @install() {
                    debug_subtext("B=25");
                },
                vendor_3_1__jackal = @install() {
                    debug_subtext("B=26");
                },
                vendor_2_3__pot = @install() {
                    debug_subtext("B=27");
                },
                vendor_1_4__rice = @install() {
                    debug_subtext("B=28");
                },
                vendor_1_3__fish = @install() {
                    debug_subtext("B=29");
                },

                guard_1_1 = @install() {
                    debug_subtext("B=30");
                },
                vendor_2_2__egg = @install() {
                    debug_subtext("B=31");
                },
                vendor_2_1__spoon = @install() {
                    debug_subtext("B=32");
                },
                vendor_1_1__spice = @install() {
                    debug_subtext("B=33");
                },
                goat_xx = @install() {
                    debug_subtext("B=34");
                },
                chicken_xx = @install() {
                    debug_subtext("B=35");
                },
                goat_xx = @install() {
                    debug_subtext("B=36");
                },
                chicken_xx = @install() {
                    debug_subtext("B=37");
                },
                chicken_xx = @install() {
                    debug_subtext("B=38");
                },
                chicken_xx = @install() {
                    debug_subtext("B=39");
                },

                chicken_xx = @install() {
                    debug_subtext("B=40");
                },
                chicken_xx = @install() {
                    debug_subtext("B=41");
                },
                chicken_xx = @install() {
                    debug_subtext("B=42");
                },
                chicken_xx = @install() {
                    debug_subtext("B=43");
                },
                chicken_xx = @install() {
                    debug_subtext("B=44");
                },
                chicken_xx = @install() {
                    debug_subtext("B=45");
                },
                chicken_xx = @install() {
                    debug_subtext("B=46");
                },
                chicken_xx = @install() {
                    debug_subtext("B=47");
                },
                pot_hidden = @install() {
                    debug_subtext("B=48");
                },
                guard_4_1 = @install() {
                    debug_subtext("B=49");
                },

                person_4_2__juggler = @install() {
                    debug_subtext("B=50");
                },
                goat_xx = @install() {
                    debug_subtext("B=51");
                },
                goat_xx = @install() {
                    debug_subtext("B=52");
                },
                vendor_1_2__rice = @install() {
                    debug_subtext("B=53");
                },
                person_4_3__juggler_crowd_1 = @install() {
                    debug_subtext("B=54");
                },
                person_4_3__juggler_crowd_2 = @install() {
                    debug_subtext("B=55");
                },
                pot_xx = @install() {
                    debug_subtext("B=56");
                },
                pot_xx = @install() {
                    debug_subtext("B=57");
                },
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // west
                    add_enemy(RAT, 0d19, 0d59);
                    add_enemy(RAT, 0d23, 0d100);

                    // east
                    add_enemy(RAT, 0d73, 0d49);
                    add_enemy(RAT, 0d81, 0d81);
                }

                if!(FLAG.IN_ANIMATION) {
                    crash_both();
                }

                object[0x00] = 0x01; // remove vendor_1_1 (spice guy)
                object[0x01] = 0x01; // remove vendor_1_2 (rice lady)
                object[0x02] = 0x01; // remove guard_1_1 (next to rice lady)
                object[0x03] = 0x01; // remove vendor_1_3 (fish lady)
                object[0x04] = 0x01; // remove vendor_1_4 (other rice guy)
                object[0x05] = 0x01; // remove vendor_2_1 (spoon lady)
                object[0x06] = 0x01; // remove vendor_2_2 (egg guy)
                object[0x07] = 0x01; // remove vendor_3_1 (jackal lady)
                object[0x08] = 0x01; // remove vendor_2_3 (pot lady)
                object[0x09] = 0x01; // remove person_4_1 (next to pot lady, feeds chicken)
                object[0x0a] = 0x01; // remove vendor_3_2 (amulet guy)
                object[0x0b] = 0x01; // remove vendor_3_3 (chest lady)
                // object[0x0c] = 0x01; // remove ???
                object[0x0d] = 0x01; // remove vendor_3_4 (polish lady)
                object[0x0e] = 0x01; // remove guard_4_1 (next to entrance)
                object[0x0f] = 0x01; // remove vendor_4_1 (other rice lady)
                object[0x10] = 0x01; // remove vendor_4_2 (other beads lady)
                object[0x11] = 0x01; // remove person_4_2 (next to vendor_4_2, juggler)
                object[0x12] = 0x01; // remove person_4_3 (next to vendor_4_2, juggler crowd)
                object[0x13] = 0x01; // remove vendor_4_3 (tapestry lady)
                object[0x14] = 0x01; // remove vendor_5_4 (currency lady)
                object[0x15] = 0x01; // remove vendor_5_1 (perfume lady)
                object[0x16] = 0x01; // remove vendor_5_2 (other spice guy)
                object[0x17] = 0x01; // remove vendor_5_3 (chicken guy)
                object[0x18] = 0x01; // remove vendor_6_1 (beads lady)
                // object[0x19] = 0x01; // remove vendor_7_2 (tablet lady)
                object[0x1a] = 0x01; // remove vendor_8_1 (other beads guy)
                object[0x1b] = 0x01; // remove vendor_8_2 (jade disk lady)
                object[0x1c] = 0x01; // remove vendor_9_1 (heart lady)
                object[0x1d] = 0x01; // remove vendor_9_2 (helmet guy)
                // object[0x1e] = 0x01; // remove vendor_7_1 (scarab lady)
                object[0x1f] = 0x01; // remove vendor_10_1 (sunstone guy)
                object[0x20] = 0x01; // remove vendor_10_2 (moxa lady)
                object[0x21] = 0x01; // remove vendor_10_3 (appraisal lady)
                object[0x22] = 0x01; // remove vendor_10_4 (sheath guy)
                // object[0x23] = 0x01; // remove ???
                object[0x24] = 0x01; // remove vendor_11_1 (beads lady)
                object[0x24] = 0x01; // remove vendor_10_5 (glove lady)
                // object[0x25] = 0x01; // remove ???
                object[0x26] = 0x01; // remove basket (between vendor_1_1 ans vendor_1_2)
                object[0x27] = 0x04; // remove prophet (goat, chicke, basket)

                fade_in();
            }
        };

        map town_arena_entry(NOBILIA_HOUSES) { // variant: shop
            enum entrance {
                south_1 = entrance(0x51, 0x1b, NORTH),
                south_2 = entrance(0x0d, 0x1b, NORTH),

                crash = entrance(0x0d, 0x15, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
            }

            fun guard_dog_interaction() {
                if(<ACTIVE> == <DOG>) {
                    dialog("[SLOW]For legal reasons animals aren't allowed in the arena.[B]");
                    end();
                }
            }

            enum stepon_trigger {
                exit_south_2 = @install() {
                    map_transition(town_market, door_1, SOUTH);
                },
                exit_inn_south = nop(),
                atlas = @install() {
                    debug_subtext("S=2");
                },
                exit_south_1 = @install() {
                    guard_dog_interaction();

                    if(MEMORY.TICKET_FOR_EXHIBITION < 0d1) {
                        dialog("[SLOW]Hey, you have to buy a ticket first![B]");

                        walk(ACTIVE, TILE_RELATIVE_DIRECT, 0d0, -0d2, ACTIVE, ACTIVE);
                    } else {
                        question("[SLOW]Please enter a ticket[CHOICE]Yes.[CHOICE]No.");

                        if(MEMORY.QUESTION_ANSWER == 0d0) {
                            MEMORY.TICKET_FOR_EXHIBITION--;

                            map_transition(gladiator_arena, south, SOUTH);
                        }
                    }
                },
            }

            enum ROOM {
                TICKET_PRICE = 0x05,
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    guard_dog_interaction();

                    show_currency(True);

                    if_currency(MEMORY.CURRENCY_CURRENT < ROOM.TICKET_PRICE) {
                        dialog("[SLOW]Welcome to the one and only...[B]Oh please come back if you have money.[B]");
                    } else {
                        if(MEMORY.TICKET_FOR_EXHIBITION == 0x01) {
                            dialog("[SLOW]Feel free to enter the arena directly.[B]");
                        } else if(MEMORY.TICKET_FOR_EXHIBITION > 0x01) {
                            MEMORY.STRING_PARAMETER_1 = MEMORY.TICKET_FOR_EXHIBITION;
                            dialog("[SLOW]Feel free to enter the arena directly.[B]");
                        }

                        MEMORY.STRING_PARAMETER_1 = ROOM.TICKET_PRICE;
                        question("[SLOW]Welcome to the bomb arena.[B]Tickets cost [MEM1] Souls[CHOICE]Yes.[CHOICE]No.");

                        if(MEMORY.QUESTION_ANSWER == 0d0) {
                            currency_take(TALONS, ROOM.TICKET_PRICE);
                            show_currency(True);

                            sound(PURCHASE);
                            MEMORY.TICKET_FOR_EXHIBITION++;
                        }
                    }

                    sleep(0d16);
                    show_currency(False);
                },
                b_trigger_1 = nop(),
            }

            fun init_room(index) {
                if(index == 0x01) {
                    init_map(0x02, 0x00, 0x5a, 0x1c);
                } else if(index == 0x02) {
                    init_map(0x00, 0x24, 0x24, 0x42);
                }
            }

            fun trigger_enter() {
                init_room(0x01);

                // bonfire(0x57, 0x08);
                // bonfire(0x07, 0x10);

                default_init_room(False, False);
            }
        };

        map gladiator_arena(ARENA) {
            enum entrance {
                north_cinematic = entrance(0x20, 0x07, NONE),
                south = entrance(0x22, 0x69, NORTH), // 0x22, 0x6a

                center = entrance(0x20, 0x53, NONE),
            }

            enum soundtrack {
                default = soundtrack(BOSS_ARENA, 0xff)
            }

            enum ROOM {
                DEBUG = False,

                MANAGER_ID = memory(WORD, TEMP),

                PROGRESS = memory(BYTE, SRAM),
                MAX_PROGRESS = 0d4,

                FIGHT_IN_PROGRESS = memory(FLAG, TEMP),
                CURRENT_BOSS_DEFEATED = memory(FLAG, TEMP),

                PILLAR_OPENED = memory(FLAG, TEMP),
                COLLECTIBLE_LOOTED = memory(FLAG, SRAM),

                REWARD_1_KILLS = 0d4,
                REWARD_1_CLAIMED = memory(FLAG, SRAM),
                REWARD_2_KILLS = 0d8,
                REWARD_2_CLAIMED = memory(FLAG, SRAM),
                REWARD_3_KILLS = 0d999,
                REWARD_3_CLAIMED = memory(FLAG, SRAM),
                REWARD_4_KILLS = 0d999,
                REWARD_4_CLAIMED = memory(FLAG, SRAM),
            }

            @install()
            fun spawn_next_gladiator() {
                ROOM.FIGHT_IN_PROGRESS = True;

                find_all(BOMB, {
                    destroy(current_id);
                });

                if(ROOM.DEBUG) {
                    debug_memory(ROOM.PROGRESS, ROOM.PROGRESS);
                }

                if(ROOM.PROGRESS == 0d0) {
                    add_enemy(MOSQUITO, 0x20, 0x53);
                    attach_script(LAST_ENTITY, DEATH, reference(gladiator_dead));
                } else if(ROOM.PROGRESS == 0d1) {
                    add_enemy(BOY_BLACK, 0x20, 0x53);
                    attach_script(LAST_ENTITY, DEATH, reference(gladiator_dead));
                } else if(ROOM.PROGRESS == 0d2) {
                    add_enemy(VIGOR, 0x20, 0x53);
                    attach_script(LAST_ENTITY, DEATH, reference(gladiator_dead));
                } else if(ROOM.PROGRESS == 0d3) {
                    add_enemy(FOOTKNIGHT, 0x20, 0x53);
                    attach_script(LAST_ENTITY, DEATH, reference(gladiator_dead));
                } else {
                    subtext("todo...");
                }
            }

            @install()
            fun gladiator_dead() {
                ROOM.FIGHT_IN_PROGRESS = False;
                ROOM.CURRENT_BOSS_DEFEATED = True;

                sound(ARENA_CHEER);
                
                animate(ROOM.MANAGER_ID, LOOP, ANIMATION_ENEMY.TINY_FLEX);
                sleep(0d160);
                animate(ROOM.MANAGER_ID, ONCE, DEFAULT);

                destroy(SCRIPT_OWNER);
            }

            fun claim_reward() {
                if((ROOM.PROGRESS >= ROOM.REWARD_1_KILLS) && !ROOM.REWARD_1_CLAIMED) {
                    set(ROOM.REWARD_1_CLAIMED);
                    
                    dialog("[SLOW]Let me teach you my secret formula.[B]");

                    reward(SOULS_MEMORY.REWARD_ARENA_BOMB_1);

                    dialog("[SLOW]This technique has been passed down for generations.[B]");

                    end();
                } else if((ROOM.PROGRESS >= ROOM.REWARD_2_KILLS) && !ROOM.REWARD_2_CLAIMED) {
                    set(ROOM.REWARD_2_CLAIMED);
                    
                    reward(SOULS_MEMORY.REWARD_ARENA_BOMB_2);

                    end();
                } else if((ROOM.PROGRESS >= ROOM.REWARD_3_KILLS) && !ROOM.REWARD_3_CLAIMED) {
                    set(ROOM.REWARD_3_CLAIMED);
                    
                    reward(SOULS_MEMORY.REWARD_ARENA_BOMB_3);

                    end();
                } else if((ROOM.PROGRESS >= ROOM.REWARD_4_KILLS) && !ROOM.REWARD_4_CLAIMED) {
                    set(ROOM.REWARD_4_CLAIMED);
                    
                    reward(SOULS_MEMORY.REWARD_ARENA_BOMB_4);

                    end();
                }
            }

            @install()
            fun manager_triggered() {
                if(ROOM.FIGHT_IN_PROGRESS) {
                    subtext("You should focus on your opponent!");
                    end();
                } else if(ROOM.CURRENT_BOSS_DEFEATED) {
                    ROOM.CURRENT_BOSS_DEFEATED = False;
                    ROOM.PROGRESS++;

                    sound(ARENA_CHEER);
                }

                claim_reward();

                if(ROOM.PROGRESS < ROOM.MAX_PROGRESS) {
                    question("[SLOW]Ready for the next oponent?[CHOICE]Yes…[CHOICE]No…[CHOICE]Leave…", 0d5);

                    if(MEMORY.QUESTION_ANSWER == 0d0) {
                        spawn_next_gladiator();
                    } else if(MEMORY.QUESTION_ANSWER == 0d1) {
                        nop();
                    } else if(MEMORY.QUESTION_ANSWER == 0d2) {
                        map_transition(town_arena_entry, south_1, NONE);
                    }
                } else {
                    question("[SLOW]There is no worthy opponent left for you…[CHOICE]Leave…");

                    if(MEMORY.QUESTION_ANSWER == 0d0) {
                        map_transition(town_arena_entry, south_1, NONE);
                    }
                }
            }

            fun show_bridge(show) {
                if(show) {
                    object[0x00] = 0x01;
                } else {
                    object[0x00] = 0x00;
                }
            }

            @install()
            fun collectible_triggered() {
                set(ROOM.COLLECTIBLE_LOOTED);

                collectible_collected();
            }

            @install()
            fun pillar_triggered() {
                heal(SCRIPT_OWNER, 0d0, False);
                attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, True);

                set(ROOM.PILLAR_OPENED);

                object[0x01] = 0x01;

                animate(SCRIPT_OWNER, LOOP, ANIMATION_PLACEHOLDER.EXPLOSION_2);

                add_collectible(0x00, 0x36, 0x48, reference(collectible_triggered));

                sleep(0d30);
                destroy(SCRIPT_OWNER);
            }

            fun trigger_enter() {
                CUSTOM_FLAG.NO_DOG = True;
                CUSTOM_FLAG.VANILLA_BOMB_DAMAGE = True;
                
                init_map(0x00, 0x30, 0x40, 0x70);

                add_enemy(TINY, 0x20, 0x42, INACTIVE);
                ROOM.MANAGER_ID = <LAST_ENTITY>;

                add_enemy(PLACEHOLDER, 0x20, 0x48);
                attach_script(LAST_ENTITY, B, reference(manager_triggered));

                show_bridge(True);
                default_init_room(False, False);

                press_start();

                CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.BOMBS;

                sleep(0d15);
                show_bridge(False);

                if!(ROOM.COLLECTIBLE_LOOTED) {
                    add_bombable_entity(0d53, 0d74);
                    attach_script(LAST_ENTITY, DAMAGE_DEATH, reference(pillar_triggered));
                } else {
                    object[0x01] = 0x01;
                }
            }
        };
    };

    area town_level_1() {
        map town_level_1(IVOR_EBON_2) {
            enum entrance {
                north = entrance(0x40, 0x0b, SOUTH),
                south = entrance(0x20, 0x77, NORTH),

                door_1_1_left = entrance(0x2c, 0x63, SOUTH, { generic_object_door(0x03, True, False); }),
                door_1_1_right = entrance(0x44, 0x63, SOUTH, { generic_object_door(0x02, True, False); }),
                door_1_2 = entrance(0x74, 0x63, SOUTH),
                door_1_3 = entrance(0xa2, 0x63, SOUTH),
                door_1_3_back = entrance(0x92, 0x4b, WEST),
                door_2_1 = entrance(0x8e, 0x29, SOUTH, { generic_object_door(0x01, True, False); }),
                door_2_1_back = entrance(0xb7, 0x1f, EAST),

                crash = entrance(0x5d, 0x5d, NONE, { crash_both(); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
            }

            enum stepon_trigger {
                gate = @install() {
                    debug_subtext("S=0");
                },
                door_1_1_left = @install() {
                    debug_subtext("S=1");

                    if!(SOULS_MEMORY.SMITH_KEY) {
                        error_locked(SOUTH);
                    } else {
                        generic_object_door(0x03, False, False);
                        map_transition(town_inn, door_left, NORTH);
                    }
                },
                door_1_1_right = @install() {
                    debug_subtext("S=2");

                    if(False) {
                        error_locked(SOUTH);
                    } else {
                        generic_object_door(0x02, False, False);
                        map_transition(town_inn, door_right, NORTH);
                    }
                },
                door_1_2 = @install() {
                    debug_subtext("S=3");

                    error_locked(SOUTH);
                },
                door_1_3 = @install() {
                    debug_subtext("S=4");

                    error_locked(SOUTH);
                },
                door_2_1 = @install() {
                    debug_subtext("S=5");

                    if(True) {
                        error_locked(SOUTH);
                    } else {
                        generic_object_door(0x01, False, False);
                        map_transition(house_2_1, door, NORTH);
                    }
                },
                exit_south = @install() {
                    debug_subtext("S=6");

                    map_transition(town_center, north, SOUTH);
                },
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_north = @install() {
                    debug_subtext("S=8");

                    map_transition(town_level_2, south, NORTH);
                },
                door_2_1_back = @install() {
                    debug_subtext("S=9");

                    error_locked(EAST);
                },

                door_1_3_back = @install() {
                    debug_subtext("S=10");

                    if(AREA_TOWN_TEMPLE.SECRET_PASSAGE_2_OPENED) {
                        map_transition(town_temple_underground_castle_south_east, east, NONE);
                    } else {
                        error_wrong_side(WEST);
                    }
                },
            }

            fun trigger_enter() {
                object[0x00] = 0x7e; // open gate
                // object[0x01] = 0x01; // open door_2_1
                // object[0x02] = 0x01; // open door_1_1_right
                // object[0x03] = 0x01; // open door_1_1_left
                // object[0x04] = 0x01; // replace flower_gate_1 (scrub)
                // object[0x05] = 0x01; // open door_2_1_back AND replace flower_gate_2 (scrub)
                // object[0x06] = 0x01; // replace flower_gate_3 (scrub)
                // object[0x07] = 0x01; // replace flower_gate_4 (scrub)
                // object[0x08] = 0x01; // replace flower_gate_stairs_1 (scrub)
                // object[0x09] = 0x01; // replace flower_gate_stairs_2 (scrub)
                // object[0x0a] = 0x01; // replace flower_gate_stairs_3 (scrub)
                // object[0x0b] = 0x01; // replace flower_gate_stairs_4 (scrub)
                // object[0x0c] = 0x01; // replace flower_gate_stairs_bed_1 (scrub)
                // object[0x0d] = 0x01; // replace flower_gate_stairs_bed_2 (scrub)
                // object[0x0e] = 0x01; // replace flower_gate_stairs_bed_3 (scrub)
                // object[0x0f] = 0x01; // replace door_2_1_flower_1 (scrub)
                // object[0x10] = 0x01; // replace door_2_1_flower_2 (scrub)
                // object[0x11] = 0x01; // replace door_2_1_flower_3 (scrub)
                // object[0x12] = 0x01; // replace door_2_1_flower_4 (scrub)
                // object[0x13] = 0x01; // replace door_2_1_flower_5 (scrub)
                // object[0x14] = 0x01; // replace stairs_lower_1 (scrub)
                // object[0x15] = 0x01; // replace stairs_lower_2 (scrub)
                // object[0x16] = 0x01; // replace stairs_lower_3 (scrub)
                // object[0x17] = 0x01; // replace door_1_3_flower_1 (scrub)
                // object[0x18] = 0x01; // replace door_1_2_flower_2 (scrub)
                // object[0x19] = 0x01; // replace door_1_2_flower_4 (scrub)
                // object[0x1a] = 0x01; // replace door_1_2_flower_3 (scrub)
                // object[0x1b] = 0x01; // replace door_1_2_flower_2 (scrub)
                // object[0x1c] = 0x01; // replace door_1_2_flower_1 (scrub)
                // object[0x1d] = 0x01; // replace door_1_1_flower_2 (scrub)
                // object[0x1e] = 0x01; // replace door_1_1_flower_1 (scrub)
                // object[0x1f] = 0x01; // replace door_1_2_flower_5 (scrub)
                object[0x20] = 0x02; // change door_1_2 (closed, open, barricaded)
                object[0x21] = 0x02; // change door_1_3 (closed, open, barricaded)
                // object[0x22] = 0x01; // close door_1_3_back (closed, open, barricaded)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // lower gate
                    add_enemy(PIRATE_ANCHOR, 0d19, 0d85);

                    // lower houses
                    add_enemy(FLOWER_PURPLE, 0d134, 0d102);
                    add_enemy(MAGGOT_RED, 0d133, 0d74);

                    // lower stairs
                    add_enemy(FLOWER_PURPLE, 0d191, 0d82);
                    
                    // lower houses
                    add_enemy(PIRATE_ANCHOR, 0d188, 0d51);

                    // upper stairs
                    add_enemy(FLOWER_PURPLE, 0d70, 0d52);

                    // upper gate
                    add_enemy(PIRATE_ANCHOR, 0d64, 0d34);
                }

                default_init_room(False, False);
            }
        };

        map town_inn(IVOR_EBON_HOUSES) {
            enum entrance {
                door_left = entrance(0x10, 0x8b, NORTH),
                door_right = entrance(0x38, 0x8b, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
            }

            enum ROOM {
                CHEST_LOOTED = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_backroom_3chests = nop(),
                exit_inn_2_left = nop(),
                exit_inn_2_right = nop(),
                exit_stairs_house_3 = nop(),
                exit_door_house_3 = nop(),
                exit_stairs_upstairs = nop(),
                exit_house_1 = nop(),
                exit_door_house_2 = nop(),
                exit_stairs_house_2 = nop(),
                exit_backroom_2chests = nop(),

                exit_door_left = @install() {
                    debug_subtext("S=10");
                    if!(SOULS_MEMORY.SMITH_KEY) {
                        error_locked(NORTH);
                    } else {
                        map_transition(town_level_1, door_1_1_left, SOUTH);
                    }
                },
                exit_door_right = @install() {
                    debug_subtext("S=11");
                    if(False) {
                        error_locked(NORTH);
                    } else {
                        map_transition(town_level_1, door_1_1_right, SOUTH);
                    }
                },
            }

            @install()
            fun inn_triggered() {
                if(SOULS_MEMORY.ISAAC_LETTER && !SOULS_MEMORY.ISAAC_WANTED_POSTER) {
                    question("An old newspaper.[CHOICE]Maggy article…[CHOICE]leave…");

                    if(MEMORY.QUESTION_ANSWER == 0d0) {
                        custom_reward(ISAAC_WANTED_POSTER);

                        dialog("`Magdalena O. Moriah, …´[B]");
                    }
                } else {
                    dialog("An old newspaper. Nothing catches your eye.[B]");
                }
            }

            enum b_trigger {
                gourd_backroom_3chests_3 = nop(),
                gourd_backroom_3chests_2 = nop(),
                gourd_backroom_3chests_1 = nop(),
                gourd_inn_2 = nop(),
                gourd_house_2 = nop(),
                gourd_house_3_north = nop(),
                gourd_house_3_east = nop(),
                gourd_backroom_2chests_2 = nop(),
                gourd_backroom_2chests_1 = nop(),
                gourd_upstairs_1 = nop(),

                gourd_upstairs_2 = nop(),
                b_trigger_11 = @install() {
                    debug_subtext("B=11");
                },
                b_trigger_12 = @install() {
                    debug_subtext("B=12");
                },
                inn_inn_2_south = nop(),
                inn_inn_2_east = nop(),
                inn_east = inn_triggered(),
                inn_south = inn_triggered(),
                gourd = @install() {
                    debug_subtext("B=17");

                    fake_loot_gourd();

                    object[0x1f] = 0x01; // open gourd_inn_1
                    custom_reward(SMITH_KEY);
                    set(ROOM.CHEST_LOOTED);
                },
                vendor_south = @install() {
                    debug_subtext("B=18");
                },
                vendor_east = @install() {
                    debug_subtext("B=19");
                },

                b_trigger_20 = @install() {
                    debug_subtext("B=20");
                },
            }

            @install()
            fun armor_triggered() {
                subtext("TODO");
            }

            fun trigger_enter() {
                if(ROOM.CHEST_LOOTED) {
                    object[0x1f] = 0x01; // open gourd_inn_1
                }

                default_init_room(False, False);

                add_enemy(PLACEHOLDER, 0d63, 0d93);
                attach_script(LAST_ENTITY, B, reference(armor_triggered));
            }
        };

        map house_2_1(IVOR_EBON_HOUSES) {
            enum entrance {
                door = entrance(0x72, 0x79, NORTH),
                stairs = entrance(0x58, 0x67, SOUTH),
            }

            enum stepon_trigger {
                exit_backroom_3chests = nop(),
                exit_inn_2_left = nop(),
                exit_inn_2_right = nop(),
                exit_stairs_house_3 = nop(),
                exit_door_house_3 = nop(),
                exit_stairs_upstairs = nop(),
                exit_house_1 = nop(),
                exit_door = @install() {
                    debug_subtext("S=7");
                    map_transition(town_level_1, door_2_1, SOUTH);
                },
                exit_stairs = @install() {
                    debug_subtext("S=8");
                    map_transition(house_2_1__upstairs, stairs_upstairs, NORTH);
                },
                exit_backroom_2chests = nop(),

                exit_inn_1_left = nop(),
                exit_inn_1_right = nop(),
            }

            enum b_trigger {
                gourd_backroom_3chests_3 = nop(),
                gourd_backroom_3chests_2 = nop(),
                gourd_backroom_3chests_1 = nop(),
                gourd_inn_2 = nop(),
                gourd = @install() {
                    debug_subtext("B=4");
                },
                gourd_house_3_north = nop(),
                gourd_house_3_east = nop(),
                gourd_backroom_2chests_2 = nop(),
                gourd_backroom_2chests_1 = nop(),
                gourd_upstairs_1 = nop(),

                gourd_upstairs_2 = nop(),
                b_trigger_11 = @install() {
                    debug_subtext("B=11");
                },
                b_trigger_12 = @install() {
                    debug_subtext("B=12");
                },
                inn_inn_2_south = nop(),
                inn_inn_2_east = nop(),
                inn_inn_1_east = nop(),
                inn_inn_1_south = nop(),
                gourd_inn_1 = nop(),
                vendor_inn_1_south = nop(),
                vendor_inn_1_east = nop(),

                b_trigger_20 = @install() {
                    debug_subtext("B=20");
                },
            }

            fun trigger_enter() {
                // object[0x0c] = 0x01; // open gourd_house_2

                fade_in();
            }
        };

        map house_2_1__upstairs(IVOR_EBON_HOUSES) {
            enum entrance {
                stairs_upstairs = entrance(0xaa, 0x23, NORTH),
            }

            enum stepon_trigger {
                exit_backroom_3chests = nop(),
                exit_inn_2_left = nop(),
                exit_inn_2_right = nop(),
                exit_stairs_house_3 = nop(),
                exit_door_house_3 = nop(),
                exit_stairs = @install() {
                    debug_subtext("S=5");
                    map_transition(house_2_1, stairs, SOUTH);
                },
                exit_house_1 = nop(),
                exit_door_house_2 = nop(),
                exit_stairs_house_2 = nop(),
                exit_backroom_2chests = nop(),

                exit_inn_1_left = nop(),
                exit_inn_1_right = nop(),
            }

            enum b_trigger {
                gourd_backroom_3chests_3 = nop(),
                gourd_backroom_3chests_2 = nop(),
                gourd_backroom_3chests_1 = nop(),
                gourd_inn_2 = nop(),
                gourd_house_2 = nop(),
                gourd_house_3_north = nop(),
                gourd_house_3_east = nop(),
                gourd_backroom_2chests_2 = nop(),
                gourd_backroom_2chests_1 = nop(),
                gourd_1 = @install() {
                    debug_subtext("B=9");
                },

                gourd_2 = @install() {
                    debug_subtext("B=10");
                },
                b_trigger_11 = @install() {
                    debug_subtext("B=11");
                },
                b_trigger_12 = @install() {
                    debug_subtext("B=12");
                },
                inn_inn_2_south = nop(),
                inn_inn_2_east = nop(),
                inn_inn_1_east = nop(),
                inn_inn_1_south = nop(),
                gourd_inn_1 = nop(),
                vendor_inn_1_south = nop(),
                vendor_inn_1_east = nop(),

                b_trigger_20 = @install() {
                    debug_subtext("B=20");
                },
            }

            fun trigger_enter() {
                // object[0x07] = 0x01; // open gourd_upstairs_1
                // object[0x08] = 0x01; // open gourd_upstairs_2
                // object[0x1a] = 0x01; // change upstairs_layout (0 = bed, 1 = chest closed, wall pass through 2 = chest open, wall closed)
                // object[0x1b] = 0x01; // show wall_upstairs
                // object[0x1c] = 0x01; // show cosmetic_upstairs_1 (crate instead of bed)
                // object[0x1d] = 0x01; // show cosmetic_upstairs_2 (fruit bowl)
                // object[0x1e] = 0x01; // hide cosmetic_upstairs_2 (clock)

                fade_in();
            }
        };
    };

    area town_level_2() {
        map town_level_2(IVOR_EBON_1) {
            enum entrance {
                north = entrance(0x20, 0x01, SOUTH),
                south = entrance(0x1c, 0x5f, NORTH),
                west = entrance(0x01, 0x3e, EAST),

                door_1 = entrance(0x2a, 0x01, SOUTH),
                door_2 = entrance(0x2a, 0x01, SOUTH),
                door_3 = entrance(0x2a, 0x01, SOUTH),
                door_4 = entrance(0x2a, 0x01, SOUTH),
                door_5 = entrance(0x2a, 0x01, SOUTH),

                crash = entrance(0x6d, 0x41, NONE, { crash_both(); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
            }

            enum stepon_trigger {
                door_1_1_back = @install() {
                    debug_subtext("S=0");

                    error_locked(WEST);
                },
                exit_west = @install() {
                    debug_subtext("S=1");

                    map_transition(town_temple, east_2, WEST);
                },
                exit_north = @install() {
                    debug_subtext("S=2");

                    map_transition(town_level_3, south, NORTH);
                },
                exit_south = @install() {
                    debug_subtext("S=3");

                    map_transition(town_level_1, north, SOUTH);
                },
                door_1_1 = @install() {
                    debug_subtext("S=4");

                    error_locked(SOUTH);
                },
                door_2_1 = @install() {
                    debug_subtext("S=5");

                    error_locked(SOUTH);
                },
                door_2_2 = @install() {
                    debug_subtext("S=6");

                    error_locked(SOUTH);
                },
                door_2_3 = @install() {
                    debug_subtext("S=7");

                    error_locked(SOUTH);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                b_trigger_2 = @install() {
                    debug_subtext("B=2");
                },
                b_trigger_3 = @install() {
                    debug_subtext("B=3");
                },
                b_trigger_4 = @install() {
                    debug_subtext("B=4");
                },
                b_trigger_5 = @install() {
                    debug_subtext("B=5");
                },
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
            }

            fun block_market(block) {
                if(block) {
                    object[0x1a] = 0x01;
                } else {
                    object[0x1a] = 0x00;
                }
            }

            fun trigger_enter() {
                if!(AREA_TOWN_TEMPLE.SECRET_PASSAGE_OPENED) {
                    block_market(True);
                }

                // MEMORY.MAP_PALETTE = 0x07;

                object[0x00] = 0x02; // change door_2_3 (closed, open, barricaded)
                object[0x01] = 0x02; // change door_2_2 (closed, open, barricaded)
                object[0x02] = 0x02; // change door_2_1 (closed, open, barricaded)
                object[0x03] = 0x02; // change door_1_1 (closed, open, barricaded)
                // object[0x04] = 0x01; // close gate_south
                // object[0x05] = 0x01; // replace gate_north_flower_1 (scrub)
                // object[0x06] = 0x01; // replace gate_north_flower_2 (scrub)
                // object[0x07] = 0x01; // replace gate_north_flower_3 (scrub)
                // object[0x08] = 0x01; // replace gate_north_flower_4 (scrub)
                // object[0x09] = 0x01; // replace house_2_2_flower_1 (scrub)
                // object[0x0a] = 0x01; // replace house_2_2_flower_2 (scrub)
                // object[0x0b] = 0x01; // replace house_2_3_flower (scrub)
                // object[0x0c] = 0x01; // replace stairs_lower_flower_2 (scrub)
                // object[0x0d] = 0x01; // replace stairs_lower_flower_1 (scrub)
                // object[0x0e] = 0x01; // replace stairs_lower_flower_3 (scrub)
                // object[0x0f] = 0x01; // replace house_1_1_flower (scrub)
                // object[0x10] = 0x01; // replace market_flower_bed_2_3 (scrub)
                // object[0x11] = 0x01; // replace market_flower_bed_2_2 (scrub)
                // object[0x12] = 0x01; // replace market_flower_bed_2_1 (scrub)
                // object[0x13] = 0x01; // replace market_flower_bed_1_3 (scrub)
                // object[0x14] = 0x01; // replace market_flower_bed_1_2 (scrub)
                // object[0x15] = 0x01; // replace market_flower_bed_1_1 (scrub)
                // object[0x16] = 0x01; // replace market_flower_4 (scrub)
                // object[0x17] = 0x01; // replace market_flower_3 (scrub)
                // object[0x18] = 0x01; // replace market_flower_2 (scrub)
                // object[0x19] = 0x01; // replace market_flower_1 (scrub)
                // object[0x1a] = 0x01; // block exit_west
                // object[0x1b] = 0x01; // open door_1_1_back

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // lower stairs
                    add_enemy(FLOWER_ORANGE, 0d191, 0d63);

                    // upper houses
                    add_enemy(BUZZARD_1, 0d177, 0d33);

                    add_enemy(DANCING_DEVIL_1, 0d109, 0d35);
                    add_enemy(BUZZARD_1, 0d115, 0d35);

                    // upper stairs
                    // add_enemy(FLOWER_ORANGE, 0d25, 0d8);
                    // add_enemy(FLOWER_ORANGE, 0d38, 0d7);
                    
                    add_enemy(DANCING_DEVIL_1, 0d36, 0d26);
                    add_enemy(DANCING_DEVIL_1, 0d32, 0d30);
                }

                add_enemy(VILLAGER_1_3, 0d25, 0d63, INACTIVE);
                face(LAST_ENTITY, SOUTH);
                attach_script(LAST_ENTITY, B, reference(@install() {
                    question("[SLOW]Do you want to trade for Oil?[CHOICE]1 Ethanol…", 0d5);

                    if(MEMORY.QUESTION_ANSWER == 0d0) { // ethanol
                        trade_items(OIL, 0d1, ETHANOL, 0d1);
                    }

                    control(BOTH);
                }));

                default_init_room(False, False);
            }
        };
    };

    area town_level_3() {
        map town_level_3(PALACE_EXTERIOR) {
            // sniff=vanilla

            enum entrance {
                north = entrance(0x56, 0x1f, SOUTH),
                south = entrance(0x56, 0x45, NORTH),

                crash = entrance(0x98, 0x15, NONE, { crash_both(); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_TOWN_TEMPLE.MUSIC_TOWN, 0xff)
            }

            enum BOSS {
                DEBUG = False,
                PROGRESS = memory(FLAG, TEMP),

                PHASE = memory(WORD, TEMP),
                TIMER = memory(WORD, TEMP),

                BOSS_1_ID = memory(WORD, TEMP),
                BOSS_2_ID = memory(WORD, TEMP),
                BOSS_REMAINING_ID = memory(WORD, TEMP),

                LAST_DAMAGED = memory(WORD, TEMP),
                RNG = memory(WORD, TEMP),

                P1_SPELL = DISRUPT,
                P1_SPELL_LEVEL = 0d15,

                P2_TIMER_THRESHOLD = 0d600
            }

            enum stepon_trigger {
                stepon_0 = @install() {
                    debug_subtext("S=0");
                },
                exit_south = @install() {
                    if(BOSS.PROGRESS) {
                        fog_wall_inside(!SOULS_MEMORY.DEAD_TOWN_PUPPETS, NORTH);
                    }
                    
                    map_transition(town_level_2, north, SOUTH);
                },
                stepon_2 = @install() {
                    debug_subtext("S=2");
                },
                exit_north = @install() {
                    debug_subtext("S=3");
                },
                stepon_4 = @install() {
                    debug_subtext("S=4");
                },
                stepon_5 = @install() {
                    debug_subtext("S=5");
                },
                stepon_6 = @install() {
                    debug_subtext("S=6");
                },
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                stepon_8 = @install() {
                    debug_subtext("S=8");
                },
                stepon_9 = @install() {
                    debug_subtext("S=9");
                },
            }

            enum b_trigger {
                sniff__2500_money = @install() {
                    debug_subtext("B=0");
                    // 2500 gold
                },
                sniff__1_limestone_1 = @install() {
                    debug_subtext("B=1");
                    _loot(0x0a, LIMESTONE, 0d01, 0d01);
                },
                sniff__1_bone = @install() {
                    debug_subtext("B=2");
                    _loot(0x09, BONE, 0d01, 0d00);
                },
                sniff__1_bone_1 = @install() {
                    debug_subtext("B=3");
                    _loot(0x08, BONE, 0d01, 0d01);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=4");
                    _loot(0x07, ROOTS, 0d01, 0d00);
                },
                sniff__1_roots_1 = @install() {
                    debug_subtext("B=5");
                    _loot(0x06, ROOTS, 0d01, 0d01);
                },
                sniff__1_water_3 = @install() {
                    debug_subtext("B=6");
                    _loot(0x05, WATER, 0d01, 0d03);
                },
                sniff__1_vinegar_2 = @install() {
                    debug_subtext("B=7");
                    _loot(0x04, VINEGAR, 0d01, 0d02);
                },
                sniff__1_vinegar_1 = @install() {
                    debug_subtext("B=8");
                    _loot(0x03, VINEGAR, 0d01, 0d01);
                },
                sniff__1_water_2 = @install() {
                    debug_subtext("B=9");
                    _loot(0x02, WATER, 0d01, 0d02); // same as B=10
                },

                sniff__1_water_2 = @install() {
                    debug_subtext("B=10");
                    _loot(0x02, WATER, 0d01, 0d02); // same as B=9
                },
                sniff__1_water_2 = @install() {
                    debug_subtext("B=11");
                    _loot(0x01, WATER, 0d01, 0d02);
                },
            }

            fun open_gate(open) {
                if(open) {
                    object[0x00] = 0x7e;
                } else {
                    object[0x00] = 0x00;
                }
            }

            fun boss_defeated() {
                souls_boss_defeated(DEAD_TOWN_PUPPETS, REWARD_TOWN_PUPPETS);

                BOSS.PROGRESS = False;
            }

            fun puppet_damaged(other, dance_animation) {
                if!(BOSS.PROGRESS) {
                    BOSS.PROGRESS = True;

                    push_music(BOSS);
                }

                if(BOSS.PHASE == 0d0) {
                    BOSS.PHASE = 0d1;

                    cast(SCRIPT_OWNER, SCRIPT_OWNER, FORCE_FIELD, 0d1);
                } else if(BOSS.PHASE == 0d1) {
                    if(BOSS.LAST_DAMAGED == <SCRIPT_OWNER>) {
                        sleep(0d5);
                        animate(SCRIPT_OWNER, LOOP, dance_animation);
                        sleep(0d30);
                        cast(SCRIPT_OWNER, BOY, BOSS.P1_SPELL, BOSS.P1_SPELL_LEVEL);
                        animate(SCRIPT_OWNER, ONCE, DEFAULT);
                    }
                    
                    BOSS.LAST_DAMAGED = <SCRIPT_OWNER>;

                    if(_dead(<SCRIPT_OWNER>)) {
                        BOSS.BOSS_REMAINING_ID = other;
                        BOSS.PHASE = 0d2;
                    }
                }
            }

            @install()
            @async()
            fun boss_ai() {
                if(BOSS.DEBUG) {
                    subtext("phase 0");
                }
                
                while(BOSS.PHASE == 0d0) {
                    yield();
                }

                if(BOSS.DEBUG) {
                    subtext("phase 1");
                }
                
                while(BOSS.PHASE == 0d1) {
                    yield();
                }

                if(BOSS.DEBUG) {
                    subtext("phase 2");
                }

                BOSS.TIMER = 0x0000;

                while(alive(BOSS.BOSS_REMAINING_ID)) {
                    if(BOSS.TIMER > BOSS.P2_TIMER_THRESHOLD) {
                        BOSS.TIMER = 0d0;
                        BOSS.RNG = randrange(0d3);

                        if(BOSS.BOSS_REMAINING_ID == BOSS.BOSS_1_ID) {
                            if(BOSS.RNG == 0d0) {
                                animate(BOSS.BOSS_REMAINING_ID, ONCE, ANIMATION_ENEMY.PUPPET_1_DANCE);

                                cast(BOSS.BOSS_REMAINING_ID, BOY, COROSION, 0d0);
                                cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, FORCE_FIELD, 0d0);
                            } else if(BOSS.RNG == 0d1) {
                                animate(BOSS.BOSS_REMAINING_ID, ONCE, ANIMATION_ENEMY.PUPPET_1_DANCE);

                                cast(BOSS.BOSS_REMAINING_ID, BOY, CONFOUND, 0d0);
                            } else if(BOSS.RNG == 0d2) {
                                cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, FORCE_FIELD, 0d0);
                                animate(BOSS.BOSS_REMAINING_ID, LOOP, ANIMATION_ENEMY.PUPPET_1_DANCE);
                            }
                        } else {
                            if(BOSS.RNG == 0d0) {
                                animate(BOSS.BOSS_REMAINING_ID, ONCE, ANIMATION_ENEMY.PUPPET_2_DANCE);

                                cast(BOY, BOY, COROSION, 0d0);
                                cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, FORCE_FIELD, 0d0);
                            } else if(BOSS.RNG == 0d1) {
                                animate(BOSS.BOSS_REMAINING_ID, ONCE, ANIMATION_ENEMY.PUPPET_2_DANCE);

                                cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, HEAL, 0d15);
                            } else if(BOSS.RNG == 0d2) {
                                cast(BOSS.BOSS_REMAINING_ID, BOSS.BOSS_REMAINING_ID, FORCE_FIELD, 0d0);
                                animate(BOSS.BOSS_REMAINING_ID, LOOP, ANIMATION_ENEMY.PUPPET_2_DANCE);
                            }
                        }
                    } else {
                        BOSS.TIMER++;
                    }

                    yield();
                }

                if(BOSS.DEBUG) {
                    subtext("yatta");
                }

                boss_defeated();
            }

            fun puppet_1(x, y) {
                add_enemy(PUPPET_1, x, y);
                animate(LAST_ENTITY, LOOP, ANIMATION_ENEMY.PUPPET_1_DANGLING);
                attribute(LAST_ENTITY, ROOT, True);
            }
            fun puppet_2(x, y) {
                add_enemy(PUPPET_2, x, y);
                animate(LAST_ENTITY, LOOP, ANIMATION_ENEMY.PUPPET_2_DANGLING);
                attribute(LAST_ENTITY, ROOT, True);
            }

            fun trigger_enter() {
                open_gate(True);

                default_init_room(False, False);

                if!(SOULS_MEMORY.DEAD_TOWN_PUPPETS) {
                    puppet_1(0d75, 0d41);
                    attach_script(LAST_ENTITY, DAMAGE, reference(@install() {
                        puppet_damaged(BOSS.BOSS_2_ID, ANIMATION_ENEMY.PUPPET_1_DANCE);
                    }));
                    BOSS.BOSS_1_ID = <LAST_ENTITY>;

                    puppet_2(0d97, 0d41);
                    attach_script(LAST_ENTITY, DAMAGE, reference(@install() {
                        puppet_damaged(BOSS.BOSS_1_ID, ANIMATION_ENEMY.PUPPET_2_DANCE);
                    }));
                    BOSS.BOSS_2_ID = <LAST_ENTITY>;

                    boss_ai();
                }
            }
        };
    };
};

map town_bridge(BAD_BOYS) {
    enum entrance {
        east = entrance(0x63, 0x1d, WEST),
        west = entrance(0x01, 0x21, EAST)
    }

    enum soundtrack {
        default = soundtrack(WIND_AMBIENT_BIRDS, 0xff)
    }

    enum stepon_trigger {
        exit_east = @install() {
            map_transition(town_center, west_1, EAST);
        },
        exit_west = @install() {
            map_transition(bog_curve, east, WEST);
        }
    }

    fun open_east_exit(open) {
        if(open) {
           object[0x00] = 0x00; 
        } else {
            object[0x00] = 0x7e;
        }
    }
    fun open_bridge(open) {
        if(open) {
           object[0x07] = 0x07e; 
        } else {
            object[0x07] = 0x00;
        }
    }

    enum ROOM {
        RIDDLE_SOLVED = memory(FLAG, SRAM),

        RIDDLE_PROGRESS = memory(WORD, TEMP),
    }

    fun riddle_solved() {
        set(ROOM.RIDDLE_SOLVED);

        subtext("yatta");
    }

    @install()
    fun pillar_triggered() {
        if(
            (<ACTIVE> != <BOY>) ||
            (
                (MEMORY.CURRENT_WEAPON != WEAPON_INDEX.AXE_2) &&
                (MEMORY.CURRENT_WEAPON != WEAPON_INDEX.AXE_3) &&
                (MEMORY.CURRENT_WEAPON != WEAPON_INDEX.AXE_4)
            )
        ) {
            animate(ACTIVE, ONCE, SLASH_1);
            end();
        }

        animate(BOY, ONCE, SLASH_2);

        if((ROOM.RIDDLE_PROGRESS == 0x00) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x01)) {
            ROOM.RIDDLE_PROGRESS++;
        } else if((ROOM.RIDDLE_PROGRESS == 0x01) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x02)) {
            ROOM.RIDDLE_PROGRESS++;
        } else if((ROOM.RIDDLE_PROGRESS == 0x02) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x03)) {
            ROOM.RIDDLE_PROGRESS++;
        } else if((ROOM.RIDDLE_PROGRESS == 0x03) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x04)) {
            ROOM.RIDDLE_PROGRESS++;
        } else if((ROOM.RIDDLE_PROGRESS == 0x04) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x05)) {
            ROOM.RIDDLE_PROGRESS++;
        } else if((ROOM.RIDDLE_PROGRESS == 0x05) && (<SCRIPT_OWNER>[GENERAL_PURPOSE] == 0x06)) {
            riddle_solved();
        }

        object[<SCRIPT_OWNER>[GENERAL_PURPOSE]] = 0x01;
        animate(SCRIPT_OWNER, LOOP, ANIMATION_PLACEHOLDER.EXPLOSION_2);

        sleep(0x30);
        destroy(SCRIPT_OWNER);

    }

    fun add_pillar(index, x, y) {
        add_enemy(PLACEHOLDER, x, y);
        attach_script(LAST_ENTITY, B, reference(pillar_triggered));
        <LAST_ENTITY>[GENERAL_PURPOSE] = index;
    }

    fun trigger_enter() {
        if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
            // east
            add_enemy(FLOWER_PURPLE, 0d93, 0d17);
            
            add_enemy(RAT, 0d68, 0d29);

            // west
            add_enemy(FLOWER_PURPLE, 0d34, 0d24);

            add_enemy(MONK, 0d25, 0d30);

            add_enemy(FLOWER_PURPLE, 0d15, 0d43);
        }

        if!(ROOM.RIDDLE_SOLVED) {
            add_pillar(0x01, 0d12, 0d24);
            add_pillar(0x02, 0d20, 0d24);
            add_pillar(0x03, 0d29, 0d24);

            add_pillar(0x04, 0d12, 0d38);
            add_pillar(0x05, 0d20, 0d38);
            add_pillar(0x06, 0d29, 0d38);
        } else {
            // object[0x01] = 0x7e;
            object[0x02] = 0x7e;
            // object[0x03] = 0x7e;

            object[0x04] = 0x7e;
            // object[0x05] = 0x7e;
            object[0x06] = 0x7e;
        }

        
        open_bridge(True);

        default_init_room(True, True);
    }
};

map bog_curve(TIMBERDRAKE) {
    enum entrance {
        east = entrance(0x2b, 0x15, WEST),
        south = entrance(0x1b, 0x29, NORTH)
    }

    enum soundtrack {
        default = soundtrack(WIND_AMBIENT_BIRDS, 0xff)
    }

    enum BOSS {
        DEBUG = False,

        ID = memory(WORD, TEMP),

        PROGRESS = memory(FLAG, TEMP),
        PHASE = memory(WORD, TEMP),

        HP = 0d500,

        P1_THRESHOLD = 0d400,

        P2_THRESHOLD = 0d300,
    }

    enum stepon_trigger {
        exit_east = @install() {
            if(BOSS.PROGRESS) {
                fog_wall_inside(True, WEST);
            }
            map_transition(town_bridge, west, EAST);
        },
        exit_south = @install() {
            if(BOSS.PROGRESS) {
                fog_wall_inside(True, NORTH);
            }
            map_transition(bog_bridges, north, SOUTH);
        }
    }

    fun boss_defeated() {
        if!(SOULS_MEMORY.DEAD_HEART) {
            BOSS.PROGRESS = False;

            souls_boss_defeated(DEAD_HEART, REWARD_HEART);
        }
    }

    fun spawn_raptor(x1, y1, direction:DIRECTION, x2, y2) {
        while(BOSS.PROGRESS) {
            add_enemy(RAPTOR_PURPLE, x1, y1);
            attach_to_script(LAST_ENTITY);

            if(False) {
                if(direction == DIRECTION.NORTH) {
                    face(SCRIPT_OWNER, NORTH);
                } else if(direction == DIRECTION.EAST) {
                    face(SCRIPT_OWNER, EAST);
                } else if(direction == DIRECTION.SOUTH) {
                    face(SCRIPT_OWNER, SOUTH);
                } else if(direction == DIRECTION.WEST) {
                    face(SCRIPT_OWNER, WEST);
                }
            }

            walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, x2, y2, SCRIPT_OWNER, SCRIPT_OWNER);
            animate(SCRIPT_OWNER, ONCE, SLASH_1);

            while(alive(<SCRIPT_OWNER>)) {
                if!(BOSS.PROGRESS) {
                    destroy(<SCRIPT_OWNER>);
                    end();
                } else {
                    yield();
                }
            }

            sleep(0d300);
        }
    }

    @install()
    @async()
    fun spawn_south() {
        spawn_raptor(0d28, 0d45, NORTH, 0d25, 0d33);
    }
    @install()
    @async()
    fun spawn_east() {
        spawn_raptor(0d49, 0d18, WEST, 0d34, 0d20);
    }

    @install()
    fun heart_triggered() {
        sound(GORE_MOSQUITO);
        ai_move_projectile_puke(<SCRIPT_OWNER>, ONION, <BOY>, 0d4);

        if(dead(<SCRIPT_OWNER>)) {
            boss_defeated();
        } else if((BOSS.PHASE == 0d0) && (<SCRIPT_OWNER>[HP] < BOSS.P1_THRESHOLD)) {
            BOSS.PHASE = 0d1;

            if(BOSS.DEBUG) {
                debug_subtext("p1");
            }

            spawn_south();
        } else if((BOSS.PHASE == 0d1) && (<SCRIPT_OWNER>[HP] < BOSS.P2_THRESHOLD)) {
            BOSS.PHASE = 0d2;

            if(BOSS.DEBUG) {
                debug_subtext("p2");
            }

            spawn_east();
        }
    }

    @install()
    fun boss_triggered() {
        if!(BOSS.PROGRESS) {
            BOSS.PROGRESS = True;

            push_music(BOSS_JUNGLE);

            attach_script(SCRIPT_OWNER, DAMAGE, reference(heart_triggered));

            sound(GORE_MOSQUITO);
            ai_move_projectile_puke(<SCRIPT_OWNER>, ONION, <BOY>, 0d4);
        }
    }

    fun trigger_enter() {
        // object[0x00] = 0x7e;
        object[0x01] = 0x7e;

        // add_enemy(RAPTOR_PURPLE, 0d29, 0d25);

        if!(SOULS_MEMORY.DEAD_HEART) {
            add_enemy(THRAXX_HEART, 0d29, 0d25);
            BOSS.ID = <LAST_ENTITY>;
            <LAST_ENTITY>[HP] = BOSS.HP;
            attach_script(LAST_ENTITY, DAMAGE, reference(boss_triggered));
        }

        default_init_room(True, True);

        if!(SOULS_MEMORY.DEAD_HEART) {
            while!(BOSS.PROGRESS) {
                sound(GORE_MOSQUITO);
                sleep(0d10);
                sound(GORE_MOSQUITO);

                sleep(0d35);
            }
        }
    }
};

map bog_bridges(SWAMP_BRIDGE) {
    enum entrance {
        north = entrance(0x0b, 0x01, SOUTH),
        south = entrance(0x1b, 0x53, NORTH)
    }

    enum soundtrack {
        default = soundtrack(WIND_AMBIENT_BIRDS, 0xff)
    }

    enum stepon_trigger {
        exit_north = @install() {
            map_transition(bog_curve, south, NORTH);
        },
        exit_south = @install() {
            map_transition(bog_crossing, north_short, SOUTH);
        }
    }

    fun trigger_enter() {
        if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
            // north
            add_enemy(FLOWER_PURPLE, 0d19, 0d12);

            add_enemy(FLOWER_PURPLE, 0d38, 0d13);

            // center
            add_enemy(FLOWER_PURPLE, 0d22, 0d36);

            add_enemy(TENTACLE_WHIP, 0d35, 0d27);
            add_enemy(RAT, 0d40, 0d34);

            // south
            add_enemy(FLOWER_PURPLE, 0d22, 0d71);
        }

        default_init_room(True, True);
    }
};

map bog_crossing(CROSSING) {
    // chests=vanilla
    // sniff=vanilla

    enum entrance {
        north = entrance(0x2d, 0x01, SOUTH),
        east = entrance(0x5f, 0x4d, WEST),
        west_1 = entrance(0x04, 0x71, EAST),
        west_2 = entrance(0x04, 0x2f, EAST),

        north_short = entrance(0x24, 0x1f, SOUTH),
    }

    enum soundtrack {
        default = soundtrack(WATER_AMBIENT_SEAGULLS, 0xff)
    }

    enum ROOM {
        FAKE_EXIT_ID = memory(WORD, TEMP),

        COLLECTIBLE_LOOTED = memory(FLAG, SRAM),
    }

    enum stepon_trigger {
        stepon_0 = @install() {
            debug_subtext("S=0");
        },
        stepon_1 = @install() {
            debug_subtext("S=1");
        },
        stepon_2 = @install() {
            debug_subtext("S=2");
        },
        stepon_3 = @install() {
            debug_subtext("S=3");
        },
        stepon_4 = @install() {
            debug_subtext("S=4");
        },
        stepon_5 = @install() {
            debug_subtext("S=5");
        },
        stepon_6 = @install() {
            debug_subtext("S=6");
        },
        stepon_7 = @install() {
            debug_subtext("S=7");
        },
        exit_east = @install() {
            map_transition(bog_crossing_firepit, west, EAST);
        },
        exit_north = @install() {
            map_transition(bog_bridges, south, NORTH);
        },

        exit_west_2_east = @install() {
            map_transition(bog_crossing_gourds, east, WEST);
        },
        exit_west_1_exit = @install() {
            map_transition(ship, east, WEST);
        },
        stepon_12 = @install() {
            debug_subtext("S=12");
        },
        stepon_13 = @install() {
            debug_subtext("S=13");
        },
        stepon_14 = @install() {
            debug_subtext("S=14");
        },
        stepon_15 = @install() {
            debug_subtext("S=15");
        },
        stepon_16 = @install() {
            debug_subtext("S=16");
        },
        stepon_17 = @install() {
            debug_subtext("S=17");
        },
        stepon_18 = @install() {
            debug_subtext("S=18");
        },
        stepon_19 = @install() {
            debug_subtext("S=19");
        },
    }

    enum b_trigger {
        wall_2 = @install() {
            debug_subtext("B=0");
        },
        wall_1 = @install() {
            debug_subtext("B=1");
        },
        gourd_2_1__3_water = @install() {
            debug_subtext("B=2");
            _loot_chest(0x06, WATER, 0d03);
        },
        gourd_1_1__2_water = @install() {
            debug_subtext("B=3");
            _loot_chest(0x05, WATER, 0d02);
        },
        gourd_1_2__3_limestone = @install() {
            debug_subtext("B=4");
            _loot_chest(0x07, LIMESTONE, 0d03);
        },
        gourd_1_3__4_wax = @install() {
            debug_subtext("B=5");
            _loot_chest(0x08, WAX, 0d04);
        },
        sniff__1_ethanol_3 = @install() {
            debug_subtext("B=6");
            _loot(0x09, ETHANOL, 0d01, 0d03);
        },
        sniff__1_ethanol_2 = @install() {
            debug_subtext("B=7");
            _loot(0x0a, ETHANOL, 0d01, 0d02);
        },
        sniff__1_roots_1 = @install() {
            debug_subtext("B=8");
            _loot(0x0b, ROOTS, 0d01, 0d01);
        },
        sniff__1_roots_3 = @install() {
            debug_subtext("B=9");
            _loot(0x0c, ROOTS, 0d01, 0d03);
        },

        sniff__1_roots = @install() {
            debug_subtext("B=10");
            _loot(0x0d, ROOTS, 0d01, 0d00);
        },
        sniff__1_roots_2 = @install() {
            debug_subtext("B=11");
            _loot(0x0e, ROOTS, 0d01, 0d02);
        },
        sniff__1_limestone_2 = @install() {
            debug_subtext("B=12");
            _loot(0x0f, LIMESTONE, 0d01, 0d02);
        },
        sniff__1_limestone_1 = @install() {
            debug_subtext("B=13");
            _loot(0x10, LIMESTONE, 0d01, 0d01);
        },
        sniff__1_wax_2 = @install() {
            debug_subtext("B=14");
            _loot(0x11, WAX, 0d01, 0d02);
        },
        sniff__1_wax_2 = @install() {
            debug_subtext("B=15");
            _loot(0x12, WAX, 0d01, 0d02);
        },
        sniff__1_water_1 = @install() {
            debug_subtext("B=16");
            _loot(0x13, WATER, 0d01, 0d01);
        },
        sniff__1_vinegar_1 = @install() {
            debug_subtext("B=17");
            _loot(0x14, VINEGAR, 0d01, 0d01);
        },
        sniff__1_vinegar_1 = @install() {
            debug_subtext("B=18");
            _loot(0x15, VINEGAR, 0d01, 0d01);
        },
        sniff__1_bone_1 = @install() {
            debug_subtext("B=19");
            _loot(0x16, BONE, 0d01, 0d01);
        },
    }

    fun fake_exit() {
        map_transition(bog_bridges, south, NORTH);
    }

    @install()
    @async()
    fun fake_exit_scanner() {
        attach_to_script(ROOM.FAKE_EXIT_ID);

        while(True) {
            arg[0x00] = <ACTIVE>[X];
            arg[0x02] = <ACTIVE>[Y];
            arg[0x04] = <SCRIPT_OWNER>[X];
            arg[0x06] = <SCRIPT_OWNER>[Y];

            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= 0x15) && (arg[0x0a] <= 0x15)) {
                fake_exit();
                end();
            }

            yield();
        }
    }

    @install()
    fun collectible_triggered() {
        set(ROOM.COLLECTIBLE_LOOTED);

        collectible_collected();
    }

    
    fun trigger_enter() {
        if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
            // top
            add_enemy(FLOWER_PURPLE, 0d38, 0d49);

            add_enemy(FLOWER_PURPLE, 0d12, 0d45);
            add_enemy(FLOWER_PURPLE, 0d19, 0d50);

            // center
            add_enemy(BUZZARD_1, 0d15, 0d68);
            add_enemy(BUZZARD_1, 0d22, 0d78);

            add_enemy(FLOWER_ORANGE, 0d35, 0d74);

            // south
            add_enemy(FLOWER_ORANGE, 0d33, 0d106);

            add_enemy(BUZZARD_1, 0d55, 0d104);
        }

        if!(ROOM.COLLECTIBLE_LOOTED) {
            add_collectible(0x01, 0x5e, 0x4d, reference(collectible_triggered));
        }

        init_map(0x00, 0x1e, 0xff, 0xff);

        object[0x03] = 0x01;
        object[0x04] = 0x01;

        add_enemy(PLACEHOLDER, 0x24, 0x1f);
        ROOM.FAKE_EXIT_ID = <LAST_ENTITY>;

        default_init_room(True, True);

        sleep(0x10);
        fake_exit_scanner();
    }
};

map bog_crossing_firepit(FIREPIT_BEACH) { // unused
    enum entrance {
        west = entrance(0x03, 0x1f, EAST),
    }

    enum stepon_trigger {
        exit_east = @install() {
            map_transition(bog_crossing, east, WEST);
        },
        windwalker = @install() {
            debug_subtext("S=1");
        },
    }

    fun trigger_enter() {
        fade_in();
    }
};

map bog_crossing_gourds(DEFEND) {
    enum entrance {
        east = entrance(0x26, 0x13, WEST),
    }

    enum soundtrack {
        default = soundtrack(WIND_AMBIENT_BIRDS, 0xff)
    }

    enum stepon_trigger {
        exit_east = @install() {
            map_transition(bog_crossing, west_2, EAST);
        },
    }

    enum b_trigger {
        gourd_2__1_call_beads = @install() {
            debug_subtext("B=0");
            _loot_chest(0x00, BISCUIT, 0x01);
        },
        gourd_1__4_clay = @install() {
            _loot_chest(0x01, CLAY, 0d04);
        },
        gourd_3__5_ash = @install() {
            debug_subtext("B=2");
            _loot_chest(0x02, ASH, 0d05);
        },
    }
    
    fun trigger_enter() {
        if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
            add_enemy(MONK, 0d10, 0d9);
            add_enemy(MONK, 0d15, 0d11);
        }

        default_init_room(True, True);
    }
};

area ship_caves() {
    enum AREA_SHIP {
        DEFAULT_MUSIC = MUSIC.SEWER_AMBIENT_WATER
    }

    map ship(CRUSTICIA) {
        enum entrance {
            east = entrance(0x5f, 0x5b, WEST),
            west = entrance(0x05, 0x59, EAST),

            door_1 = entrance(0x32, 0x40, SOUTH),
            door_2_1 = entrance(0x30, 0x22, SOUTH),
            door_2_2 = entrance(0x59, 0x2d, SOUTH),
            door_3_1 = entrance(0x13, 0x0d, SOUTH),
            door_3_2 = entrance(0x4b, 0x0c, SOUTH),
        }

        enum soundtrack {
            default = soundtrack(AREA_SHIP.DEFAULT_MUSIC, 0xff)
        }

        enum stepon_trigger {
            door_3_1_stairs = @install() {
                debug_subtext("S=0");
            },
            door_3_2_stairs = @install() {
                debug_subtext("S=1");
            },
            door_2_2_stairs = @install() {
                debug_subtext("S=2");
            },
            door_1_1_stairs = @install() {
                debug_subtext("S=3");
            },
            lift_top = @install() {
                debug_subtext("S=4");
            },
            exit_west = @install() {
                map_transition(east_crossing, east, WEST);
            },
            door_3_1 = @install() {
                debug_subtext("S=6");

                map_transition(cave_left_entrance, south_1, NORTH);
            },
            door_2_2 = @install() {
                debug_subtext("S=7");

                map_transition(room_monk, south, NORTH);
            },
            door_2_1 = @install() {
                debug_subtext("S=8");

                map_transition(ship_crates, south, NORTH);
            },
            door_1_1 = @install() {
                debug_subtext("S=9");

                error_dlc(SOUTH);
            },

            door_3_2 = @install() {
                debug_subtext("S=10");

                map_transition(cave_right_entrance, south_3, NORTH);
            },
            exit_east = @install() {
                map_transition(bog_crossing, west_1, EAST);
            },
            lift_bottom = @install() {
                debug_subtext("S=12");
            },
        }

        enum ROOM {
            PILLAR_CLEARED = memory(FLAG, SRAM),
            PILLAR_ID = memory(WORD, TEMP),
        }

        fun trigger_enter() {
            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // north
                add_enemy(RAPTOR_GREEN, 0d45, 0d21);

                // south-east
                add_enemy(RAPTOR_GREEN, 0d76, 0d80);

                // south
                add_enemy(RAPTOR_PURPLE, 0d49, 0d88);

                // south-west
                add_enemy(RAPTOR_GREEN, 0d41, 0d78);
            }

            if!(ROOM.PILLAR_CLEARED) {
                add_pillar(0d19, 0d14);
                ROOM.PILLAR_ID = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, B, reference(@install() {
                    axe2_wall_enemy(ROOM.PILLAR_CLEARED, ROOM.PILLAR_ID);
                }));
            }

            default_init_room(True, True);
        }
    };

    map ship_crates(CRUSTICIA_CAVES) { // variant: ship
        enum entrance {
            south = entrance(0x47, 0x51, NORTH),
        }

        enum soundtrack {
            default = soundtrack(AREA_SHIP.DEFAULT_MUSIC, 0xff)
        }

        enum stepon_trigger {
            monk = nop(),
            monk_trigger_west = nop(),
            monk_trigger_south = nop(),
            exit_cave_hammock = nop(),
            exit_ship_tavern = nop(),
            exit_south = @install() {
                debug_subtext("S=5");
                map_transition(ship, door_2_1, SOUTH);
            },
            exit_cave_crates = nop(),
            exit_cave_monk = nop(),
        }

        enum b_trigger {
            gourd_hammock__1_water = nop(),
            gourd_monk_1__1_nectar = nop(),
            gourd_monk_2__1_clay = nop(),
            gourd_crates__1_nectar = nop(),
            groud_tavern__1_wax = nop(),
            gourd__1_water = @install() {
                debug_subtext("B=5");
                _loot_chest(0x05, WATER, 0d01);
            },
            tavern_barkeeper = nop(),
        }

        fun init_room(index) {
            if(index == 0x00) {
                init_map(0x00, 0x00, 0x2e, 0x2a); // hammock
            } else if(index == 0x01) {
                init_map(0x00, 0x38, 0x26, 0x5c); // crates
            } else if(index == 0x02) {
                init_map(0x32, 0x36, 0x56, 0x52); // ship
            } else if(index == 0x03) {
                init_map(0x58, 0x30, 0x86, 0x4e); // tavern
            } else if(index == 0x04) {
                init_map(0x40, 0x00, 0x66, 0x24); // monk
            }
        }

        fun trigger_enter() {
            // ???
            // object[0x05] = 0x01; // loot gourd_ship

            init_room(0x02);

            fade_in();
        }
    };

    map room_monk(CRUSTICIA_CAVES) { // variant: monk
        enum entrance {
            south = entrance(0x4f, 0x23, NORTH),
        }

        enum soundtrack {
            default = soundtrack(AREA_SHIP.DEFAULT_MUSIC, 0xff)
        }

        enum stepon_trigger {
            monk = @install() {
                debug_subtext("S=0");
            },
            monk_trigger_west = @install() {
                debug_subtext("S=1");
            },
            monk_trigger_south = @install() {
                debug_subtext("S=2");
            },
            exit_cave_hammock = nop(),
            exit_ship_tavern = nop(),
            exit_ship_small = nop(),
            exit_cave_crates = nop(),
            exit_south = @install() {
                debug_subtext("S=7");

                map_transition(ship, door_2_2, SOUTH);
            },
        }

        enum b_trigger {
            gourd_hammock__1_water = nop(),
            gourd_1__1_nectar = @install() {
                debug_subtext("B=1");
                _loot_chest(0x02, NECTAR, 0d01);
            },
            gourd_2__1_clay = @install() {
                debug_subtext("B=2");
                _loot_chest(0x01, CLAY, 0d01);
            },
            gourd_crates__1_nectar = nop(),
            groud_tavern__1_wax = nop(),
            gourd_ship__1_water = nop(),
            tavern_barkeeper = nop(),
        }

        fun init_room(index) {
            if(index == 0x00) {
                init_map(0x00, 0x00, 0x2e, 0x2a); // hammock
            } else if(index == 0x01) {
                init_map(0x00, 0x38, 0x26, 0x5c); // crates
            } else if(index == 0x02) {
                init_map(0x32, 0x36, 0x56, 0x52); // ship
            } else if(index == 0x03) {
                init_map(0x58, 0x30, 0x86, 0x4e); // tavern
            } else if(index == 0x04) {
                init_map(0x40, 0x00, 0x66, 0x24); // monk
            }
        }

        fun trigger_enter() {
            init_room(0x04);
            
            fade_in();
        }
    };
};

area desert_bug() {
    fun dungeon_legs(up) {
        debug_memory(up, 0d0);

        if(up) {
            object[0x00] = 0x01; // raise dungeon_leg_west_1
            object[0x01] = 0x01; // raise dungeon_leg_west_2
            object[0x02] = 0x01; // raise dungeon_leg_west_3
            object[0x03] = 0x01; // raise dungeon_leg_east_1
            object[0x04] = 0x01; // raise dungeon_leg_east_2
            object[0x05] = 0x01; // raise dungeon_leg_east_3
        } else {
            object[0x00] = 0x00; // raise dungeon_leg_west_1
            object[0x01] = 0x00; // raise dungeon_leg_west_2
            object[0x02] = 0x00; // raise dungeon_leg_west_3
            object[0x03] = 0x00; // raise dungeon_leg_east_1
            object[0x04] = 0x00; // raise dungeon_leg_east_2
            object[0x05] = 0x00; // raise dungeon_leg_east_3
        }
    }

    map bugmuck(BUGMUCK) {
        enum entrance {
            north_1 = entrance(0x0b, 0x01, SOUTH),
            north_2 = entrance(0x1b, 0x01, SOUTH),
            cave = entrance(0x24, 0x4c, SOUTH),

            dungeon_north = entrance(0x7c, 0d18, NORTH),
            dungeon_east_1 = entrance(0x85, 0x34, EAST, { dungeon_legs(True); }),
            dungeon_east_2 = entrance(0x85, 0x3e, EAST, { dungeon_legs(True); }),
            dungeon_east_3 = entrance(0x85, 0x4a, EAST, { dungeon_legs(True); }),
            dungeon_south = entrance(0x7c, 0x75, SOUTH),
            dungeon_west_1 = entrance(0x73, 0x4a, WEST, { dungeon_legs(True); }),
            dungeon_west_2 = entrance(0x73, 0x3e, WEST, { dungeon_legs(True); }),
            dungeon_west_3 = entrance(0x73, 0x34, WEST, { dungeon_legs(True); }),
        }

        enum soundtrack {
            default = soundtrack(BUGMUCK_AMBIENT_MELODY, 0xff)
        }

        enum stepon_trigger {
            helper_bug_east_south = @install() {
                debug_subtext("S=0");
            },
            helper_bug_west_south = @install() {
                debug_subtext("S=1");
            },
            helper_bug_west_north = @install() {
                debug_subtext("S=2");
            },
            exit_north_1 = @install() {
                debug_subtext("S=3");

                map_transition(desert, south, NORTH);
            },
            exit_north_2 = @install() {
                debug_subtext("S=4");

                map_transition(bugmuck_cave_7, north_1, NORTH);
            },
            exit_cave = @install() {
                debug_subtext("S=5");

                map_transition(bugmuck_cave_1, south, NORTH);
            },
            bbm_south = @install() {
                debug_subtext("S=6");

                if(SOULS_MEMORY.DEAD_DOUBLE_THRAXX) {
                    map_transition(bbm_1, south, NORTH);
                } else {
                    error_wrong_side(SOUTH);
                }
            },
            bbm_west_1 = @install() {
                debug_subtext("S=7");

                map_transition(bbm_2, level_2_west, EAST);
            },
            bbm_west_2 = @install() {
                debug_subtext("S=8");

                map_transition(bbm_2, level_1_west, EAST);
            },
            bbm_west_3 = @install() {
                debug_subtext("S=9");

                map_transition(bbm_2, level_0_west, EAST);
            },

            bbm_east_1 = @install() {
                debug_subtext("S=10");

                map_transition(bbm_2, level_0_east, WEST);
            },
            bbm_east_2 = @install() {
                debug_subtext("S=11");

                map_transition(bbm_2, level_1_east, WEST);
            },
            bbm_east_3 = @install() {
                debug_subtext("S=12");

                map_transition(bbm_2, level_2_east, WEST);
            },
        }

        enum b_trigger {
            gourd__2_crystal = @install() {
                debug_subtext("B=0");
                _loot_chest(0x0d, CRYSTAL, 0d02);
            },
            gourd__glove_1_2 = @install() {
                debug_subtext("B=1");
                _loot_chest(0x0c, JEWELED_SCARAB, 0d01);
            },
            gourd__1_petal = @install() {
                debug_subtext("B=2");
                _loot_chest(0x0b, JEWELED_SCARAB, 0d01);
            },
            gourd__4_water = @install() {
                debug_subtext("B=3");
                _loot_chest(0x09, WATER, 0d04);
            },
            gourd__2_crystal = @install() {
                debug_subtext("B=4");
                _loot_chest(0x0a, CRYSTAL, 0d02);
            },
            gourd__1_biscuit = @install() {
                debug_subtext("B=5");
                _loot_chest(0x07, JEWELED_SCARAB, 0d01);
            },
            gourd__1_clay = @install() {
                debug_subtext("B=6");
                _loot_chest(0x08, CLAY, 0d01);
            },
            gourd__1_petal = @install() {
                debug_subtext("B=7");
                _loot_chest(0x06, JEWELED_SCARAB, 0d01);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=8");
                _loot(0x0e, OIL, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=9");
                _loot(0x0f, OIL, 0d01, 0d00);
            },

            sniff__1_oil = @install() {
                debug_subtext("B=10");
                _loot(0x10, OIL, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=11");
                _loot(0x11, OIL, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=12");
                _loot(0x12, OIL, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=13");
                _loot(0x13, OIL, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=14");
                _loot(0x14, OIL, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=15");
                _loot(0x15, OIL, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=16");
                _loot(0x16, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=17");
                _loot(0x17, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=18");
                _loot(0x18, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=19");
                _loot(0x19, ROOTS, 0d01, 0d00);
            },

            sniff__1_roots = @install() {
                debug_subtext("B=20");
                _loot(0x1a, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=21");
                _loot(0x1b, ROOTS, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=22");
                _loot(0x1c, ROOTS, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=23");
                _loot(0x1d, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=24");
                _loot(0x1e, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=25");
                _loot(0x1f, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=26");
                _loot(0x20, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=27");
                _loot(0x21, ASH, 0d01, 0d00);
            },
            sniff__1_crystal_2 = @install() {
                debug_subtext("B=28");
                _loot(0x22, CRYSTAL, 0d01, 0d02);
            },
            sniff__1_wax = @install() {
                debug_subtext("B=29");
                _loot(0x23, WAX, 0d01, 0d00);
            },

            sniff__1_crystal_1 = @install() {
                debug_subtext("B=30");
                _loot(0x24, CRYSTAL, 0d01, 0d01);
            },
            sniff__1_crystal = @install() {
                debug_subtext("B=31");
                _loot(0x25, CRYSTAL, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=32");
                _loot(0x26, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=33");
                _loot(0x27, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=34");
                _loot(0x28, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=35");
                _loot(0x29, CLAY, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("B=36");
                _loot(0x2a, WAX, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("B=37");
                _loot(0x2b, WAX, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("B=38");
                _loot(0x2c, WAX, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("B=39");
                _loot(0x2d, WAX, 0d01, 0d00);
            },

            sniff__1_wax = @install() {
                debug_subtext("B=40");
                _loot(0x2e, WAX, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("B=41");
                _loot(0x2f, WAX, 0d01, 0d00);
            },
        }

        @install()
        @async()
        fun fake_exit_scanner(entity) {
            range_checker(entity, <ACTIVE>, 0x20, 0x20, @install() {
                fog_wall_outside((!SOULS_MEMORY.DEAD_DOUBLE_THRAXX) && SOULS_MEMORY.PROGRESS_DOUBLE_THRAXX, NORTH);
                
                if!(SOULS_MEMORY.PROGRESS_DOUBLE_THRAXX) {
                    map_transition(thraxx, north, SOUTH);
                } else {
                    map_transition(thraxx, spider, SOUTH);
                }
            });
        }

        fun trigger_enter() {
            // object[0x00] = 0x01; // raise dungeon_leg_west_1
            // object[0x01] = 0x01; // raise dungeon_leg_west_2
            // object[0x02] = 0x01; // raise dungeon_leg_west_3
            // object[0x03] = 0x01; // raise dungeon_leg_east_1
            // object[0x04] = 0x01; // raise dungeon_leg_east_2
            // object[0x05] = 0x01; // raise dungeon_leg_east_3
            // object[0x06] = 0x01; // gourd_bbm_east (petal)
            // object[0x07] = 0x01; // gourd_bbm_west_1 (dog biscuit)
            // object[0x08] = 0x01; // gourd_south
            // object[0x09] = 0x01; // gourd_hb_south
            // object[0x0a] = 0x01; // gourd_hb_east
            // object[0x0b] = 0x01; // gourd_bbm_west_2 (petal)
            // object[0x0c] = 0x01; // gourd_upstairs_2
            // object[0x0d] = 0x01; // gourd_upstairs_1

            if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                // top-south
                add_enemy(BUZZARD_1, 0d35, 0d49);

                // top-north
                add_enemy(MAGGOT_RED, 0d54, 0d15);
                add_enemy(MAGGOT_RED, 0d87, 0d12);

                // north-west
                add_enemy(MAGGOT_RED, 0d22, 0d50);

                // south-west
                add_enemy(BUZZARD_1, 0d40, 0d108);

                // east
                add_enemy(BUZZARD_1, 0d158, 0d96);

                // south
                add_enemy(BUZZARD_1, 0d56, 0d133);

                // center
                add_enemy(BUZZARD_1, 0d57, 0d42);

                add_enemy(MAGGOT_RED, 0d97, 0d38);

                // dungeon-south
                add_enemy(SPIDER_YELLOW, 0d122, 0d126);
                add_enemy(SPIDER_YELLOW, 0d133, 0d134);

                // dungeon-east
                add_enemy(SPIDER_YELLOW, 0d162, 0d51);

                // dungeon-west
                add_enemy(MAGGOT_RED, 0d76, 0d45);

                add_enemy(SPIDER_YELLOW, 0d73, 0d73);

                add_enemy(SPIDER_YELLOW, 0d71, 0d93);
            }
            
            default_init_room(False, False);

            add_enemy(PLACEHOLDER, 0d124, 0d18);
            fake_exit_scanner(<LAST_ENTITY>);
        }
    };

    area bugmuck_cave() {
        enum AREA_BUGMUCK_CAVE {
            MUSIC = MUSIC.BUGMUCK_AMBIENT_MELODY,
        }

        map bugmuck_cave_1(VOLCANO_ROOMS) { // variant: room_ns
            enum entrance {
                north = entrance(0x1c, 0x3d, SOUTH),
                south = entrance(0x22, 0x7b, NORTH),

                bonfire = entrance(0d34, 0d100, NONE, { bonfire_wakeup(-0d24, 0d0, 0d0, 0d8); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_BUGMUCK_CAVE.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_south = @install() {
                    debug_subtext("S=5");

                    map_transition(bugmuck, cave, SOUTH);
                },
                exit_room_sw_west = nop(),
                exit_north = @install() {
                    debug_subtext("S=7");

                    map_transition(bugmuck_cave_2_6, south, NORTH);
                },
                exit_room_sw_south = nop(),
                exit_room_nne_north_1 = nop(),

                exit_room_es_south = nop(),
                exit_room_es_east = nop(),
                exit_room_nne_north_2 = nop(),
                exit_room_nss_south_2 = nop(),
                exit_room_nss_south_1 = nop(),
                exit_room_nss_north = nop(),
                exit_north = nop(),
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                sniff_room_alchemist__1_ash = nop(),
                gourd_cave_outside__3_wax = nop(),
                gourd_cave_outside__1_wax = nop(),
                gourd__4_ash = @install() {
                    debug_subtext("B=3");
                    _loot_chest(0x04, ASH, 0d04);
                },
                gourd_room_sw__4_ash = nop(),
                gourd_main__1_call_bead = nop(),
                gourd_alchemist_west__3_water = nop(),
                gourd_room_s__2_wax = nop(),
                gourd_room_s__3_ash = nop(),
                gourd_alchemist_hidden_2__5_wax = nop(),
                gourd_alchemist_hidden_1__6_water = nop(),
                sniff__1_ash = @install() {
                    debug_subtext("B=11");
                    _loot_chest(0x05, ASH, 0d04);
                },
                sniff_room_sw__1_water = nop(),
                sniff_room_nne__1_water = nop(),
                sniff__1_clay = @install() {
                    debug_subtext("B=14");
                    _loot(0x0a, CLAY, 0d01, 0d00);
                },
                sniff_room_nss__1_roots = nop(),
                sniff_room_nne__1_roots = nop(),
                sniff_room_main__1_roots = nop(),
                sniff_cave_outside__1_roots = nop(),
                sniff_room_es__1_oil = nop(),
                sniff_room_s__1_oil = nop(),
                sniff_room_nw__1_oil = nop(),
                sniff_room_nss__1_wax = nop(),
                sniff__1_wax = @install() {
                    debug_subtext("B=23");
                    _loot(0x13, WAX, 0d01, 0d00);
                },
                sniff_room_main__1_wax = nop(),
            }

            fun init_room(index) {
                if(index == 0d0) {
                    init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                } else if(index == 0d1) {
                    init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                } else if(index == 0d2) {
                    init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                } else if(index == 0d3) {
                    init_map(0xbe, 0x04, 0xfc, 0x36); // room_alchemist
                } else if(index == 0d4) {
                    init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                } else if(index == 0d5) {
                    init_map(0x40, 0x38, 0x80, 0x6c); // room_ne
                } else if(index == 0d6) {
                    init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                } else if(index == 0d7) {
                    init_map(0xb4, 0x3c, 0xf8, 0x96); // room_main (downstairs)
                } else if(index == 0d8) {
                    init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                } else if(index == 0d9) {
                    init_map(0x3f, 0x89, 0x6c, 0xb2); // room_outside_cave
                } else if(index == 0d10) {
                    init_map(0xba, 0x3c, 0xf8, 0x96); // room_main (upstairs)
                }
            }

            fun trigger_enter() {
                bonfire(0d34, 0d100, SOULS_MEMORY.BONFIRE_DESERT_BUG);

                init_room(0d4);
                default_init_room(False, False);
            }
        };
        map bugmuck_cave_2_6(VOLCANO_ROOMS) { // variant: main
            enum entrance {
                north = entrance(0xd3, 0x3d, SOUTH),
                east = entrance(0xf7, 0x5b, WEST),
                south = entrance(0xd5, 0x95, NORTH),
                west = entrance(0xbb, 0x5d, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BUGMUCK_CAVE.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_cave_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_room_ns_south = nop(),
                exit_room_sw_west = nop(),
                exit_room_ns_north = nop(),
                exit_room_sw_south = nop(),
                exit_room_nne_north_1 = nop(),

                exit_room_es_south = nop(),
                exit_room_es_east = nop(),
                exit_room_nne_north_2 = nop(),
                exit_room_nss_south_2 = nop(),
                exit_room_nss_south_1 = nop(),
                exit_room_nss_north = nop(),
                exit_room_alchemist_north = nop(),
                exit_east = @install() {
                    debug_subtext("S=17");

                    map_transition(bugmuck_cave_5, west, EAST);
                },
                exit_west = @install() {
                    debug_subtext("S=18");

                    map_transition(bugmuck_cave_7, east, WEST);
                },
                exit_north = @install() {
                    debug_subtext("S=19");

                    map_transition(bugmuck_cave_3, south, NORTH);
                },

                exit_south = @install() {
                    debug_subtext("S=20");

                    map_transition(bugmuck_cave_1, north, SOUTH);
                },
            }
            
            enum b_trigger {
                sniff_room_alchemist__1_ash = nop(),
                gourd_cave_outside__3_wax = nop(),
                gourd_cave_outside__1_wax = nop(),
                gourd_room_ns__4_ash = nop(),
                gourd_room_sw__4_ash = nop(),
                gourd__1_call_bead = @install() {
                    debug_subtext("B=5");
                    _loot_chest(0x03, CALL_BEADS, 0d01); // amount+=0
                },
                gourd_alchemist_west__3_water = nop(),
                gourd_room_s__2_wax = nop(),
                gourd_room_s__3_ash = nop(),
                gourd_alchemist_hidden_2__5_wax = nop(),
                gourd_alchemist_hidden_1__6_water = nop(),
                sniff__1_ash = @install() {
                    debug_subtext("B=11");
                    _loot_chest(0x05, ASH, 0d04);
                },
                sniff_room_sw__1_water = nop(),
                sniff_room_nne__1_water = nop(),
                sniff_room_ns__1_clay = nop(),
                sniff_room_nss__1_roots = nop(),
                sniff_room_nne__1_roots = nop(),
                sniff__1_roots = @install() {
                    debug_subtext("B=17");
                    _loot(0x0d, ROOTS, 0d01, 0d00);
                },
                sniff_cave_outside__1_roots = nop(),
                sniff_room_es__1_oil = nop(),
                sniff_room_s__1_oil = nop(),
                sniff_room_nw__1_oil = nop(),
                sniff_room_nss__1_wax = nop(),
                sniff_room_ns__1_wax = nop(),
                sniff__1_wax = @install() {
                    debug_subtext("B=24");
                    _loot(0x14, WAX, 0d01, 0d00);
                },
            }

            fun init_room(index) {
                if(index == 0d0) {
                    init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                } else if(index == 0d1) {
                    init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                } else if(index == 0d2) {
                    init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                } else if(index == 0d3) {
                    init_map(0xbe, 0x04, 0xfc, 0x36); // room_alchemist
                } else if(index == 0d4) {
                    init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                } else if(index == 0d5) {
                    init_map(0x40, 0x38, 0x80, 0x6c); // room_ne
                } else if(index == 0d6) {
                    init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                } else if(index == 0d7) {
                    init_map(0xb4, 0x3c, 0xf8, 0x96); // room_main (downstairs)
                } else if(index == 0d8) {
                    init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                } else if(index == 0d9) {
                    init_map(0x3f, 0x89, 0x6c, 0xb2); // room_outside_cave
                } else if(index == 0d10) {
                    init_map(0xba, 0x3c, 0xf8, 0x96); // room_main (upstairs)
                }
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // center
                    add_enemy(MAGGOT, 0d214, 0d106);

                    // west
                    add_enemy(MAGGOT, 0d183, 0d125);

                    // top-north
                    add_enemy(MAGGOT, 0d214, 0d88);

                    // top-east
                    add_enemy(MAGGOT, 0d224, 0d102);
                }

                init_room(0d7);
                // init_room(0d10);
                default_init_room(False, False);
            }
        };
        map bugmuck_cave_3(VOLCANO_ROOMS) { // variant: room_es
            enum entrance {
                east = entrance(0x67, 0x1c, WEST),
                south = entrance(0x4c, 0x39, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BUGMUCK_CAVE.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_room_ns_south = nop(),
                exit_room_sw_west = nop(),
                exit_room_ns_north = nop(),
                exit_room_sw_south = nop(),
                exit_room_nne_north_1 = nop(),

                exit_south = @install() {
                    debug_subtext("S=10");

                    map_transition(bugmuck_cave_2_6, north, SOUTH);
                },
                exit_east = @install() {
                    debug_subtext("S=11");

                    map_transition(bugmuck_cave_4, west, EAST);
                },
                exit_room_nne_north_2 = nop(),
                exit_room_nss_south_2 = nop(),
                exit_room_nss_south_1 = nop(),
                exit_room_nss_north = nop(),
                exit_room_alchemist_north = nop(),
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                sniff_room_alchemist__1_ash = nop(),
                gourd_cave_outside__3_wax = nop(),
                gourd_cave_outside__1_wax = nop(),
                gourd_room_ns__4_ash = nop(),
                gourd_room_sw__4_ash = nop(),
                gourd_main__1_call_bead = nop(),
                gourd_alchemist_west__3_water = nop(),
                gourd_room_s__2_wax = nop(),
                gourd_room_s__3_ash = nop(),
                gourd_alchemist_hidden_2__5_wax = nop(),
                gourd_alchemist_hidden_1__6_water = nop(),
                sniff__1_ash = @install() {
                    debug_subtext("B=11");
                    _loot_chest(0x05, ASH, 0d04);
                },
                sniff_room_sw__1_water = nop(),
                sniff_room_nne__1_water = nop(),
                sniff_room_ns__1_clay = nop(),
                sniff_room_nss__1_roots = nop(),
                sniff_room_nne__1_roots = nop(),
                sniff_room_main__1_roots = nop(),
                sniff_cave_outside__1_roots = nop(),
                sniff__1_oil = @install() {
                    debug_subtext("B=19");
                    _loot(0x0f, OIL, 0d01, 0d00);
                },
                sniff_room_s__1_oil = nop(),
                sniff_room_nw__1_oil = nop(),
                sniff_room_nss__1_wax = nop(),
                sniff_room_ns__1_wax = nop(),
                sniff_room_main__1_wax = nop(),
            }

            fun init_room(index) {
                if(index == 0d0) {
                    init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                } else if(index == 0d1) {
                    init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                } else if(index == 0d2) {
                    init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                } else if(index == 0d3) {
                    init_map(0xbe, 0x04, 0xfc, 0x36); // room_alchemist
                } else if(index == 0d4) {
                    init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                } else if(index == 0d5) {
                    init_map(0x40, 0x38, 0x80, 0x6c); // room_ne
                } else if(index == 0d6) {
                    init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                } else if(index == 0d7) {
                    init_map(0xb4, 0x3c, 0xf8, 0x96); // room_main (downstairs)
                } else if(index == 0d8) {
                    init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                } else if(index == 0d9) {
                    init_map(0x3f, 0x89, 0x6c, 0xb2); // room_outside_cave
                } else if(index == 0d10) {
                    init_map(0xba, 0x3c, 0xf8, 0x96); // room_main (upstairs)
                }
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // south
                    add_enemy(LIZARD, 0d67, 0d39);
                }

                init_room(0d1);
                default_init_room(False, False);
            }
        };
        map bugmuck_cave_4(VOLCANO_ROOMS) { // variant: room_sw
            enum entrance {
                south = entrance(0x1c, 0x3b, NORTH),
                west = entrance(0x01, 0x24, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BUGMUCK_CAVE.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_cave_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_room_ns_south = nop(),
                exit_west = @install() {
                    debug_subtext("S=6");

                    map_transition(bugmuck_cave_3, east, WEST);
                },
                exit_room_ns_north = nop(),
                exit_south = @install() {
                    debug_subtext("S=8");

                    map_transition(bugmuck_cave_5, north, SOUTH);
                },
                exit_room_nne_north_1 = nop(),

                exit_room_es_south = nop(),
                exit_room_es_east = nop(),
                exit_room_nne_north_2 = nop(),
                exit_room_nss_south_2 = nop(),
                exit_room_nss_south_1 = nop(),
                exit_room_nss_north = nop(),
                exit_room_alchemist_north = nop(),
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                sniff_room_alchemist__1_ash = nop(),
                gourd_cave_outside__3_wax = nop(),
                gourd_cave_outside__1_wax = nop(),
                gourd_room_ns__4_ash = nop(),
                gourd__4_ash = @install() {
                    debug_subtext("B=4");
                    _loot_chest(0x05, ASH, 0d04);
                },
                gourd_main__1_call_bead = nop(),
                gourd_alchemist_west__3_water = nop(),
                gourd_room_s__2_wax = nop(),
                gourd_room_s__3_ash = nop(),
                gourd_alchemist_hidden_2__5_wax = nop(),
                gourd_alchemist_hidden_1__6_water = nop(),
                sniff__1_ash = @install() {
                    debug_subtext("B=11");
                    _loot_chest(0x05, ASH, 0d04);
                },
                sniff__1_water = @install() {
                    debug_subtext("B=12");
                    _loot(0x08, WATER, 0d01, 0d00);
                },
                sniff_room_nne__1_water = nop(),
                sniff_room_ns__1_clay = nop(),
                sniff_room_nss__1_roots = nop(),
                sniff_room_nne__1_roots = nop(),
                sniff_room_main__1_roots = nop(),
                sniff_cave_outside__1_roots = nop(),
                sniff_room_es__1_oil = nop(),
                sniff_room_s__1_oil = nop(),
                sniff_room_nw__1_oil = nop(),
                sniff_room_nss__1_wax = nop(),
                sniff_room_ns__1_wax = nop(),
                sniff_room_main__1_wax = nop(),
            }

            fun init_room(index) {
                if(index == 0d0) {
                    init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                } else if(index == 0d1) {
                    init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                } else if(index == 0d2) {
                    init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                } else if(index == 0d3) {
                    init_map(0xbe, 0x04, 0xfc, 0x36); // room_alchemist
                } else if(index == 0d4) {
                    init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                } else if(index == 0d5) {
                    init_map(0x40, 0x38, 0x80, 0x6c); // room_ne
                } else if(index == 0d6) {
                    init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                } else if(index == 0d7) {
                    init_map(0xb4, 0x3c, 0xf8, 0x96); // room_main (downstairs)
                } else if(index == 0d8) {
                    init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                } else if(index == 0d9) {
                    init_map(0x3f, 0x89, 0x6c, 0xb2); // room_outside_cave
                } else if(index == 0d10) {
                    init_map(0xba, 0x3c, 0xf8, 0x96); // room_main (upstairs)
                }
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // east
                    add_enemy(LIZARD, 0d36, 0d35);

                    // south
                    add_enemy(MAGGOT, 0d18, 0d45);
                }

                init_room(0d0);
                default_init_room(False, False);
            }
        };
        map bugmuck_cave_5(VOLCANO_ROOMS) { // variant: room_nw
            enum entrance {
                north = entrance(0x20, 0x85, SOUTH),
                west = entrance(0x01, 0xa3, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BUGMUCK_CAVE.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_north = @install() {
                    debug_subtext("S=0");

                    map_transition(bugmuck_cave_4, south, NORTH);
                },
                exit_west = @install() {
                    debug_subtext("S=1");

                    map_transition(bugmuck_cave_2_6, east, WEST);
                },
                exit_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_room_ns_south = nop(),
                exit_room_sw_west = nop(),
                exit_room_ns_north = nop(),
                exit_room_sw_south = nop(),
                exit_room_nne_north_1 = nop(),

                exit_room_es_south = nop(),
                exit_room_es_east = nop(),
                exit_room_nne_north_2 = nop(),
                exit_room_nss_south_2 = nop(),
                exit_room_nss_south_1 = nop(),
                exit_room_nss_north = nop(),
                exit_room_alchemist_north = nop(),
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                sniff_room_alchemist__1_ash = nop(),
                gourd_cave_outside__3_wax = nop(),
                gourd_cave_outside__1_wax = nop(),
                gourd_room_ns__4_ash = nop(),
                gourd_room_sw__4_ash = nop(),
                gourd_main__1_call_bead = nop(),
                gourd_alchemist_west__3_water = nop(),
                gourd_room_s__2_wax = nop(),
                gourd_room_s__3_ash = nop(),
                gourd_alchemist_hidden_2__5_wax = nop(),
                gourd_alchemist_hidden_1__6_water = nop(),
                sniff__1_ash = @install() {
                    debug_subtext("B=11");
                    _loot_chest(0x05, ASH, 0d04);
                },
                sniff_room_sw__1_water = nop(),
                sniff_room_nne__1_water = nop(),
                sniff_room_ns__1_clay = nop(),
                sniff_room_nss__1_roots = nop(),
                sniff_room_nne__1_roots = nop(),
                sniff_room_main__1_roots = nop(),
                sniff_cave_outside__1_roots = nop(),
                sniff_room_es__1_oil = nop(),
                sniff_room_s__1_oil = nop(),
                sniff__1_oil = @install() {
                    debug_subtext("B=21");
                    _loot(0x11, OIL, 0d01, 0d00);
                },
                sniff_room_nss__1_wax = nop(),
                sniff_room_ns__1_wax = nop(),
                sniff_room_main__1_wax = nop(),
            }

            fun init_room(index) {
                if(index == 0d0) {
                    init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                } else if(index == 0d1) {
                    init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                } else if(index == 0d2) {
                    init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                } else if(index == 0d3) {
                    init_map(0xbe, 0x04, 0xfc, 0x36); // room_alchemist
                } else if(index == 0d4) {
                    init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                } else if(index == 0d5) {
                    init_map(0x40, 0x38, 0x80, 0x6c); // room_ne
                } else if(index == 0d6) {
                    init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                } else if(index == 0d7) {
                    init_map(0xb4, 0x3c, 0xf8, 0x96); // room_main (downstairs)
                } else if(index == 0d8) {
                    init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                } else if(index == 0d9) {
                    init_map(0x3f, 0x89, 0x6c, 0xb2); // room_outside_cave
                } else if(index == 0d10) {
                    init_map(0xba, 0x3c, 0xf8, 0x96); // room_main (upstairs)
                }
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // north
                    add_enemy(LIZARD, 0d18, 0d153);

                    // east
                    add_enemy(MAGGOT, 0d37, 0d166);

                    // south
                    add_enemy(MAGGOT, 0d24, 0d171);
                }

                init_room(0d8);
                default_init_room(False, False);
            }
        };
        map bugmuck_cave_7(VOLCANO_ROOMS) { // variant: room_nne
            enum entrance {
                north_1 = entrance(0x4c, 0x36, SOUTH),
                north_2 = entrance(0x60, 0x39, SOUTH),
                east = entrance(0x7f, 0x60, WEST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BUGMUCK_CAVE.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_south = nop(),
                exit_room_s_south = nop(),
                exit_east = @install() {
                    debug_subtext("S=4");

                    map_transition(bugmuck_cave_2_6, west, EAST);
                },
                exit_room_ns_south = nop(),
                exit_room_sw_west = nop(),
                exit_room_ns_north = nop(),
                exit_room_sw_south = nop(),
                exit_north_1 = @install() {
                    debug_subtext("S=9");

                    map_transition(bugmuck, north_2, NORTH);
                },

                exit_room_es_south = nop(),
                exit_room_es_east = nop(),
                exit_north_2 = @install() {
                    debug_subtext("S=12");

                    map_transition(bugmuck_cave_portal, south, NORTH);
                },
                exit_room_nss_south_2 = nop(),
                exit_room_nss_south_1 = nop(),
                exit_room_nss_north = nop(),
                exit_room_alchemist_north = nop(),
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                sniff_room_alchemist__1_ash = nop(),
                gourd_cave_outside__3_wax = nop(),
                gourd_cave_outside__1_wax = nop(),
                gourd_room_ns__4_ash = nop(),
                gourd_room_sw__4_ash = nop(),
                gourd_main__1_call_bead = nop(),
                gourd_alchemist_west__3_water = nop(),
                gourd_room_s__2_wax = nop(),
                gourd_room_s__3_ash = nop(),
                gourd_alchemist_hidden_2__5_wax = nop(),
                gourd_alchemist_hidden_1__6_water = nop(),
                sniff__1_ash = @install() {
                    debug_subtext("B=11");
                    _loot_chest(0x05, ASH, 0d04);
                },
                sniff_room_sw__1_water = nop(),
                sniff__1_water = @install() {
                    debug_subtext("B=13");
                    _loot(0x09, WATER, 0d01, 0d00);
                },
                sniff_room_ns__1_clay = nop(),
                sniff_room_nss__1_roots = nop(),
                sniff__1_roots = @install() {
                    debug_subtext("B=16");
                    _loot(0x0c, ROOTS, 0d01, 0d00);
                },
                sniff_room_main__1_roots = nop(),
                sniff_cave_outside__1_roots = nop(),
                sniff_room_es__1_oil = nop(),
                sniff_room_s__1_oil = nop(),
                sniff_room_nw__1_oil = nop(),
                sniff_room_nss__1_wax = nop(),
                sniff_room_ns__1_wax = nop(),
                sniff_room_main__1_wax = nop(),
            }

            fun init_room(index) {
                if(index == 0d0) {
                    init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                } else if(index == 0d1) {
                    init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                } else if(index == 0d2) {
                    init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                } else if(index == 0d3) {
                    init_map(0xbe, 0x04, 0xfc, 0x36); // room_alchemist
                } else if(index == 0d4) {
                    init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                } else if(index == 0d5) {
                    init_map(0x40, 0x38, 0x80, 0x6c); // room_ne
                } else if(index == 0d6) {
                    init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                } else if(index == 0d7) {
                    init_map(0xb4, 0x3c, 0xf8, 0x96); // room_main (downstairs)
                } else if(index == 0d8) {
                    init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                } else if(index == 0d9) {
                    init_map(0x3f, 0x89, 0x6c, 0xb2); // room_outside_cave
                } else if(index == 0d10) {
                    init_map(0xba, 0x3c, 0xf8, 0x96); // room_main (upstairs)
                }
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // north
                    add_enemy(MAGGOT, 0d84, 0d85);

                    // east
                    add_enemy(MAGGOT, 0d107, 0d84);

                    // west
                    add_enemy(LIZARD, 0d74, 0d92);
                }

                init_room(0d5);
                default_init_room(False, False);
            }
        };

        map bugmuck_cave_portal(PYRAMID_CAVE) {
            enum entrance {
                south = entrance(0x15, 0x23, NORTH),

                teleporter = entrance(0d23, 0d18, NONE, { teleporter_in(SOUTH); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_BUGMUCK_CAVE.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_south = @install() {
                    debug_subtext("S=0");

                    map_transition(bugmuck_cave_7, north_2, SOUTH);
                },
                exit_teleporter = @install() {
                    debug_subtext("S=1");

                    teleporter_out(0d23, 0d17);
                    map_transition(cave_left_north_west, teleporter, NONE);
                },
            }

            fun trigger_enter() {
                fade_in();
            }
        };
    };

    area bug_dungeon() {
        enum AREA_BUG_DUNGEON {
            MUSIC = MUSIC.BUGMUCK_AMBIENT_MELODY,
        }

        group bbm_helper() {
            @install()
            @async()
            fun spider_trap(entity) {
                entity[GENERAL_PURPOSE] = True;

                attribute(entity, ROOT, True);

                _add_enemy(SPIDER, entity[X], entity[Y], INVINCIBLE);
                attach_to_script(LAST_ENTITY);

                attribute(SCRIPT_OWNER, ROOT, True);

                <SCRIPT_OWNER>[Z] = 0d10000 + randrange(0d500);

                yield();
                while(<SCRIPT_OWNER>[Z] > 0d0) {
                    yield();
                }

                walk(SCRIPT_OWNER, COORDINATE_ABSOLUTE_DIRECT, entity[X], entity[Y], NONE, NONE);
                wait(SCRIPT_OWNER);

                control(entity, True);
                smart_animate(entity, ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);

                attribute(SCRIPT_OWNER, ROOT, False);

                if(randrange(0d2)) {
                    walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, 0d1, 0d0, SCRIPT_OWNER, NONE);

                    while(arg[0x10] < 0d3) {
                        arg[0x10]++;

                        walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, -0d1, 0d1, SCRIPT_OWNER, NONE);
                        walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, -0d1, -0d1, SCRIPT_OWNER, NONE);
                        walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, 0d1, -0d1, SCRIPT_OWNER, NONE);
                        walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, 0d1, 0d1, SCRIPT_OWNER, NONE);
                    }
                } else {
                    walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, -0d1, 0d0, SCRIPT_OWNER, NONE);

                    while(arg[0x10] < 0d3) {
                        arg[0x10]++;

                        walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, 0d1, -0d1, SCRIPT_OWNER, NONE);
                        walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, 0d1, 0d1, SCRIPT_OWNER, NONE);
                        walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, -0d1, 0d1, SCRIPT_OWNER, NONE);
                        walk(SCRIPT_OWNER, TILE_RELATIVE_DIRECT, -0d1, -0d1, SCRIPT_OWNER, NONE);
                    }
                }

                walk(SCRIPT_OWNER, COORDINATE_ABSOLUTE_DIRECT, entity[X], entity[Y] + 0d10, SCRIPT_OWNER, NONE);
                face(SCRIPT_OWNER, SOUTH);

                while(entity[Z] < 0d10000) {
                    arg[0x12] = randrange(0d5);

                    entity[VELOCITY] += arg[0x12];
                    <SCRIPT_OWNER>[VELOCITY] += arg[0x12];

                    yield();
                }

                animate(entity, LOOP, ANIMATION_ALL.INVISIBLE);
                animate(SCRIPT_OWNER, LOOP, ANIMATION_ALL.INVISIBLE);

                entity[GENERAL_PURPOSE] = False;
            }

            fun collapse_bridge(object_id) {
                spider_trap(<ACTIVE>);
                control(INACTIVE, True);
                spider_trap(<INACTIVE>);

                if(object_id is Word) {
                    object[object_id] = 0x7e;
                }

                yield();
                while(<ACTIVE>[GENERAL_PURPOSE]) {
                    yield();
                }

                map_transition(thraxx, south, NONE);
            }

            @install()
            @async()
            fun spider_drop(entity, x, y) {
                control(entity, True);
                entity[Z] = 0d10000 + randrange(0d500);

                _add_enemy(SPIDER, entity[X], entity[Y], INACTIVE_IMORTAL);
                attach_to_script(LAST_ENTITY);
                <SCRIPT_OWNER>[Z] = 0d10000 + randrange(0d500);

                smart_animate(entity, ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);

                while(entity[Z] > 0d0) {
                    yield();
                }

                control(entity, False);
                animate(entity, ONCE, ANIMATION_ALL.DEFAULT);
                subtext("now");

                walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, x, y, SCRIPT_OWNER, NONE);

                destroy(<SCRIPT_OWNER>);
            }
        };

        map bbm_1(BBM_1) {
            enum entrance {
                north = entrance(0x34, 0x0b, SOUTH),
                south = entrance(0x32, 0xa9, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BUG_DUNGEON.MUSIC, 0xff)
            }

            enum stepon_trigger {
                trap_5_2_north = @install() {
                    debug_subtext("S=0");

                    collapse_bridge(0x0b);
                },
                slide_left_2_1 = @install() {
                    debug_subtext("S=1");
                },
                slide_left_1_1 = @install() {
                    debug_subtext("S=2");
                },
                slide_left_1_2 = @install() {
                    debug_subtext("S=3");
                },
                slide_right_1_1 = @install() {
                    debug_subtext("S=4");
                },
                slide_right_1_2 = @install() {
                    debug_subtext("S=5");
                },
                slide_right_5_3 = @install() {
                    debug_subtext("S=6");
                },
                slide_right_5_2 = @install() {
                    debug_subtext("S=7");
                },
                slide_right_5_1 = @install() {
                    debug_subtext("S=8");
                },
                slide_right_3 = @install() {
                    debug_subtext("S=9");
                },

                slide_right_2 = @install() {
                    debug_subtext("S=10");
                },
                slide_right_bottom = @install() {
                    debug_subtext("S=11");
                },
                slide_left_bottom = @install() {
                    debug_subtext("S=12");
                },
                slide_left_1_3 = @install() {
                    debug_subtext("S=13");
                },
                slide_right_1_3 = @install() {
                    debug_subtext("S=14");
                },
                slide_right_4_3 = @install() {
                    debug_subtext("S=15");
                },
                slide_right_4_2 = @install() {
                    debug_subtext("S=16");
                },
                slide_right_1_4 = @install() {
                    debug_subtext("S=17");
                },
                slide_left_1_4 = @install() {
                    debug_subtext("S=18");
                },
                slide_left_2_2 = @install() {
                    debug_subtext("S=19");
                },

                slide_left_3 = @install() {
                    debug_subtext("S=20");
                },
                slide_left_4 = @install() {
                    debug_subtext("S=21");
                },
                slide_left_5_2 = @install() {
                    debug_subtext("S=22");
                },
                slide_left_5_1 = @install() {
                    debug_subtext("S=23");
                },
                exit_south = @install() {
                    debug_subtext("S=24");

                    if(SOULS_MEMORY.DEAD_DOUBLE_THRAXX) {
                        map_transition(bugmuck, dungeon_south, SOUTH);
                    } else {
                        error_wrong_side(NORTH);
                    }
                },
                exit_north = @install() {
                    debug_subtext("S=25");
                    map_transition(bbm_2, level_0_south, NORTH);
                },
                trap_1_3_east = @install() {
                    debug_subtext("S=26");

                    collapse_bridge(0x00);
                },
                trap_2_4_east = @install() {
                    debug_subtext("S=27");

                    collapse_bridge(0x01);
                },
                trap_2_4_north = @install() {
                    debug_subtext("S=28");

                    collapse_bridge(0x02);
                },
                trap_3_4_north = @install() {
                    debug_subtext("S=29");

                    collapse_bridge(0x08);
                },

                trap_4_4_north = @install() {
                    debug_subtext("S=30");

                    collapse_bridge(0x0a);
                },
                trap_6_3_north = @install() {
                    debug_subtext("S=31");

                    // collapse_bridge(0x0f);
                },
                trap_6_1_north_2 = @install() {
                    debug_subtext("S=32");

                    collapse_bridge(0x0e);
                },
                trap_6_1_north_1 = @install() {
                    debug_subtext("S=33");

                    collapse_bridge(0x0e);
                },
                trap_6_0_east = @install() {
                    debug_subtext("S=34");

                    collapse_bridge(0x0d);
                },
                trap_5_1_north = @install() {
                    debug_subtext("S=35");

                    collapse_bridge(0x0c);
                },
                trap_3_0_north = @install() {
                    debug_subtext("S=36");

                    collapse_bridge(0x06);
                },
                trap_3_0_east = @install() {
                    debug_subtext("S=37");

                    collapse_bridge(0x05);
                },
                trap_3_2_north = @install() {
                    debug_subtext("S=38");

                    collapse_bridge(0x07);
                },
                trap_3_2_east = @install() {
                    debug_subtext("S=39");

                    collapse_bridge(0x09);
                },

                trap_2_0_east = @install() {
                    debug_subtext("S=40");

                    collapse_bridge(0x04);
                },
                trap_1_0_north = @install() {
                    debug_subtext("S=41");

                    collapse_bridge(0x03);
                },
            }

            enum b_trigger {
                sniff__1_water = @install() {
                    debug_subtext("B=0");
                    _loot(0x10, WATER, 0d01, 0d00);
                },
                sniff__1_water = @install() {
                    debug_subtext("B=1");
                    _loot(0x11, WATER, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=2");
                    _loot(0x12, CLAY, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=3");
                    _loot(0x13, CLAY, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=4");
                    _loot(0x14, CLAY, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=5");
                    _loot(0x15, CLAY, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=6");
                    _loot(0x16, CLAY, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=7");
                    _loot(0x17, CLAY, 0d01, 0d00);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=8");
                    _loot(0x18, ROOTS, 0d01, 0d00);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=9");
                    _loot(0x19, ROOTS, 0d01, 0d00);
                },

                sniff__1_roots = @install() {
                    debug_subtext("B=10");
                    _loot(0x1a, ROOTS, 0d01, 0d00);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=11");
                    _loot(0x1b, ROOTS, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=12");
                    _loot(0x1c, OIL, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=13");
                    _loot(0x1d, OIL, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=14");
                    _loot(0x1e, OIL, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=15");
                    _loot(0x1f, OIL, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=16");
                    _loot(0x20, OIL, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=17");
                    _loot(0x21, OIL, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=18");
                    _loot(0x22, OIL, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=19");
                    _loot(0x23, OIL, 0d01, 0d00);
                },

                sniff__1_ash = @install() {
                    debug_subtext("B=20");
                    _loot(0x24, ASH, 0d01, 0d00);
                },
                sniff__1_ash = @install() {
                    debug_subtext("B=21");
                    _loot(0x25, ASH, 0d01, 0d00);
                },
                sniff__1_ash = @install() {
                    debug_subtext("B=22");
                    _loot(0x26, ASH, 0d01, 0d00);
                },
                sniff__1_ash = @install() {
                    debug_subtext("B=23");
                    _loot(0x27, ASH, 0d01, 0d00);
                },
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // north
                    add_enemy(SPIDER_YELLOW, 0d51, 0d33);

                    // center
                    add_enemy(SPIDER_YELLOW, 0d47, 0d94);

                    add_enemy(SPIDER_YELLOW, 0d73, 0d86);

                    // south
                    add_enemy(MAGGOT, 0d52, 0d129);

                    add_enemy(MAGGOT, 0d36, 0d126);

                    add_enemy(SPIDER_YELLOW, 0d70, 0d124);
                }

                if!(SOULS_MEMORY.DEAD_DOUBLE_THRAXX) {
                    add_enemy(LANTERN_LIGHT, 0d49, 0d159, INACTIVE);
                    attribute(LAST_ENTITY, ROOT, True);
                    attach_script(LAST_ENTITY, DAMAGE, reference(@install() {
                        if(<ACTIVE> != <BOY>) {
                            end();
                        }
                        
                        // fake_b();

                        if!(<BOY>[FLAGS_4] & ATTRIBUTE_FLAGS.ROOT) {
                            // attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, True);

                            collapse_bridge();
                        }
                    }));
                }

                default_init_room(False, False);
            }
        };

        map bbm_2(BBM_2) {
            enum entrance {
                level_0_east = entrance(0x39, 0x20, WEST),
                level_0_south = entrance(0x1c, 0x5b, NORTH),
                level_0_west = entrance(0x01, 0x20, EAST),

                level_1_east = entrance(0x39, 0x32, WEST),
                level_1_west = entrance(0x01, 0x32, EAST),

                level_2_north = entrance(0x1d, 0x05, SOUTH),
                level_2_east = entrance(0x39, 0x44, WEST),
                level_2_west = entrance(0x01, 0x44, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BUG_DUNGEON.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_level_0_west = @install() {
                    debug_subtext("S=0");
                    map_transition(bugmuck, dungeon_west_3, WEST);
                },
                exit_level_1_west = @install() {
                    debug_subtext("S=1");
                    map_transition(bugmuck, dungeon_west_2, WEST);
                },
                exit_level_2_west = @install() {
                    debug_subtext("S=2");
                    map_transition(bugmuck, dungeon_west_1, WEST);
                },
                exit_level_2_east = @install() {
                    debug_subtext("S=3");
                    map_transition(bugmuck, dungeon_east_3, EAST);
                },
                exit_level_1_east = @install() {
                    debug_subtext("S=4");
                    map_transition(bugmuck, dungeon_east_2, EAST);
                },
                exit_level_0_east = @install() {
                    debug_subtext("S=5");
                    map_transition(bugmuck, dungeon_east_1, EAST);
                },
                exit_level_2_north = @install() {
                    debug_subtext("S=6");

                    fog_wall_outside((!SOULS_MEMORY.DEAD_DOUBLE_THRAXX) && SOULS_MEMORY.PROGRESS_DOUBLE_THRAXX, SOUTH);
                    map_transition(thraxx, south, NORTH);
                },
                exit_level_0_south = @install() {
                    debug_subtext("S=7");
                    map_transition(bbm_1, north, SOUTH);
                },
            }

            enum b_trigger {
                sniff__1_water = @install() {
                    debug_subtext("B=0");
                    _loot(0x00, WATER, 0d01, 0d00);
                },
                sniff__1_water = @install() {
                    debug_subtext("B=1");
                    _loot(0x01, WATER, 0d01, 0d00);
                },
                sniff__1_water = @install() {
                    debug_subtext("B=2");
                    _loot(0x02, WATER, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=3");
                    _loot(0x03, CLAY, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=4");
                    _loot(0x04, CLAY, 0d01, 0d00);
                },
                sniff__1_clay = @install() {
                    debug_subtext("B=5");
                    _loot(0x05, CLAY, 0d01, 0d00);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=6");
                    _loot(0x06, ROOTS, 0d01, 0d00);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=7");
                    _loot(0x07, ROOTS, 0d01, 0d00);
                },
                sniff__1_roots = @install() {
                    debug_subtext("B=8");
                    _loot(0x08, ROOTS, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=9");
                    _loot(0x09, OIL, 0d01, 0d00);
                },

                sniff__1_oil = @install() {
                    debug_subtext("B=10");
                    _loot(0x0a, OIL, 0d01, 0d00);
                },
                sniff__1_oil = @install() {
                    debug_subtext("B=11");
                    _loot(0x0b, OIL, 0d01, 0d00);
                },
            }

            fun trigger_enter() {
                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    // north-lvl3
                    add_enemy(SPIDER_YELLOW, 0d13, 0d20);

                    // south-lvl3
                    add_enemy(MAGGOT_RED, 0d14, 0d57);

                    add_enemy(SPIDER_YELLOW, 0d28, 0d68);

                    // center-lvl2
                    add_enemy(SPIDER_YELLOW, 0d22, 0d50);

                    // north-lvl1
                    add_enemy(MAGGOT_RED, 0d27, 0d33);
                }

                default_init_room(False, False);
            }
        };

        map thraxx(THRAXX) {
            enum ROOM {
                TRIGGER_BOSS = memory(FLAG, TEMP),
            }

            enum entrance {
                north = entrance(0x18, 0x10, SOUTH),
                south = entrance(0x17, 0x3f, NORTH, { ROOM.TRIGGER_BOSS = True; }),
                
                spider = entrance(0d22, 0d56, NONE, {
                    ROOM.TRIGGER_BOSS = True;

                    spider_drop(<BOY>, 0d1, 0d63);
                    spider_drop(<DOG>, 0d46, 0d63);
                }),
            }

            enum soundtrack {
                default = soundtrack(AREA_BUG_DUNGEON.MUSIC, 0xff)
            }

            group boss_ai() {
                enum BOSS {
                    DEBUG = True,
                    DEBUG_CAGE = False,

                    // PROGRESS = memory(FLAG, TEMP),

                    ARM_LEFT_X = 0d152,
                    ARM_LEFT_Y = 0d112,

                    ARM_RIGHT_X = 0d232,
                    ARM_RIGHT_Y = 0d104,

                    HEART_ID = memory(WORD, TEMP),
                    HEART_2_ID = memory(WORD, TEMP),

                    ARM_LEFT_ID = memory(WORD, TEMP),
                    ARM_LEFT_2_ID = memory(WORD, TEMP),

                    ARM_RIGHT_ID = memory(WORD, TEMP),
                    ARM_RIGHT_2_ID = memory(WORD, TEMP),

                    KNOCKBACK_DAMAGE = 0d3,

                    CAGE_OPEN = memory(FLAG, TEMP),
                    CAGE_BROKEN = memory(FLAG, TEMP),
                    CAGE_B_DAMAGE = 0d2 + randrange(0d2),
                    CAGE_OPEN_THRESHOLD = 0d10,
                    CAGE_BROKEN_THRESHOLD = 0d100,

                    CAGE_DAMAGE = memory(WORD, TEMP),
                    CAGE_DAMAGE_TOTAL = memory(WORD, TEMP),
                    CAGE_OPEN_TIMER = memory(WORD, TEMP),
                }

                fun fog_wall(exit_direction:DIRECTION) {
                    fog_wall_inside((!SOULS_MEMORY.DEAD_DOUBLE_THRAXX) && SOULS_MEMORY.PROGRESS_DOUBLE_THRAXX, exit_direction);
                }

                fun open_thraxx_mouth(open) {
                    if(open) {
                        tile_animate(0x02, 0xff, 0x01);
                    } else {
                        tile_animate(0x02, 0xff, 0x00);
                    }
                }
                fun open_thraxx_rip_cage(value) {
                    tile_animate(0x01, 0xff, value); // 1=closed, 2=half_open, 3=open)
                }
                fun glow_thraxx_eys(value) {
                    tile_animate(0x03, 0xff, 0x00);
                }
                fun roar() {
                    sound(THRAXX_DAMAGE);
                }

                fun open_cage(open) {
                    if(BOSS.DEBUG && BOSS.DEBUG_CAGE) {
                        MEMORY.STRING_PARAMETER_1 = open;
                        subtext("cage = [MEM1]");
                    }
                    BOSS.CAGE_OPEN = open;

                    if(open) {
                        object[0x00] = 0x00; // change rip_entrance (0=open, 1=closed, 2=gone)
                        open_thraxx_rip_cage(0d3);
                    } else {
                        object[0x00] = 0x01; // change rip_entrance (0=open, 1=closed, 2=gone)
                        open_thraxx_rip_cage(0d1);
                    }
                }

                fun show_thraxx(show) {
                    if(show) {
                        object[0x00] = 0x00; // change rip_entrance (0=open, 1=closed, 2=gone)
                        object[0x01] = 0x00; // change body (0=present, 1=cocoon, 2=gone)
                        object[0x02] = 0x00; // change rip_entrance_right (0=present, 1=gone)
                        object[0x03] = 0x00; // change rip_entrance_left (0=present, 1=gone)
                    } else {
                        object[0x00] = 0x02; // change rip_entrance (0=open, 1=closed, 2=gone)
                        object[0x01] = 0x02; // change body (0=present, 1=cocoon, 2=gone)
                        object[0x02] = 0x01; // change rip_entrance_right (0=present, 1=gone)
                        object[0x03] = 0x01; // change rip_entrance_left (0=present, 1=gone)
                    }
                }

                fun boss_defeated() {
                    SOULS_MEMORY.PROGRESS_DOUBLE_THRAXX = False;
                    // yield();

                    destroy(BOSS.HEART_ID);
                    destroy(BOSS.HEART_2_ID);

                    destroy(BOSS.ARM_LEFT_ID);
                    destroy(BOSS.ARM_LEFT_2_ID);

                    destroy(BOSS.ARM_RIGHT_ID);
                    destroy(BOSS.ARM_RIGHT_2_ID);
                    
                    souls_boss_defeated(DEAD_DOUBLE_THRAXX, REWARD_DOUBLE_THRAXX);
                }

                @install()
                @async()
                fun double_hit_check() {
                    while(alive(BOSS.HEART_ID)) {
                        if((BOSS.HEART_ID[GENERAL_PURPOSE] > 0d0) && (BOSS.HEART_2_ID[GENERAL_PURPOSE] > 0d0)) {
                            if(BOSS.DEBUG) {
                                subtext("double hit");
                            }

                            MEMORY.MAP_PALETTE = 0x03;
                        }

                        BOSS.HEART_ID[GENERAL_PURPOSE] = 0d00;
                        BOSS.HEART_2_ID[GENERAL_PURPOSE] = 0d00;

                        sleep(0d01);
                    }
                }

                @install()
                fun knockback(heart:CHARACTER, entity:CHARACTER, damage, with_sound) {
                    if(BOSS.DEBUG) {
                        debug_subtext("heart triggered");
                    }

                    open_thraxx_mouth(True);
                    // open_thraxx_rip_cage(0d3);
                    BOSS.CAGE_OPEN_TIMER = 0d75;

                    control(entity, True);

                    heart[GENERAL_PURPOSE] += 0d1;

                    arg[0x10] = heart[HP];
                    arg[0x12] = heart[GENERAL_PURPOSE] * (rand(0x9) + 0d1);

                    damage(heart, arg[0x12], True);
                    sleep(0d21);
                    // maggot
                    sleep(0d29);

                    if(arg[0x12] < arg[0x10]) {
                        control(NONE);

                        face(entity, NORTH);
                        animate(entity, FREEZE, KNOCKBACK);
                        attribute(entity, ROOT, True);
                        attribute(entity, UNKNOWN_2_1, True);

                        while(arg[0x14] <= 0d6) {
                            arg[0x14] += 0d1;

                            arg[0x16] = 0d0;
                            while(arg[0x16] < 0d7) {
                                arg[0x16] += 0d1;

                                teleport_relative(entity, 0d0, arg[0x14]);
                                yield();
                            }
                        }

                        animate(entity, ONCE, KNOCKBACK);
                        attribute(entity, ROOT, False);
                        attribute(entity, UNKNOWN_2_1, False);

                        damage(entity, damage, True);
                        // control(BOTH);

                        if(with_sound) {
                            roar();
                        }
                    }

                    control(BOTH);

                    open_thraxx_mouth(False);

                    // open_thraxx_rip_cage(0d1);
                }

                @install()
                fun thraxx_trigger() {
                    // <SCRIPT_OWNER>[GENERAL_PURPOSE]++;

                    MEMORY.MAP_PALETTE = 0x00;

                    BOSS.ARM_LEFT_2_ID[X] = 0d00;
                    BOSS.ARM_LEFT_2_ID[Y] = 0d00;

                    BOSS.ARM_LEFT_ID[X] = BOSS.ARM_LEFT_X;
                    BOSS.ARM_LEFT_ID[Y] = BOSS.ARM_LEFT_Y;

                    BOSS.ARM_RIGHT_2_ID[X] = 0d00;
                    BOSS.ARM_RIGHT_2_ID[Y] = 0d00;

                    BOSS.ARM_RIGHT_ID[X] = BOSS.ARM_RIGHT_X;
                    BOSS.ARM_RIGHT_ID[Y] = BOSS.ARM_RIGHT_Y;

                    if(alive(<SCRIPT_OWNER>)) {
                        knockback(<SCRIPT_OWNER>, <ACTIVE>, BOSS.KNOCKBACK_DAMAGE);
                    } else {
                        boss_defeated();
                    }
                }
                @install()
                fun thraxx2_trigger() {
                    // <SCRIPT_OWNER>[GENERAL_PURPOSE]++;

                    MEMORY.MAP_PALETTE = 0x07;
                    
                    BOSS.ARM_LEFT_ID[X] = 0d00;
                    BOSS.ARM_LEFT_ID[Y] = 0d00;

                    BOSS.ARM_LEFT_2_ID[X] = BOSS.ARM_LEFT_X;
                    BOSS.ARM_LEFT_2_ID[Y] = BOSS.ARM_LEFT_Y;
                    
                    BOSS.ARM_RIGHT_ID[X] = 0d00;
                    BOSS.ARM_RIGHT_ID[Y] = 0d00;

                    BOSS.ARM_RIGHT_2_ID[X] = BOSS.ARM_RIGHT_X;
                    BOSS.ARM_RIGHT_2_ID[Y] = BOSS.ARM_RIGHT_Y;

                    debug_memory(BOSS.HEART_2_ID[GENERAL_PURPOSE], BOSS.HEART_ID[GENERAL_PURPOSE]);

                    knockback(<SCRIPT_OWNER>, <ACTIVE>, BOSS.KNOCKBACK_DAMAGE);
                }


                @install()
                @async()
                fun cage_tracker() {
                    open_cage(False);

                    while!(BOSS.CAGE_BROKEN) {
                        if!(SOULS_MEMORY.PROGRESS_DOUBLE_THRAXX) {
                            show_thraxx(False);
                            end();
                        }

                        if(BOSS.CAGE_OPEN_TIMER > 0d0) {
                            BOSS.CAGE_OPEN_TIMER--;

                            if!(BOSS.CAGE_OPEN) {
                                open_cage(True);
                            }
                        } else {
                            if(BOSS.CAGE_OPEN) {
                                open_cage(False);
                            }
                        }
                        
                        yield();
                    }

                    open_cage(True);
                }

                fun cage_triggered() {
                    arg[0x10] = BOSS.CAGE_B_DAMAGE;
                    BOSS.CAGE_DAMAGE += arg[0x10];
                    BOSS.CAGE_DAMAGE_TOTAL += arg[0x10];

                    if(MEMORY.MAP_PALETTE == 0d0) {
                        damage(BOSS.HEART_ID, arg[0x10], True);
                    } else {
                        damage(BOSS.HEART_2_ID, arg[0x10], True);
                    }

                    if(BOSS.CAGE_DAMAGE_TOTAL > BOSS.CAGE_BROKEN_THRESHOLD) {
                        BOSS.CAGE_BROKEN = True;
                    } else if(BOSS.CAGE_DAMAGE > BOSS.CAGE_OPEN_THRESHOLD) {
                        BOSS.CAGE_DAMAGE = 0d0;

                        BOSS.CAGE_OPEN_TIMER = 0d200;
                    }
                }
                
                fun add_boss() {
                    show_thraxx(True);
                    // show_cocoon();

                    // add_enemy(ENEMY.THRAXX2_HEART, 0d26, 0d20);
                    add_enemy(ENEMY.THRAXX_HEART, 0d26, 0d20);
                    <LAST_ENTITY>[GENERAL_PURPOSE] = 0d0;
                    attach_script(LAST_ENTITY, DAMAGE_DEATH, reference(thraxx2_trigger));
                    BOSS.HEART_2_ID = <LAST_ENTITY>;
                    add_enemy(ENEMY.THRAXX_HEART, 0d22, 0d20);
                    <LAST_ENTITY>[GENERAL_PURPOSE] = 0d0;
                    attach_script(LAST_ENTITY, DAMAGE_DEATH, reference(thraxx_trigger));
                    BOSS.HEART_ID = <LAST_ENTITY>;

                    add_enemy(ENEMY.THRAXX_LEFT_ARM, 0d19, 0d14);
                    BOSS.ARM_LEFT_ID = <LAST_ENTITY>;
                    add_enemy(ENEMY.THRAXX_RIGHT_ARM, 0d29, 0d13);
                    BOSS.ARM_RIGHT_ID = <LAST_ENTITY>;

                    add_enemy(ENEMY.THRAXX2_LEFT_ARM, 0d0, 0d0);
                    BOSS.ARM_LEFT_2_ID = <LAST_ENTITY>;
                    add_enemy(ENEMY.THRAXX2_RIGHT_ARM, 0d0, 0d0);
                    BOSS.ARM_RIGHT_2_ID = <LAST_ENTITY>;

                    cage_tracker();

                    // double_hit_check();

                    // sleep(0d30);
                    // debug_memory(BOSS.HEART_ID[GENERAL_PURPOSE], BOSS.HEART_2_ID[GENERAL_PURPOSE]);
                }
            };

            enum stepon_trigger {
                exit_north = @install() {
                    debug_subtext("S=0");

                    if(SOULS_MEMORY.DEAD_DOUBLE_THRAXX) {
                        fog_wall(SOUTH);
                        map_transition(bugmuck, dungeon_north, NORTH);
                    } else {
                        error_wrong_side(SOUTH);
                    }
                },
                trigger_boss = @install() {
                    debug_subtext("S=1");

                    if!(SOULS_MEMORY.DEAD_DOUBLE_THRAXX) {
                        if(ROOM.TRIGGER_BOSS && (!SOULS_MEMORY.DEAD_DOUBLE_THRAXX)) {
                            SOULS_MEMORY.PROGRESS_DOUBLE_THRAXX = True;
                            push_music(BOSS_DRUMS);

                            add_boss();
                        } else {
                            show_thraxx(True);
                            open_thraxx_mouth(True);
                            open_thraxx_rip_cage(0d3);
                            glow_thraxx_eys(0d0);
                        }
                    }
                },
                exit_south = @install() {
                    debug_subtext("S=2");

                    fog_wall(NORTH);
                    map_transition(bbm_2, level_2_north, SOUTH);
                }
            }

            enum b_trigger {
                cocoon = @install() {
                    debug_subtext("B=0");
                },
                rip_cage = @install() {
                    debug_subtext("B=1");

                    cage_triggered();
                }
            }

            fun show_cocoon(show) {
                if(show) {
                    object[0x01] = 0x01;
                } else {
                    object[0x01] = 0x00;
                }
            }

            fun trigger_enter() {
                CUSTOM_FLAG.NO_DOG = True;
                show_thraxx(False);

                default_init_room(False, False);
            }
        };
    };

    area desert() {
        enum AREA_DESERT {
            MUSIC = MUSIC.WING_AMBIENT_VOID,
        }

        map desert(DESERT) {
            enum ROOM {
                DEBUG = True,
                WITH_WRAP = True,
                
                X_MAX = 0d7,
                Y_MAX = 0d6,

                DAMAGE_TIME = 0d60, // 0d720,
                DAMAGE_TICK = 0d5,

                ID_SHIP_SOUTH = memory(WORD, TEMP),
                ID_SHIP_NORTH = memory(WORD, TEMP),
                ID_ALCHEMIST = memory(WORD, TEMP),

                HAS_OASIS = memory(FLAG, TEMP),
                HAS_SHIP_NORTH = memory(FLAG, TEMP),
                HAS_SHIP_SOUTH = memory(FLAG, TEMP),
                HAS_ALCHEMIST = memory(FLAG, TEMP),
            }

            enum soundtrack {
                default = soundtrack(AREA_DESERT.MUSIC, 0xff)
            }

            fun enter_sandpit() {
                desert_screen(0d4, ROOM.Y_MAX);
                // enter_sandpit();

                <BOY>[GENERAL_PURPOSE] = 0d2;
                <DOG>[GENERAL_PURPOSE] = 0d2;
                object[0x03] = 0x7e;

                _teleport(BOY, <BOY>[X], <BOY>[Y]);
                _teleport(DOG, <DOG>[X], <DOG>[Y]);
            }

            enum entrance {
                test = entrance(0d60, 0d146, NONE, { desert_screen(0d4, 0d0); }),

                north = entrance(0x3b, 0x19, WEST, { desert_screen(0d4, ROOM.Y_MAX); }),
                south = entrance(0x49, 0xc7, NORTH, { desert_screen(0d4, 0d0); }),

                swirl_secret = entrance(0d28, 0d47, NONE, { enter_sandpit(); }),
            }

            fun show_oasis(show) {
                if(show) {
                    object[0x00] = 0x01; // show oasis
                } else {
                    object[0x00] = 0x00; // show oasis
                }
            }

            fun add_skeleton_ship(id, object_id, x, y) {
                add_placeholder(SKELETON_SHIP_2, x, y, ONCE_FREEZE);
                id = <LAST_ENTITY>;
                animate(LAST_ENTITY, FREEZE, ANIMATION_PLACEHOLDER.SKELETON_SHIP_2);

                if(object_id == 0d1) {
                    object[0x01] = 0x01; // add ship_south_hitbox
                } else if(object_id == 0d2) {
                    object[0x02] = 0x00; // remove ship_north_hitbox
                }
            }
            fun remove_skeleton_ship(id, object_id) {
                destroy(id);

                if(object_id == 0d1) {
                    object[0x01] = 0x00; // add ship_south_hitbox
                } else if(object_id == 0d2) {
                    object[0x02] = 0x01; // remove ship_north_hitbox
                }
            }

            fun add_alchemist(x, y) {
                add_enemy(VILLAGER_2_8, x, y, INACTIVE);
                ROOM.ID_ALCHEMIST = <LAST_ENTITY>;
                face(LAST_ENTITY, SOUTH);
            }
            fun remove_alchemist(id) {
                destroy(id);
            }

            @install()
            fun update_desert() {
                arg[0x00] = MEMORY.DESERT_X;
                arg[0x02] = MEMORY.DESERT_Y;

                if(ROOM.DEBUG) {
                    debug_memory(arg[0x00], arg[0x02]);
                }

                ROOM.HAS_OASIS = False;
                ROOM.HAS_SHIP_NORTH = False;
                ROOM.HAS_SHIP_SOUTH = False;
                ROOM.HAS_ALCHEMIST = False;

                if(arg[0x02] == 0d0) {
                    if(arg[0x00] == 0d4) {
                        ROOM.HAS_OASIS = True;
                        ROOM.HAS_SHIP_SOUTH = True;
                    } else if(arg[0x00] == 0d7) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d1) {
                    if(arg[0x00] == 0d2) {
                        ROOM.HAS_OASIS = True;
                    } else if(arg[0x00] == 0d5) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d2) {
                    if(arg[0x00] == 0d4) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d3) {
                    if(arg[0x00] == 0d3) {
                        ROOM.HAS_OASIS = True;
                    } else if(arg[0x00] == 0d6) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d4) {
                    if(arg[0x00] == 0d5) {
                        ROOM.HAS_OASIS = True;
                        ROOM.HAS_ALCHEMIST = True;
                    }
                } else if(arg[0x02] == 0d5) {
                    if(arg[0x00] == 0d3) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d6) {
                    if(arg[0x00] == 0d4) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d7) {
                    if(arg[0x00] == 0d1) {
                        ROOM.HAS_OASIS = True;

                    } else if(arg[0x00] == 0d6) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d8) {
                    nop();
                } else if(arg[0x02] == 0d9) {
                    if(arg[0x00] == 0d2) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d10) {
                    if(arg[0x00] == 0d4) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d11) {
                    if(arg[0x00] == 0d6) {
                        ROOM.HAS_OASIS = True;
                        ROOM.HAS_ALCHEMIST = True;
                    }
                } else if(arg[0x02] == 0d12) {
                    if(arg[0x00] == 0d3) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d13) {
                    nop();
                } else if(arg[0x02] == 0d14) {
                    if(arg[0x00] == 0d2) {
                        ROOM.HAS_OASIS = True;
                    } else if(arg[0x00] == 0d5) {
                        ROOM.HAS_OASIS = True;
                    }
                } else if(arg[0x02] == 0d15) {
                    nop();
                } else if(arg[0x02] == 0d16) {
                    nop();
                } else if(arg[0x02] == 0d17) {
                    if(arg[0x00] == 0d4) {
                        ROOM.HAS_SHIP_NORTH = True;
                    }
                }

                if(ROOM.HAS_OASIS) {
                    show_oasis(True);
                } else {
                    show_oasis(False);
                }

                if(ROOM.HAS_SHIP_SOUTH) {
                    add_skeleton_ship(ROOM.ID_SHIP_SOUTH, 0d1, 0x45, 0x94);
                } else {
                    remove_skeleton_ship(ROOM.ID_SHIP_SOUTH, 0d1);
                }

                if(ROOM.HAS_SHIP_NORTH) {
                    add_skeleton_ship(ROOM.ID_SHIP_NORTH, 0d2, 0x45, 0x35);
                } else {
                    remove_skeleton_ship(ROOM.ID_SHIP_NORTH, 0d2);
                }

                if(ROOM.HAS_ALCHEMIST) {
                    add_alchemist(0x51, 0x9f);
                } else {
                    remove_alchemist(ROOM.ID_ALCHEMIST);
                }
            }

            @install()
            fun scroll_desert_north() {
                if(ROOM.WITH_WRAP) {
                    if(MEMORY.DESERT_Y < ROOM.Y_MAX) {
                        MEMORY.DESERT_Y++;

                        teleport_screen(0d0, 0d2);
                        update_desert();
                    }
                }
            }
            @install()
            fun scroll_desert_east() {
                if(ROOM.WITH_WRAP) {
                    if(MEMORY.DESERT_X < ROOM.X_MAX) {
                        MEMORY.DESERT_X++;
                    } else {
                        MEMORY.DESERT_X = 0d0;
                    }

                    teleport_screen(-0d2, 0d0);
                    update_desert();
                }
            }
            @install()
            fun scroll_desert_south() {
                if(ROOM.WITH_WRAP) {
                    if(MEMORY.DESERT_Y > 0d0) {
                        MEMORY.DESERT_Y--;

                        teleport_screen(0d0, -0d2);
                        update_desert();
                    }
                }
            }
            @install()
            fun scroll_desert_west() {
                if(ROOM.WITH_WRAP) {
                    if(MEMORY.DESERT_X > 0d0) {
                        MEMORY.DESERT_X--;
                    } else {
                        MEMORY.DESERT_X = ROOM.X_MAX;
                    }

                    teleport_screen(0d2, 0d0);
                    update_desert();
                }
            }

            @install()
            fun exit_south() {
                debug_subtext("S=8/9");

                map_transition(bugmuck, north_1, SOUTH);
            }

            @install()
            @async()
            fun fake_exit_scanner(entity) {
                conditional_range_checker(entity, <ACTIVE>, 0x20, 0x20, arg[0x02][GENERAL_PURPOSE] >= 0d2, {
                    vanilla_desert_sandpit_out(0d21, 0d43);
                });
            }

            enum stepon_trigger {
                sand_pit = @install() {
                    debug_subtext("S=0");

                    vanilla_desert_sandpit({
                        if(arg[0x10] == 0d120) {
                            <BOY>[GENERAL_PURPOSE] = 0d2;

                            vanilla_desert_sandpit_in(0d21 + 0d1, 0d47);
                        }
                    });
                },
                wrap_north_4 = scroll_desert_north(),
                wrap_north_3 = scroll_desert_north(),
                wrap_north_2 = scroll_desert_north(),
                wrap_north_1 = scroll_desert_north(),
                ship_north = @install() {
                    debug_subtext("S=5");
                },
                ship_south = @install() {
                    debug_subtext("S=6");
                },
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_south_1 = exit_south(),
                exit_south_2 = exit_south(),

                wrap_west_1 = scroll_desert_west(),
                wrap_east_2 = scroll_desert_east(),
                wrap_east_1 = scroll_desert_east(),
                wrap_west_2 = scroll_desert_west(),
                wrap_south_2 = scroll_desert_south(),
                wrap_south_1 = scroll_desert_south(),
                oasis = @install() {
                    debug_subtext("S=16");

                    if(ROOM.HAS_OASIS) {
                        full_heal(BOY, False);
                        full_heal(DOG, False);
                    }
                },
                exit_nobilia = @install() {
                    debug_subtext("S=17");

                    if(MEMORY.DESERT_Y != ROOM.Y_MAX) {
                        teleport_screen(0d0, 0d2);
                    }

                    map_transition(desert_temple_main, west_2, EAST);
                },
                swirl_secret = @install() {
                    debug_subtext("S=18");

                    map_transition(desert_cave, south, NONE);
                },
            }

            fun is_in_oasis(char:CHARACTER, callback) {
                //if((<BOY>[X] > 0d536) && (<BOY>[X] < (0d752)) && (<BOY>[Y] > 0d1216) && (<BOY>[Y] < 0d1392)) {
                if((<BOY>[X] > 0d536) && (<BOY>[X] < (0d752)) && (<BOY>[Y] > 0d1216) && (<BOY>[Y] < 0d1408)) {
                        nop();
                } else {
                    callback();
                }
            }
            fun desert_damage() {
                while(True) {
                    sleep(ROOM.DAMAGE_TIME);

                    is_in_oasis(BOY, {
                        damage(BOY, ROOM.DAMAGE_TICK, True, True);
                    });
                    is_in_oasis(DOG, {
                        damage(DOG, ROOM.DAMAGE_TICK, True, True);
                    });
                }
            }

            fun trigger_enter() {
                // object[0x00] = 0x01; // show oasis
                // object[0x01] = 0x01; // add ship_south_hitbox
                // object[0x02] = 0x01; // remove ship_north_hitbox

                init_map(0x02, 0x00, 0xa6, 0xd8);

                default_init_room(False, False);
                
                update_desert();

                add_enemy(PLACEHOLDER, 0d21 - 0d4, 0d47);
                fake_exit_scanner(<LAST_ENTITY>);

                desert_damage();
            }
        };

        map desert_cave(PYRAMID_CAVE) {
            enum entrance {
                south = entrance(0x15, 0x23, NORTH),

                teleporter = entrance(0d23, 0d18, NONE, { teleporter_in(SOUTH); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_DESERT.MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_south = @install() {
                    map_transition(desert, swirl_secret, SOUTH);
                },
                exit_teleporter = @install() {
                    debug_subtext("S=1");

                    teleporter_out(0d23, 0d17);
                    map_transition(pyramid_cave, teleporter, NONE);
                },
            }

            fun trigger_enter() {
                fade_in();
            }
        };

        area desert_temple() {
            enum AREA_DESERT_TEMPLE {
                MUSIC = MUSIC.HALLS_3,
            }
            
            map desert_temple_main(HALLS_NE) {
                enum entrance {
                    west_1 = entrance(0x0d, 0x9f, EAST),

                    west_2 = entrance(0d4, 0d46, EAST),
                }

                enum soundtrack {
                    default = soundtrack(AREA_DESERT_TEMPLE.MUSIC, 0xff)
                }

                enum ROOM {
                    SECRET_PASSAGE_1_STONE_TOP = memory(WORD, TEMP),
                    SECRET_PASSAGE_1_STONE_BOTTOM = memory(WORD, TEMP),

                    SECRET_PASSAGE_1_OPENED = memory(FLAG, SRAM),
                    SECRET_PASSAGE_2_OPENED = memory(FLAG, SRAM),

                    SWITCH_1_ACTIVE = memory(FLAG, TEMP),
                    SWITCH_2_ACTIVE = memory(FLAG, SRAM),
                    
                    BRIDGE_ACTIVE = memory(FLAG, SRAM),

                    BRIDGE_REVEALED = memory(FLAG, SRAM),
                }

                fun times_gate_switch(flag, switch_id, gate_id, time) {
                    object_animator(SWITCH_GROUND_HALLS, False, switch_id, True, False);
                    object_animator(GATE_HALLS, False, gate_id, True, False);
                    flag = True;

                    if(time is Word) {
                        while(arg[0x10] < time) {
                            arg[0x10]++;

                            yield();
                        }

                        object_animator(SWITCH_GROUND_HALLS, False, switch_id, False, False);
                        object_animator(GATE_HALLS, False, gate_id, False, False);
                        flag = False;
                    }
                }
                fun spear_switch_triggered() {
                    ROOM.BRIDGE_ACTIVE = True;

                    object_animator(SWITCH_SPEAR_HALLS, False, 0x00, True, False);
                    object_animator(BRIDGE_HALLS, False, 0x01, True, False);
                }

                enum stepon_trigger {
                    spear_check = @install() {
                        debug_subtext("S=0");

                        if!(ROOM.BRIDGE_ACTIVE) {
                            guard_spear_2(SOUTH);

                            spear_switch_triggered();
                        }
                    },
                    pit_left_3 = @install() {
                        debug_subtext("S=1");
                    },
                    pit_right_1 = @install() {
                        debug_subtext("S=2");
                    },
                    pit_right_2 = @install() {
                        debug_subtext("S=3");
                    },
                    pit_left_1 = @install() {
                        debug_subtext("S=4");
                    },
                    pit_left_2 = @install() {
                        debug_subtext("S=5");
                    },
                    exit_west = @install() {
                        debug_subtext("S=6");

                        map_transition(desert_temple_stairs, door_upstairs, WEST);
                    },
                    retreat_bridge = @install() {
                        debug_subtext("S=7");
                    },
                    switch_ground_1 = @install() {
                        debug_subtext("S=8");

                        times_gate_switch(ROOM.SWITCH_1_ACTIVE, 0x05, 0x07, 0d0012 * 0d60);
                    },
                    switch_ground_2 = @install() {
                        debug_subtext("S=9");

                        times_gate_switch(ROOM.SWITCH_2_ACTIVE, 0x04, 0x06);
                    },

                    approach_bridge = @install() {
                        debug_subtext("S=10");
                    },
                    secret_passage_entrance_2 = @install() {
                        debug_subtext("S=11");
                    },
                    secret_passage_entrance_1 = @install() {
                        debug_subtext("S=12");
                    },
                    alchemist_top_2 = @install() {
                        debug_subtext("S=13");
                    },
                    alchemist_top_1 = @install() {
                        debug_subtext("S=14");
                    },
                    alchemist_bottom = @install() {
                        debug_subtext("S=15");
                    },
                    secret_passage_top = @install() {
                        debug_subtext("S=16");
                    },
                    secret_passage_balcony = @install() {
                        debug_subtext("S=17");
                    },
                }

                enum b_trigger {
                    gourd_north__4_wax = @install() {
                        debug_subtext("B=0");
                        _loot_chest(0x0d, LIMESTONE_TABLET, 0d01);
                    },
                    gourd_center__6_ash = @install() {
                        debug_subtext("B=1");
                        _loot_chest(0x0c, ASH, 0d06);
                    },
                    gourd_alchemist_2__5_wax = @install() {
                        debug_subtext("B=2");
                        _loot_chest(0x0b, LIMESTONE_TABLET, 0d01);
                    },
                    gourd_alchemist_1__4_brimstone = @install() {
                        debug_subtext("B=3");
                        _loot_chest(0x0a, LIMESTONE_TABLET, 0d01);
                    },
                    bridge_switch = @install() {
                        debug_subtext("B=4");

                        if!(ROOM.BRIDGE_ACTIVE) {
                            fake_b();

                            spear_switch_triggered();
                        }
                    },
                }

                @install()
                @async()
                fun fake_exit_scanner(entity) {
                    range_checker(entity, <ACTIVE>, 0x20, 0x20, {
                        map_transition(desert, north, WEST);
                    });
                }
                @install()
                @async()
                fun revealer_approached(entity) {
                    range_checker(entity, <ACTIVE>, 0d45, 0d45, {
                        subtext("!");
                    });
                }

                fun vanishing_stone_triggered(flag) {
                    flag = True;
                    destroy(SCRIPT_OWNER);
                    sound(WEIRD_SOUND);
                }
                fun add_vanishing_rock(x, y, stone_trigger) {
                    add_enemy(STONE_ROUND, x, y, INACTIVE_INVISIBLE);
                    // animate(LAST_ENTITY, LOOP, INVISIBLE);
                    attach_script(LAST_ENTITY, B, stone_trigger);
                }

                fun trigger_enter() {
                    // object[0x00] = 0x01; // activate bridge_switch
                    // object[0x01] = 0x7e; // activate bridge
                    // 2-3 ?
                    // object[0x04] = 0x01; // activate switch_ground_2
                    // object[0x05] = 0x01; // activate switch_ground_1
                    // object[0x06] = 0x01; // open gate_1
                    // object[0x07] = 0x01; // open gate_2
                    // object[0x08] = 0x01; // show bridge_1
                    // object[0x09] = 0x01; // show bridge_2
                    // object[0x0a] = 0x01; // loot gourd_alchemist_1
                    // object[0x0b] = 0x01; // loot gourd_alchemist_2
                    // object[0x0c] = 0x01; // loot gourd_center
                    // object[0x0d] = 0x01; // loot gourd_north

                    if(ROOM.BRIDGE_REVEALED) {
                        object_animator(REVEALER, False, 0x08, 0d2, True);
                    } else {
                        add_enemy(REVEALER_TARGET_ENTITY, 0d122, 0d82);

                        special_script(REVEALER, reference(@install() {
                            object_animator(REVEALER, False, 0x08, 0d2, False);

                            destroy(SCRIPT_OWNER);

                            ROOM.BRIDGE_REVEALED = True;
                        }));

                        revealer_approached(<LAST_ENTITY>);
                    }

                    if(True) {
                        restore_object_animator(SWITCH_SPEAR_HALLS, ROOM.BRIDGE_ACTIVE, 0x00);
                        restore_object_animator(BRIDGE_HALLS, ROOM.BRIDGE_ACTIVE, 0x01);

                        restore_object_animator(SWITCH_GROUND_HALLS, ROOM.SWITCH_2_ACTIVE, 0x04);
                        restore_object_animator(GATE_HALLS, ROOM.SWITCH_2_ACTIVE, 0x06);
                    }

                    add_enemy(PLACEHOLDER, 0d4, 0d46);
                    fake_exit_scanner(<LAST_ENTITY>);

                    default_init_room(False, False);

                    if!(ROOM.SECRET_PASSAGE_1_OPENED) {
                        add_vanishing_rock(0d42, 0d145, reference(@install() {
                            vanishing_stone_triggered(ROOM.SECRET_PASSAGE_1_OPENED);
                            destroy(ROOM.SECRET_PASSAGE_1_STONE_BOTTOM);
                        }));
                        ROOM.SECRET_PASSAGE_1_STONE_TOP = <LAST_ENTITY>;
                        add_vanishing_rock(0d42, 0d146, reference(@install() {
                            vanishing_stone_triggered(ROOM.SECRET_PASSAGE_1_OPENED);
                            destroy(ROOM.SECRET_PASSAGE_1_STONE_TOP);
                        }));
                        ROOM.SECRET_PASSAGE_1_STONE_BOTTOM = <LAST_ENTITY>;
                    }
                    if!(ROOM.SECRET_PASSAGE_2_OPENED) {
                        add_vanishing_rock(0d140, 0d163, reference(@install() {
                            vanishing_stone_triggered(ROOM.SECRET_PASSAGE_2_OPENED);
                        }));
                    }

                    add_placeholder(ANIMATION_ENEMY.KING_ROCKING, 0d182, 0d156);
                    attach_script(LAST_ENTITY, B, reference(@install() {
                        conversation(True, {
                            conversation_question("[SLOW]Can you swim?[CHOICE]yes…[CHOICE]no…");

                            if(MEMORY.QUESTION_ANSWER == 0d0) {
                                teleporter_animation_out(<ACTIVE>);
                                teleporter_animation_out(<INACTIVE>);

                                map_transition(pyramid, water, NONE);
                            } else {
                                nop();
                            }
                        });
                        
                        animate(SCRIPT_OWNER, LOOP, ANIMATION_ENEMY.KING_ROCKING);
                    }));

                    if(True) {
                        while(True) {
                            if!(<BOY>[CURRENT_GROUND] & 0xff) {
                                damage(BOY, 0d999, True);
                            }
                            if!(<DOG>[CURRENT_GROUND] & 0xff) {
                                damage(DOG, 0d999, True);
                            }

                            sleep(0d5);
                        }
                    }
                }
            };

            map desert_temple_underground(MEGATAUR) {
                enum entrance {
                    south = entrance(0x41, 0x53, NORTH)
                }

                enum soundtrack {
                    default = soundtrack(AREA_DESERT_TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_south = @install() {
                        debug_subtext("S=0");

                        fog_wall_inside(!SOULS_MEMORY.DEAD_UNNAMED_DESERT_TEMPLE_BOSS, NORTH);

                        map_transition(desert_temple_stairs, door_downstairs, SOUTH);
                    }
                }

                group boss_ai() {
                    enum BOSS {
                        DEBUG = False,

                        PROGRESS = memory(FLAG, TEMP),

                        ID_LEFT = memory(WORD, TEMP),
                        ID_RIGHT = memory(WORD, TEMP),

                        HP_LEFT = 0d500,
                        HP_RIGHT = 0d400,

                        CENTER_X = 0d64 * 0d0008,
                        CENTER_Y = 0d32 * 0d0008,

                        ANGLE_THRESHOLD = 0d2, // 0d8 = behind, 0d4 = side, 0s6 = inbetween
                        WITH_SIDE_HIT = False,

                        STONE_DAMAGE = 0d100,
                        STONE_STUN_TIME = 0d20 * 0d0060,
                    }

                    fun boss_defeated() {
                        souls_boss_defeated(DEAD_UNNAMED_DESERT_TEMPLE_BOSS, REWARD_UNNAMED_DESERT_TEMPLE_BOSS);

                        BOSS.PROGRESS = False;
                    }

                    fun check_defeat() {
                        debug_memory(BOSS.ID_LEFT[HP], BOSS.ID_RIGHT[HP]);

                        if(_dead(BOSS.ID_LEFT) && _dead(BOSS.ID_RIGHT)) {
                            boss_defeated();
                        }
                    }
                    @install()
                    fun boss_left_triggered() {
                        arg[0x10] = <SCRIPT_OWNER>[DAMAGE_TYPE];

                        // control(SCRIPT_OWNER, True);

                        if(arg[0x10]) {
                            // animate(SCRIPT_OWNER, ONCE, ANIMATION_ALL.DEFAULT);

                            arg[0x12] = <SCRIPT_OWNER>[FACE_DIRECTION];
                            face_target(<SCRIPT_OWNER>, arg[0x10]);
                            arg[0x14] = <SCRIPT_OWNER>[FACE_DIRECTION];

                            _face(<SCRIPT_OWNER>, arg[0x12]);

                            if(arg[0x12] >= arg[0x14]) {
                                arg[0x16] = arg[0x12] - arg[0x14];
                            } else {
                                arg[0x16] = arg[0x14] - arg[0x12];
                            }

                            if(arg[0x16] <= BOSS.ANGLE_THRESHOLD) {
                                if(arg[0x16] <= 0d2) {
                                    heal(SCRIPT_OWNER, 0d0, False);
                                    damage(SCRIPT_OWNER, 0d1, True);
                                } else {
                                    nop();
                                }

                                if(BOSS.DEBUG) {
                                    // subtext("bonk");
                                    debug_memory(arg[0x12], arg[0x14], arg[0x16]);
                                }
                            } else {
                                if(arg[0x16] <= 0d4) {
                                    nop();
                                } else {
                                    damage(SCRIPT_OWNER, 0d20, True);
                                }

                                if(BOSS.DEBUG) {
                                    subtext("hit");
                                }
                            }

                            if(False) {
                                debug_memory(arg[0x12], arg[0x14]);
                            }
                        }

                        // control(SCRIPT_OWNER, False);
                        
                        check_defeat();
                    }
                    @install()
                    fun boss_right_triggered() {
                        check_defeat();
                    }

                    fun walk_corner(entity, direction:FACE_DIRECTION) {
                        if(direction == FACE_DIRECTION.NORTH_EAST) {
                            walk(entity, TILE_ABSOLUTE, 0d78, 0d18, entity, NONE);
                        } else if(direction == FACE_DIRECTION.SOUTH_EAST) {
                            walk(entity, TILE_ABSOLUTE, 0d78, 0d47, entity, NONE);
                        } else if(direction == FACE_DIRECTION.SOUTH_WEST) {
                            walk(entity, TILE_ABSOLUTE, 0d50, 0d47, entity, NONE);
                        } else if(direction == FACE_DIRECTION.NORTH_WEST) {
                            walk(entity, TILE_ABSOLUTE, 0d50, 0d18, entity, NONE);
                        } else if(direction == FACE_DIRECTION.NORTH) {
                            walk(entity, TILE_ABSOLUTE, 0d63, 0d18, entity, NONE);

                            face(entity, SOUTH);
                            animate(entity, ONCE, ANIMATION_ALL.SLASH_1);
                            control(entity, False);
                        } else if(direction == FACE_DIRECTION.EAST) {
                            walk(entity, TILE_ABSOLUTE, 0d78, 0d33, entity, NONE);

                            face(entity, WEST);
                            animate(entity, ONCE, ANIMATION_ALL.SLASH_1);
                            control(entity, False);
                        } else if(direction == FACE_DIRECTION.SOUTH) {
                            walk(entity, TILE_ABSOLUTE, 0d63, 0d47, entity, NONE);

                            face(entity, NORTH);
                            animate(entity, ONCE, ANIMATION_ALL.SLASH_1);
                            control(entity, False);
                        } else if(direction == FACE_DIRECTION.WEST) {
                            walk(entity, TILE_ABSOLUTE, 0d50, 0d33, entity, NONE);

                            face(entity, EAST);
                            animate(entity, ONCE, ANIMATION_ALL.SLASH_1);
                            control(entity, False);
                        }
                    }

                    @install()
                    // @async()
                    fun bident_lap(entity, reversed) {
                        if((entity[X] >= BOSS.CENTER_X) && (entity[Y] < BOSS.CENTER_Y)) {
                            if!(reversed) {
                                walk_corner(entity, NORTH_WEST);
                                walk_corner(entity, SOUTH_WEST);
                                walk_corner(entity, SOUTH_EAST);
                                walk_corner(entity, NORTH_EAST);
                                walk_corner(entity, NORTH);
                            } else {
                                walk_corner(entity, SOUTH_EAST);
                                walk_corner(entity, SOUTH_WEST);
                                walk_corner(entity, NORTH_WEST);
                                walk_corner(entity, NORTH_EAST);
                                walk_corner(entity, SOUTH);
                            }
                        } else if((entity[X] >= BOSS.CENTER_X) && (entity[Y] >= BOSS.CENTER_Y)) {
                            if!(reversed) {
                                walk_corner(entity, NORTH_EAST);
                                walk_corner(entity, NORTH_WEST);
                                walk_corner(entity, SOUTH_WEST);
                                walk_corner(entity, SOUTH_EAST);
                                walk_corner(entity, EAST);
                            } else {
                                walk_corner(entity, SOUTH_WEST);
                                walk_corner(entity, NORTH_WEST);
                                walk_corner(entity, NORTH_EAST);
                                walk_corner(entity, SOUTH_EAST);
                                walk_corner(entity, SOUTH);
                            }
                        } else if((entity[X] < BOSS.CENTER_X) && (entity[Y] >= BOSS.CENTER_Y)) {
                            if!(reversed) {
                                walk_corner(entity, SOUTH_EAST);
                                walk_corner(entity, NORTH_EAST);
                                walk_corner(entity, NORTH_WEST);
                                walk_corner(entity, SOUTH_WEST);
                                walk_corner(entity, SOUTH);
                            } else {
                                walk_corner(entity, NORTH_WEST);
                                walk_corner(entity, NORTH_EAST);
                                walk_corner(entity, SOUTH_EAST);
                                walk_corner(entity, SOUTH_WEST);
                                walk_corner(entity, WEST);
                            }
                        } else {
                            if!(reversed) {
                                walk_corner(entity, SOUTH_WEST);
                                walk_corner(entity, SOUTH_EAST);
                                walk_corner(entity, NORTH_EAST);
                                walk_corner(entity, NORTH_WEST);
                                walk_corner(entity, WEST);
                            } else {
                                walk_corner(entity, NORTH_EAST);
                                walk_corner(entity, SOUTH_EAST);
                                walk_corner(entity, SOUTH_WEST);
                                walk_corner(entity, NORTH_WEST);
                                walk_corner(entity, NORTH);
                            }
                        }
                    }

                    @install()
                    @async()
                    fun stone_hit(entity) {
                        damage(entity, BOSS.STONE_DAMAGE, True);
                        yield();

                        animate(entity, ONCE_FREEZE, ANIMATION_ALL.DEFAULT);

                        sleep(BOSS.STONE_STUN_TIME);

                        animate(entity, ONCE, ANIMATION_ALL.DEFAULT);
                    }

                    fun add_stone(x, y) {
                        add_enemy(STONE_ROUND, x, y); 

                        attach_script(LAST_ENTITY, B, reference(@install() {
                            guard_levitate_stone(0d2);

                            attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, True);

                            while(<SCRIPT_OWNER>[GENERAL_PURPOSE]) {
                                check_range_old(<SCRIPT_OWNER>, BOSS.ID_LEFT, 0d20, 0d20, {
                                    destroy(SCRIPT_OWNER);
                                    
                                    stone_hit(BOSS.ID_LEFT);
                                    end();
                                });
                                yield();
                                check_range_old(<SCRIPT_OWNER>, BOSS.ID_RIGHT, 0d20, 0d20, {
                                    destroy(SCRIPT_OWNER);

                                    stone_hit(BOSS.ID_RIGHT);
                                    end();
                                });
                                yield();
                            }
                        }));
                    }
                };

                fun trigger_enter() {
                    if!(SOULS_MEMORY.DEAD_UNNAMED_DESERT_TEMPLE_BOSS) {
                        BOSS.PROGRESS = True;
                        push_music(BOSS);

                        add_enemy(VIGOR, 0d59, 0d33);
                        BOSS.ID_LEFT = <LAST_ENTITY>;
                        <LAST_ENTITY>[HP] = BOSS.HP_LEFT;
                        attach_script(LAST_ENTITY, DAMAGE, reference(boss_left_triggered));

                        add_enemy(FOOTKNIGHT, 0d67, 0d32);
                        BOSS.ID_RIGHT = <LAST_ENTITY>;
                        <LAST_ENTITY>[HP] = BOSS.HP_RIGHT;
                        attach_script(LAST_ENTITY, DAMAGE, reference(boss_right_triggered));

                        add_stone(0d21, 0d37); 
                        add_stone(0d106, 0d37);

                        default_init_room(False, False);

                        while(True) {
                            sleep(0d600);
                            bident_lap(BOSS.ID_LEFT);
                            // bident_lap(BOSS.ID_RIGHT, True);
                        }
                    } else {
                        default_init_room(False, False);
                    }
                }
            };

            map desert_temple_stairs(IVOR_STAIRS) {
                enum entrance {
                    door_upstairs = entrance(0x0a, 0x23, NORTH),
                    door_downstairs = entrance(0x22, 0x45, NORTH),
                }

                enum soundtrack {
                    default = soundtrack(AREA_DESERT_TEMPLE.MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_door_upstairs = @install() {
                        debug_subtext("S=0");

                        map_transition(desert_temple_main, west_1, SOUTH);
                    },
                    exit_door_downstairs = @install() {
                        debug_subtext("S=1");

                        fog_wall_outside(!SOULS_MEMORY.DEAD_UNNAMED_DESERT_TEMPLE_BOSS, NORTH);

                        map_transition(desert_temple_underground, south, SOUTH);
                    },
                }

                fun trigger_enter() {
                    fade_in();
                }
            };
        };
    };
};

area metro() {
    map metro(OMNITOPIA_METROPLEX) {
        enum ROOM {
            ROW_1 = 0d18,
            ROW_2 = 0d62,
            ROW_3 = 0d106,
            ROW_4 = 0d150,

            COLUMN_1 = 0d18,
            COLUMN_2 = 0d82,
            COLUMN_3 = 0d146,
            COLUMN_4 = 0d210,

            DOOR_OPENED_A1_SOUTH = memory(FLAG, TEMP),
            DOOR_OPENED_A2_SOUTH = memory(FLAG, TEMP),
            DOOR_OPENED_A3_SOUTH = memory(FLAG, TEMP),
            DOOR_OPENED_A4_SOUTH = memory(FLAG, TEMP),

            DOOR_OPENED_B1_NORTH = memory(FLAG, TEMP),
            DOOR_OPENED_B1_SOUTH = memory(FLAG, TEMP),
            DOOR_OPENED_B2_NORTH = memory(FLAG, TEMP),
            DOOR_OPENED_B2_SOUTH = memory(FLAG, TEMP),
            DOOR_OPENED_B3_SOUTH = memory(FLAG, TEMP),

            DOOR_OPENED_C1_NORTH = memory(FLAG, TEMP),
            DOOR_OPENED_C1_SOUTH = memory(FLAG, TEMP),
            DOOR_OPENED_C2_NORTH = memory(FLAG, TEMP),
            DOOR_OPENED_C3_SOUTH = memory(FLAG, TEMP),
            DOOR_OPENED_C4_NORTH = memory(FLAG, TEMP),
            DOOR_OPENED_C4_SOUTH = memory(FLAG, TEMP),

            DOOR_OPENED_D2_NORTH = memory(FLAG, TEMP),
            DOOR_OPENED_D3_NORTH = memory(FLAG, TEMP),
            DOOR_OPENED_D4_NORTH = memory(FLAG, TEMP),

            GATE_OPENED_A1_A2 = memory(FLAG, SRAM),
            GATE_OPENED_A1_B1 = memory(FLAG, SRAM),
            GATE_OPENED_A2_B2 = memory(FLAG, SRAM),
            GATE_OPENED_A3_A4 = memory(FLAG, SRAM),

            GATE_OPENED_B1_B2 = memory(FLAG, SRAM),
            GATE_OPENED_B1_C1 = memory(FLAG, SRAM),
            GATE_OPENED_B2_C2 = memory(FLAG, SRAM),
            GATE_OPENED_B3_B4 = memory(FLAG, SRAM),
            
            GATE_OPENED_C1_C2 = memory(FLAG, SRAM),
            GATE_OPENED_C3_C4 = memory(FLAG, SRAM),
            GATE_OPENED_C3_D3 = memory(FLAG, SRAM),
            GATE_OPENED_C4_D4 = memory(FLAG, SRAM),
            GATE_OPENED_D1_D2 = memory(FLAG, SRAM),
            GATE_OPENED_D2_D3 = memory(FLAG, SRAM),
            GATE_OPENED_D3_D4 = memory(FLAG, SRAM),

            GATE_ID_A1_A2 = memory(WORD, TEMP),
            GATE_ID_A1_B1 = memory(WORD, TEMP),
            GATE_ID_A2_B2 = memory(WORD, TEMP),
            GATE_ID_A3_A4 = memory(WORD, TEMP),

            GATE_ID_B1_B2 = memory(WORD, TEMP),
            GATE_ID_B1_C1 = memory(WORD, TEMP),
            GATE_ID_B2_C2 = memory(WORD, TEMP),
            GATE_ID_B3_B4 = memory(WORD, TEMP),
            
            GATE_ID_C1_C2 = memory(WORD, TEMP),
            GATE_ID_C3_C4 = memory(WORD, TEMP),
            GATE_ID_C3_D3 = memory(WORD, TEMP),
            GATE_ID_C4_D4 = memory(WORD, TEMP),
            GATE_ID_D1_D2 = memory(WORD, TEMP),
            GATE_ID_D2_D3 = memory(WORD, TEMP),
            GATE_ID_D3_D4 = memory(WORD, TEMP),
        }

        enum entrance {
            door_a1 = entrance(ROOM.COLUMN_1, ROOM.ROW_1, NONE, { door_act4_airlock_in(0x0b); }),
            door_a2 = entrance(ROOM.COLUMN_2, ROOM.ROW_1, NONE, { door_act4_airlock_in(0x00); }),
            door_a3 = entrance(ROOM.COLUMN_3, ROOM.ROW_1, NONE, { door_act4_airlock_in(0x0c); }),
            door_a4 = entrance(ROOM.COLUMN_4, ROOM.ROW_1, NONE, { door_act4_airlock_in(0x0d); }),

            door_b2 = entrance(ROOM.COLUMN_2, ROOM.ROW_2, NONE, { door_act4_airlock_in(0x10); }),
            door_b3 = entrance(ROOM.COLUMN_3, ROOM.ROW_2, NONE, { door_act4_airlock_in(0x0f); }),
            door_b4 = entrance(ROOM.COLUMN_4, ROOM.ROW_2, NONE, { door_act4_airlock_in(0x0e); }),

            door_c1 = entrance(ROOM.COLUMN_1, ROOM.ROW_3, NONE, { door_act4_airlock_in(0x11); }),
            door_c2 = entrance(ROOM.COLUMN_2, ROOM.ROW_3, NONE, { door_act4_airlock_in(0x12); }),
            door_c4 = entrance(ROOM.COLUMN_4, ROOM.ROW_3, NONE, { door_act4_airlock_in(0x13); }),

            door_d1 = entrance(ROOM.COLUMN_1, ROOM.ROW_4, NONE, { door_act4_airlock_in(0x16); }),
            door_d3 = entrance(ROOM.COLUMN_3, ROOM.ROW_4, NONE, { door_act4_airlock_in(0x15); }),
            door_d4 = entrance(ROOM.COLUMN_4, ROOM.ROW_4, NONE, { door_act4_airlock_in(0x14); }),
        }

        fun open_cell_exit(door_id, flag) {
            if!(flag) {
                flag = True;

                sound(ACT4_DOOR_OPENING);

                object[door_id] = 0x7e;
            }
        }

        enum stepon_trigger {
            door_b1_north_south = @install() {
                debug_subtext("S=0");

                open_cell_exit(0x04, ROOM.DOOR_OPENED_B1_NORTH);
            },
            door_b2_north_south = @install() {
                debug_subtext("S=1");

                open_cell_exit(0x03, ROOM.DOOR_OPENED_B2_NORTH);
            },
            door_c4_north_south = @install() {
                debug_subtext("S=2");

                open_cell_exit(0x07, ROOM.DOOR_OPENED_C4_NORTH);
            },
            door_c2_north_south = @install() {
                debug_subtext("S=3");

                open_cell_exit(0x06, ROOM.DOOR_OPENED_C2_NORTH);
            },
            door_c1_north_south = @install() {
                debug_subtext("S=4");

                open_cell_exit(0x05, ROOM.DOOR_OPENED_C1_NORTH);
            },
            door_d2_north_south = @install() {
                debug_subtext("S=5");

                open_cell_exit(0x0a, ROOM.DOOR_OPENED_D2_NORTH);
            },
            door_d3_north_south = @install() {
                debug_subtext("S=6");

                open_cell_exit(0x09, ROOM.DOOR_OPENED_D3_NORTH);
            },
            door_d4_north_south = @install() {
                debug_subtext("S=7");

                open_cell_exit(0x08, ROOM.DOOR_OPENED_D4_NORTH);
            },
            door_c4_south_south = @install() {
                debug_subtext("S=8");

                open_cell_exit(0x1f, ROOM.DOOR_OPENED_C4_SOUTH);
            },
            door_c4_south_north = @install() {
                debug_subtext("S=9");

                open_cell_exit(0x1f, ROOM.DOOR_OPENED_C4_SOUTH);
            },

            door_c3_south_south = @install() {
                debug_subtext("S=10");

                open_cell_exit(0x1e, ROOM.DOOR_OPENED_C3_SOUTH);
            },
            door_c3_south_north = @install() {
                debug_subtext("S=11");

                open_cell_exit(0x1e, ROOM.DOOR_OPENED_C3_SOUTH);
            },
            door_c1_south_south = @install() {
                debug_subtext("S=12");

                open_cell_exit(0x1d, ROOM.DOOR_OPENED_C1_SOUTH);
            },
            door_c1_south_north = @install() {
                debug_subtext("S=13");

                open_cell_exit(0x1d, ROOM.DOOR_OPENED_C1_SOUTH);
            },
            door_b1_south_south = @install() {
                debug_subtext("S=14");

                open_cell_exit(0x1c, ROOM.DOOR_OPENED_B1_SOUTH);
            },
            door_b1_south_north = @install() {
                debug_subtext("S=15");

                open_cell_exit(0x1c, ROOM.DOOR_OPENED_B1_SOUTH);
            },
            door_b2_south_south = @install() {
                debug_subtext("S=16");

                open_cell_exit(0x1b, ROOM.DOOR_OPENED_B2_SOUTH);
            },
            door_b2_south_north = @install() {
                debug_subtext("S=17");

                open_cell_exit(0x1b, ROOM.DOOR_OPENED_B2_SOUTH);
            },
            door_b3_south_south = @install() {
                debug_subtext("S=18");

                open_cell_exit(0x1a, ROOM.DOOR_OPENED_B3_SOUTH);
            },
            door_b3_south_north = @install() {
                debug_subtext("S=19");

                open_cell_exit(0x1a, ROOM.DOOR_OPENED_B3_SOUTH);
            },

            door_a4_south_south = @install() {
                debug_subtext("S=20");

                open_cell_exit(0x19, ROOM.DOOR_OPENED_A4_SOUTH);
            },
            door_a4_south_north = @install() {
                debug_subtext("S=21");

                open_cell_exit(0x19, ROOM.DOOR_OPENED_A4_SOUTH);
            },
            door_a3_south_south = @install() {
                debug_subtext("S=22");

                open_cell_exit(0x18, ROOM.DOOR_OPENED_A3_SOUTH);
            },
            door_a3_south_north = @install() {
                debug_subtext("S=23");

                open_cell_exit(0x18, ROOM.DOOR_OPENED_A3_SOUTH);
            },
            door_a2_south_south = @install() {
                debug_subtext("S=24");

                open_cell_exit(0x02, ROOM.DOOR_OPENED_A2_SOUTH);
            },
            door_a2_south_north = @install() {
                debug_subtext("S=25");

                open_cell_exit(0x02, ROOM.DOOR_OPENED_A2_SOUTH);
            },
            door_a1_south_south = @install() {
                debug_subtext("S=26");

                open_cell_exit(0x17, ROOM.DOOR_OPENED_A1_SOUTH);
            },
            door_a1_south_north = @install() {
                debug_subtext("S=27");

                open_cell_exit(0x17, ROOM.DOOR_OPENED_A1_SOUTH);
            },
            stepon_28 = @install() {
                debug_subtext("S=28");
            },
            stepon_29 = @install() {
                debug_subtext("S=29");
            },

            stepon_30 = @install() {
                debug_subtext("S=30");
            },
            stepon_31 = @install() {
                debug_subtext("S=31");
            },
            stepon_32 = @install() {
                debug_subtext("S=32");
            },
            stepon_33 = @install() {
                debug_subtext("S=33");
            },
            stepon_34 = @install() {
                debug_subtext("S=34");
            },
            stepon_35 = @install() {
                debug_subtext("S=35");
            },
            stepon_36 = @install() {
                debug_subtext("S=36");
            },
            stepon_37 = @install() {
                debug_subtext("S=37");
            },
            stepon_38 = @install() {
                debug_subtext("S=38");
            },
            stepon_39 = @install() {
                debug_subtext("S=39");
            },

            stepon_40 = @install() {
                debug_subtext("S=40");
            },
            stepon_41 = @install() {
                debug_subtext("S=41");
            },
            stepon_42 = @install() {
                debug_subtext("S=42");
            },
            stepon_43 = @install() {
                debug_subtext("S=43");
            },
            stepon_44 = @install() {
                debug_subtext("S=44");
            },
            stepon_45 = @install() {
                debug_subtext("S=45");
            },
            stepon_46 = @install() {
                debug_subtext("S=46");
            },
            stepon_47 = @install() {
                debug_subtext("S=47");
            },
            door_b1_north_north = @install() {
                debug_subtext("S=48");

                open_cell_exit(0x04, ROOM.DOOR_OPENED_B1_NORTH);
            },
            door_b2_north_north = @install() {
                debug_subtext("S=49");

                open_cell_exit(0x03, ROOM.DOOR_OPENED_B2_NORTH);
            },

            door_c1_north_north = @install() {
                debug_subtext("S=50");

                open_cell_exit(0x05, ROOM.DOOR_OPENED_C1_NORTH);
            },
            door_c2_north_north = @install() {
                debug_subtext("S=51");

                open_cell_exit(0x06, ROOM.DOOR_OPENED_C2_NORTH);
            },
            door_c4_north_north = @install() {
                debug_subtext("S=52");

                open_cell_exit(0x07, ROOM.DOOR_OPENED_C4_NORTH);
            },
            door_d4_north_north = @install() {
                debug_subtext("S=53");

                open_cell_exit(0x08, ROOM.DOOR_OPENED_D4_NORTH);
            },
            door_d3_north_north = @install() {
                debug_subtext("S=54");

                open_cell_exit(0x09, ROOM.DOOR_OPENED_D3_NORTH);
            },
            door_d2_north_north = @install() {
                debug_subtext("S=55");

                open_cell_exit(0x0a, ROOM.DOOR_OPENED_D2_NORTH);
            },
        }

        fun destroy_gate_bot(entity, flag) {
            if(flag is Memory) {
                flag = True;
            }

            if!(dead(entity)) {
                damage(ANIMATION_ENEMY.GATE_BOT_DEAD, 0d999, False);

                animate(entity, ONCE_FREEZE, ANIMATION_ENEMY.GATE_BOT_DEAD);
                // attribute(entity, INVINCIBLE_TEMP, True);

                entity[Y] += 0d8;
            }
        }

        fun cell_key_enter(cell_x, cell_y) {
            if((cell_x == ROOM.ROW_1) && (cell_y == ROOM.COLUMN_1)) { // a1
                destroy_gate_bot(ROOM.GATE_ID_A1_A2, ROOM.GATE_OPENED_A1_A2);
                destroy_gate_bot(ROOM.GATE_ID_A1_B1, ROOM.GATE_OPENED_A1_B1);

                object[0x2f] = 0x7e; // open door_a1_up

                object[0x2e] = 0d01; // open door_a1_a2
                object[0x20] = 0x7e; // open door_a1_b1
            } else if((cell_x == ROOM.ROW_1) && (cell_y == ROOM.COLUMN_2)) { // a2
                destroy_gate_bot(ROOM.GATE_ID_A1_A2, ROOM.GATE_OPENED_A1_A2);
                destroy_gate_bot(ROOM.GATE_ID_A2_B2, ROOM.GATE_OPENED_A2_B2);

                object[0x30] = 0x7e; // open door_a2_up

                object[0x2e] = 0d01; // open door_a1_a2
                object[0x01] = 0x7e; // open door_a2_b2
            } else if((cell_x == ROOM.ROW_1) && (cell_y == ROOM.COLUMN_3)) { // a3
                destroy_gate_bot(ROOM.GATE_ID_A3_A4, ROOM.GATE_OPENED_A3_A4);

                object[0x31] = 0x7e; // open door_a3_up

                object[0x26] = 0d01; // open door_a3_a4
            } else if((cell_x == ROOM.ROW_1) && (cell_y == ROOM.COLUMN_4)) { // a4
                destroy_gate_bot(ROOM.GATE_ID_A3_A4, ROOM.GATE_OPENED_A3_A4);

                object[0x31] = 0x7e; // open door_a3_up

                object[0x26] = 0d01; // open door_a3_a4
            } else if((cell_x == ROOM.ROW_2) && (cell_y == ROOM.COLUMN_1)) { // b1
                destroy_gate_bot(ROOM.GATE_ID_A1_B1, ROOM.GATE_OPENED_A1_B1);
                destroy_gate_bot(ROOM.GATE_ID_B1_B2, ROOM.GATE_OPENED_B1_B2);
                destroy_gate_bot(ROOM.GATE_ID_B1_C1, ROOM.GATE_OPENED_B1_C1);

                object[0x36] = 0x7e; // open door_b1_up

                object[0x20] = 0x7e; // open door_a1_b1
                object[0x2d] = 0d01; // open door_b1_b2
                object[0x21] = 0x7e; // open door_b1_c1
            } else if((cell_x == ROOM.ROW_2) && (cell_y == ROOM.COLUMN_2)) { // b2
                destroy_gate_bot(ROOM.GATE_ID_B2_C2, ROOM.GATE_OPENED_B2_C2);
                destroy_gate_bot(ROOM.GATE_ID_B1_B2, ROOM.GATE_OPENED_B1_B2);
                destroy_gate_bot(ROOM.GATE_ID_A2_B2, ROOM.GATE_OPENED_A2_B2);

                object[0x35] = 0x7e; // open door_b2_up

                object[0x22] = 0x7e; // open door_b2_c2
                object[0x2d] = 0d01; // open door_b1_b2
                object[0x01] = 0x7e; // open door_a2_b2
            } else if((cell_x == ROOM.ROW_2) && (cell_y == ROOM.COLUMN_3)) { // b3
                destroy_gate_bot(ROOM.GATE_ID_B3_B4, ROOM.GATE_OPENED_B3_B4);

                object[0x34] = 0x7e; // open door_b3_up

                object[0x27] = 0d01; // open door_b3_b4
            } else if((cell_x == ROOM.ROW_2) && (cell_y == ROOM.COLUMN_4)) { // b4
                destroy_gate_bot(ROOM.GATE_ID_B3_B4, ROOM.GATE_OPENED_B3_B4);

                object[0x33] = 0x7e; // open door_b4_up

                object[0x27] = 0d01; // open door_b3_b4
            } else if((cell_x == ROOM.ROW_3) && (cell_y == ROOM.COLUMN_1)) { // c1
                destroy_gate_bot(ROOM.GATE_ID_C1_C2, ROOM.GATE_OPENED_C1_C2);
                destroy_gate_bot(ROOM.GATE_ID_B1_C1, ROOM.GATE_OPENED_B1_C1);

                object[0x37] = 0x7e; // open door_c1_up

                object[0x2c] = 0d01; // open door_c1_c2
                object[0x21] = 0x7e; // open door_b1_c1
            } else if((cell_x == ROOM.ROW_3) && (cell_y == ROOM.COLUMN_2)) { // c2
                destroy_gate_bot(ROOM.GATE_ID_C1_C2, ROOM.GATE_OPENED_C1_C2);
                destroy_gate_bot(ROOM.GATE_ID_B2_C2, ROOM.GATE_OPENED_B2_C2);

                object[0x38] = 0x7e; // open door_c2_up

                object[0x2c] = 0d01; // open door_c1_c2
                object[0x22] = 0x7e; // open door_b2_c2
            } else if((cell_x == ROOM.ROW_3) && (cell_y == ROOM.COLUMN_3)) { // c3
                destroy_gate_bot(ROOM.GATE_ID_C3_C4, ROOM.GATE_OPENED_C3_C4);
                destroy_gate_bot(ROOM.GATE_ID_C3_D3, ROOM.GATE_OPENED_C3_D3);

                object[0x39] = 0x7e; // open door_c3_up

                object[0x28] = 0d01; // open door_c3_c4
                object[0x23] = 0x7e; // open door_c3_d3
            } else if((cell_x == ROOM.ROW_3) && (cell_y == ROOM.COLUMN_4)) { // c4
                destroy_gate_bot(ROOM.GATE_ID_C4_D4, ROOM.GATE_OPENED_C4_D4);
                destroy_gate_bot(ROOM.GATE_ID_C3_C4, ROOM.GATE_OPENED_C3_C4);

                object[0x3a] = 0x7e; // open door_c4_up

                object[0x24] = 0x7e; // open door_c4_d4
                object[0x28] = 0d01; // open door_c3_c4
            } else if((cell_x == ROOM.ROW_4) && (cell_y == ROOM.COLUMN_1)) { // d1
                destroy_gate_bot(ROOM.GATE_ID_D1_D2, ROOM.GATE_OPENED_D1_D2);

                object[0x3e] = 0x7e; // open door_d1_up

                object[0x2b] = 0d01; // open door_d1_d2
            } else if((cell_x == ROOM.ROW_4) && (cell_y == ROOM.COLUMN_2)) { // d2
                destroy_gate_bot(ROOM.GATE_ID_D2_D3, ROOM.GATE_OPENED_D2_D3);
                destroy_gate_bot(ROOM.GATE_ID_D1_D2, ROOM.GATE_OPENED_D1_D2);

                object[0x3d] = 0x7e; // open door_d2_up

                object[0x2a] = 0d01; // open door_d2_d3
                object[0x2b] = 0d01; // open door_d1_d2
            } else if((cell_x == ROOM.ROW_4) && (cell_y == ROOM.COLUMN_3)) { // d3
                destroy_gate_bot(ROOM.GATE_ID_D3_D4, ROOM.GATE_OPENED_D3_D4);
                destroy_gate_bot(ROOM.GATE_ID_C3_D3, ROOM.GATE_OPENED_C3_D3);
                destroy_gate_bot(ROOM.GATE_ID_D2_D3, ROOM.GATE_OPENED_D2_D3);

                object[0x3c] = 0x7e; // open door_d3_up

                object[0x29] = 0d01; // open door_d3_d4
                object[0x23] = 0x7e; // open door_c3_d3
                object[0x2a] = 0d01; // open door_d2_d3
            } else if((cell_x == ROOM.ROW_4) && (cell_y == ROOM.COLUMN_4)) { // d4
                destroy_gate_bot(ROOM.GATE_ID_D3_D4, ROOM.GATE_OPENED_D3_D4);
                destroy_gate_bot(ROOM.GATE_ID_C4_D4, ROOM.GATE_OPENED_C4_D4);

                object[0x3b] = 0x7e; // open door_d4_up

                object[0x29] = 0d01; // open door_d3_d4
                object[0x24] = 0x7e; // open door_c4_d4
            }
        }

        enum b_trigger {
            door_center = @install() {
                debug_subtext("B=0");
            },
            door_d1_down = @install() {
                debug_subtext("B=1");
            },
            door_d1_up = @install() {
                debug_subtext("B=2");

                cell_key_enter(ROOM.ROW_4, ROOM.COLUMN_1);
            },
            door_d2_up = @install() {
                debug_subtext("B=3");

                cell_key_enter(ROOM.ROW_4, ROOM.COLUMN_2);
            },
            door_d2_down = @install() {
                debug_subtext("B=4");
            },
            door_d3_up = @install() {
                debug_subtext("B=5");

                cell_key_enter(ROOM.ROW_4, ROOM.COLUMN_3);
            },
            door_d3_down = @install() {
                debug_subtext("B=6");
            },
            door_d4_up = @install() {
                debug_subtext("B=7");

                cell_key_enter(ROOM.ROW_4, ROOM.COLUMN_4);
            },
            door_d4_down = @install() {
                debug_subtext("B=8");
            },
            door_c4_up = @install() {
                debug_subtext("B=9");

                cell_key_enter(ROOM.ROW_3, ROOM.COLUMN_4);
            },

            door_c4_down = @install() {
                debug_subtext("B=10");
            },
            door_c3_up = @install() {
                debug_subtext("B=11");

                cell_key_enter(ROOM.ROW_3, ROOM.COLUMN_3);
            },
            door_c3_down = @install() {
                debug_subtext("B=12");
            },
            door_c2_up = @install() {
                debug_subtext("B=13");

                cell_key_enter(ROOM.ROW_3, ROOM.COLUMN_2);
            },
            door_c2_down = @install() {
                debug_subtext("B=14");
            },
            door_c1_up = @install() {
                debug_subtext("B=15");

                cell_key_enter(ROOM.ROW_3, ROOM.COLUMN_1);
            },
            door_c1_down = @install() {
                debug_subtext("B=16");
            },
            door_b1_up = @install() {
                debug_subtext("B=17");

                cell_key_enter(ROOM.ROW_2, ROOM.COLUMN_1);
            },
            door_b1_down = @install() {
                debug_subtext("B=18");
            },
            door_b2_up = @install() {
                debug_subtext("B=19");

                cell_key_enter(ROOM.ROW_2, ROOM.COLUMN_2);
            },

            door_b2_down = @install() {
                debug_subtext("B=20");
            },
            door_b3_up = @install() {
                debug_subtext("B=21");

                cell_key_enter(ROOM.ROW_2, ROOM.COLUMN_3);
            },
            door_b3_down = @install() {
                debug_subtext("B=22");
            },
            door_b4_up = @install() {
                debug_subtext("B=23");

                cell_key_enter(ROOM.ROW_2, ROOM.COLUMN_4);
            },
            door_b4_down = @install() {
                debug_subtext("B=24");
            },
            door_a4_up = @install() {
                debug_subtext("B=25");

                cell_key_enter(ROOM.ROW_1, ROOM.COLUMN_4);
            },
            door_a4_down = @install() {
                debug_subtext("B=26");
            },
            door_a3_up = @install() {
                debug_subtext("B=27");

                cell_key_enter(ROOM.ROW_1, ROOM.COLUMN_3);
            },
            door_a3_down = @install() {
                debug_subtext("B=28");
            },
            door_a2_up = @install() {
                debug_subtext("B=29");

                cell_key_enter(ROOM.ROW_1, ROOM.COLUMN_2);
            },

            door_a2_down = @install() {
                debug_subtext("B=30");
            },
            door_a1_up = @install() {
                debug_subtext("B=31");

                cell_key_enter(ROOM.ROW_1, ROOM.COLUMN_1);
            },
            door_a1_down = @install() {
                debug_subtext("B=32");
            },
            door_d4_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_4, ROOM.ROW_4, 0x14);

                debug_subtext("B=33");

                map_transition(junkyard_south, north, NONE);
            },
            door_d3_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_3, ROOM.ROW_4, 0x15);

                debug_subtext("B=34");
            },
            door_b3_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_3, ROOM.ROW_2, 0x0f);

                debug_subtext("B=35");

                map_transition(junkyard_northeast, north, NONE);
            },
            door_c4_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_4, ROOM.ROW_3, 0x13);

                debug_subtext("B=36");

                map_transition(reactor_room, east, NONE);
            },
            door_b4_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_4, ROOM.ROW_2, 0x0e);

                debug_subtext("B=37");

                map_transition(reactor_room, east, NONE);
            },
            door_a4_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_4, ROOM.ROW_1, 0x0d);

                debug_subtext("B=38");

                map_transition(reactor_room, lever_room, NONE);
            },
            door_a3_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_3, ROOM.ROW_1, 0x0c);

                debug_subtext("B=39");

                map_transition(reactor_room, north, NONE);
            },

            door_b2_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_2, ROOM.ROW_2, 0x10);

                debug_subtext("B=40");
            },
            door_a2_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_2, ROOM.ROW_1, 0x00);

                debug_subtext("B=41");
            },
            door_a1_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_1, ROOM.ROW_1, 0x0b);

                debug_subtext("B=42");
            },
            door_d1_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_1, ROOM.ROW_4, 0x16);

                debug_subtext("B=43");
                
                map_transition(ar_lab, east, NONE);
            },
            door_c1_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_1, ROOM.ROW_3, 0x11);

                debug_subtext("B=44");

                map_transition(junkyard_northwest, north, NONE);
            },
            door_c2_center = @install() {
                door_act4_airlock_out(ROOM.COLUMN_2, ROOM.ROW_3, 0x12);

                debug_subtext("B=45");
            },
            b_trigger_46 = @install() {
                debug_subtext("B=46");
            },
            b_trigger_47 = @install() {
                debug_subtext("B=47");
            },
            b_trigger_48 = @install() {
                debug_subtext("B=48");
            },
            b_trigger_49 = @install() {
                debug_subtext("B=49");
            },

            b_trigger_50 = @install() {
                debug_subtext("B=50");
            },
            b_trigger_51 = @install() {
                debug_subtext("B=51");
            },
            b_trigger_52 = @install() {
                debug_subtext("B=52");
            },
        }
        

        fun add_gate_bot(id, x, y, condition, object_door) {
            add_enemy(GATE_BOT, x, y);
            <LAST_ENTITY>[Z_LEVEL] = 0d0;
            id = <LAST_ENTITY>;

            if(condition) {
                destroy_gate_bot(<LAST_ENTITY>);
                object[object_door] = 0x7e;
            }
        }
        
        fun trigger_enter() {
            fade_in();

            add_gate_bot(ROOM.GATE_ID_A1_A2, 0d50, 0d13, ROOM.GATE_OPENED_A1_A2, 0x2e);
            add_gate_bot(ROOM.GATE_ID_A1_B1, 0d18, 0d34, ROOM.GATE_OPENED_A1_B1, 0x20);
            add_gate_bot(ROOM.GATE_ID_A2_B2, 0d82, 0d34, ROOM.GATE_OPENED_A2_B2, 0x01);
            add_gate_bot(ROOM.GATE_ID_A3_A4, 0d178, 0d13, ROOM.GATE_OPENED_A3_A4, 0x26);

            add_gate_bot(ROOM.GATE_ID_B1_B2, 0d50, 0d57, ROOM.GATE_OPENED_B1_B2, 0x2d);
            add_gate_bot(ROOM.GATE_ID_B1_C1, 0d18, 0d78, ROOM.GATE_OPENED_B1_C1, 0x21);
            add_gate_bot(ROOM.GATE_ID_B2_C2, 0d82, 0d78, ROOM.GATE_OPENED_B2_C2, 0x22);
            add_gate_bot(ROOM.GATE_ID_B3_B4, 0d178, 0d57, ROOM.GATE_OPENED_B3_B4, 0x27);
            
            add_gate_bot(ROOM.GATE_ID_C1_C2, 0d50, 0d101, ROOM.GATE_OPENED_C1_C2, 0x2c);
            add_gate_bot(ROOM.GATE_ID_C3_C4, 0d178, 0d101, ROOM.GATE_OPENED_C3_C4, 0x28);
            add_gate_bot(ROOM.GATE_ID_C3_D3, 0d146, 0d122, ROOM.GATE_OPENED_C3_D3, 0x23);
            add_gate_bot(ROOM.GATE_ID_C4_D4, 0d210, 0d122, ROOM.GATE_OPENED_C4_D4, 0x24);

            add_gate_bot(ROOM.GATE_ID_D1_D2, 0d50, 0d145, ROOM.GATE_OPENED_D1_D2, 0x2b);
            add_gate_bot(ROOM.GATE_ID_D2_D3, 0d114, 0d145, ROOM.GATE_OPENED_D2_D3, 0x2a);
            add_gate_bot(ROOM.GATE_ID_D3_D4, 0d178, 0d145, ROOM.GATE_OPENED_D3_D4, 0x29);
        }
    };

    area metro_rooms_northwest() { // cells: a1, a2, b1, b2, [c1], c2
        map junkyard_northwest(OMNITOPIA_JUNKYARD) { // cells: c1
            enum entrance {
                north = entrance(0d62, 0d22, NONE, { door_act4_beam_in(); }),
                teleporter = entrance(0d21, 0d79, NONE, { teleporter_in(SOUTH); }),

                crash_north = entrance(0x58, 0x1c, NONE),
                crash_south = entrance(0x5f, 0x4f, NONE),
                crash_west = entrance(0x0a, 0x3a, NONE),
            }

            enum stepon_trigger {
                stepon_0 = @install() {
                    debug_subtext("S=0");
                },
                stepon_1 = @install() {
                    debug_subtext("S=1");
                },
                stepon_2 = @install() {
                    debug_subtext("S=2");
                },
                stepon_3 = @install() {
                    debug_subtext("S=3");
                },
                stepon_4 = @install() {
                    debug_subtext("S=4");
                },
                stepon_5 = @install() {
                    debug_subtext("S=5");
                },
                stepon_6 = @install() {
                    debug_subtext("S=6");
                },
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                stepon_8 = @install() {
                    debug_subtext("S=8");
                },
                stepon_9 = @install() {
                    debug_subtext("S=9");
                },

                stepon_10 = @install() {
                    debug_subtext("S=10");
                },
                exit_north = @install() {
                    debug_subtext("S=11");

                    door_act4_beam_out(0d62, 0d22);

                    map_transition(metro, door_c1, NONE);
                },
                teleporter = @install() {
                    debug_subtext("S=12");

                    teleporter_out(0d21, 0d79);

                    map_transition(northwest_inbetwixx, cave, NONE);
                },
            }
            
            fun trigger_enter() {
                if!(FLAG.IN_ANIMATION) {
                    crash_both();
                }

                fade_in();
            }
        };
    };

    area metro_rooms_northeast() { // cells: (a3, a4) + ([b3], b4)
        map junkyard_northeast(OMNITOPIA_JUNKYARD) { // cells: b3
            enum entrance {
                north = entrance(0d62, 0d22, NONE, { door_act4_beam_in(); }),
                teleporter = entrance(0d21, 0d79, NONE, { teleporter_in(SOUTH); }),

                crash_north = entrance(0x58, 0x1c, NONE),
                crash_south = entrance(0x5f, 0x4f, NONE),
                crash_west = entrance(0x0a, 0x3a, NONE),
            }

            enum stepon_trigger {
                stepon_0 = @install() {
                    debug_subtext("S=0");
                },
                stepon_1 = @install() {
                    debug_subtext("S=1");
                },
                stepon_2 = @install() {
                    debug_subtext("S=2");
                },
                stepon_3 = @install() {
                    debug_subtext("S=3");
                },
                stepon_4 = @install() {
                    debug_subtext("S=4");
                },
                stepon_5 = @install() {
                    debug_subtext("S=5");
                },
                stepon_6 = @install() {
                    debug_subtext("S=6");
                },
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                stepon_8 = @install() {
                    debug_subtext("S=8");
                },
                stepon_9 = @install() {
                    debug_subtext("S=9");
                },

                stepon_10 = @install() {
                    debug_subtext("S=10");
                },
                exit_north = @install() {
                    debug_subtext("S=11");

                    door_act4_beam_out(0d62, 0d22);

                    map_transition(metro, door_b3, NONE);
                },
                teleporter = @install() {
                    debug_subtext("S=12");

                    teleporter_out(0d21, 0d79);

                    map_transition(east_crossing, west, NONE);
                },
            }
            
            fun trigger_enter() {
                if!(FLAG.IN_ANIMATION) {
                    crash_both();
                }

                fade_in();
            }
        };

        map reactor_room(OMNITOPIA_REACTOR) { // cells: (a3, a4) + b4
            enum entrance {
                north = entrance(0x2c, 0x0d, NONE, { door_act4_beam_in(); }),
                east = entrance(0x3e, 0x3b, NONE, { door_act4_beam_in(); }),

                lever_room = entrance(0x52, 0x0d, NONE, { door_act4_beam_in(); }),
            }

            enum stepon_trigger {
                exit_lever_room = @install() {
                    debug_subtext("S=0");

                    door_act4_beam_out(0d82, 0d13);

                    map_transition(metro, door_a4, NONE);
                },
                exit_north = @install() {
                    debug_subtext("S=1");

                    door_act4_beam_out(0d44, 0d13);

                    map_transition(metro, door_a3, NONE);
                },
                exit_east = @install() {
                    debug_subtext("S=2");

                    door_act4_beam_out(0d62, 0d59);

                    map_transition(metro, door_b4, NONE);
                },
                heater_2_1_south = @install() {
                    debug_subtext("S=3");

                    act4_heater_touched(NORTH);
                },
                heater_2_2_north = @install() {
                    debug_subtext("S=4");

                    act4_heater_touched(SOUTH);
                },
                heater_1_1_2_south = @install() {
                    debug_subtext("S=5");
                },
                heater_1_1_2_north = @install() {
                    debug_subtext("S=6");

                    act4_heater_touched(SOUTH);
                },
                heater_1_5_south = @install() {
                    debug_subtext("S=7");

                    act4_heater_touched(NORTH);
                },
                heater_1_5_north = @install() {
                    debug_subtext("S=8");

                    act4_heater_touched(SOUTH);
                },
                heater_1_3_south = @install() {
                    debug_subtext("S=9");

                    act4_heater_touched(NORTH);
                },

                heater_1_4_south = @install() {
                    debug_subtext("S=10");

                    act4_heater_touched(NORTH);
                },
                heater_1_3_north = @install() {
                    debug_subtext("S=11");

                    act4_heater_touched(SOUTH);
                },
                heater_1_4_north = @install() {
                    debug_subtext("S=12");

                    act4_heater_touched(SOUTH);
                },
                heater_2_5_north = @install() {
                    debug_subtext("S=13");

                    act4_heater_touched(SOUTH);
                },
                heater_2_5_south = @install() {
                    debug_subtext("S=14");

                    act4_heater_touched(NORTH);
                },
                heater_2_2_north = @install() {
                    debug_subtext("S=15");

                    act4_heater_touched(SOUTH);
                },
                heater_2_2_south = @install() {
                    debug_subtext("S=16");

                    act4_heater_touched(NORTH);
                },
                heater_2_3_4_north = @install() {
                    debug_subtext("S=17");

                    act4_heater_touched(SOUTH);
                },
                heater_2_3_4_south = @install() {
                    debug_subtext("S=18");

                    act4_heater_touched(NORTH);
                },
                heater_3_1_south = @install() {
                    debug_subtext("S=19");

                    act4_heater_touched(NORTH);
                },

                heater_3_1_north = @install() {
                    debug_subtext("S=20");

                    act4_heater_touched(SOUTH);
                },
                heater_3_2_south = @install() {
                    debug_subtext("S=21");

                    act4_heater_touched(NORTH);
                },
                heater_3_2_north = @install() {
                    debug_subtext("S=22");

                    act4_heater_touched(SOUTH);
                },
                heater_3_3_4_south = @install() {
                    debug_subtext("S=23");

                    act4_heater_touched(NORTH);
                },
                heater_3_3_4_north = @install() {
                    debug_subtext("S=24");

                    act4_heater_touched(SOUTH);
                },
                heater_4_3_south = @install() {
                    debug_subtext("S=25");

                    act4_heater_touched(NORTH);
                },
                heater_4_3_north = @install() {
                    debug_subtext("S=26");

                    // act4_heater_touched(SOUTH);
                    act4_heater_touched(NONE);
                },
                heater_4_1_2_north = @install() {
                    debug_subtext("S=27");

                    act4_heater_touched(SOUTH);
                },
            }

            enum b_trigger {
                lever = @install() {
                    debug_subtext("B=0");
                },
                gourd = @install() {
                    debug_subtext("B=1");
                },
            }

            fun trigger_enter() {
                // object[0x00] = 0x01; // deactivate heater_1_1
                // object[0x01] = 0x01; // deactivate heater_1_2
                // object[0x02] = 0x01; // deactivate heater_1_5
                // object[0x03] = 0x01; // deactivate heater_2_1
                // object[0x04] = 0x01; // deactivate heater_2_2
                // object[0x05] = 0x01; // deactivate heater_2_5
                // object[0x06] = 0x01; // deactivate heater_3_1
                // object[0x07] = 0x01; // deactivate heater_3_3
                // object[0x08] = 0x01; // deactivate heater_3_4
                // object[0x09] = 0x01; // deactivate heater_4_1
                // object[0x0a] = 0x01; // deactivate heater_4_2
                // b-1d ?
                // object[0x1e] = 0x01; // toggle lever
                // object[0x1f] = 0x01; // loot gourd

                fade_in();
            }
        };
    };

    area metro_rooms_south() { // cells: c3, c4, d1, d2, d3, [d4]
        map junkyard_south(OMNITOPIA_JUNKYARD) { // cells: d4
            enum entrance {
                north = entrance(0d62, 0d22, NONE, { door_act4_beam_in(); }),
                teleporter = entrance(0d21, 0d79, NONE, { teleporter_in(SOUTH); }),

                crash_north = entrance(0x58, 0x1c, NONE),
                crash_south = entrance(0x5f, 0x4f, NONE),
                crash_west = entrance(0x0a, 0x3a, NONE),
            }

            enum stepon_trigger {
                stepon_0 = @install() {
                    debug_subtext("S=0");
                },
                stepon_1 = @install() {
                    debug_subtext("S=1");
                },
                stepon_2 = @install() {
                    debug_subtext("S=2");
                },
                stepon_3 = @install() {
                    debug_subtext("S=3");
                },
                stepon_4 = @install() {
                    debug_subtext("S=4");
                },
                stepon_5 = @install() {
                    debug_subtext("S=5");
                },
                stepon_6 = @install() {
                    debug_subtext("S=6");
                },
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                stepon_8 = @install() {
                    debug_subtext("S=8");
                },
                stepon_9 = @install() {
                    debug_subtext("S=9");
                },

                stepon_10 = @install() {
                    debug_subtext("S=10");
                },
                exit_north = @install() {
                    debug_subtext("S=11");

                    door_act4_beam_out(0d62, 0d22);

                    map_transition(metro, door_d4, NONE);
                },
                teleporter = @install() {
                    debug_subtext("S=12");

                    teleporter_out(0d21, 0d79);

                    map_transition(jungle_portal, teleporter, NONE);
                },
            }
            
            fun trigger_enter() {
                if!(FLAG.IN_ANIMATION) {
                    crash_both();
                }

                fade_in();
            }
        };

        map ar_lab(OMNITOPIA_PROFESSOR) {
            enum entrance {
                north = entrance(0x3e, 0x14, NONE, { door_act4_airlock_in(0x1a); }),
                east = entrance(0x58, 0x57, NONE, { door_act4_beam_in(); }),
                west = entrance(0x1a, 0x5b, NONE),
                
                cutscene_1 = entrance(0x34, 0x59, NONE), // in front of computer
                cutscene_2 = entrance(0x3e, 0x25, NONE), // intro fight
            }

            enum ROOM {
                DOOR_PASSAGE_SOUTH_OPEN = memory(FLAG, TEMP),
                DOOR_PASSAGE_NORTH_OPEN = memory(FLAG, TEMP),
            }

            enum stepon_trigger {
                door_passage_north_north = @install() {
                    debug_subtext("S=0");

                    door_act4_passage(0x04, ROOM.DOOR_PASSAGE_NORTH_OPEN);
                },
                door_passage_north_south = @install() {
                    debug_subtext("S=1");

                    door_act4_passage(0x04, ROOM.DOOR_PASSAGE_NORTH_OPEN);
                },
                door_passage_south_north = @install() {
                    debug_subtext("S=2");

                    door_act4_passage(0x00, ROOM.DOOR_PASSAGE_SOUTH_OPEN);
                },
                door_passage_south_south = @install() {
                    debug_subtext("S=3");

                    door_act4_passage(0x00, ROOM.DOOR_PASSAGE_SOUTH_OPEN);
                },
                exit_east = @install() {
                    debug_subtext("S=4");

                    door_act4_beam_out(0d88, 0d87);

                    map_transition(metro, door_d1, NONE);
                },
            }

            enum b_trigger {
                gourd = @install() {
                    debug_subtext("B=0");
                },
                door_north = @install() {
                    debug_subtext("B=1");

                    door_act4_airlock_out(0d62, 0d20, 0x1a, True);
                },
                lever = @install() {
                    debug_subtext("B=2");
                },
            }

            fun trigger_enter() {
                fade_in();

                // objects[0x00] = 0x7e; // open door_passage_south
                // objects[0x01] = 0x7e; // open gourd
                // objects[0x02] = 0x7e; // open door_floor_left
                // objects[0x03] = 0x7e; // open door_floor_left
                // objects[0x04] = 0x7e; // open door_passage_north

                // objects[0x05] = 0x01; // remove machine_wood_west
                // objects[0x06] = 0x01; // remove machine_wood_south
                // objects[0x07] = 0x01; // remove machine_wood_east
                // objects[0x08] = 0x02; // change vent_1 (0 = brown+off, 1 = brown+on, 2 = grey+on)
                // objects[0x09] = 0x02; // change vent_2 (0 = brown+off, 1 = brown+on, 2 = grey+on)
                // objects[0x0a] = 0x02; // change vent_3 (0 = brown+off, 1 = brown+on, 2 = grey+on)
                // objects[0x0b] = 0x02; // change vent_4 (0 = brown+off, 1 = brown+on, 2 = grey+on)
                // objects[0x0c] = 0x01; // activate bulb_left
                // objects[0x0d] = 0x01; // activate bulb_right
                // objects[0x0e] = 0x01; // activate lights_right
                // objects[0x0f] = 0x02; // change vent_floor_1 (0 = brown+off, 1 = brown+on, 2 = grey+on)
                // objects[0x10] = 0x02; // change vent_floor_2 (0 = brown+off, 1 = brown+on, 2 = grey+on)
                // objects[0x11] = 0x02; // change vent_floor_3 (0 = brown+off, 1 = brown+on, 2 = grey+on)
                // objects[0x12] = 0x02; // change vent_floor_4 (0 = brown+off, 1 = brown+on, 2 = grey+on)
                // objects[0x13] = 0x01; // hide leaves_1
                // objects[0x14] = 0x01; // hide leaves_2
                // objects[0x15] = 0x01; // hide leaves_3
                // objects[0x16] = 0x01; // hide leaves_4
                // objects[0x17] = 0x01; // change machine_1 (0 = brown, 1 = grey)
                // objects[0x18] = 0x01; // change machine_2 (0 = brown, 1 = grey)
                // objects[0x19] = 0x01; // activate lights_left

                // objects[0x1a] = 0x7e; // open door_north
                // objects[0x1b] = 0x7e; // activate switch
            }
        };

    };
};

// dungeons

area dungeon_isaac() {
    enum AREA_BASEMENT {
        DEBUG = True,

        // ENABLE_DOORS = memory(WORD, TEMP),

        ENEMY_COUNT_TOTAL = memory(WORD, TEMP),
        ENEMY_COUNT = memory(WORD, TEMP),

        MUSIC_DEFAULT = MUSIC.PUPPET_SHOW,
    }

    group isaac_helper() {
        fun prepare_room(index) {
            if(index == 0x01) {
                init_map(0x00, 0x00, 0x34, 0x1e); // room_1

                // MEMORY.FOREGROUND_OFFSET_X = 0x0000;
                // MEMORY.FOREGROUND_OFFSET_Y = 0x02c0;

                // MEMORY.FOREGROUND_OFFSET_X = 0x0160;
                // MEMORY.FOREGROUND_OFFSET_Y = 0x02c0;
                
                // MEMORY.FOREGROUND_OFFSET_X = 0x0000;
                // MEMORY.FOREGROUND_OFFSET_Y = 0x03e0;
                
                // MEMORY.FOREGROUND_OFFSET_X = 0x0190;
                // MEMORY.FOREGROUND_OFFSET_Y = 0x03e0;
                
                // MEMORY.FOREGROUND_OFFSET_X = 0x0030;
                // MEMORY.FOREGROUND_OFFSET_Y = 0x03e0;
                
                MEMORY.FOREGROUND_OFFSET_X = 0x00c0;
                MEMORY.FOREGROUND_OFFSET_Y = 0x02c0;
            } else if(index == 0x02) {
                init_map(0x38, 0x00, 0x6e, 0x1e); // room 2

                // MEMORY.FOREGROUND_OFFSET_X = 0x0390;
                // MEMORY.FOREGROUND_OFFSET_Y = 0x0180;

                MEMORY.FOREGROUND_OFFSET_X = 0x0280; // custom
                MEMORY.FOREGROUND_OFFSET_Y = 0x02C0;
            } else if(index == 0x03) {
                init_map(0x4c, 0x24, 0x6e, 0x54); // room_3

                MEMORY.FOREGROUND_OFFSET_X = 0x00a0; // custom
                MEMORY.FOREGROUND_OFFSET_Y = 0x0000;
            } else if(index == 0x04) {
                init_map(0x26, 0x24, 0x48, 0x54); // room_4

                MEMORY.FOREGROUND_OFFSET_X = 0x0218; // custom
                MEMORY.FOREGROUND_OFFSET_Y = 0x0000;
            } else if(index == 0x05) {
                init_map(0x00, 0x24, 0x22, 0x54); // room_5

                // MEMORY.FOREGROUND_OFFSET_X = 0x0390;
                // MEMORY.FOREGROUND_OFFSET_Y = 0x0000;
                
                MEMORY.FOREGROUND_OFFSET_X = 0x0390;
                MEMORY.FOREGROUND_OFFSET_Y = 0x0090;

                // MEMORY.FOREGROUND_OFFSET_X = 0x0390;
                // MEMORY.FOREGROUND_OFFSET_Y = 0x0130;
            }
        }

        @install()
        fun enemies_alive() {
            MEMORY.STRING_PARAMETER_1 = AREA_BASEMENT.ENEMY_COUNT;
            MEMORY.STRING_PARAMETER_2 = AREA_BASEMENT.ENEMY_COUNT_TOTAL;

            subtext("[MEM1]/[MEM2] enemies alive.");
        }

        fun check_exits(clear_flag) {
            if(AREA_BASEMENT.ENEMY_COUNT > 0d0) {
                enemies_alive();

                end();
            } else {
                clear_flag = True;
            }
        }

        @install()
        fun shoot(entity) {
            shoot_entity_entity(entity, ONION, BOY, 0x10, 0xff);
        }

        @install()
        fun jump(entity) {
            entity[VELOCITY] = 0x30;
            
            while(arg[0x02] <= 0x30) {
                arg[0x02]++;

                if(entity[X] > <BOY>[X]) {
                    entity[X]--;
                } else if(entity[X] < <BOY>[X]) {
                    entity[X]++;
                }

                if(entity[Y] > <BOY>[Y]) {
                    entity[Y]--;
                } else if(entity[Y] < <BOY>[Y]) {
                    entity[Y]++;
                }

                sleep(0x02);
            }
        }

        @install()
        @async()
        fun isaac_ai_shooting(enemy) {
            sleep(0x60);

            while(alive(enemy)) {
                shoot(enemy);
                // ai_move_projectile_plus(enemy, ONION, 0d130);
                // ai_move_bomb_toss(enemy, ONION, <BOY>);

                sleep(0xa0);
            }
        }
        @install()
        @async()
        fun isaac_ai_shooting_plus(enemy) {
            sleep(0d100);

            while(alive(enemy)) {
                // shoot(enemy);
                ai_move_projectile_plus(enemy, ONION, 0d130);
                // ai_move_bomb_toss(enemy, ONION, <BOY>);

                sleep(0d240);
            }
        }
        @install()
        @async()
        fun isaac_ai_jumping(enemy) {
            sleep(0d100);

            while(alive(enemy)) {
                // control(enemy, False);
                jump(enemy);
                // control(enemy, True);

                sleep(0xf0);
            }
        }

        @install()
        fun isaac_enemy_death() {
            AREA_BASEMENT.ENEMY_COUNT--;

            // if(AREA_BASEMENT.ENEMY_COUNT == 0x00) {
            //     AREA_BASEMENT.ENABLE_DOORS = 0x01;
            // }

            if(AREA_BASEMENT.DEBUG) {
                MEMORY.STRING_PARAMETER_1 = AREA_BASEMENT.ENEMY_COUNT;
                MEMORY.STRING_PARAMETER_2 = AREA_BASEMENT.ENEMY_COUNT_TOTAL;

                subtext("[MEM1] / [MEM2]");
            }
        }
        @install()
        fun isaac_enemy_death_shoot_plus() {
            isaac_enemy_death();

            ai_move_projectile_plus(<SCRIPT_OWNER>, ONION, 0d130);
        }
        @install()
        fun isaac_enemy_death_shoot_bomb() {
            isaac_enemy_death();

            ai_move_bomb_toss(<SCRIPT_OWNER>, ONION, <BOY>);
        }
        @install()
        fun isaac_enemy_death_explode() {
            isaac_enemy_death();

            ai_move_bomb_enemy(<SCRIPT_OWNER>);
        }

        fun add_isaac_enemy() {
            AREA_BASEMENT.ENEMY_COUNT_TOTAL++;
            AREA_BASEMENT.ENEMY_COUNT++;
        }
        fun add_isaac_enemy_fly_shooting(x, y) {
            add_isaac_enemy();

            add_enemy(MOSQUITO, x, y);
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death));
            isaac_ai_shooting(<LAST_ENTITY>);
        }
        fun add_isaac_enemy_fly_exploding(x, y) {
            add_isaac_enemy();

            add_enemy(MOSQUITO, x, y);
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death_shoot_bomb));
        }
        fun add_isaac_enemy_maggot(x, y) {
            add_isaac_enemy();

            add_enemy(MAGGOT, x, y);
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death));
        }
        fun add_isaac_enemy_slime(x, y) {
            add_isaac_enemy();

            add_enemy(SLIME_GREEN, x, y);
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death));
            isaac_ai_shooting_plus(<LAST_ENTITY>);
        }
        fun add_isaac_enemy_jumper(x, y) {
            add_isaac_enemy();

            // add_enemy(DANCING_DEVIL_1, x, y);
            add_enemy(MUMMY, x, y);
            // add_enemy(FRIPPO, x, y);
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death));
            // attribute(LAST_ENTITY, ROOT, True);
            isaac_ai_jumping(<LAST_ENTITY>);
        }
        fun add_isaac_enemy_spider(x, y) {
            add_isaac_enemy();

            add_enemy(SPIDER, x, y);
            <LAST_ENTITY>[HP] = 0x01;
            attach_script(LAST_ENTITY, DEATH, reference(isaac_enemy_death_explode));
            // isaac_ai_jumping(<LAST_ENTITY>);
        }
    };

    area level_0() {
        enum BASEMENT_LEVEL {
            NIGHT = False,
            RAIN = False,
        }

        map basement_0_start(DARK_FOREST) { // center "+"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0d18, 0d56, NONE, {
                    crash_both();
                    subtext("Basement Level 1");
                }),
                bonfire = entrance(0d23, 0d51, NONE, { bonfire_wakeup(-0d24, 0d0, 0d0, 0d8); }),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_west = @install() {
                    map_transition(basement_0_4, east, WEST);
                },
                exit_east = @install() {
                    map_transition(basement_0_2, west, EAST);
                },

                exit_north = @install() {
                    map_transition(basement_0_1, south, NORTH);
                },
                exit_south = @install() {
                    map_transition(basement_0_3, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=5");
                },
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);

                // add_isaac_enemy_fly_shooting(0x1a, 0x30);
                // add_isaac_enemy_fly_exploding(0x15, 0x30);
                // add_isaac_enemy_maggot(0x15, 0x30);
                // add_isaac_enemy_slime(0x15, 0x30);
                // add_isaac_enemy_frippo(0x15, 0x30);
                // add_isaac_enemy_spider(0x15, 0x30);

                bonfire(0d23, 0d51, SOULS_MEMORY.BONFIRE_ISAAC_DUNGEON);

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);

                press_start();
            }
        };

        map basement_0_2(DARK_FOREST) { // east "->"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    debug_subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    debug_subtext("S=13");
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    debug_subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x5b, 0x2d);
                        add_isaac_enemy_maggot(0x5d, 0x2f);
                    }
                }

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_0_3(DARK_FOREST) { // south "v"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    debug_subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    debug_subtext("S=15");
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    debug_subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x59, 0x47);
                        add_isaac_enemy_maggot(0x5b, 0x49);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_0_4(DARK_FOREST) { // west "<-"
            enum entrance {
                east = entrance(0x6f, 0x17, WEST),
                south_1 = entrance(0x65, 0x1f, NORTH),
                south_2 = entrance(0x46, 0x1f, NORTH),
                west = entrance(0x38, 0x18, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() {
                    debug_subtext("S=5");
                },
                east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, west, EAST);
                },
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() {
                    debug_subtext("S=16");
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = @install() {
                    debug_subtext("B=2");
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=8");
                },
            }

            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                // object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x51, 0x12);
                        add_isaac_enemy_maggot(0x53, 0x15);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_0_1(DARK_FOREST) { // north "|"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_start, north, SOUTH);
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_0_door, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    debug_subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x5d, 0x2d);
                        add_isaac_enemy_maggot(0x5f, 0x2e);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_0_door(TIMBERDRAKE) { // north-north "drake-south"
            enum entrance {
                east = entrance(0x2b, 0x15, WEST),
                south = entrance(0x1b, 0x29, NORTH)
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_east = @install() {
                    debug_subtext("S=0");
                },
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);
                    map_transition(basement_0_1, north, SOUTH);
                }
            }

            @install()
            fun trap_door_interacted() {
                check_exits(ROOM.CLEAR_FLAG);
                map_transition(basement_1_start, center, NONE);
            }

            fun trigger_enter() {
                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x10, 0x13);
                attach_script(LAST_ENTITY, B, reference(trap_door_interacted));

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_spider(0d32, 0d22);
                        add_isaac_enemy_spider(0d17, 0d28);
                        add_isaac_enemy_spider(0d36, 0d32);
                    }
                }

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);

                // object[0x00] = 0x01; // close south
                // object[0x01] = 0x01; // open east
            }
        };
    };

    area level_1() {
        enum BASEMENT_LEVEL {
            NIGHT = False,
            RAIN = False,
        }

        map basement_1_start(DARK_FOREST) { // center "+"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE, {
                    crash_both();
                    subtext("Basement Level 2");
                }),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_west = @install() {
                    map_transition(basement_1_5, east, WEST);
                },
                exit_east = @install() {
                    map_transition(basement_1_2, west, EAST);
                },

                exit_north = @install() {
                    map_transition(basement_1_4, south_1, NORTH);
                },
                exit_south = @install() {
                    map_transition(basement_1_6, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=5");
                },
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x05);

                object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_2(DARK_FOREST) { // east "--"
            enum entrance {
                east = entrance(0x35, 0x16, WEST),
                north = entrance(0x18, 0x1f, NORTH),
                west = entrance(0x00, 0x15, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, east, WEST);
                },
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_3, west, EAST);
                },
                exit_south = @install() {
                    debug_subtext("S=4");
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                sign = @install() {
                    debug_subtext("B=3");
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                sniff = @install() {
                    debug_subtext("B=7");
                },
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x01);

                // object[0x00] = 0x01; // opens room_1_south
                // object[0x01] = 0x01; // closes room_1_east
                // object[0x12] = 0x01; // hides room_1_sign
                // object[0x09] = 0x01; // shows room_1_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x24, 0x12);
                        add_isaac_enemy_spider(0d36, 0d18);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_3(DARK_FOREST) { // east-east "-^"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    debug_subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    debug_subtext("S=13");
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_2, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    debug_subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_fly_exploding(0d93, 0d50);
                        add_isaac_enemy_fly_exploding(0d95, 0d58);
                        add_isaac_enemy_maggot(0x5d, 0x31);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_4(DARK_FOREST) { // north "/\"
            enum entrance {
                east = entrance(0x6f, 0x17, WEST),
                south_1 = entrance(0x65, 0x1f, NORTH),
                south_2 = entrance(0x46, 0x1f, NORTH),
                west = entrance(0x38, 0x18, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_5, north, SOUTH);
                },
                east = @install() {
                    debug_subtext("S=6");
                },
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, north, SOUTH);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = @install() {
                    debug_subtext("B=2");
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=8");
                },
            }

            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                // object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x53, 0x13);
                        add_isaac_enemy_spider(0d78, 0d16);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_5(DARK_FOREST) { // west "L"
            enum entrance {
                north = entrance(0x39, 0x24, SOUTH),
                east = entrance(0x48, 0x4b, WEST),
                west = entrance(0x26, 0x4e, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() {
                    debug_subtext("S=1");
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_4, south_2, NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, west, EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                // object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x37, 0x37);
                        add_isaac_enemy_spider(0d53, 0d66);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_6(DARK_FOREST) { // south "_|_"
            enum entrance {
                north = entrance(0x39, 0x24, SOUTH),
                east = entrance(0x48, 0x4b, WEST),
                west = entrance(0x26, 0x4e, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_door, east, WEST);
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_start, south, NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_9, west, EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        // north
                        add_isaac_enemy_slime(0d62, 0d52);

                        // south
                        add_isaac_enemy_maggot(0x37, 0x3b);
                        add_isaac_enemy_maggot(0x3d, 0x4a);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_1_door(BAD_BOYS) { // south-west "badboy-east"
            enum entrance {
                east = entrance(0x63, 0x1d, WEST),
                west = entrance(0x01, 0x21, EAST)
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);
                    map_transition(basement_1_6, west, EAST);
                },
                exit_west = nop(),
            }

            fun open_east_exit(open) {
                if(open) {
                object[0x00] = 0x00; 
                } else {
                    object[0x00] = 0x7e;
                }
            }
            fun open_bridge(open) {
                if(open) {
                object[0x07] = 0x07e; 
                } else {
                    object[0x07] = 0x00;
                }
            }

            @install()
            fun trap_door_interacted() {
                check_exits(ROOM.CLEAR_FLAG);
                map_transition(basement_2_start, center, NONE);
            }

            fun trigger_enter() {
                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0d89, 0d29);
                attach_script(LAST_ENTITY, B, reference(trap_door_interacted));

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        // west
                        add_isaac_enemy_fly_exploding(0d74, 0d30);

                        // north
                        add_isaac_enemy_spider(0d93, 0d17);
                    }
                }

                isaac_init(False, False);
            }
        };

        map basement_1_9(DARK_FOREST) { // south-east "->"
            enum entrance {
                east = entrance(0x35, 0x16, WEST),
                north = entrance(0x18, 0x1f, NORTH),
                west = entrance(0x00, 0x15, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_1_6, east, WEST);
                },
                exit_east = @install() {
                    debug_subtext("S=3");
                },
                exit_south = @install() {
                    debug_subtext("S=4");
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                sign = @install() {
                    debug_subtext("B=3");
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                sniff = @install() {
                    debug_subtext("B=7");
                },
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x01);

                // object[0x00] = 0x01; // opens room_1_south
                object[0x01] = 0x01; // closes room_1_east
                // object[0x12] = 0x01; // hides room_1_sign
                // object[0x09] = 0x01; // shows room_1_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        // west
                        add_isaac_enemy_spider(0d15, 0d19);

                        // center
                        add_isaac_enemy_maggot(0x20, 0x15);

                        // east
                        add_isaac_enemy_fly_exploding(0d34, 0d21);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };
    };

    area level_2() {
        enum BASEMENT_LEVEL {
            NIGHT = True,
            RAIN = False,
        }

        map basement_2_start(DARK_FOREST) { // center "+"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE, {
                    crash_both();

                    subtext("Basement Level 3");
                }),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_west = @install() {
                    debug_subtext("S=8");
                },
                exit_east = @install() {
                    map_transition(basement_2_4, west, EAST);
                },

                exit_north = @install() {
                    map_transition(basement_2_1, south, NORTH);
                },
                exit_south = @install() {
                    map_transition(basement_2_2, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=5");
                },
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x05);

                // object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_1(DARK_FOREST) { // north "^"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_start, north, SOUTH);
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    debug_subtext("S=13");
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    debug_subtext("S=15");
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    debug_subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);
                
                object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x5b, 0x32);

                        add_isaac_enemy_fly_exploding(0d89, 0d58);

                        add_isaac_enemy_fly_shooting(0d100, 0d66);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_2(DARK_FOREST) { // south "L"
            enum entrance {
                north = entrance(0x39, 0x24, SOUTH),
                east = entrance(0x48, 0x4b, WEST),
                west = entrance(0x26, 0x4e, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() {
                    debug_subtext("S=1");
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_start, south, NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_3, west, EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                // object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_fly_exploding(0d62, 0d48);

                        add_isaac_enemy_slime(0d52, 0d62);

                        add_isaac_enemy_maggot(0x3c, 0x3c);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_3(DARK_FOREST) { // south-east, east-south "_|"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    debug_subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_4, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_2, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    debug_subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0d98, 0d51);
                        add_isaac_enemy_maggot(0x5d, 0x3b);

                        add_isaac_enemy_spider(0d90, 0d59);
                        add_isaac_enemy_spider(0d101, 0d67);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_4(DARK_FOREST) { // east "-,-"
            enum entrance {
                east = entrance(0x35, 0x16, WEST),
                south = entrance(0x18, 0x1f, NORTH),
                west = entrance(0x00, 0x15, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_start, east, WEST);
                },
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_5, west, EAST);
                },
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_3, north, SOUTH);
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                sign = @install() {
                    debug_subtext("B=3");
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                sniff = @install() {
                    debug_subtext("B=7");
                },
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x01);

                object[0x00] = 0x01; // opens room_1_south
                // object[0x01] = 0x01; // closes room_1_east
                // object[0x12] = 0x01; // hides room_1_sign
                // object[0x09] = 0x01; // shows room_1_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_spider(0d15, 0d17);

                        add_isaac_enemy_maggot(0x26, 0x15);
                        
                        add_isaac_enemy_slime(0d38, 0d17);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_5(DARK_FOREST) { // east-east "-|"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_4, east, WEST);
                },
                exit_east = @install() {
                    debug_subtext("S=9");
                },

                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    fog_wall_outside(!SOULS_MEMORY.DEAD_MONSTRO, SOUTH);

                    map_transition(basement_2_boss, south, NORTH);
                },
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_6, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=5");
                },
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x05);

                object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_spider(0d17, 0d45);
                        add_isaac_enemy_maggot(0x10, 0x38);

                        add_isaac_enemy_slime(0d22, 0d55);

                        add_isaac_enemy_spider(0d17, 0d74);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_6(DARK_FOREST) { // east-east-south "v"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    debug_subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_2_5, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    debug_subtext("S=15");
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    debug_subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x59, 0x47);
                    add_isaac_enemy_maggot(0x5b, 0x49);
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_2_boss(TIMBERDRAKE) { // east-east-north "drake-south"
            enum entrance {
                east = entrance(0x2b, 0x15, WEST),
                south = entrance(0x1b, 0x29, NORTH)
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum BOSS {
                PROGRESS = memory(FLAG, TEMP),
                ID = memory(WORD, TEMP),

                HP = 0d100, // TODO: too low for >bonecrusher

                FOLLOWING = memory(WORD, TEMP),

                PUKE_HELPER = memory(WORD, TEMP),

                MOVE_RNG = memory(WORD, TEMP),

                CANNONBALL_X = memory(WORD, TEMP),
                CANNONBALL_Y = memory(WORD, TEMP),
                CANNONBALL_COUNT = memory(WORD, TEMP),
            }

            enum stepon_trigger {
                exit_east = @install() {
                    debug_subtext("S=0");
                },
                exit_south = @install() {
                    fog_wall_inside(!SOULS_MEMORY.DEAD_MONSTRO, NORTH);

                    map_transition(basement_2_5, north, SOUTH);
                }
            }

            @install()
            @async()
            fun boss_defeated() {
                souls_boss_defeated(DEAD_MONSTRO, REWARD_MONSTRO);

                unset(BOSS.PROGRESS);
            }

            group monstro_ai() {
                @async()
                @install()
                fun following() {
                    while(alive(BOSS.ID)) {
                        if(BOSS.FOLLOWING > 0d00) {
                            if(BOSS.ID[X] > <BOY>[X]) {
                                BOSS.ID[X] -= BOSS.FOLLOWING;
                            } else if(BOSS.ID[X] < <BOY>[X]) {
                                BOSS.ID[X] += BOSS.FOLLOWING;
                            }

                            if(BOSS.ID[Y] > <BOY>[Y]) {
                                BOSS.ID[Y] -= BOSS.FOLLOWING;
                            } else if(BOSS.ID[Y] < <BOY>[Y]) {
                                BOSS.ID[Y] += BOSS.FOLLOWING;
                            }
                        }

                        yield();
                    }
                }

                fun wiggle(with_animaten, with_splash) {
                    if(with_animaten) {
                        animate(BOSS.ID, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
                    }

                    if(with_splash) {
                        bomb_entity(BOSS.ID, 0d10, 0d10);
                    }
                }

                @install()
                fun yeet() {
                    BOSS.ID[VELOCITY] = 0d85;
                    
                    BOSS.FOLLOWING = True;
                    sleep(0d160);
                    BOSS.FOLLOWING = False;

                    wiggle(False, True);
                    ai_move_projectile_splash(BOSS.ID, ONION);
                }

                @install()
                fun hop() {
                    BOSS.ID[VELOCITY] = 0d30;

                    BOSS.FOLLOWING = True;
                    sleep(0d60);
                    BOSS.FOLLOWING = False;

                    wiggle(False, True);
                }

                fun move() {
                    wiggle(True, False);

                    BOSS.MOVE_RNG = randrange(0d05);

                    if(BOSS.MOVE_RNG == 0d00) {
                        ai_move_projectile_puke(BOSS.ID, ONION, <BOY>, 0d8);
                        sleep(0x50);
                    } else if(BOSS.MOVE_RNG == 0d01) {
                        yeet();
                        sleep(0x60);
                    } else {
                        hop();
                        sleep(0x20);
                    }
                }

                @async()
                @install()
                fun move_logic() {
                    sleep(0x80);
                    
                    while(alive(BOSS.ID)) {
                        move();
                    }
                }

                @install()
                fun monstro_damage() {
                    attribute(BOSS.ID, INVISIBLE, True);
                    yield();
                    attribute(BOSS.ID, INVISIBLE, False);
                    animate(BOSS.ID, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);

                    if(_dead(BOSS.ID)) {
                        boss_defeated();
                    }
                }

                fun spawn_boss(x, y) {
                    add_enemy(MAGMAR, x, y);
                    BOSS.ID = <LAST_ENTITY>;
                    <LAST_ENTITY>[HP] = BOSS.HP;
                    animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
                    attach_script(LAST_ENTITY, DAMAGE, reference(monstro_damage));
                    attribute(LAST_ENTITY, ROOT, True);

                    following();
                    move_logic();

                    set(BOSS.PROGRESS);
                    push_music(BOSS);
                }
            };

            fun trigger_enter() {
                if!(SOULS_MEMORY.DEAD_MONSTRO) {
                    spawn_boss(0x10, 0x13);

                    subtext("Isaac vs. Monstro");
                }

                // available(BOY);
                // destroy(DOG); // teleport(BOY, 0x00, 0x00);

                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x10, 0x13);
                attach_script(LAST_ENTITY, B, reference(@install() {
                    if!(BOSS.PROGRESS) {
                        map_transition(basement_3_start, center, NONE);
                    }
                }));

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };
    };

    area level_3() {
        enum BASEMENT_LEVEL {
            NIGHT = True,
            RAIN = False,
        }

        map basement_3_start(DARK_FOREST) { // start "-|"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE, {
                    crash_both();

                    subtext("Basement Level 4");
                }),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_west = @install() {
                    map_transition(basement_3_1, east, WEST);
                },
                exit_east = @install() {
                    debug_subtext("S=9");
                },

                exit_north = @install() {
                    map_transition(basement_3_4, south_2, NORTH);
                },
                exit_south = @install() {
                    map_transition(basement_3_3, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=5");
                },
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_1(DARK_FOREST) { // west ",-"
            enum entrance {
                east = entrance(0x6f, 0x17, WEST),
                south_1 = entrance(0x65, 0x1f, NORTH),
                south_2 = entrance(0x46, 0x1f, NORTH),
                west = entrance(0x38, 0x18, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_2, north, SOUTH);
                },
                east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_start, west, EAST);
                },
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() {
                    debug_subtext("S=16");
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = @install() {
                    debug_subtext("B=2");
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=8");
                },
            }

            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                // object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                // object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_fly_exploding(0d79, 0d17);

                        add_isaac_enemy_spider(0x57, 0x16);

                        add_isaac_enemy_fly_exploding(0d92, 0d26);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_2(DARK_FOREST) { // west-south "L"
            enum entrance {
                north = entrance(0x39, 0x24, SOUTH),
                east = entrance(0x48, 0x4b, WEST),
                west = entrance(0x26, 0x4e, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_west = @install() {
                    debug_subtext("S=1");
                },
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_1, south_2, NORTH);
                },
                exit_room_3_north = nop(),
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_3, west, EAST);
                },
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x04);

                // object[0x06] = 0x01; // closes room_4_north
                // object[0x07] = 0x01; // opens room_4_west
                // object[0x0e] = 0x01; // shows room_4_decoration (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_slime(0d57, 0d61);

                        add_isaac_enemy_maggot(0x3c, 0x3c);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_3(DARK_FOREST) { // south, west-south-east "_|"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    debug_subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_start, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_2, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    debug_subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_spider(0d97, 0d55);
                        
                        add_isaac_enemy_maggot(0x59, 0x47);
                        add_isaac_enemy_maggot(0x5b, 0x49);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_4(DARK_FOREST) { // north "/\"
            enum entrance {
                east = entrance(0x6f, 0x17, WEST),
                south_1 = entrance(0x65, 0x1f, NORTH),
                south_2 = entrance(0x46, 0x1f, NORTH),
                west = entrance(0x38, 0x18, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                south_2 = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_start, north, SOUTH);
                },
                east = @install() {
                    debug_subtext("S=6");
                },
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                south_1 = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_5, north, SOUTH);
                },
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = @install() {
                    debug_subtext("B=2");
                },
                room_1_sign = nop(),
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=8");
                },
            }

            fun trigger_enter() {
                prepare_room(0x02);
                
                // object[0x02] = 0x01; // hides room_2_sign
                // object[0x02] = 0x02; // closes room_2_west
                // object[0x02] = 0x03; // opens room_2_west, closes room_2_south
                object[0x03] = 0x01; // opens room_2_south_1
                // object[0x0a] = 0x01; // shows room_2_decoration (stone -> tree)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x53, 0x13);

                        add_isaac_enemy_fly_shooting(0d92, 0d17);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_5(DARK_FOREST) { // north-south2 "|-"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_west = @install() {
                    debug_subtext("S=8");
                },
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_6, west, EAST);
                },

                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_4, south_1, NORTH);
                },
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_7, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=5");
                },
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                // object[0x04] = 0x01; // opens room_5_west
                object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x12, 0x36);

                        add_isaac_enemy_fly_exploding(0d27, 0d56);

                        add_isaac_enemy_spider(0d15, 0d69);
                        add_isaac_enemy_spider(0d22, 0d67);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_6(DARK_FOREST) { // north-south2-east "-^"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    debug_subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    debug_subtext("S=13");
                },
                exit_room_4_east = nop(),
                exit_room_3_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_5, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    debug_subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_maggot(0x5d, 0x31);

                        add_isaac_enemy_slime(0d97, 0d68);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_7(DARK_FOREST) { // north-south2-south "|"
            enum entrance {
                north = entrance(0x11, 0x25, SOUTH),
                east = entrance(0x22, 0x38, WEST),
                south = entrance(0x11, 0x55, NORTH),
                west = entrance(0x00, 0x38, EAST),

                center = entrance(0x12, 0x38, NONE),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_west = @install() {
                    debug_subtext("S=8");
                },
                exit_east = @install() {
                    debug_subtext("S=9");
                },

                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_5, south, NORTH);
                },
                exit_south = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_8, north, SOUTH);
                },
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                room_3_sniff = nop(),
                sniff = @install() {
                    debug_subtext("B=5");
                },
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                // object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                prepare_room(0x05);

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_fly_exploding(0d24, 0d56);
                        add_isaac_enemy_fly_shooting(0d11, 0d56);

                        add_isaac_enemy_maggot(0x12, 0x36);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_8(DARK_FOREST) { // north-south2-south-south "_|"
            enum entrance {
                north = entrance(0x5f, 0x25, SOUTH),
                west = entrance(0x4b, 0x4c, EAST),
                south = entrance(0x5a, 0x55, NORTH),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_south = @install() {
                    debug_subtext("S=0");
                },
                exit_room_4_west = nop(),
                exit_room_1_west = nop(),
                exit_room_1_east = nop(),
                exit_room_1_south = nop(),
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_north = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_7, south, NORTH);
                },
                exit_room_4_east = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_9, east, WEST);
                },
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                room_1_sign = nop(),
                sniff = @install() {
                    debug_subtext("B=4");
                },
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                room_1_sniff = nop(),
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x03);

                // object[0x08] = 0x01; // opens room_3_south, closes room_3_west
                // object[0x08] = 0x02; // closes room_3_west
                // object[0x0f] = 0x01; // shows room_3_decoration_1 (sign)
                // object[0x10] = 0x01; // shows room_3_decoration_2 (stone)
                // object[0x11] = 0x01; // shows room_3_decoration_3 (tree)
                // object[0x13] = 0x01; // closes room_3_north

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                        add_isaac_enemy_slime(0d96, 0d54);

                        add_isaac_enemy_maggot(0x59, 0x47);
                        add_isaac_enemy_maggot(0x5b, 0x49);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_9(DARK_FOREST) { // north-south2-south-south-east "--"
            enum entrance {
                east = entrance(0x35, 0x16, WEST),
                north = entrance(0x18, 0x1f, NORTH),
                west = entrance(0x00, 0x15, EAST),
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum ROOM {
                CLEAR_FLAG = memory(FLAG, SRAM),
            }

            enum stepon_trigger {
                exit_room_3_south = nop(),
                exit_room_4_west = nop(),
                exit_west = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    fog_wall_outside(!SOULS_MEMORY.DEAD_DARK_ONE, EAST);

                    map_transition(basement_3_boss, east, WEST);
                },
                exit_east = @install() {
                    check_exits(ROOM.CLEAR_FLAG);

                    map_transition(basement_3_8, west, EAST);
                },
                exit_south = @install() {
                    debug_subtext("S=4");
                },
                exit_room_2_south_2 = nop(),
                exit_room_2_east = nop(),
                stepon_7 = @install() {
                    debug_subtext("S=7");
                },
                exit_room_5_west = nop(),
                exit_room_5_east = nop(),

                exit_room_5_north = nop(),
                exit_room_5_south = nop(),
                exit_room_4_north = nop(),
                exit_room_3_north = nop(),
                exit_room_4_east = nop(),
                exit_room_3_west = nop(),
                exit_room_2_south_1 = nop(),
            }

            enum b_trigger {
                b_trigger_0 = @install() {
                    debug_subtext("B=0");
                },
                b_trigger_1 = @install() {
                    debug_subtext("B=1");
                },
                room_2_sign = nop(),
                sign = @install() {
                    debug_subtext("B=3");
                },
                room_3_sniff = nop(),
                room_5_sniff = nop(),
                b_trigger_6 = @install() {
                    debug_subtext("B=6");
                },
                sniff = @install() {
                    debug_subtext("B=7");
                },
                room_2_sniff = nop(),
            }

            fun trigger_enter() {
                prepare_room(0x01);

                object[0x04] = 0x01; // opens room_5_west
                // object[0x05] = 0x01; // opens room_5_east
                // object[0x0b] = 0x01; // shows room_5_decoration_1 (sign)
                // object[0x0c] = 0x01; // shows room_5_decoration_2 (tree)
                // object[0x0d] = 0x01; // shows room_5_decoration_3 (stone)

                if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                    if!(ROOM.CLEAR_FLAG) {
                    add_isaac_enemy_maggot(0x23, 0x15);

                    add_isaac_enemy_spider(0d13, 0d18);
                    add_isaac_enemy_spider(0d23, 0d25);
                    }
                }
                
                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };

        map basement_3_boss(TIMBERDRAKE) { // north-south2-south-south-east-east "drake-east"
            enum entrance {
                east = entrance(0x2b, 0x15, WEST),
                south = entrance(0x1b, 0x29, NORTH)
            }

            enum soundtrack {
                default = soundtrack(AREA_BASEMENT.MUSIC_DEFAULT, 0xff)
            }

            enum BOSS {
                PROGRESS = memory(FLAG, TEMP),

                HP = 0d150,

                MOUNT_ID = memory(WORD, TEMP),
                RIDER_ID = memory(WORD, TEMP),

                MOVE_RNG = memory(WORD, TEMP),

                CANNONBALL_X = memory(WORD, TEMP),
                CANNONBALL_Y = memory(WORD, TEMP),
                CANNONBALL_COUNT = memory(WORD, TEMP),
            }

            enum stepon_trigger {
                exit_east = @install() {
                    fog_wall_inside(!SOULS_MEMORY.DEAD_DARK_ONE, WEST);

                    map_transition(basement_3_9, west, EAST);
                },
                exit_south = @install() {
                    debug_subtext("S=1");
                }
            }

            @install()
            fun boss_defeated() {
                souls_boss_defeated(DEAD_DARK_ONE, REWARD_DARK_ONE);

                unset(BOSS.PROGRESS);
            }

            group boss_ai() {
                @install()
                @async()
                fun stack_t01() {
                    while(alive(<BOY>)) {
                        BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                        BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y];
                        yield();

                        // <DOG>[X] = <BOY>[X] - 0x05;
                        // <DOG>[Y] = <BOY>[Y];
                        // yield();
                    }
                }

                fun move() {
                    attribute(BOSS.MOUNT_ID, ROOT, True);
                    animate(BOSS.MOUNT_ID, ONCE, ANIMATION_ENEMY.LIZARD_DUCK_2);
                    control(BOSS.MOUNT_ID, True);
                    animate(BOSS.MOUNT_ID, LOOP, ANIMATION_ENEMY.LIZARD_DUCK_1);
                    sleep(0d30);

                    BOSS.MOVE_RNG = randrange(0d3);

                    if(BOSS.MOVE_RNG == 0d0) {
                        ai_move_projectile_x(BOSS.MOUNT_ID, ONION, 0d130);
                        sleep(0d80);
                        ai_move_projectile_plus(BOSS.MOUNT_ID, ONION, 0d130);
                    } else if(BOSS.MOVE_RNG == 0d1) {
                        ai_move_projectile_star(BOSS.MOUNT_ID, ONION, 0d130);
                    } else {
                        ai_move_charge_right(BOSS.MOUNT_ID, <BOY>, 0d8, 0d2);
                    }

                    animate(BOSS.MOUNT_ID, ONCE, ANIMATION_ENEMY.LIZARD_DUCK_2);
                    sleep(0d30);
                    animate(BOSS.MOUNT_ID, ONCE, DEFAULT);
                    attribute(BOSS.MOUNT_ID, ROOT, False);
                    control(BOSS.MOUNT_ID, False);

                    sleep(0d120);
                }

                @async()
                @install()
                fun move_logic() {
                    sleep(0x80);
                    
                    while(alive(BOSS.MOUNT_ID)) {
                        move();
                        
                        sleep(0x60);
                    }
                }

                fun spawn_boss(x, y) {
                    add_enemy(MAGMAR, x, y);
                    BOSS.RIDER_ID = <LAST_ENTITY>;
                    animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
                    attach_script(LAST_ENTITY, DEATH, reference(boss_defeated));
                    attribute(LAST_ENTITY, ROOT, True);
                    attribute(LAST_ENTITY, INVISIBLE, True);
                    attribute(LAST_ENTITY, INVINCIBLE, True);

                    // add_enemy(DRAKE, x, y, INACTIVE);
                    // add_enemy(FOOTKNIGHT, x, y, INACTIVE);
                    add_enemy(LIZARD_BLACK, x, y, 0x00);
                    <LAST_ENTITY>[HP] = BOSS.HP;
                    attach_script(LAST_ENTITY, DEATH, reference(boss_defeated));
                    BOSS.MOUNT_ID = <LAST_ENTITY>;

                    move_logic();
                    stack_t01();

                    set(BOSS.PROGRESS);
                    push_music(BOSS);
                }
            };

            @install()
            fun trap_door_interacted() {
                if!(BOSS.PROGRESS) {
                    map_transition(west_hut_outside, hut, NONE);
                }
            }

            fun trigger_enter() {
                object[0x00] = 0x01; // close south
                object[0x01] = 0x7e; // open east

                if!(SOULS_MEMORY.DEAD_DARK_ONE) {
                    spawn_boss(0x10, 0x13);

                    subtext("Isaac vs. Dark One");
                }

                // available(BOY);
                // destroy(DOG); // teleport(BOY, 0x00, 0x00);

                add_placeholder(ANIMATION_PLACEHOLDER.ELEVATOR, 0x10, 0x13);
                attach_script(LAST_ENTITY, B, reference(trap_door_interacted));

                isaac_init(BASEMENT_LEVEL.NIGHT, BASEMENT_LEVEL.RAIN);
            }
        };
    };
};

area dungeon_volcano() {
    enum DUNGEON_VOLCANO {
        DEFAULT_MUSIC = MUSIC.SEWER_AMBIENT_WATER,
        DEFAULT_SIDE_MUSIC = MUSIC.SEWER_AMBIENT_WATER,

        BRIDGE_TOP = memory(FLAG, SRAM),
        BRIDGE_CENTER_TOP = memory(FLAG, SRAM),
        BRIDGE_CENTER_BOTTOM = memory(FLAG, SRAM),
        CUTSCENE_STONE = memory(WORD, TEMP),
    }

    fun add_bridge_stone(index, x, y) {
        if(index == 0x0) {
            if!(DUNGEON_VOLCANO.BRIDGE_TOP) {
                add_enemy(STONE_ROUND, x, y);
                attach_script(LAST_ENTITY, B, reference(@install() {
                    map_transition(dungeon_volcano, cutscene_bridge_top, NONE);
                }));
            }
        } else if(index == 0x1) {
            if!(DUNGEON_VOLCANO.BRIDGE_CENTER_TOP) {
                add_enemy(STONE_ROUND, x, y);
                attach_script(LAST_ENTITY, B, reference(@install() {
                    map_transition(dungeon_volcano, cutscene_bridge_center_top, NONE);
                }));
            }
        } else if(index == 0x2) {
            if!(DUNGEON_VOLCANO.BRIDGE_CENTER_BOTTOM) {
                add_enemy(STONE_ROUND, x, y);
                attach_script(LAST_ENTITY, B, reference(@install() {
                    map_transition(dungeon_volcano, cutscene_bridge_center_bottom, NONE);
                }));
            }
        }
    }
    fun trigger_bridge_stone(index) {
        if(index == 0d0) {
            if(DUNGEON_VOLCANO.BRIDGE_TOP) {
                question("Jump into the volcano?[CHOICE]yes…[CHOICE]no…");
                if(MEMORY.QUESTION_ANSWER == 0d0) {
                    map_transition(dungeon_volcano, jump_bridge_top, NONE);
                } else {
                    error_walk_back(NORTH);
                }
            } else {
                error_walk_back(NORTH);
            }
        } else if(index == 0d1) {
            if(DUNGEON_VOLCANO.BRIDGE_CENTER_TOP) {
                question("Jump into the volcano?[CHOICE]yes…[CHOICE]no…");
                if(MEMORY.QUESTION_ANSWER == 0d0) {
                    if(DUNGEON_VOLCANO.BRIDGE_CENTER_BOTTOM) {
                        map_transition(dungeon_volcano, jump_bridge_center_top, NONE);
                    } else {
                        dialog("Seems way too dangerous![B]");
                        error_walk_back(NORTH);    
                    }
                } else {
                    error_walk_back(NORTH);
                }
            } else {
                error_walk_back(NORTH);
            }
        } else if(index == 0d2) {
            if(DUNGEON_VOLCANO.BRIDGE_CENTER_BOTTOM) {
                question("Jump into the volcano?[CHOICE]yes…[CHOICE]no…");
                if(MEMORY.QUESTION_ANSWER == 0d0) {
                    map_transition(dungeon_volcano, jump_bridge_center_bottom, NONE);
                } else {
                    error_walk_back(NORTH);
                }
            } else {
                error_walk_back(NORTH);
            }
        }
    }

    map dungeon_volcano(VOLCANO) {
        fun _falling_rock_cutscene(x, y, bridge_id) {
            control(NONE);
            animate(BOY, ONCE_FREEZE, INVISIBLE);
            animate(DOG, ONCE_FREEZE, INVISIBLE);
            attribute(BOY, INVINCIBLE_TEMP, True);
            attribute(DOG, INVINCIBLE_TEMP, True);

            add_enemy(STONE_ROUND, x, y);
            DUNGEON_VOLCANO.CUTSCENE_STONE = <LAST_ENTITY>;

            DUNGEON_VOLCANO.CUTSCENE_STONE[Z] = 0d2000;

            sleep(0d60);

            sound(MAGMA_HARDENING);
            object[bridge_id] = 0x7e; // show bridge

            destroy(DUNGEON_VOLCANO.CUTSCENE_STONE);
        }
        @async()
        @install()
        fun falling_rock_cutscene(x, y, bridge_id) {
            _falling_rock_cutscene(x, y, bridge_id);

            sleep(0d80);

            if(bridge_id == 0d0) {
                DUNGEON_VOLCANO.BRIDGE_TOP = True;

                map_transition(stone_room_top, south, NONE);
            } else if(bridge_id == 0d1) {
                DUNGEON_VOLCANO.BRIDGE_CENTER_TOP = True;

                map_transition(radahn_exit, south_2, NONE);
            } else if(bridge_id == 0d2) {
                DUNGEON_VOLCANO.BRIDGE_CENTER_BOTTOM = True;

                map_transition(stone_room_center_bottom, south, NONE);
            }
        }

        enum entrance {
            north_1 = entrance(0x2e, 0x05, SOUTH),
            north_2 = entrance(0x76, 0x06, SOUTH),
            south_1 = entrance(0x7d, 0xb1, NORTH),
            south_2 = entrance(0x51, 0xb1, NORTH),

            cutscene_bridge_top = entrance(0d83, 0d53, NONE, {
                falling_rock_cutscene(0d84, 0d53, 0x00);
            }),
            cutscene_bridge_center_top = entrance(0d82, 0d65, NONE, {
                falling_rock_cutscene(0d82, 0d65, 0x01);
            }),
            cutscene_bridge_center_bottom = entrance(0d78, 0d81, NONE, {
                falling_rock_cutscene(0d78, 0d81, 0x02);
            }),

            jump_bridge_top = entrance(0d83, 0d53, NONE, {
                nop(); // TODO
            }),
            jump_bridge_center_top = entrance(0d82, 0d65, NONE, {
                nop(); // TODO
            }),
            jump_bridge_center_bottom = entrance(0d78, 0d81, NONE, {
                nop(); // TODO
            }),
        }

        enum soundtrack {
            default = soundtrack(DUNGEON_VOLCANO.DEFAULT_MUSIC, 0xff)
        }

        enum ROOM {
            ID_STONE = memory(WORD, TEMP),

            Z_UPSTAIRS = 0x10,
            Z_DOWNSTAIRS = 0x20,
        }

        enum BOSS {
            DEBUG = True,

            HEAD_1_ID = memory(WORD, TEMP),
            HEAD_2_ID = memory(WORD, TEMP),
            HEAD_3_ID = memory(WORD, TEMP),

            PHASE = memory(WORD, TEMP),
        }

        enum stepon_trigger {
            exit_north_1 = @install() {
                map_transition(squidmar, south, NORTH);
            },
            exit_north_2 = @install() {
                map_transition(aquagoth, south, NORTH);
            },
            exit_south_1 = @install() {
                map_transition(east_crossing, elevator_top, SOUTH);
            },
            exit_south_2 = @install() {
                map_transition(east_crossing, elevator_bottom, SOUTH);
            },
        }

        enum b_trigger {
            gourd_north_2__1_mud_pepper = @install() {
                debug_subtext("B=0");
                _loot_chest(0x03, MUD_PEPPER, 0d01); // same as B=1
            },
            gourd_north_2__1_mud_pepper = @install() {
                debug_subtext("B=1");
                _loot_chest(0x03, MUD_PEPPER, 0d01); // same as B=0
            },
            sniff__1_water = @install() {
                debug_subtext("B=2");
                _loot(0x10, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=3");
                _loot(0x0f, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=4");
                _loot(0x0e, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=5");
                _loot(0x0d, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=6");
                _loot(0x0c, WATER, 0d01, 0d00);
            },
            sniff__1_water = @install() {
                debug_subtext("B=7");
                _loot_chest(0x0a, WATER, 0d01);
            },
            gourd_inside_2__100_money = @install() {
                debug_subtext("B=8");
                _loot_chest(0x0b, MONEY, 0d100);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=9");
                _loot(0x11, CLAY, 0d01, 0d00);
            },

            sniff__1_clay = @install() {
                debug_subtext("B=10");
                _loot(0x12, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=11");
                _loot(0x13, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=12");
                _loot(0x14, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=13");
                _loot(0x15, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=14");
                _loot(0x16, CLAY, 0d01, 0d00);
            },
            sniff__1_clay = @install() {
                debug_subtext("B=15");
                _loot(0x17, CLAY, 0d01, 0d00);
            },
            sniff__1_roots = @install() {
                debug_subtext("B=16");
                _loot(0x18, ROOTS, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=17");
                _loot(0x19, OIL, 0d01, 0d00);
            },
            sniff__1_oil = @install() {
                debug_subtext("B=18");
                _loot(0x1a, OIL, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=19");
                _loot(0x1b, ASH, 0d01, 0d00);
            },

            sniff__1_ash = @install() {
                debug_subtext("B=20");
                _loot(0x1c, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("B=21");
                _loot(0x1d, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("S=22");
                _loot(0x1e, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("S=23");
                _loot(0x1f, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("S=24");
                _loot(0x20, ASH, 0d01, 0d00);
            },
            sniff__1_ash = @install() {
                debug_subtext("S=25");
                _loot(0x21, ASH, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("S=26");
                _loot(0x22, WAX, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("S=27");
                _loot(0x23, WAX, 0d01, 0d00);
            },
            sniff__1_wax = @install() {
                debug_subtext("S=28");
                _loot(0x24, WAX, 0d01, 0d00);
            },
            gourd_north_1__1_roots = @install() {
                debug_subtext("S=29");
                _loot_chest(0x08, ROOTS, 0d01);
            },

            gourd_west_2__1_roots = @install() {
                debug_subtext("S=30");
                _loot_chest(0x07, ROOTS, 0d01);
            },
            gourd_west_1__1_clay = @install() {
                debug_subtext("S=31");
                _loot_chest(0x06, CLAY, 0d01);
            },
            gourd_south__1_mud_pepper = @install() {
                debug_subtext("S=32");
                _loot_chest(0x04, MUD_PEPPER, 0d01);
            },
            gourd_east__1_petal = @install() {
                debug_subtext("S=33");
                _loot_chest(0x05, PETAL, 0d01);
            },
        }

        @install()
        fun stone_yump() {
            fake_b();

            arg[0x10] = <SCRIPT_OWNER>[GENERAL_PURPOSE];

            <SCRIPT_OWNER>[VELOCITY] = 0d50;

            while((<SCRIPT_OWNER>[X] != arg[0x10][X]) && (<SCRIPT_OWNER>[Y] != arg[0x10][Y])) {
                if(<SCRIPT_OWNER>[X] > arg[0x10][X]) {
                    <SCRIPT_OWNER>[X]--;
                } else if(<SCRIPT_OWNER>[X] < arg[0x10][X]) {
                    <SCRIPT_OWNER>[X]++;
                }

                if(<SCRIPT_OWNER>[Y] > arg[0x10][Y]) {
                    <SCRIPT_OWNER>[Y]--;
                } else if(<SCRIPT_OWNER>[Y] < arg[0x10][Y]) {
                    <SCRIPT_OWNER>[Y]++;
                }

                sleep(0d3);
            }

            destroy(arg[0x10]);
            sound(GORE_MOSQUITO);

            <SCRIPT_OWNER>[VELOCITY] = 0d20;
            sleep(0d40);
            <SCRIPT_OWNER>[VELOCITY] = 0d10;
            sleep(0d30);

            destroy(SCRIPT_OWNER);
        }

        fun trigger_stone(x, y, entity) {
            arg[0x10] = entity;

            add_enemy(STONE_ROUND, x, y);

            <LAST_ENTITY>[GENERAL_PURPOSE] = arg[0x10];
            attach_script(LAST_ENTITY, B, reference(stone_yump));
        }

        @install()
        fun debug_triggered() {
            object[0x00] = 0x7e; // show bridge_north
        }

        fun trigger_enter() {
            if(DUNGEON_VOLCANO.BRIDGE_TOP) {
                object[0x00] = 0x7e; // show bridge_north
            } else {
                add_debug_entity(0d91, 0d51, reference(debug_triggered));
            }

            if(DUNGEON_VOLCANO.BRIDGE_CENTER_TOP) {
                object[0x01] = 0x7e; // show bridge_north
            }
            if(DUNGEON_VOLCANO.BRIDGE_CENTER_BOTTOM) {
                object[0x02] = 0x7e; // show bridge_north
            }

            // start
            add_enemy_spawner(SPARK, 0d79, 0d153, 0d05);

            // west 1
            add_enemy_spawner(SPARK, 0d64, 0d139, 0d05);
            add_enemy_spawner(SPARK, 0d41, 0d103, 0d05);

            // west gourd
            add_enemy(TENTACLE_SPIKE, 0d36, 0d66);

            // east
            add_enemy_spawner(SPARK, 0d110, 0d100, 0d05);

            // east + west
            add_enemy_spawner(SPARK, 0d48, 0d83, 0d05);
            add_enemy_spawner(SPARK, 0d35, 0d72, 0d05);

            // east + east
            add_enemy_spawner(SPARK, 0d99, 0d63, 0d05);

            // center

            // north east exit
            add_enemy(TENTACLE_SPIKE, 0d114, 0d51);


            // north west exit

            // gourd
            add_enemy(TENTACLE_WHIP, 0d55, 0d34);
            add_enemy(TENTACLE_SPIKE, 0d73, 0d47);
            trigger_stone(0d79, 0d41, <LAST_ENTITY>);

            default_init_room(True, False);

            // ramp
            add_enemy_spawner(SPARK, 0d65, 0d62, 0d05);

            add_enemy(TENTACLE_SPIKE, 0d52, 0d46);
            add_enemy(TENTACLE_SPIKE, 0d55, 0d45);
        }
    };

    map squidmar(AQUAGOTH) {
        enum entrance {
            south = entrance(0x1b, 0x51, NORTH)
        }

        enum soundtrack {
            default = soundtrack(DUNGEON_VOLCANO.DEFAULT_MUSIC, 0xff)
        }

        enum ROOM {
            ID_NPC = memory(WORD, TEMP),
        }

        enum BOSS {
            DEBUG = False,

            ID = memory(WORD, TEMP),

            PROGRESS = memory(FLAG, TEMP),

            HP = 0d500,

            ENERGY_LEVEL = memory(WORD, TEMP),
            ENERGY_LEVEL_THRESHOLD = 0d15,

            SPAWNING = memory(FLAG, TEMP),

            WAVE_COUNT = memory(WORD, TEMP),
            WAVE_COUNT_P0 = 0d5,
        }

        fun fog_wall(exit_direction:DIRECTION) {
            if(BOSS.PROGRESS) {
                fog_wall_inside(!SOULS_MEMORY.DEAD_SQUIDMAR, exit_direction);
            }
        }

        @install()
        @async()
        fun fake_exit_scanner(entity) {
            range_checker(entity, <ACTIVE>, 0x20, 0x20, {
                fog_wall(NONE);

                map_transition(dungeon_volcano, north_1, SOUTH);
            });
        }

        fun boss_defeated() {
            object[0x01] = 0x01; // hide aquagoth
            object[0x00] = 0x00; // close door

            souls_boss_defeated(DEAD_SQUIDMAR, REWARD_SQUIDMAR);
        }

        fun max_energy_check() {
            if(BOSS.ENERGY_LEVEL == BOSS.ENERGY_LEVEL_THRESHOLD) {
                attribute_bit(BOSS.ID, INVINCIBLE_TEMP, True);

                control(NONE);

                while(True) {
                    sound(TESLA);

                    arg[0x10] = randrange(0d2);
                    if(arg[0x10] == 0d0) {
                        shoot_entity_entity(BOSS.ID, LIGHTNING, BOY, 0d15, 0d0);
                        damage(BOY, arg[0x12], True);
                    } else {
                        shoot_entity_entity(BOSS.ID, LIGHTNING, DOG, 0d15, 0d0);
                        damage(DOG, arg[0x12], True);
                    }

                    sleep(0d10);

                    arg[0x12]++;
                }
            }
        }

        fun _wave_enemy_dead() {
            BOSS.WAVE_COUNT--;

            destroy(SCRIPT_OWNER);

            if(BOSS.DEBUG) {
                MEMORY.STRING_PARAMETER_1 = BOSS.WAVE_COUNT;
                MEMORY.STRING_PARAMETER_2 = BOSS.WAVE_COUNT_P0;
                debug_subtext("wave alive: [MEM1]/[MEM2]");
            }
        }
        @install()
        fun wave_enemy_dead() {
            _wave_enemy_dead();
        }

        @install()
        @async()
        fun spawn_enemy(type:ENEMY) {
            BOSS.WAVE_COUNT++;

            if(type == ENEMY.SPARK) {
                add_enemy(SPARK, 0d26, 0d51);
            } else if(type == ENEMY.MAGGOT) {
                add_enemy(MAGGOT, 0d26, 0d51);
            }

            attach_to_script(LAST_ENTITY);
            attribute(SCRIPT_OWNER, AI_RUN, True);
            // attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, True);
            attach_script(SCRIPT_OWNER, DEATH, reference(wave_enemy_dead));

            arg[0x10] = randrange(0d4);
            if(arg[0x10] == 0d0) { // north
                arg[0x12] = 0d21;
                arg[0x14] = 0d41;
            } else if(arg[0x10] == 0d1) { // east
                arg[0x12] = 0d33;
                arg[0x14] = 0d52;
            } else if(arg[0x10] == 0d2) { // south
                arg[0x12] = 0d23;
                arg[0x14] = 0d57;
            } else if(arg[0x10] == 0d3) { // west
                arg[0x12] = 0d18;
                arg[0x14] = 0d53;
            }

            walk(SCRIPT_OWNER, TILE_ABSOLUTE_DIRECT, arg[0x12], arg[0x14], SCRIPT_OWNER);
            control(SCRIPT_OWNER, False);
            // attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, False);

            if(type == ENEMY.SPARK) {
                while(alive(<SCRIPT_OWNER>)) { 
                    if(dead(BOSS.ID)) {
                        destroy(SCRIPT_OWNER);
                        end();
                    } else if(arg[0x16] < <SCRIPT_OWNER>[X]) {
                        arg[0x16] = <SCRIPT_OWNER>[X];
                        arg[0x18] = 0d0;
                    } else if(arg[0x16] == <SCRIPT_OWNER>[X]) {
                        arg[0x18]++;

                        if(arg[0x18] > 0d20) {
                            attribute(SCRIPT_OWNER, ROOT, True);

                            if(True) {
                                sound(TESLA);
                                shoot_entity_entity(SCRIPT_OWNER, LIGHTNING, BOSS.ID, 0d30, 0d0);
                                sleep(0d50);
                            }

                            attribute(SCRIPT_OWNER, INVISIBLE, True);
                            sleep(0d10);

                            attribute(SCRIPT_OWNER, INVINCIBLE_TEMP, True);
                            yield();

                            if(alive(<SCRIPT_OWNER>)) {
                                BOSS.ENERGY_LEVEL++;
                                max_energy_check();

                                if(True) {
                                    MEMORY.STRING_PARAMETER_1 = BOSS.ENERGY_LEVEL;
                                    MEMORY.STRING_PARAMETER_2 = BOSS.ENERGY_LEVEL_THRESHOLD;
                                    subtext("Energy: [MEM1]/[MEM2]");
                                }

                                _wave_enemy_dead();
                            }

                            end();
                        }
                    }

                    sleep(0d10);
                }
            }
        }

        fun spawn_wave() {
            while(BOSS.WAVE_COUNT < BOSS.WAVE_COUNT_P0) {
                spawn_enemy(SPARK);

                sleep(0d30);
            }
        }

        @install()
        fun squidmar_triggered() {
            if!(BOSS.SPAWNING) {
                BOSS.SPAWNING = True;
                yield();
                yield();
                yield();

                if(dead(BOSS.ID)) {
                    boss_defeated();
                } else {
                    if(BOSS.DEBUG) {
                        debug_memory(BOSS.ID[HP], 0d0);
                    }

                    spawn_wave();
                }

                BOSS.SPAWNING = False;
            }
        }

        fun start_boss() {
            destroy(ROOM.ID_NPC);

            BOSS.PROGRESS = True;

            object[0x00] = 0x7e; // close door

            push_music(BOSS);

            sfx_effect(SHAKING, False);

            attach_script(BOSS.ID, DAMAGE, reference(squidmar_triggered));
        }
        
        @install()
        @async()
        fun scan_npc_id(entity) {
            while(NPC_SQUIDMAR.INSANITY < NPC_SQUIDMAR.INSANITY_LIMIT) {
                yield();
            }

            start_boss();
        }

        fun trigger_enter() {
            if!(SOULS_MEMORY.DEAD_SQUIDMAR) {
                add_enemy(AQUAGOTH_ENTITY, 0x1a, 0x34);
                BOSS.ID = <LAST_ENTITY>;
                BOSS.ID[HP] = BOSS.HP;

                if(NPC_SQUIDMAR.INSANITY < NPC_SQUIDMAR.INSANITY_LIMIT) {
                    attach_script(BOSS.ID, DAMAGE, reference(npc_squidmar_triggered));

                    add_souls_npc_squidmar(0d26, 0d55);
                    ROOM.ID_NPC = <LAST_ENTITY>;
                    
                    scan_npc_id(<LAST_ENTITY>);
                } else {
                    start_boss();
                }
                
            } else {
                object[0x01] = 0x01; // hide aquagoth
            }

            default_init_room(True, False);

            add_enemy(PLACEHOLDER, 0x1b, 0x52);
            fake_exit_scanner(<LAST_ENTITY>);
        }
    };

    map aquagoth(AQUAGOTH) {
        enum entrance {
            south = entrance(0x1b, 0x51, NORTH)
        }

        enum soundtrack {
            default = soundtrack(DUNGEON_VOLCANO.DEFAULT_MUSIC, 0xff)
        }

        enum ROOM {
            FAKE_EXIT_ID = memory(WORD, TEMP),
        }

        fun fake_exit() {
            map_transition(dungeon_volcano, north_2, SOUTH);
        }

        @install()
        @async()
        fun fake_exit_scanner() {
            attach_to_script(ROOM.FAKE_EXIT_ID);

            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = <SCRIPT_OWNER>[X];
                arg[0x06] = <SCRIPT_OWNER>[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    fake_exit();
                    end();
                }

                yield();
            }
        }

        enum BOSS {
            DEFEATED = memory(FLAG, SRAM),

            DIALOG_THRESHOLD_1 = 0d1000,
            DIALOG_THRESHOLD_1_FLAG = memory(FLAG, TEMP),

            DIALOG_THRESHOLD_2 = 0d500,
            DIALOG_THRESHOLD_2_FLAG = memory(FLAG, TEMP),
        }

        fun boss_defeated() {
            set(SOULS_MEMORY.DEAD_AQUAGOTH);

            arg[0x10] = 0d40;
            while(arg[0x10] > 0d0) {
                object[0x01] = 0x00;
                yield();
                object[0x01] = 0x01;
                yield();

                arg[0x10]--;
            }
        }

        @install()
        fun aquagoth_triggered() {
            if(dead(<SCRIPT_OWNER>)) {
                boss_defeated();
            } else if!(BOSS.DIALOG_THRESHOLD_2_FLAG) {
                if(<SCRIPT_OWNER>[HP] < BOSS.DIALOG_THRESHOLD_2) {
                    set(BOSS.DIALOG_THRESHOLD_2_FLAG);

                    subtext("ugh…");
                }
            } else if!(BOSS.DIALOG_THRESHOLD_1_FLAG) {
                if(<SCRIPT_OWNER>[HP] < BOSS.DIALOG_THRESHOLD_1) {
                    set(BOSS.DIALOG_THRESHOLD_1_FLAG);

                    subtext("…");
                }
            }
        }

        fun init_room() {
            if(SOULS_MEMORY.WITH_WEATHER) {
                sfx_effect(SEPIA, True);
            }
            
            default_init_room(False, False);
        }

        fun trigger_enter() {
            aquagoth_seen();
            
            if!(SOULS_MEMORY.DEAD_AQUAGOTH) {
                add_enemy(AQUAGOTH_ENTITY, 0x1a, 0x34);
                attach_script(LAST_ENTITY, DAMAGE, reference(aquagoth_triggered));

                subtext("A fould stench is in the air.");
            } else {
                object[0x01] = 0x01;
            }

            init_room();

            add_enemy(PLACEHOLDER, 0x1b, 0x52);
            ROOM.FAKE_EXIT_ID = <LAST_ENTITY>;
            sleep(0x10);
            fake_exit_scanner();
        }
    };

    group side_volcano() {
        group northern_side_volcano() {
            map radahn_exit(VOLCANO_ROOMS) { // variant: room_nss
                enum entrance {
                    north = entrance(0x9e, 0x05, SOUTH),
                    south_1 = entrance(0x9e, 0x37, NORTH),
                    south_2 = entrance(0x84, 0x37, NORTH),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_room_nw_north = nop(),
                    exit_room_nw_west = nop(),
                    exit_south = nop(),
                    exit_room_s_south = nop(),
                    exit_room_nne_east = nop(),
                    exit_room_ns_south = nop(),
                    exit_room_sw_west = nop(),
                    exit_room_ns_north = nop(),
                    exit_room_sw_south = nop(),
                    exit_room_nne_north_1 = nop(),

                    exit_room_es_south = nop(),
                    exit_room_es_east = nop(),
                    exit_room_nne_north_2 = nop(),
                    exit_south_2 = @install() {
                        debug_subtext("S=13");

                        trigger_bridge_stone(0x1);
                    },
                    exit_south_1 = @install() {
                        debug_subtext("S=14");

                        map_transition(east_crossing, cave, SOUTH);
                    },
                    exit_north = @install() {
                        debug_subtext("S=15");

                        map_transition(radahn_arena, south, NORTH);
                    },
                    exit_room_alchemist_north = nop(),
                    exit_main_east = nop(),
                    exit_main_west = nop(),
                    exit_main_north = nop(),

                    exit_main_south = nop(),
                }
                
                enum b_trigger {
                    sniff_room_alchemist__1_ash = nop(),
                    gourd_cave_outside__3_wax = nop(),
                    gourd_cave_outside__1_wax = nop(),
                    gourd_room_ns__4_ash = nop(),
                    gourd_room_sw__4_ash = nop(),
                    gourd_main__1_call_bead = nop(),
                    gourd_alchemist_west__3_water = nop(),
                    gourd_room_s__2_wax = nop(),
                    gourd_room_s__3_ash = nop(),
                    gourd_alchemist_hidden_2__5_wax = nop(),
                    gourd_alchemist_hidden_1__6_water = nop(),
                    sniff__1_ash = @install() {
                        debug_subtext("B=11");
                        _loot_chest(0x05, ASH, 0d04);
                    },
                    sniff_room_sw__1_water = nop(),
                    sniff_room_nne__1_water = nop(),
                    sniff_room_ns__1_clay = nop(),
                    sniff__1_roots = @install() {
                        debug_subtext("B=15");
                        _loot(0x0b, ROOTS, 0d01, 0d00);
                    },
                    sniff_room_nne__1_roots = nop(),
                    sniff_room_main__1_roots = nop(),
                    sniff_cave_outside__1_roots = nop(),
                    sniff_room_es__1_oil = nop(),
                    sniff_room_s__1_oil = nop(),
                    sniff_room_nw__1_oil = nop(),
                    sniff__1_wax = @install() {
                        debug_subtext("B=22");
                        _loot(0x12, WAX, 0d01, 0d00);
                    },
                    sniff_room_ns__1_wax = nop(),
                    sniff_room_main__1_wax = nop(),
                }

                fun trigger_enter() {
                    add_bridge_stone(0x1, 0d132, 0d47);

                    default_init_room(False, False);
                }
            };
        };

        map stone_room_top(VOLCANO_ROOMS) { // variant: room_es
            enum entrance {
                east = entrance(0x67, 0x1c, WEST),
                south = entrance(0x4c, 0x39, NORTH),
            }

            enum soundtrack {
                default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_room_ns_south = nop(),
                exit_room_sw_west = nop(),
                exit_room_ns_north = nop(),
                exit_room_sw_south = nop(),
                exit_room_nne_north_1 = nop(),

                exit_south = @install() {
                    debug_subtext("S=10");

                    trigger_bridge_stone(0x0);
                },
                exit_east = @install() {
                    debug_subtext("S=11");

                    map_transition(cave_left_north_exit, west, EAST);
                },
                exit_room_nne_north_2 = nop(),
                exit_room_nss_south_2 = nop(),
                exit_room_nss_south_1 = nop(),
                exit_room_nss_north = nop(),
                exit_room_alchemist_north = nop(),
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                sniff_room_alchemist__1_ash = nop(),
                gourd_cave_outside__3_wax = nop(),
                gourd_cave_outside__1_wax = nop(),
                gourd_room_ns__4_ash = nop(),
                gourd_room_sw__4_ash = nop(),
                gourd_main__1_call_bead = nop(),
                gourd_alchemist_west__3_water = nop(),
                gourd_room_s__2_wax = nop(),
                gourd_room_s__3_ash = nop(),
                gourd_alchemist_hidden_2__5_wax = nop(),
                gourd_alchemist_hidden_1__6_water = nop(),
                sniff__1_ash = @install() {
                    debug_subtext("B=11");
                    _loot_chest(0x05, ASH, 0d04);
                },
                sniff_room_sw__1_water = nop(),
                sniff_room_nne__1_water = nop(),
                sniff_room_ns__1_clay = nop(),
                sniff_room_nss__1_roots = nop(),
                sniff_room_nne__1_roots = nop(),
                sniff_room_main__1_roots = nop(),
                sniff_cave_outside__1_roots = nop(),
                sniff__1_oil = @install() {
                    debug_subtext("B=19");
                    _loot(0x0f, OIL, 0d01, 0d00);
                },
                sniff_room_s__1_oil = nop(),
                sniff_room_nw__1_oil = nop(),
                sniff_room_nss__1_wax = nop(),
                sniff_room_ns__1_wax = nop(),
                sniff_room_main__1_wax = nop(),
            }

            fun trigger_enter() {
                add_bridge_stone(0x0, 0d76, 0d51);

                init_map(0x3a, 0x08, 0x68, 0x38); // room_es

                default_init_room(False, False);
            }
        };

        map stone_room_center_bottom(VOLCANO_ROOMS) { // variant: room_es
            enum entrance {
                east = entrance(0x67, 0x1c, WEST),
                south = entrance(0x4c, 0x39, NORTH),
            }

            enum soundtrack {
                default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
            }

            enum stepon_trigger {
                exit_room_nw_north = nop(),
                exit_room_nw_west = nop(),
                exit_south = nop(),
                exit_room_s_south = nop(),
                exit_room_nne_east = nop(),
                exit_room_ns_south = nop(),
                exit_room_sw_west = nop(),
                exit_room_ns_north = nop(),
                exit_room_sw_south = nop(),
                exit_room_nne_north_1 = nop(),

                exit_south = @install() {
                    debug_subtext("S=10");

                    trigger_bridge_stone(0x2);
                },
                exit_east = @install() {
                    debug_subtext("S=11");

                    map_transition(cave_right_entrance, west, EAST);
                },
                exit_room_nne_north_2 = nop(),
                exit_room_nss_south_2 = nop(),
                exit_room_nss_south_1 = nop(),
                exit_room_nss_north = nop(),
                exit_room_alchemist_north = nop(),
                exit_main_east = nop(),
                exit_main_west = nop(),
                exit_main_north = nop(),

                exit_main_south = nop(),
            }
            
            enum b_trigger {
                sniff_room_alchemist__1_ash = nop(),
                gourd_cave_outside__3_wax = nop(),
                gourd_cave_outside__1_wax = nop(),
                gourd_room_ns__4_ash = nop(),
                gourd_room_sw__4_ash = nop(),
                gourd_main__1_call_bead = nop(),
                gourd_alchemist_west__3_water = nop(),
                gourd_room_s__2_wax = nop(),
                gourd_room_s__3_ash = nop(),
                gourd_alchemist_hidden_2__5_wax = nop(),
                gourd_alchemist_hidden_1__6_water = nop(),
                sniff__1_ash = @install() {
                    debug_subtext("B=11");
                    _loot_chest(0x05, ASH, 0d04);
                },
                sniff_room_sw__1_water = nop(),
                sniff_room_nne__1_water = nop(),
                sniff_room_ns__1_clay = nop(),
                sniff_room_nss__1_roots = nop(),
                sniff_room_nne__1_roots = nop(),
                sniff_room_main__1_roots = nop(),
                sniff_cave_outside__1_roots = nop(),
                sniff__1_oil = @install() {
                    debug_subtext("B=19");
                    _loot(0x0f, OIL, 0d01, 0d00);
                },
                sniff_room_s__1_oil = nop(),
                sniff_room_nw__1_oil = nop(),
                sniff_room_nss__1_wax = nop(),
                sniff_room_ns__1_wax = nop(),
                sniff_room_main__1_wax = nop(),
            }

            fun trigger_enter() {
                add_bridge_stone(0x2, 0d76, 0d51);

                init_map(0x3a, 0x08, 0x68, 0x38); // room_es

                default_init_room(False, False);
            }
        };

        group cave_left() {
            map cave_left_entrance(OGLIN_CAVE) { // variant room_1 (entrance)
                enum entrance {
                    north = entrance(0x38, 0x93, SOUTH),
                    south_1 = entrance(0x40, 0xcb, NORTH),
                    south_2 = entrance(0x2c, 0xcb, NORTH),

                    teleporter_north = entrance(0x2d, 0x9e, NONE, { teleporter_in(SOUTH); }),
                    teleporter_east = entrance(0x39, 0xb4, NONE, { teleporter_in(SOUTH); }),
                    teleporter_west = entrance(0x09, 0xaa, NONE, { teleporter_in(SOUTH); }),
                    
                    waterfall = entrance(0x24, 0xc8, NONE),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_room_side_south = nop(),
                    exit_room_4_south_2 = nop(),
                    exit_room_4_south_1 = nop(),
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    exit_room_5_north = nop(),
                    exit_room_5_south_1 = nop(),
                    exit_room_5_south_2 = nop(),
                    exit_room_5_south_3 = nop(),
                    exit_room_5_west_1 = nop(),
                    exit_room_5_west_2 = nop(),

                    exit_room_5_west_3 = nop(),
                    exit_room_6_east_1 = nop(),
                    exit_room_6_east_2 = nop(),
                    exit_room_6_east_3 = nop(),
                    exit_room_6_south_1 = nop(),
                    exit_room_6_south_2 = nop(),
                    exit_room_7_east = nop(),
                    exit_room_7_north_2 = nop(),
                    exit_room_7_north_1 = nop(),
                    exit_room_7_south = nop(),

                    exit_room_4_north_3 = nop(),
                    exit_room_4_north_2 = nop(),
                    exit_room_4_north_1 = nop(),
                    exit_room_4_west = nop(),
                    exit_room_4_south_3 = nop(),
                    exit_room_3_north_2 = nop(),
                    exit_room_3_north_1 = nop(),
                    exit_room_2_north_3 = nop(),
                    exit_north = @install() {
                        debug_subtext("S=28");

                        map_transition(cave_left_north_east, south_3, NORTH);
                    },
                    exit_room_2_north_2 = nop(),

                    exit_south_1 = @install() {
                        debug_subtext("S=30");

                        map_transition(ship, door_3_1, SOUTH);
                    },
                    exit_room_2_north_1 = nop(),
                    exit__south_2 = @install() {
                        debug_subtext("S=32");
                    },
                    room_2_teleporter = nop(),
                    room_3_teleporter = nop(),
                    room_4_teleporter_south_west = nop(),
                    teleporter_east = @install() {
                        debug_subtext("S=36");
                    },
                    teleporter_west = @install() {
                        debug_subtext("S=37");

                        teleporter_out(0x09, 0xaa);
                        map_transition(cave_left_entrance, teleporter_north, NONE);
                    },
                    teleporter_north = @install() {
                        debug_subtext("S=38");


                        teleporter_out(0x2d, 0x9e);
                        map_transition(cave_left_entrance, teleporter_west, NONE);
                    },
                    room_4_teleporter_north = nop(),

                    room_side_teleporter_south = nop(),
                    room_side_teleporter_north = nop(),
                    room_5_teleporter_south = nop(),
                    room_7_teleporter_center = nop(),
                    room_7_teleporter_west = nop(),
                    room_7_teleporter_north = nop(),
                    room_5_teleporter_east = nop(),
                    room_5_teleporter_north = nop(),
                    room_6_teleporter = nop(),
                    exit_room_6_north = nop(),
                }

                enum b_trigger {
                    gourd_room_5__3_call_beads = nop(),
                    sniff_room_7__1_brimstone_2 = nop(),
                    sniff_room_side__1_brimstone_2 = nop(),
                    sniff_room_3__1_bone_1 = nop(),
                    sniff_room_2__1_bone = nop(),
                    sniff_room_4__1_bone_1 = nop(),
                    sniff_room_5__1_ash_2 = nop(),
                    sniff_room_5__1_vinegar_3 = nop(),
                    sniff_room_4__1_vinegar_2 = nop(),
                    sniff_room_2__1_water_1 = nop(),

                    sniff_room_5__1_water = nop(),
                    sniff_room_4__1_water_2 = nop(),
                    sniff__1_water_1 = @install() {
                        debug_subtext("B=12");
                        _loot(0x14, WATER, 0d01, 0d01);
                    },
                    sniff_room_4__1_wax_2 = nop(),
                    sniff_room_1__1_wax_1 = @install() {
                        debug_subtext("B=14");
                        _loot(0x12, WAX, 0d01, 0d01);
                    },
                    sniff__1_limestone = @install() {
                        debug_subtext("B=15");
                        _loot(0x11, LIMESTONE, 0d01, 0d00);
                    },
                    sniff_room_2__1_limestone_1 = nop(),
                    sniff_room_3__1_limestone_2 = nop(),
                    sniff_room_4__1_limestone_1 = nop(),
                    sniff_room_5__1_roots_1 = nop(),

                    sniff_room_side__1_ethanol_2 = nop(),
                    sniff_room_5__1_ethanol_1 = nop(),
                    sniff_room_7__1_ethanol = nop(),
                    sniff_room_5__1_crystal_2 = nop(),
                    sniff_room_6__1_crystal_1 = nop(),
                    sniff_room_6__1_clay_1 = nop(),
                    sniff_room_7 = nop(),
                    sniff__1_clay_2 = @install() { // TODO: ???
                        debug_subtext("B=27");
                        _loot(0x05, CLAY, 0d01, 0d02);
                    },
                    sniff_room_4__1_clay_1 = nop(),
                    sniff_room_4__1_oil_2 = nop(),

                    sniff_room_5__1_oil = nop(),
                    sniff_room_6__1_oil_1 = nop(),
                }

                fun init_room(index) {
                    if(index == 0d1) {
                        init_map(0x00, 0x92, 0x46, 0xcc); // room 1
                    } else if(index == 0d2) {
                        init_map(0x20, 0xd4, 0x64, 0xfa); // room 2
                    } else if(index == 0d3) {
                        init_map(0x66, 0xd4, 0xaa, 0xf8); // room 3
                    } else if(index == 0d4) {
                        init_map(0x54, 0x6e, 0xa4, 0xc2); // room 4
                    } else if(index == 0d5) {
                        init_map(0x56, 0x00, 0xaa, 0x65); // room 5
                    } else if(index == 0d6) {
                        init_map(0x0c, 0x02, 0x4c, 0x46); // room 6
                    } else if(index == 0d7) {
                        init_map(0x0c, 0x4e, 0x50, 0x84); // room 7
                    } else if(index == 0d8) {
                        init_map(0xb4, 0x46, 0xd4, 0x78); // room side
                    }
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // south
                        add_enemy(RAPTOR_PURPLE, 0d31, 0d180);

                        add_enemy(FLOWER_PURPLE, 0d21, 0d169);

                        // north
                        add_enemy(FLOWER_PURPLE, 0d58, 0d162);
                    }

                    init_room(0d1);

                    default_init_room(False, False);
                }
            };

            map cave_left_south_east(OGLIN_CAVE) { // variant room_3 (U-shape)
                enum entrance {
                    north_1 = entrance(0x72, 0xd5, SOUTH),
                    north_2 = entrance(0xa4, 0xd5, SOUTH),

                    teleporter = entrance(0x89, 0xe0, NONE, { teleporter_in(SOUTH); }),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_room_side_south = nop(),
                    exit_room_4_south_2 = nop(),
                    exit_room_4_south_1 = nop(),
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    exit_room_5_north = nop(),
                    exit_room_5_south_1 = nop(),
                    exit_room_5_south_2 = nop(),
                    exit_room_5_south_3 = nop(),
                    exit_room_5_west_1 = nop(),
                    exit_room_5_west_2 = nop(),

                    exit_room_5_west_3 = nop(),
                    exit_room_6_east_1 = nop(),
                    exit_room_6_east_2 = nop(),
                    exit_room_6_east_3 = nop(),
                    exit_room_6_south_1 = nop(),
                    exit_room_6_south_2 = nop(),
                    exit_room_7_east = nop(),
                    exit_room_7_north_2 = nop(),
                    exit_room_7_north_1 = nop(),
                    exit_room_7_south = nop(),

                    exit_room_4_north_3 = nop(),
                    exit_room_4_north_2 = nop(),
                    exit_room_4_north_1 = nop(),
                    exit_room_4_west = nop(),
                    exit_room_4_south_3 = nop(),
                    exit_north_2 = @install() {
                        debug_subtext("S=25");

                        map_transition(cave_left_north_east, south_1, NORTH);
                    },
                    exit_north_1 = @install() {
                        debug_subtext("S=26");

                        map_transition(cave_left_north_east, south_2, NORTH);
                    },
                    exit_room_2_north_3 = nop(),
                    exit_room_1_north = nop(),
                    exit_room_2_north_2 = nop(),

                    exit_room_1_south_1 = nop(),
                    exit_room_2_north_1 = nop(),
                    exit_room_1_south_2 = nop(),
                    exit_room_2_teleporter = nop(),
                    teleporter = @install() {
                        debug_subtext("S=34");
                    },
                    room_4_teleporter_south_west = nop(),
                    room_1_teleporter_east = nop(),
                    room_1_teleporter_west = nop(),
                    room_1_teleporter_north = nop(),
                    room_4_teleporter_north = nop(),

                    room_side_teleporter_south = nop(),
                    room_side_teleporter_north = nop(),
                    room_5_teleporter_south = nop(),
                    room_7_teleporter_center = nop(),
                    room_7_teleporter_west = nop(),
                    room_7_teleporter_north = nop(),
                    room_5_teleporter_east = nop(),
                    room_5_teleporter_north = nop(),
                    room_6_teleporter = nop(),
                    exit_room_6_north = nop(),
                }

                enum b_trigger {
                    gourd_room_5__3_call_beads = nop(),
                    sniff_room_7__1_brimstone_2 = nop(),
                    sniff_room_side__1_brimstone_2 = nop(),
                    sniff__1_bone_1 = @install() {
                        debug_subtext("B=3");
                        _loot(0x1d, BONE, 0d01, 0d01);
                    },
                    sniff_room_2__1_bone = nop(),
                    sniff_room_4__1_bone_1 = nop(),
                    sniff_room_5__1_ash_2 = nop(),
                    sniff_room_5__1_vinegar_3 = nop(),
                    sniff_room_4__1_vinegar_2 = nop(),
                    sniff_room_2__1_water_1 = nop(),

                    sniff_room_5__1_water = nop(),
                    sniff_room_4__1_water_2 = nop(),
                    sniff_room_1__1_water_1 = nop(),
                    sniff_room_4__1_wax_2 = nop(),
                    sniff_room_1__1_wax_1 = nop(),
                    sniff_room_1__1_limestone = nop(),
                    sniff_room_2__1_limestone_1 = nop(),
                    sniff__1_limestone_2 = @install() {
                        debug_subtext("B=17");
                        _loot(0x0f, LIMESTONE, 0d01, 0d02);
                    },
                    sniff_room_4__1_limestone_1 = nop(),
                    sniff_room_5__1_roots_1 = nop(),

                    sniff_room_side__1_ethanol_2 = nop(),
                    sniff_room_5__1_ethanol_1 = nop(),
                    sniff_room_7__1_ethanol = nop(),
                    sniff_room_5__1_crystal_2 = nop(),
                    sniff_room_6__1_crystal_1 = nop(),
                    sniff_room_6__1_clay_1 = nop(),
                    sniff_room_7 = nop(),
                    sniff__1_clay_2 = @install() { // TODO: ???
                        debug_subtext("B=27");
                        _loot(0x05, CLAY, 0d01, 0d02);
                    },
                    sniff_room_4__1_clay_1 = nop(),
                    sniff_room_4__1_oil_2 = nop(),

                    sniff_room_5__1_oil = nop(),
                    sniff_room_6__1_oil_1 = nop(),
                }

                fun init_room(index) {
                    if(index == 0d1) {
                        init_map(0x00, 0x92, 0x46, 0xcc); // room 1
                    } else if(index == 0d2) {
                        init_map(0x20, 0xd4, 0x64, 0xfa); // room 2
                    } else if(index == 0d3) {
                        init_map(0x66, 0xd4, 0xaa, 0xf8); // room 3
                    } else if(index == 0d4) {
                        init_map(0x54, 0x6e, 0xa4, 0xc2); // room 4
                    } else if(index == 0d5) {
                        init_map(0x56, 0x00, 0xaa, 0x65); // room 5
                    } else if(index == 0d6) {
                        init_map(0x0c, 0x02, 0x4c, 0x46); // room 6
                    } else if(index == 0d7) {
                        init_map(0x0c, 0x4e, 0x50, 0x84); // room 7
                    } else if(index == 0d8) {
                        init_map(0xb4, 0x46, 0xd4, 0x78); // room side
                    }
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // south
                        add_enemy(LIZARD, 0d119, 0d233);

                        add_enemy(LIZARD, 0d158, 0d238);
                    }

                    init_room(0d3);
                    default_init_room(False, False);
                }
            };
            map cave_left_south_west(OGLIN_CAVE) { // variant room_3 (U-shape)
                enum entrance {
                    north_1 = entrance(0x72, 0xd5, SOUTH),
                    north_2 = entrance(0xa4, 0xd5, SOUTH),

                    teleporter = entrance(0x89, 0xe0, NONE, { teleporter_in(SOUTH); }),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_room_side_south = nop(),
                    exit_room_4_south_2 = nop(),
                    exit_room_4_south_1 = nop(),
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    exit_room_5_north = nop(),
                    exit_room_5_south_1 = nop(),
                    exit_room_5_south_2 = nop(),
                    exit_room_5_south_3 = nop(),
                    exit_room_5_west_1 = nop(),
                    exit_room_5_west_2 = nop(),

                    exit_room_5_west_3 = nop(),
                    exit_room_6_east_1 = nop(),
                    exit_room_6_east_2 = nop(),
                    exit_room_6_east_3 = nop(),
                    exit_room_6_south_1 = nop(),
                    exit_room_6_south_2 = nop(),
                    exit_room_7_east = nop(),
                    exit_room_7_north_2 = nop(),
                    exit_room_7_north_1 = nop(),
                    exit_room_7_south = nop(),

                    exit_room_4_north_3 = nop(),
                    exit_room_4_north_2 = nop(),
                    exit_room_4_north_1 = nop(),
                    exit_room_4_west = nop(),
                    exit_room_4_south_3 = nop(),
                    exit_north_2 = @install() {
                        debug_subtext("S=25");

                        map_transition(cave_left_north_west, south_1, NORTH);
                    },
                    exit_north_1 = @install() {
                        debug_subtext("S=26");

                        map_transition(cave_left_north_west, south_2, NORTH);
                    },
                    exit_room_2_north_3 = nop(),
                    exit_room_1_north = nop(),
                    exit_room_2_north_2 = nop(),

                    exit_room_1_south_1 = nop(),
                    exit_room_2_north_1 = nop(),
                    exit_room_1_south_2 = nop(),
                    exit_room_2_teleporter = nop(),
                    teleporter = @install() {
                        debug_subtext("S=34");
                    },
                    room_4_teleporter_south_west = nop(),
                    room_1_teleporter_east = nop(),
                    room_1_teleporter_west = nop(),
                    room_1_teleporter_north = nop(),
                    room_4_teleporter_north = nop(),

                    room_side_teleporter_south = nop(),
                    room_side_teleporter_north = nop(),
                    room_5_teleporter_south = nop(),
                    room_7_teleporter_center = nop(),
                    room_7_teleporter_west = nop(),
                    room_7_teleporter_north = nop(),
                    room_5_teleporter_east = nop(),
                    room_5_teleporter_north = nop(),
                    room_6_teleporter = nop(),
                    exit_room_6_north = nop(),
                }

                enum b_trigger {
                    gourd_room_5__3_call_beads = nop(),
                    sniff_room_7__1_brimstone_2 = nop(),
                    sniff_room_side__1_brimstone_2 = nop(),
                    sniff__1_bone_1 = @install() {
                        debug_subtext("B=3");
                        _loot(0x1d, BONE, 0d01, 0d01);
                    },
                    sniff_room_2__1_bone = nop(),
                    sniff_room_4__1_bone_1 = nop(),
                    sniff_room_5__1_ash_2 = nop(),
                    sniff_room_5__1_vinegar_3 = nop(),
                    sniff_room_4__1_vinegar_2 = nop(),
                    sniff_room_2__1_water_1 = nop(),

                    sniff_room_5__1_water = nop(),
                    sniff_room_4__1_water_2 = nop(),
                    sniff_room_1__1_water_1 = nop(),
                    sniff_room_4__1_wax_2 = nop(),
                    sniff_room_1__1_wax_1 = nop(),
                    sniff_room_1__1_limestone = nop(),
                    sniff_room_2__1_limestone_1 = nop(),
                    sniff__1_limestone_2 = @install() {
                        debug_subtext("B=17");
                        _loot(0x0f, LIMESTONE, 0d01, 0d02);
                    },
                    sniff_room_4__1_limestone_1 = nop(),
                    sniff_room_5__1_roots_1 = nop(),

                    sniff_room_side__1_ethanol_2 = nop(),
                    sniff_room_5__1_ethanol_1 = nop(),
                    sniff_room_7__1_ethanol = nop(),
                    sniff_room_5__1_crystal_2 = nop(),
                    sniff_room_6__1_crystal_1 = nop(),
                    sniff_room_6__1_clay_1 = nop(),
                    sniff_room_7 = nop(),
                    sniff__1_clay_2 = @install() { // TODO: ???
                        debug_subtext("B=27");
                        _loot(0x05, CLAY, 0d01, 0d02);
                    },
                    sniff_room_4__1_clay_1 = nop(),
                    sniff_room_4__1_oil_2 = nop(),

                    sniff_room_5__1_oil = nop(),
                    sniff_room_6__1_oil_1 = nop(),
                }

                fun init_room(index) {
                    if(index == 0d1) {
                        init_map(0x00, 0x92, 0x46, 0xcc); // room 1
                    } else if(index == 0d2) {
                        init_map(0x20, 0xd4, 0x64, 0xfa); // room 2
                    } else if(index == 0d3) {
                        init_map(0x66, 0xd4, 0xaa, 0xf8); // room 3
                    } else if(index == 0d4) {
                        init_map(0x54, 0x6e, 0xa4, 0xc2); // room 4
                    } else if(index == 0d5) {
                        init_map(0x56, 0x00, 0xaa, 0x65); // room 5
                    } else if(index == 0d6) {
                        init_map(0x0c, 0x02, 0x4c, 0x46); // room 6
                    } else if(index == 0d7) {
                        init_map(0x0c, 0x4e, 0x50, 0x84); // room 7
                    } else if(index == 0d8) {
                        init_map(0xb4, 0x46, 0xd4, 0x78); // room side
                    }
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // south
                        add_enemy(RAPTOR_PURPLE, 0d152, 0d241);

                        add_enemy(RAPTOR_PURPLE, 0d109, 0d235);
                    }

                    init_room(0d3);
                    default_init_room(False, False);
                }
            };

            map cave_left_north_east(OGLIN_CAVE) { // variant room_5 (gourd)
                enum entrance {
                    north = entrance(0xa4, 0x01, SOUTH),
                    south_1 = entrance(0x96, 0x65, NORTH),
                    south_2 = entrance(0x6e, 0x65, NORTH),
                    south_3 = entrance(0x5c, 0x65, NORTH),
                    west_1 = entrance(0x57, 0x3c, EAST),
                    west_2 = entrance(0x57, 0x24, EAST),
                    west_3 = entrance(0x57, 0x0c, EAST),

                    teleporter_north = entrance(0x6b, 0x0a, NONE, { teleporter_in(SOUTH); }),
                    teleporter_east = entrance(0x99, 0x1e, NONE, { teleporter_in(SOUTH); }),
                    teleporter_south = entrance(0x81, 0x5c, NONE, { teleporter_in(SOUTH); }),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_room_side_south = nop(),
                    exit_room_4_south_2 = nop(),
                    exit_room_4_south_1 = nop(),
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    exit_north = @install() {
                        debug_subtext("S=4");

                        map_transition(cave_left_north_gourds, south, NORTH);
                    },
                    exit_south_1 = @install() {
                        debug_subtext("S=5");

                        map_transition(cave_left_south_east, north_2, SOUTH);
                    },
                    exit_south_2 = @install() {
                        debug_subtext("S=6");

                        map_transition(cave_left_south_east, north_1, SOUTH);
                    },
                    exit_south_3 = @install() {
                        debug_subtext("S=7");

                        map_transition(cave_left_entrance, north, SOUTH);
                    },
                    exit_west_1 = @install() {
                        debug_subtext("S=8");

                        map_transition(cave_left_north_west, east_3, WEST);
                    },
                    exit_west_2 = @install() {
                        debug_subtext("S=9");

                        map_transition(cave_left_north_west, east_2, WEST);
                    },

                    exit_west_3 = @install() {
                        debug_subtext("S=10");

                        map_transition(cave_left_north_west, east_1, WEST);
                    },
                    exit_room_6_east_1 = nop(),
                    exit_room_6_east_2 = nop(),
                    exit_room_6_east_3 = nop(),
                    exit_room_6_south_1 = nop(),
                    exit_room_6_south_2 = nop(),
                    exit_room_7_east = nop(),
                    exit_room_7_north_2 = nop(),
                    exit_room_7_north_1 = nop(),
                    exit_room_7_south = nop(),

                    exit_room_4_north_3 = nop(),
                    exit_room_4_north_2 = nop(),
                    exit_room_4_north_1 = nop(),
                    exit_room_4_west = nop(),
                    exit_room_4_south_3 = nop(),
                    exit_room_3_north_2 = nop(),
                    exit_room_3_north_1 = nop(),
                    exit_room_2_north_3 = nop(),
                    exit_room_1_north = nop(),
                    exit_room_2_north_2 = nop(),

                    exit_room_1_south_1 = nop(),
                    exit_room_2_north_1 = nop(),
                    exit_room_1_south_2 = nop(),
                    exit_room_2_teleporter = nop(),
                    exit_room_3_teleporter = nop(),
                    room_4_teleporter_south_west = nop(),
                    room_1_teleporter_east = nop(),
                    room_1_teleporter_west = nop(),
                    room_1_teleporter_north = nop(),
                    room_4_teleporter_north = nop(),

                    room_side_teleporter_south = nop(),
                    room_side_teleporter_north = nop(),
                    teleporter_south = @install() {
                        debug_subtext("S=42");
                    },
                    room_7_teleporter_center = nop(),
                    room_7_teleporter_west = nop(),
                    room_7_teleporter_north = nop(),
                    teleporter_east = @install() {
                        debug_subtext("S=46");

                        teleporter_out(0x99, 0x1e);
                        map_transition(cave_left_north_east, teleporter_north, NONE);
                    },
                    teleporter_north = @install() {
                        debug_subtext("S=47");

                        teleporter_out(0x6b, 0x0a);
                        map_transition(cave_left_north_east, teleporter_east, NONE);
                    },
                    room_6_teleporter = nop(),
                    exit_room_6_north = nop(),
                }

                enum b_trigger {
                    gourd__3_call_beads = @install() {
                        debug_subtext("B=0");
                        _loot_chest(0x00, CALL_BEADS, 0d03);
                    },
                    sniff_room_7__1_brimstone_2 = nop(),
                    sniff_room_side__1_brimstone_2 = nop(),
                    sniff_room_3__1_bone_1 = nop(),
                    sniff_room_2__1_bone = nop(),
                    sniff_room_4__1_bone_1 = nop(),
                    sniff__1_ash_2 = @install() {
                        debug_subtext("B=6");
                        _loot(0x1a, ASH, 0d01, 0d02);
                    },
                    sniff__1_vinegar_3 = @install() {
                        debug_subtext("B=7");
                        _loot(0x19, VINEGAR, 0d01, 0d03);
                    },
                    sniff_room_4__1_vinegar_2 = nop(),
                    sniff_room_2__1_water_1 = nop(),

                    sniff__1_water = @install() {
                        debug_subtext("B=10");
                        _loot(0x16, WATER, 0d01, 0d00);
                    },
                    sniff_room_4__1_water_2 = nop(),
                    sniff_room_1__1_water_1 = nop(),
                    sniff_room_4__1_wax_2 = nop(),
                    sniff_room_1__1_wax_1 = nop(),
                    sniff_room_1__1_limestone = nop(),
                    sniff_room_2__1_limestone_1 = nop(),
                    sniff_room_3__1_limestone_2 = nop(),
                    sniff_room_4__1_limestone_1 = nop(),
                    sniff__1_roots_1 = @install() {
                        debug_subtext("B=19");
                        _loot(0x0d, ROOTS, 0d01, 0d01);
                    },

                    sniff_room_side__1_ethanol_2 = nop(),
                    sniff__1_ethanol_1 = @install() {
                        debug_subtext("B=21");
                        _loot(0x0b, ETHANOL, 0d01, 0d01);
                    },
                    sniff_room_7__1_ethanol = nop(),
                    sniff__1_crystal_2 = @install() {
                        debug_subtext("B=23");
                        _loot(0x09, CRYSTAL, 0d01, 0d02);
                    },
                    sniff_room_6__1_crystal_1 = nop(),
                    sniff_room_6__1_clay_1 = nop(),
                    sniff_room_7 = nop(),
                    sniff__1_clay_2 = @install() { // TODO: ???
                        debug_subtext("B=27");
                        _loot(0x05, CLAY, 0d01, 0d02);
                    },
                    sniff_room_4__1_clay_1 = nop(),
                    sniff_room_4__1_oil_2 = nop(),

                    sniff__1_oil = @install() {
                        debug_subtext("B=30");
                        _loot(0x02, OIL, 0d01, 0d00);
                    },
                    sniff_room_6__1_oil_1 = nop(),
                }

                fun init_room(index) {
                    if(index == 0d1) {
                        init_map(0x00, 0x92, 0x46, 0xcc); // room 1
                    } else if(index == 0d2) {
                        init_map(0x20, 0xd4, 0x64, 0xfa); // room 2
                    } else if(index == 0d3) {
                        init_map(0x66, 0xd4, 0xaa, 0xf8); // room 3
                    } else if(index == 0d4) {
                        init_map(0x54, 0x6e, 0xa4, 0xc2); // room 4
                    } else if(index == 0d5) {
                        init_map(0x56, 0x00, 0xaa, 0x65); // room 5
                    } else if(index == 0d6) {
                        init_map(0x0c, 0x02, 0x4c, 0x46); // room 6
                    } else if(index == 0d7) {
                        init_map(0x0c, 0x4e, 0x50, 0x84); // room 7
                    } else if(index == 0d8) {
                        init_map(0xb4, 0x46, 0xd4, 0x78); // room side
                    }
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // west
                        add_enemy(FLOWER_PURPLE, 0d91, 0d75);

                        // center
                        add_enemy(LIZARD, 0d115, 0d33);

                        add_enemy(FLOWER_PURPLE, 0d116, 0d71);

                        // east
                        add_enemy(LIZARD, 0d134, 0d72);

                        add_enemy(LIZARD, 0d147, 0d13);
                    }

                    init_room(0d5);
                    default_init_room(False, False);
                }
            };
            map cave_left_north_west(OGLIN_CAVE) { // variant room_6 (exit)
                enum entrance {
                    north = entrance(0d68, 0d3, SOUTH),
                    east_1 = entrance(0x4b, 0x0c, WEST),
                    east_2 = entrance(0x4b, 0x24, WEST),
                    east_3 = entrance(0x4b, 0x3c, WEST),
                    south_1 = entrance(0x40, 0x45, NORTH),
                    south_2 = entrance(0x16, 0x45, NORTH),

                    teleporter = entrance(0x17, 0x0e, NONE, { teleporter_in(SOUTH); }),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum ROOM {
                    STONE_MOVED = memory(FLAG, SRAM),
                }

                enum stepon_trigger {
                    exit_room_side_south = nop(),
                    exit_room_4_south_2 = nop(),
                    exit_room_4_south_1 = nop(),
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    exit_room_5_north = nop(),
                    exit_room_5_south_1 = nop(),
                    exit_room_5_south_2 = nop(),
                    exit_room_5_south_3 = nop(),
                    exit_room_5_west_1 = nop(),
                    exit_room_5_west_2 = nop(),

                    exit_room_5_west_3 = nop(),
                    exit_east_1 = @install() {
                        debug_subtext("S=11");

                        map_transition(cave_left_north_east, west_3, EAST);
                    },
                    exit_east_2 = @install() {
                        debug_subtext("S=12");

                        map_transition(cave_left_north_east, west_2, EAST);
                    },
                    exit_east_3 = @install() {
                        debug_subtext("S=13");

                        map_transition(cave_left_north_east, west_1, EAST);
                    },
                    exit_south_1 = @install() {
                        debug_subtext("S=14");

                        map_transition(cave_left_south_west, north_2, SOUTH);
                    },
                    exit_south_2 = @install() {
                        debug_subtext("S=15");

                        map_transition(cave_left_south_west, north_1, SOUTH);
                    },
                    exit_room_7_east = nop(),
                    exit_room_7_north_2 = nop(),
                    exit_room_7_north_1 = nop(),
                    exit_room_7_south = nop(),

                    exit_room_4_north_3 = nop(),
                    exit_room_4_north_2 = nop(),
                    exit_room_4_north_1 = nop(),
                    exit_room_4_west = nop(),
                    exit_room_4_south_3 = nop(),
                    exit_room_3_north_2 = nop(),
                    exit_room_3_north_1 = nop(),
                    exit_room_2_north_3 = nop(),
                    exit_room_1_north = nop(),
                    exit_room_2_north_2 = nop(),

                    exit_room_1_south_1 = nop(),
                    exit_room_2_north_1 = nop(),
                    exit_room_1_south_2 = nop(),
                    exit_room_2_teleporter = nop(),
                    exit_room_3_teleporter = nop(),
                    room_4_teleporter_south_west = nop(),
                    room_1_teleporter_east = nop(),
                    room_1_teleporter_west = nop(),
                    room_1_teleporter_north = nop(),
                    room_4_teleporter_north = nop(),

                    room_side_teleporter_south = nop(),
                    room_side_teleporter_north = nop(),
                    room_5_teleporter_south = nop(),
                    room_7_teleporter_center = nop(),
                    room_7_teleporter_west = nop(),
                    room_7_teleporter_north = nop(),
                    room_5_teleporter_east = nop(),
                    room_5_teleporter_north = nop(),
                    teleporter = @install() {
                        debug_subtext("S=48");

                        if(ROOM.STONE_MOVED) {
                            teleporter_out(0d23, 0d14);
                            map_transition(bugmuck_cave_portal, teleporter, NONE);
                        }
                    },
                    exit_north = @install() {
                        debug_subtext("S=49");

                        map_transition(cave_left_north_exit, south, NORTH);
                    },
                }

                enum b_trigger {
                    gourd_room_5__3_call_beads = nop(),
                    sniff_room_7__1_brimstone_2 = nop(),
                    sniff_room_side__1_brimstone_2 = nop(),
                    sniff_room_3__1_bone_1 = nop(),
                    sniff_room_2__1_bone = nop(),
                    sniff_room_4__1_bone_1 = nop(),
                    sniff_room_5__1_ash_2 = nop(),
                    sniff_room_5__1_vinegar_3 = nop(),
                    sniff_room_4__1_vinegar_2 = nop(),
                    sniff_room_2__1_water_1 = nop(),

                    sniff_room_5__1_water = nop(),
                    sniff_room_4__1_water_2 = nop(),
                    sniff_room_1__1_water_1 = nop(),
                    sniff_room_4__1_wax_2 = nop(),
                    sniff_room_1__1_wax_1 = nop(),
                    sniff_room_1__1_limestone = nop(),
                    sniff_room_2__1_limestone_1 = nop(),
                    sniff_room_3__1_limestone_2 = nop(),
                    sniff_room_4__1_limestone_1 = nop(),
                    sniff_room_5__1_roots_1 = nop(),

                    sniff_room_side__1_ethanol_2 = nop(),
                    sniff_room_5__1_ethanol_1 = nop(),
                    sniff_room_7__1_ethanol = nop(),
                    sniff_room_5__1_crystal_2 = nop(),
                    sniff__1_crystal_1 = @install() {
                        debug_subtext("B=24");
                        _loot(0x08, CRYSTAL, 0d01, 0d01);
                    },
                    sniff__1_clay_1 = @install() {
                        debug_subtext("B=25");
                        _loot(0x07, CLAY, 0d01, 0d01);
                    },
                    sniff_room_7 = nop(),
                    sniff__1_clay_2 = @install() { // TODO: ???
                        debug_subtext("B=27");
                        _loot(0x05, CLAY, 0d01, 0d02);
                    },
                    sniff_room_4__1_clay_1 = nop(),
                    sniff_room_4__1_oil_2 = nop(),

                    sniff_room_5__1_oil = nop(),
                    sniff__1_oil_1 = @install() {
                        debug_subtext("B=31");
                        _loot(0x01, OIL, 0d01, 0d01);
                    },
                }

                fun init_room(index) {
                    if(index == 0d1) {
                        init_map(0x00, 0x92, 0x46, 0xcc); // room 1
                    } else if(index == 0d2) {
                        init_map(0x20, 0xd4, 0x64, 0xfa); // room 2
                    } else if(index == 0d3) {
                        init_map(0x66, 0xd4, 0xaa, 0xf8); // room 3
                    } else if(index == 0d4) {
                        init_map(0x54, 0x6e, 0xa4, 0xc2); // room 4
                    } else if(index == 0d5) {
                        init_map(0x56, 0x00, 0xaa, 0x65); // room 5
                    } else if(index == 0d6) {
                        init_map(0x0c, 0x02, 0x4c, 0x46); // room 6
                    } else if(index == 0d7) {
                        init_map(0x0c, 0x4e, 0x50, 0x84); // room 7
                    } else if(index == 0d8) {
                        init_map(0xb4, 0x46, 0xd4, 0x78); // room side
                    }
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // south
                        add_enemy(LIZARD, 0d43, 0d63);

                        // center
                        add_enemy(LIZARD, 0d27, 0d27);

                        add_enemy(LIZARD, 0d48, 0d52);

                        add_enemy(FLOWER_PURPLE, 0d68, 0d41);

                        // north
                        add_enemy(LIZARD, 0d50, 0d16);
                    }

                    if!(ROOM.STONE_MOVED) {
                        add_enemy(STONE_ROUND, 0d23, 0d15);
                        
                        attach_script(LAST_ENTITY, B, reference(@install() {
                            guard_levitate_stone(0d2);

                            ROOM.STONE_MOVED = True;
                        }));
                    } else {
                        add_heavy_stone(0d17, 0d17);
                    }
                    // add_palette_donor(<LAST_ENTITY>, 0d0);

                    init_room(0d6);
                    default_init_room(False, False);
                }
            };

            map cave_left_north_gourds(VOLCANO_ROOMS) { // variant: room_s
                enum entrance {
                    south = entrance(0x9e, 0x7b, NORTH),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_room_nw_north = nop(),
                    exit_room_nw_west = nop(),
                    exit_cave_south = nop(),
                    exit_south = @install() {
                        debug_subtext("S=3");

                        map_transition(cave_left_north_east, north, SOUTH);
                    },
                    exit_room_nne_east = nop(),
                    exit_room_ns_south = nop(),
                    exit_room_sw_west = nop(),
                    exit_room_ns_north = nop(),
                    exit_room_sw_south = nop(),
                    exit_room_nne_north_1 = nop(),

                    exit_room_es_south = nop(),
                    exit_room_es_east = nop(),
                    exit_room_nne_north_2 = nop(),
                    exit_room_nss_south_2 = nop(),
                    exit_room_nss_south_1 = nop(),
                    exit_room_nss_north = nop(),
                    exit_room_alchemist_north = nop(),
                    exit_main_east = nop(),
                    exit_main_west = nop(),
                    exit_main_north = nop(),

                    exit_main_south = nop(),
                }
                
                enum b_trigger {
                    sniff_room_alchemist__1_ash = nop(),
                    gourd_cave_outside__3_wax = nop(),
                    gourd_cave_outside__1_wax = nop(),
                    gourd_room_ns__4_ash = nop(),
                    gourd_room_sw__4_ash = nop(),
                    gourd_main__1_call_bead = nop(),
                    gourd_alchemist_west__3_water = nop(),
                    gourd__2_wax = @install() {
                        debug_subtext("B=7");
                        _loot_chest(0x01, WAX, 0d02);
                    },
                    gourd__3_ash = @install() {
                        debug_subtext("B=8");
                        _loot_chest(0x00, ASH, 0d03);
                    },
                    gourd_alchemist_hidden_2__5_wax = nop(),
                    gourd_alchemist_hidden_1__6_water = nop(),
                    sniff__1_ash = @install() {
                        debug_subtext("B=11");
                        _loot_chest(0x05, ASH, 0d04);
                    },
                    sniff_room_sw__1_water = nop(),
                    sniff_room_nne__1_water = nop(),
                    sniff_room_ns__1_clay = nop(),
                    sniff_room_nss__1_roots = nop(),
                    sniff_room_nne__1_roots = nop(),
                    sniff_room_main__1_roots = nop(),
                    sniff_cave_outside__1_roots = nop(),
                    sniff_room_es__1_oil = nop(),
                    sniff__1_oil = @install() {
                        debug_subtext("B=20");
                        _loot(0x10, OIL, 0d01, 0d00);
                    },
                    sniff_room_nw__1_oil = nop(),
                    sniff_room_nss__1_wax = nop(),
                    sniff_room_ns__1_wax = nop(),
                    sniff_room_main__1_wax = nop(),
                }

                fun init_room(index) {
                    if(index == 0d0) {
                        init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                    } else if(index == 0d1) {
                        init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                    } else if(index == 0d2) {
                        init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                    } else if(index == 0d3) {
                        init_map(0xbe, 0x04, 0xfc, 0x36); // room_alchemist
                    } else if(index == 0d4) {
                        init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                    } else if(index == 0d5) {
                        init_map(0x40, 0x38, 0x80, 0x6c); // room_ne
                    } else if(index == 0d6) {
                        init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                    } else if(index == 0d7) {
                        init_map(0xb4, 0x3c, 0xf8, 0x96); // room_main (downstairs)
                    } else if(index == 0d8) {
                        init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                    } else if(index == 0d9) {
                        init_map(0x3f, 0x89, 0x6c, 0xb2); // room_outside_cave
                    } else if(index == 0d10) {
                        init_map(0xba, 0x3c, 0xf8, 0x96); // room_main (upstairs)
                    }
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        add_enemy(LIZARD, 0d152, 0d94);
                    }

                    init_room(0d6);
                    default_init_room(False, False);
                }
            };

            map cave_left_north_exit(VOLCANO_ROOMS) { // variant: room_sw
                enum entrance {
                    south = entrance(0x1c, 0x3b, NORTH),
                    west = entrance(0x01, 0x24, EAST),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_room_nw_north = nop(),
                    exit_room_nw_west = nop(),
                    exit_cave_south = nop(),
                    exit_room_s_south = nop(),
                    exit_room_nne_east = nop(),
                    exit_room_ns_south = nop(),
                    exit_west = @install() {
                        debug_subtext("S=6");

                        map_transition(stone_room_top, east, WEST);
                    },
                    exit_room_ns_north = nop(),
                    exit_south = @install() {
                        debug_subtext("S=8");

                        map_transition(cave_left_north_west, north, SOUTH);
                    },
                    exit_room_nne_north_1 = nop(),

                    exit_room_es_south = nop(),
                    exit_room_es_east = nop(),
                    exit_room_nne_north_2 = nop(),
                    exit_room_nss_south_2 = nop(),
                    exit_room_nss_south_1 = nop(),
                    exit_room_nss_north = nop(),
                    exit_room_alchemist_north = nop(),
                    exit_main_east = nop(),
                    exit_main_west = nop(),
                    exit_main_north = nop(),

                    exit_main_south = nop(),
                }
                
                enum b_trigger {
                    sniff_room_alchemist__1_ash = nop(),
                    gourd_cave_outside__3_wax = nop(),
                    gourd_cave_outside__1_wax = nop(),
                    gourd_room_ns__4_ash = nop(),
                    gourd__4_ash = @install() {
                        debug_subtext("B=4");
                        _loot_chest(0x05, ASH, 0d04);
                    },
                    gourd_main__1_call_bead = nop(),
                    gourd_alchemist_west__3_water = nop(),
                    gourd_room_s__2_wax = nop(),
                    gourd_room_s__3_ash = nop(),
                    gourd_alchemist_hidden_2__5_wax = nop(),
                    gourd_alchemist_hidden_1__6_water = nop(),
                    sniff__1_ash = @install() {
                        debug_subtext("B=11");
                        _loot_chest(0x05, ASH, 0d04);
                    },
                    sniff__1_water = @install() {
                        debug_subtext("B=12");
                        _loot(0x08, WATER, 0d01, 0d00);
                    },
                    sniff_room_nne__1_water = nop(),
                    sniff_room_ns__1_clay = nop(),
                    sniff_room_nss__1_roots = nop(),
                    sniff_room_nne__1_roots = nop(),
                    sniff_room_main__1_roots = nop(),
                    sniff_cave_outside__1_roots = nop(),
                    sniff_room_es__1_oil = nop(),
                    sniff_room_s__1_oil = nop(),
                    sniff_room_nw__1_oil = nop(),
                    sniff_room_nss__1_wax = nop(),
                    sniff_room_ns__1_wax = nop(),
                    sniff_room_main__1_wax = nop(),
                }

                fun init_room(index) {
                    if(index == 0d0) {
                        init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                    } else if(index == 0d1) {
                        init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                    } else if(index == 0d2) {
                        init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                    } else if(index == 0d3) {
                        init_map(0xbe, 0x04, 0xfc, 0x36); // room_alchemist
                    } else if(index == 0d4) {
                        init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                    } else if(index == 0d5) {
                        init_map(0x40, 0x38, 0x80, 0x6c); // room_ne
                    } else if(index == 0d6) {
                        init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                    } else if(index == 0d7) {
                        init_map(0xb4, 0x3c, 0xf8, 0x96); // room_main (downstairs)
                    } else if(index == 0d8) {
                        init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                    } else if(index == 0d9) {
                        init_map(0x3f, 0x89, 0x6c, 0xb2); // room_outside_cave
                    } else if(index == 0d10) {
                        init_map(0xba, 0x3c, 0xf8, 0x96); // room_main (upstairs)
                    }
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        add_enemy(LIZARD, 0d17, 0d41);
                    }

                    init_room(0d0);
                    default_init_room(False, False);
                }
            };
        };

        group cave_right() {
            map cave_right_entrance(OGLIN_CAVE) { // variant room_4
                enum entrance {
                    north_1 = entrance(0x5e, 0x6f, SOUTH),
                    north_2 = entrance(0x7c, 0x6f, SOUTH),
                    north_3 = entrance(0x98, 0x6f, SOUTH),
                    south_1 = entrance(0x96, 0xc3, NORTH),
                    south_2 = entrance(0x6c, 0xc3, NORTH),
                    south_3 = entrance(0x5c, 0xc3, NORTH),
                    west = entrance(0x55, 0x80, EAST),

                    teleporter_north = entrance(0x81, 0x7e, NONE, { teleporter_in(SOUTH); }),
                    teleporter_south_west = entrance(0x5d, 0xa8, NONE, { teleporter_in(SOUTH); }),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_room_side_south = nop(),
                    exit_south_2 = @install() {
                        debug_subtext("S=1");

                        map_transition(cave_right_south, north_1, SOUTH);
                    },
                    exit_south_1 = @install() {
                        debug_subtext("S=2");

                        map_transition(cave_right_south, north_2, SOUTH);
                    },
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    exit_room_5_north = nop(),
                    exit_room_5_south_1 = nop(),
                    exit_room_5_south_2 = nop(),
                    exit_room_5_south_3 = nop(),
                    exit_room_5_west_1 = nop(),
                    exit_room_5_west_2 = nop(),

                    exit_room_5_west_3 = nop(),
                    exit_room_6_east_1 = nop(),
                    exit_room_6_east_2 = nop(),
                    exit_room_6_east_3 = nop(),
                    exit_room_6_south_1 = nop(),
                    exit_room_6_south_2 = nop(),
                    exit_room_7_east = nop(),
                    exit_room_7_north_2 = nop(),
                    exit_room_7_north_1 = nop(),
                    exit_room_7_south = nop(),

                    exit_north_3 = @install() {
                        debug_subtext("S=20");

                        map_transition(cave_right_side, south, NORTH);
                    },
                    exit_north_2 = @install() {
                        debug_subtext("S=21");

                        map_transition(cave_right_hammock, south, NORTH);
                    },
                    exit_north_1 = @install() {
                        debug_subtext("S=22");

                        map_transition(cave_right_gourds, south, NORTH);
                    },
                    exit_west = @install() {
                        debug_subtext("S=23");

                        map_transition(stone_room_center_bottom, east, WEST);
                    },
                    exit_south_3 = @install() {
                        debug_subtext("S=24");

                        map_transition(ship, door_3_2, SOUTH);
                    },
                    exit_room_3_north_2 = nop(),
                    exit_room_3_north_1 = nop(),
                    exit_room_2_north_3 = nop(),
                    exit_room_1_north = nop(),
                    exit_room_2_north_2 = nop(),

                    exit_room_1_south_1 = nop(),
                    exit_room_2_north_1 = nop(),
                    exit_room_1_south_2 = nop(),
                    exit_room_2_teleporter = nop(),
                    exit_room_3_teleporter = nop(),
                    teleporter_south_west = @install() {
                        debug_subtext("S=35");
                        
                        teleporter_out(0x5d, 0xa8);
                        map_transition(cave_right_side, teleporter_north, NONE);
                    },
                    room_1_teleporter_east = nop(),
                    room_1_teleporter_west = nop(),
                    room_1_teleporter_north = nop(),
                    teleporter_north = @install() {
                        debug_subtext("S=39");

                        teleporter_out(0x81, 0x7e);
                        map_transition(cave_right_side, teleporter_south, NONE);
                    },

                    room_side_teleporter_south = nop(),
                    room_side_teleporter_north = nop(),
                    room_5_teleporter_south = nop(),
                    room_7_teleporter_center = nop(),
                    room_7_teleporter_west = nop(),
                    room_7_teleporter_north = nop(),
                    room_5_teleporter_east = nop(),
                    room_5_teleporter_north = nop(),
                    room_6_teleporter = nop(),
                    exit_room_6_north = nop(),
                }

                enum b_trigger {
                    gourd_room_5__3_call_beads = nop(),
                    sniff_room_7__1_brimstone_2 = nop(),
                    sniff_room_side__1_brimstone_2 = nop(),
                    sniff_room_3__1_bone_1 = nop(),
                    sniff_room_2__1_bone = nop(),
                    sniff__1_bone_1 = @install() {
                        debug_subtext("B=5");
                        _loot(0x1b, BONE, 0d01, 0d01);
                    },
                    sniff_room_5__1_ash_2 = nop(),
                    sniff_room_5__1_vinegar_3 = nop(),
                    sniff__1_vinegar_2 = @install() {
                        debug_subtext("B=8");
                        _loot(0x18, VINEGAR, 0d01, 0d02);
                    },
                    sniff_room_2__1_water_1 = nop(),

                    sniff_room_5__1_water = nop(),
                    sniff__1_water_2 = @install() {
                        debug_subtext("B=11");
                        _loot(0x15, WATER, 0d01, 0d02);
                    },
                    sniff_room_1__1_water_1 = nop(),
                    sniff__1_wax_2 = @install() {
                        debug_subtext("B=13");
                        _loot(0x13, WAX, 0d01, 0d02);
                    },
                    sniff_room_1__1_wax_1 = nop(),
                    sniff_room_1__1_limestone = nop(),
                    sniff_room_2__1_limestone_1 = nop(),
                    sniff_room_3__1_limestone_2 = nop(),
                    sniff__1_limestone_1 = @install() {
                        debug_subtext("B=18");
                        _loot(0x0e, LIMESTONE, 0d01, 0d01);
                    },
                    sniff_room_5__1_roots_1 = nop(),

                    sniff_room_side__1_ethanol_2 = nop(),
                    sniff_room_5__1_ethanol_1 = nop(),
                    sniff_room_7__1_ethanol = nop(),
                    sniff_room_5__1_crystal_2 = nop(),
                    sniff_room_6__1_crystal_1 = nop(),
                    sniff_room_6__1_clay_1 = nop(),
                    sniff_room_7 = nop(),
                    sniff__1_clay_2 = @install() { // TODO: ???
                        debug_subtext("B=27");
                        _loot(0x05, CLAY, 0d01, 0d02);
                    },
                    sniff__1_clay_1 = @install() {
                        debug_subtext("B=28");
                        _loot(0x04, CLAY, 0d01, 0d01);
                    },
                    sniff__1_oil_2 = @install() {
                        debug_subtext("B=29");
                        _loot(0x03, OIL, 0d01, 0d02);
                    },

                    sniff_room_5__1_oil = nop(),
                    sniff_room_6__1_oil_1 = nop(),
                }

                fun init_room(index) {
                    if(index == 0d1) {
                        init_map(0x00, 0x92, 0x46, 0xcc); // room 1
                    } else if(index == 0d2) {
                        init_map(0x20, 0xd4, 0x64, 0xfa); // room 2
                    } else if(index == 0d3) {
                        init_map(0x66, 0xd4, 0xaa, 0xf8); // room 3
                    } else if(index == 0d4) {
                        init_map(0x54, 0x6e, 0xa4, 0xc2); // room 4
                    } else if(index == 0d5) {
                        init_map(0x56, 0x00, 0xaa, 0x65); // room 5
                    } else if(index == 0d6) {
                        init_map(0x0c, 0x02, 0x4c, 0x46); // room 6
                    } else if(index == 0d7) {
                        init_map(0x0c, 0x4e, 0x50, 0x84); // room 7
                    } else if(index == 0d8) {
                        init_map(0xb4, 0x46, 0xd4, 0x78); // room side
                    }
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // east
                        add_enemy(FLOWER_PURPLE, 0d149, 0d143);

                        add_enemy(FLOWER_PURPLE, 0d151, 0d179);

                        // center
                        add_enemy(RAPTOR_PURPLE, 0d112, 0d150);

                        add_enemy(FLOWER_PURPLE, 0d39, 0d132);

                        // north
                        add_enemy(FLOWER_PURPLE, 0d121, 0d122);

                        add_enemy(RAPTOR_PURPLE, 0d131, 0d161);
                    }

                    init_room(0d4);
                    default_init_room(False, False);
                }
            };

            map cave_right_south(OGLIN_CAVE) { // variant room_3 (U-shape)
                enum entrance {
                    north_1 = entrance(0x72, 0xd5, SOUTH),
                    north_2 = entrance(0xa4, 0xd5, SOUTH),

                    teleporter = entrance(0x89, 0xe0, NONE),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_room_side_south = nop(),
                    exit_room_4_south_2 = nop(),
                    exit_room_4_south_1 = nop(),
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    exit_room_5_north = nop(),
                    exit_room_5_south_1 = nop(),
                    exit_room_5_south_2 = nop(),
                    exit_room_5_south_3 = nop(),
                    exit_room_5_west_1 = nop(),
                    exit_room_5_west_2 = nop(),

                    exit_room_5_west_3 = nop(),
                    exit_room_6_east_1 = nop(),
                    exit_room_6_east_2 = nop(),
                    exit_room_6_east_3 = nop(),
                    exit_room_6_south_1 = nop(),
                    exit_room_6_south_2 = nop(),
                    exit_room_7_east = nop(),
                    exit_room_7_north_2 = nop(),
                    exit_room_7_north_1 = nop(),
                    exit_room_7_south = nop(),

                    exit_room_4_north_3 = nop(),
                    exit_room_4_north_2 = nop(),
                    exit_room_4_north_1 = nop(),
                    exit_room_4_west = nop(),
                    exit_room_4_south_3 = nop(),
                    exit_north_2 = @install() {
                        debug_subtext("S=25");

                        map_transition(cave_right_entrance, south_1, NORTH);
                    },
                    exit_north_1 = @install() {
                        debug_subtext("S=26");

                        map_transition(cave_right_entrance, south_2, NORTH);
                    },
                    exit_room_2_north_3 = nop(),
                    exit_room_1_north = nop(),
                    exit_room_2_north_2 = nop(),

                    exit_room_1_south_1 = nop(),
                    exit_room_2_north_1 = nop(),
                    exit_room_1_south_2 = nop(),
                    exit_room_2_teleporter = nop(),
                    teleporter = @install() {
                        debug_subtext("S=34");
                    },
                    room_4_teleporter_south_west = nop(),
                    room_1_teleporter_east = nop(),
                    room_1_teleporter_west = nop(),
                    room_1_teleporter_north = nop(),
                    room_4_teleporter_north = nop(),

                    room_side_teleporter_south = nop(),
                    room_side_teleporter_north = nop(),
                    room_5_teleporter_south = nop(),
                    room_7_teleporter_center = nop(),
                    room_7_teleporter_west = nop(),
                    room_7_teleporter_north = nop(),
                    room_5_teleporter_east = nop(),
                    room_5_teleporter_north = nop(),
                    room_6_teleporter = nop(),
                    exit_room_6_north = nop(),
                }

                enum b_trigger {
                    gourd_room_5__3_call_beads = nop(),
                    sniff_room_7__1_brimstone_2 = nop(),
                    sniff_room_side__1_brimstone_2 = nop(),
                    sniff__1_bone_1 = @install() {
                        debug_subtext("B=3");
                        _loot(0x1d, BONE, 0d01, 0d01);
                    },
                    sniff_room_2__1_bone = nop(),
                    sniff_room_4__1_bone_1 = nop(),
                    sniff_room_5__1_ash_2 = nop(),
                    sniff_room_5__1_vinegar_3 = nop(),
                    sniff_room_4__1_vinegar_2 = nop(),
                    sniff_room_2__1_water_1 = nop(),

                    sniff_room_5__1_water = nop(),
                    sniff_room_4__1_water_2 = nop(),
                    sniff_room_1__1_water_1 = nop(),
                    sniff_room_4__1_wax_2 = nop(),
                    sniff_room_1__1_wax_1 = nop(),
                    sniff_room_1__1_limestone = nop(),
                    sniff_room_2__1_limestone_1 = nop(),
                    sniff__1_limestone_2 = @install() {
                        debug_subtext("B=17");
                        _loot(0x0f, LIMESTONE, 0d01, 0d02);
                    },
                    sniff_room_4__1_limestone_1 = nop(),
                    sniff_room_5__1_roots_1 = nop(),

                    sniff_room_side__1_ethanol_2 = nop(),
                    sniff_room_5__1_ethanol_1 = nop(),
                    sniff_room_7__1_ethanol = nop(),
                    sniff_room_5__1_crystal_2 = nop(),
                    sniff_room_6__1_crystal_1 = nop(),
                    sniff_room_6__1_clay_1 = nop(),
                    sniff_room_7 = nop(),
                    sniff__1_clay_2 = @install() { // TODO: ???
                        debug_subtext("B=27");
                        _loot(0x05, CLAY, 0d01, 0d02);
                    },
                    sniff_room_4__1_clay_1 = nop(),
                    sniff_room_4__1_oil_2 = nop(),

                    sniff_room_5__1_oil = nop(),
                    sniff_room_6__1_oil_1 = nop(),
                }

                fun init_room(index) {
                    if(index == 0d1) {
                        init_map(0x00, 0x92, 0x46, 0xcc); // room 1
                    } else if(index == 0d2) {
                        init_map(0x20, 0xd4, 0x64, 0xfa); // room 2
                    } else if(index == 0d3) {
                        init_map(0x66, 0xd4, 0xaa, 0xf8); // room 3
                    } else if(index == 0d4) {
                        init_map(0x54, 0x6e, 0xa4, 0xc2); // room 4
                    } else if(index == 0d5) {
                        init_map(0x56, 0x00, 0xaa, 0x65); // room 5
                    } else if(index == 0d6) {
                        init_map(0x0c, 0x02, 0x4c, 0x46); // room 6
                    } else if(index == 0d7) {
                        init_map(0x0c, 0x4e, 0x50, 0x84); // room 7
                    } else if(index == 0d8) {
                        init_map(0xb4, 0x46, 0xd4, 0x78); // room side
                    }
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        // south
                        add_enemy(FLOWER_PURPLE, 0d157, 0d236);

                        add_enemy(RAPTOR_PURPLE, 0d109, 0d235);
                    }

                    init_room(0d3);
                    default_init_room(False, False);
                }
            };

            map cave_right_side(OGLIN_CAVE) { // variant room_side
                enum entrance {
                    south = entrance(0xc8, 0x77, NORTH),

                    teleporter_north = entrance(0xc3, 0x50, NONE, { teleporter_in(SOUTH); }),
                    teleporter_south = entrance(0xc1, 0x64, NONE, { teleporter_in(SOUTH); }),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_south = @install() {
                        debug_subtext("S=0");

                        map_transition(cave_right_entrance, north_3, SOUTH);
                    },
                    exit_room_4_south_2 = nop(),
                    exit_room_4_south_1 = nop(),
                    stepon_3 = @install() {
                        debug_subtext("S=3");
                    },
                    exit_room_5_north = nop(),
                    exit_room_5_south_1 = nop(),
                    exit_room_5_south_2 = nop(),
                    exit_room_5_south_3 = nop(),
                    exit_room_5_west_1 = nop(),
                    exit_room_5_west_2 = nop(),

                    exit_room_5_west_3 = nop(),
                    exit_room_6_east_1 = nop(),
                    exit_room_6_east_2 = nop(),
                    exit_room_6_east_3 = nop(),
                    exit_room_6_south_1 = nop(),
                    exit_room_6_south_2 = nop(),
                    exit_room_7_east = nop(),
                    exit_room_7_north_2 = nop(),
                    exit_room_7_north_1 = nop(),
                    exit_room_7_south = nop(),

                    exit_room_4_north_3 = nop(),
                    exit_room_4_north_2 = nop(),
                    exit_room_4_north_1 = nop(),
                    exit_room_4_west = nop(),
                    exit_room_4_south_3 = nop(),
                    exit_room_3_north_2 = nop(),
                    exit_room_3_north_1 = nop(),
                    exit_room_2_north_3 = nop(),
                    exit_room_1_north = nop(),
                    exit_room_2_north_2 = nop(),

                    exit_room_1_south_1 = nop(),
                    exit_room_2_north_1 = nop(),
                    exit_room_1_south_2 = nop(),
                    exit_room_2_teleporter = nop(),
                    exit_room_3_teleporter = nop(),
                    room_4_teleporter_south_west = nop(),
                    room_1_teleporter_east = nop(),
                    room_1_teleporter_west = nop(),
                    room_1_teleporter_north = nop(),
                    room_4_teleporter_north = nop(),

                    teleporter_south = @install() {
                        debug_subtext("S=40");

                        teleporter_out(0xc1, 0x64);
                        map_transition(cave_right_entrance, teleporter_north, NONE);
                    },
                    teleporter_north = @install() {
                        debug_subtext("S=41");

                        teleporter_out(0xc3, 0x50);
                        map_transition(cave_right_entrance, teleporter_south_west, NONE);
                    },
                    room_5_teleporter_south = nop(),
                    room_7_teleporter_center = nop(),
                    room_7_teleporter_west = nop(),
                    room_7_teleporter_north = nop(),
                    room_5_teleporter_east = nop(),
                    room_5_teleporter_north = nop(),
                    exit_room_6_teleporter = nop(),
                    exit_room_6_north = nop(),
                }

                enum b_trigger {
                    gourd_room_5__3_call_beads = nop(),
                    sniff_room_7__1_brimstone_2 = nop(),
                    sniff__1_brimstone_2 = @install() {
                        debug_subtext("B=2");
                        _loot(0x1e, BRIMSTONE, 0d01, 0d02);
                    },
                    sniff_room_3__1_bone_1 = nop(),
                    sniff_room_2__1_bone = nop(),
                    sniff_room_4__1_bone_1 = nop(),
                    sniff_room_5__1_ash_2 = nop(),
                    sniff_room_5__1_vinegar_3 = nop(),
                    sniff_room_4__1_vinegar_2 = nop(),
                    sniff_room_2__1_water_1 = nop(),

                    sniff_room_5__1_water = nop(),
                    sniff_room_4__1_water_2 = nop(),
                    sniff_room_1__1_water_1 = nop(),
                    sniff_room_4__1_wax_2 = nop(),
                    sniff_room_1__1_wax_1 = nop(),
                    sniff_room_1__1_limestone = nop(),
                    sniff_room_2__1_limestone_1 = nop(),
                    sniff_room_3__1_limestone_2 = nop(),
                    sniff_room_4__1_limestone_1 = nop(),
                    sniff_room_5__1_roots_1 = nop(),

                    sniff__1_ethanol_2 = @install() {
                        debug_subtext("B=20");
                        _loot(0x0c, ETHANOL, 0d01, 0d02);
                    },
                    sniff_room_5__1_ethanol_1 = nop(),
                    sniff_room_7__1_ethanol = nop(),
                    sniff_room_5__1_crystal_2 = nop(),
                    sniff_room_6__1_crystal_1 = nop(),
                    sniff_room_6__1_clay_1 = nop(),
                    sniff_room_7 = nop(),
                    sniff__1_clay_2 = @install() { // TODO: ???
                        debug_subtext("B=27");
                        _loot(0x05, CLAY, 0d01, 0d02);
                    },
                    sniff_room_4__1_clay_1 = nop(),
                    sniff_room_4__1_oil_2 = nop(),

                    sniff_room_5__1_oil = nop(),
                    sniff_room_6__1_oil_1 = nop(),
                }

                fun init_room(index) {
                    if(index == 0d1) {
                        init_map(0x00, 0x92, 0x46, 0xcc); // room 1
                    } else if(index == 0d2) {
                        init_map(0x20, 0xd4, 0x64, 0xfa); // room 2
                    } else if(index == 0d3) {
                        init_map(0x66, 0xd4, 0xaa, 0xf8); // room 3
                    } else if(index == 0d4) {
                        init_map(0x54, 0x6e, 0xa4, 0xc2); // room 4
                    } else if(index == 0d5) {
                        init_map(0x56, 0x00, 0xaa, 0x65); // room 5
                    } else if(index == 0d6) {
                        init_map(0x0c, 0x02, 0x4c, 0x46); // room 6
                    } else if(index == 0d7) {
                        init_map(0x0c, 0x4e, 0x50, 0x84); // room 7
                    } else if(index == 0d8) {
                        init_map(0xb4, 0x46, 0xd4, 0x78); // room side
                    }
                }

                fun trigger_enter() {
                    init_room(0d8);
                    default_init_room(False, False);
                }
            };

            map cave_right_hammock(CRUSTICIA_CAVES) { // variant: hammock
                enum entrance {
                    south = entrance(0x0f, 0x29, NORTH),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    monk = nop(),
                    monk_trigger_west = nop(),
                    monk_trigger_south = nop(),
                    exit_south = @install() {
                        debug_subtext("S=3");

                        map_transition(cave_right_entrance, north_2, SOUTH);
                    },
                    exit_ship_tavern = nop(),
                    exit_ship_small = nop(),
                    exit_cave_crates = nop(),
                    exit_cave_monk = nop(),
                }

                enum b_trigger {
                    gourd_hammock__1_water = @install() {
                        debug_subtext("B=0");
                        _loot_chest(0x03, WATER, 0d01);
                    },
                    gourd_monk_1__1_nectar = nop(),
                    gourd_monk_2__1_clay = nop(),
                    gourd_crates__1_nectar = nop(),
                    groud_tavern__1_wax = nop(),
                    gourd_ship__1_water = nop(),
                    tavern_barkeeper = nop(),
                }

                fun init_room(index) {
                    if(index == 0x00) {
                        init_map(0x00, 0x00, 0x2e, 0x2a); // hammock
                    } else if(index == 0x01) {
                        init_map(0x00, 0x38, 0x26, 0x5c); // crates
                    } else if(index == 0x02) {
                        init_map(0x32, 0x36, 0x56, 0x52); // ship
                    } else if(index == 0x03) {
                        init_map(0x58, 0x30, 0x86, 0x4e); // tavern
                    } else if(index == 0x04) {
                        init_map(0x40, 0x00, 0x66, 0x24); // monk
                    }
                }

                fun trigger_enter() {
                    // ???
                    // object[0x03] = 0x01; // loot gourd_hammock

                    init_room(0x00);
                    default_init_room(False, False);
                }
            };

            map cave_right_gourds(VOLCANO_ROOMS) { // variant: room_s
                enum entrance {
                    south = entrance(0x9e, 0x7b, NORTH),
                }

                enum soundtrack {
                    default = soundtrack(DUNGEON_VOLCANO.DEFAULT_SIDE_MUSIC, 0xff)
                }

                enum stepon_trigger {
                    exit_room_nw_north = nop(),
                    exit_room_nw_west = nop(),
                    exit_cave_south = nop(),
                    exit_south = @install() {
                        debug_subtext("S=3");

                        map_transition(cave_right_entrance, north_1, SOUTH);
                    },
                    exit_room_nne_east = nop(),
                    exit_room_ns_south = nop(),
                    exit_room_sw_west = nop(),
                    exit_room_ns_north = nop(),
                    exit_room_sw_south = nop(),
                    exit_room_nne_north_1 = nop(),

                    exit_room_es_south = nop(),
                    exit_room_es_east = nop(),
                    exit_room_nne_north_2 = nop(),
                    exit_room_nss_south_2 = nop(),
                    exit_room_nss_south_1 = nop(),
                    exit_room_nss_north = nop(),
                    exit_room_alchemist_north = nop(),
                    exit_main_east = nop(),
                    exit_main_west = nop(),
                    exit_main_north = nop(),

                    exit_main_south = nop(),
                }
                
                enum b_trigger {
                    sniff_room_alchemist__1_ash = nop(),
                    gourd_cave_outside__3_wax = nop(),
                    gourd_cave_outside__1_wax = nop(),
                    gourd_room_ns__4_ash = nop(),
                    gourd_room_sw__4_ash = nop(),
                    gourd_main__1_call_bead = nop(),
                    gourd_alchemist_west__3_water = nop(),
                    gourd__2_wax = @install() {
                        debug_subtext("B=7");
                        _loot_chest(0x01, WAX, 0d02);
                    },
                    gourd__3_ash = @install() {
                        debug_subtext("B=8");
                        _loot_chest(0x00, MUD_PEPPER, 0d01);
                    },
                    gourd_alchemist_hidden_2__5_wax = nop(),
                    gourd_alchemist_hidden_1__6_water = nop(),
                    sniff__1_ash = @install() {
                        debug_subtext("B=11");
                        _loot_chest(0x05, ASH, 0d04);
                    },
                    sniff_room_sw__1_water = nop(),
                    sniff_room_nne__1_water = nop(),
                    sniff_room_ns__1_clay = nop(),
                    sniff_room_nss__1_roots = nop(),
                    sniff_room_nne__1_roots = nop(),
                    sniff_room_main__1_roots = nop(),
                    sniff_cave_outside__1_roots = nop(),
                    sniff_room_es__1_oil = nop(),
                    sniff__1_oil = @install() {
                        debug_subtext("B=20");
                        _loot(0x10, OIL, 0d01, 0d00);
                    },
                    sniff_room_nw__1_oil = nop(),
                    sniff_room_nss__1_wax = nop(),
                    sniff_room_ns__1_wax = nop(),
                    sniff_room_main__1_wax = nop(),
                }

                fun init_room(index) {
                    if(index == 0d0) {
                        init_map(0x00, 0x04, 0x2a, 0x3c); // room_sw
                    } else if(index == 0d1) {
                        init_map(0x3a, 0x08, 0x68, 0x38); // room_es
                    } else if(index == 0d2) {
                        init_map(0x78, 0x06, 0xb0, 0x38); // room_nss
                    } else if(index == 0d3) {
                        init_map(0xbe, 0x04, 0xfc, 0x36); // room_alchemist
                    } else if(index == 0d4) {
                        init_map(0x0a, 0x3c, 0x30, 0x7c); // room_ns
                    } else if(index == 0d5) {
                        init_map(0x40, 0x38, 0x80, 0x6c); // room_ne
                    } else if(index == 0d6) {
                        init_map(0x8c, 0x46, 0xb2, 0x7c); // room_s
                    } else if(index == 0d7) {
                        init_map(0xb4, 0x3c, 0xf8, 0x96); // room_main (downstairs)
                    } else if(index == 0d8) {
                        init_map(0x01, 0x83, 0x2b, 0xb1); // room_nw
                    } else if(index == 0d9) {
                        init_map(0x3f, 0x89, 0x6c, 0xb2); // room_outside_cave
                    } else if(index == 0d10) {
                        init_map(0xba, 0x3c, 0xf8, 0x96); // room_main (upstairs)
                    }
                }

                fun trigger_enter() {
                    if(SOULS_MEMORY.WITH_TRASH_ENEMIES) {
                        add_enemy(RAPTOR_PURPLE, 0d158, 0d83);
                    }

                    init_room(0d6);
                    default_init_room(False, False);
                }
            };
        };
    };
};

group dungeon_podunk() {
    map podunk_old(PODUNK_65) {
        enum entrance {
            north = entrance(0d09, 0d00, SOUTH),
            west = entrance(0d00, 0d19, EAST),

            cinema_left = entrance(0d64, 0d15, SOUTH),
            cinema_right = entrance(0d75, 0d15, SOUTH),
        }

        enum ROOM {
            COMMENT_SOUTH = memory(FLAG, TEMP),

            COMMENT_BUILDING = memory(FLAG, TEMP),
            COMMENT_CINEMA = memory(FLAG, TEMP),
            
            COORDINATE_BUILDING_BOTTOM = 0d19 * 0x0008,
            COORDINATE_BUILDING_LEFT = 0d19 * 0x0008,
            COORDINATE_BUILDING_LEFT_THRESHOLD = 0d20 * 0x0008,
            COORDINATE_BUILDING_RIGHT = 0d121 * 0x0008,
            COORDINATE_BUILDING_RIGHT_THRESHOLD = 0d120 * 0x0008,

            COORDINATE_SOUTH_BORDER = 0d33 * 0x0008,

            COORDINATE_EAST_BORDER = 0d135 * 0x0008,

            COORDINATE_CINEMA_REACHED = 0d70 * 0x0008,
        }

        fun bug_discovered_1() {
            _add_enemy(MAGGOT, <ACTIVE>[X] - 0x50, <ACTIVE>[Y] + 0x50);
            <LAST_ENTITY>[Z] = 0x1000;
            _add_enemy(MAGGOT, <ACTIVE>[X] + 0x50, <ACTIVE>[Y] + 0x50);
            <LAST_ENTITY>[Z] = 0x1000;
        }
        fun bug_discovered_2() {
            _add_enemy(MAGGOT_RED, <ACTIVE>[X] - 0x50, <ACTIVE>[Y] - 0x50);
            <LAST_ENTITY>[Z] = 0x1000;
            _add_enemy(MAGGOT_RED, <ACTIVE>[X] + 0x50, <ACTIVE>[Y] - 0x50);
            <LAST_ENTITY>[Z] = 0x1000;
        }

        @install()
        @async()
        fun fake_exit_check() {
            while(True) {
                if!(ROOM.COMMENT_CINEMA) {
                    if(<ACTIVE>[X] > ROOM.COORDINATE_CINEMA_REACHED) {
                        set(ROOM.COMMENT_CINEMA);

                        subtext("comment 1");
                    }
                } else if(<ACTIVE>[X] > ROOM.COORDINATE_EAST_BORDER) {
                    map_transition(mansion_old, west, EAST);
                    end();
                }

                if((<ACTIVE>[Y] < ROOM.COORDINATE_BUILDING_BOTTOM) && (<ACTIVE>[X] > ROOM.COORDINATE_BUILDING_LEFT) && (<ACTIVE>[X] < ROOM.COORDINATE_BUILDING_RIGHT)) { // cinema
                    if!(ROOM.COMMENT_BUILDING) {
                        set(ROOM.COMMENT_BUILDING);

                        subtext("comment building");
                        bug_discovered_1();

                        sleep(0d120);
                    } else {
                        if(<ACTIVE>[X] < ROOM.COORDINATE_BUILDING_LEFT_THRESHOLD) { // push left
                            <ACTIVE>[X] = ROOM.COORDINATE_BUILDING_LEFT;

                            // subtext("left");
                        } else if(<ACTIVE>[X] > ROOM.COORDINATE_BUILDING_RIGHT_THRESHOLD) { // push right
                            <ACTIVE>[X] = ROOM.COORDINATE_BUILDING_RIGHT;

                            // subtext("left");
                        } else { // push bottom
                            <ACTIVE>[Y] = ROOM.COORDINATE_BUILDING_BOTTOM;
                        }
                    }
                    
                    // sleep(0x10);
                    yield();
                } else if(<ACTIVE>[Y] > ROOM.COORDINATE_SOUTH_BORDER) {
                    if!(ROOM.COMMENT_SOUTH) {
                        set(ROOM.COMMENT_SOUTH);

                        subtext("comment south 1");
                        sleep(0d120);
                        subtext("comment south 2");
                        sleep(0d120);

                        bug_discovered_2();

                        init_map(0x00, 0x00, 0d145, 0d33);
                    } else {
                        <ACTIVE>[Y] = ROOM.COORDINATE_SOUTH_BORDER;
                    }
                }

                yield();
            }
        }

        @install()
        fun cat_triggered() {
            destroy(SCRIPT_OWNER);

            subtext("todo");

            bug_discovered_1();
            bug_discovered_2();
        }

        fun trigger_enter() {
            add_placeholder(CAT_CLEANING_2, 0d122, 0d17);
            add_placeholder(CAT_CLEANING_2, 0d123, 0d17);
            attach_script(LAST_ENTITY, B, reference(cat_triggered));
            
            fade_in();

            fake_exit_check();
        }
    };

    map mansion_old(MANSION_65) {
        enum entrance {
            west = entrance(0d00, 0d106, EAST),
            south = entrance(0d35, 0d113, NORTH),
        }

        enum ROOM {
            PROFESSOR = memory(WORD, TEMP),

            COORDINATE_NORTH_BORDER = 0d22 * 0x0008,
        }

        @install()
        @async()
        fun fake_exit_check() {
            while(True) {
                if(<ACTIVE>[Y] < ROOM.COORDINATE_NORTH_BORDER) {
                    map_transition(lab_cutscene, north, NORTH);
                }

                yield();
            }
        }

        @install()
        @async()
        fun professor_glitch() {
            while(True) {
                ROOM.PROFESSOR[X] += 0x10;
                ROOM.PROFESSOR[Y] -= 0x05;
                sleep(0x05);
                ROOM.PROFESSOR[X] -= 0x20;
                sleep(0x03);
                ROOM.PROFESSOR[X] += 0x10;
                ROOM.PROFESSOR[Y] += 0x05;
                sleep(0x30);
                if(randrange(0x02)) {
                    sleep(0x50);
                }
            }
        }

        fun trigger_enter() {
            add_enemy(PROFESSOR, 0d35, 0d71);
            control(LAST_ENTITY, True);
            ROOM.PROFESSOR = <LAST_ENTITY>;
            professor_glitch();

            fade_in();

            fake_exit_check();
        }
    };

    map lab_cutscene(OMNITOPIA_PROFESSOR) {
        enum entrance {
            north = entrance(0x3e, 0x14, NONE, { door_act4_airlock_in(0d26); }),
            east = entrance(0x58, 0x57, NONE),
            west = entrance(0x1a, 0x5b, NONE),
            
            cutscene_1 = entrance(0x34, 0x59, NONE), // in front of computer
            cutscene_2 = entrance(0x3e, 0x25, NONE), // intro fight
        }

        fun open_door(object_id, flag) {
            if!(flag) {
                set(flag);
                
                sound(0xb0);
                object[object_id] = 0x7e;
            // } else {
            //     unset(flag);
            //     
            //     sound(0xb0);
            //     object[object_id] = 0x00;
            }
        }

        enum ROOM {
            DOOR_1_OPEN = memory(FLAG, TEMP),
            DOOR_2_OPEN = memory(FLAG, TEMP),
        }

        enum stepon_trigger {
            door_2_north = @install() {
                open_door(0x04, ROOM.DOOR_2_OPEN);
            },
            door_2_south = @install() {
                open_door(0x04, ROOM.DOOR_2_OPEN);
            },
            door_1_north = @install() {
                open_door(0x00, ROOM.DOOR_1_OPEN);
            },
            door_1_south = @install() {
                open_door(0x00, ROOM.DOOR_1_OPEN);
            },
            exit_east = @install() {
                debug_subtext("S=4");
            },
        }

        enum b_trigger {
            gourd = @install() {
                debug_subtext("B=0");
            },
            door_north = @install() {
                door_act4_airlock_out(0x3e, 0x14, object[0d26]);
            },
            lever = @install() {
                map_transition(podunk_new, cinema_left, NONE);
            },
        }

        fun trigger_enter() {
            fade_in();
        }
    };

    map podunk_new(PODUNK_95) {
        enum entrance {
            north = entrance(0d09, 0d00, SOUTH),
            west = entrance(0d00, 0d19, EAST),

            cinema_left = entrance(0d12, 0d13, SOUTH),
            cinema_right = entrance(0d23, 0d13, SOUTH),
        }

        enum ROOM {
            COORDINATE_BUILDING_BOTTOM = 0d17 * 0x0008,
            COORDINATE_BUILDING_RIGHT = 0d69 * 0x0008,
            COORDINATE_BUILDING_RIGHT_THRESHOLD = 0d68 * 0x0008,

            COORDINATE_EAST_BORDER = 0d84 * 0x0008,
        }

        @install()
        @async()
        fun fake_exit_check() {
            while(True) {
                if((<ACTIVE>[Y] < ROOM.COORDINATE_BUILDING_BOTTOM) && (<ACTIVE>[X] < ROOM.COORDINATE_BUILDING_RIGHT)) { // inside building
                    if(<ACTIVE>[X] > ROOM.COORDINATE_BUILDING_RIGHT_THRESHOLD) { // push right
                        <ACTIVE>[X] = ROOM.COORDINATE_BUILDING_RIGHT;
                    } else { // bush bottom
                        <ACTIVE>[Y] = ROOM.COORDINATE_BUILDING_BOTTOM;
                    }
                    
                    yield();
                } else if(<ACTIVE>[X] > ROOM.COORDINATE_EAST_BORDER) { // right
                    map_transition(mansion_modern, west, EAST);
                    end();
                }

                yield();
            }
        }

        fun trigger_enter() {
            fade_in();

            sleep(0d60);
            fake_exit_check();
        }
    };

    map mansion_modern(MANSION_95) {
        enum entrance {
            west = entrance(0d00, 0d106, EAST),
            south = entrance(0d19, 0d111, NORTH),
        }

        enum BOSS {
            ID_CARLTRON = memory(WORD, TEMP),
            ID_LEFT = memory(WORD, TEMP),
            ID_RIGHT = memory(WORD, TEMP),
            ID_BACK = memory(WORD, TEMP),

            PHASE = memory(WORD, TEMP),

            COUNTDOWN = 0x03,
        }

        group boss_ai() {
            @install()
            fun abomination_triggered() {
                if(<SCRIPT_OWNER> == BOSS.ID_CARLTRON) {
                    heal(SCRIPT_OWNER, 0x00, False);

                    // subtext("c");

                    
                    attribute(BOSS.ID_CARLTRON, NO_CLIP, True);
                    control(NONE);
                    face(ACTIVE, NORTH);
                    animate(ACTIVE, ONCE, KNOCKBACK);
                    damage(BOY, 0x05, True);
                    sleep(0x01);
                    attribute(BOSS.ID_CARLTRON, NO_CLIP, False);

                    animate(SCRIPT_OWNER, ONCE, ANIMATION_ENEMY.CARLTRON_TALK);
                    sleep(0x50);
                    animate(SCRIPT_OWNER, ONCE, DEFAULT);

                    control(BOTH);

                    if(BOSS.PHASE == 0x00) {
                        BOSS.PHASE = 0x01;
                    }
                } else if(<SCRIPT_OWNER> == BOSS.ID_LEFT) {
                    // subtext("l");

                    if(BOSS.PHASE == 0x01) {
                        if(_dead(<SCRIPT_OWNER>)) {
                            BOSS.PHASE = 0x02;
                        }
                    }
                } else if(<SCRIPT_OWNER> == BOSS.ID_RIGHT) {
                    if(BOSS.PHASE >= 0x02) {
                        if(_dead(<SCRIPT_OWNER>)) {
                            BOSS.PHASE++;
                        }
                    }
                } else if(<SCRIPT_OWNER> == BOSS.ID_BACK) {
                    if(BOSS.PHASE >= 0x02) {
                        if(_dead(<SCRIPT_OWNER>)) {
                            BOSS.PHASE++;
                        }
                    }
                }
            }

            @install()
            @async()
            fun abomination_watcher() {
                subtext("phase 0");

                while(BOSS.PHASE == 0x00) {
                    yield();
                }

                subtext("phase 1");

                animate(BOSS.ID_CARLTRON, ONCE, ANIMATION_ENEMY.CARLTRON_SMUG);

                add_enemy(THRAXX_LEFT_ARM, 0x00, 0x00);
                BOSS.ID_LEFT = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                sleep(0x50);

                while(BOSS.PHASE == 0x01) {
                    yield();
                }

                subtext("phase 2");

                animate(BOSS.ID_CARLTRON, ONCE, ANIMATION_ENEMY.CARLTRON_SMUG);

                add_enemy(THRAXX2_LEFT_ARM, 0x00, 0x00);
                BOSS.ID_LEFT = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                sleep(0x50);

                add_enemy(THRAXX_RIGHT_ARM, 0x00, 0x00);
                BOSS.ID_RIGHT = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                sleep(0x50);

                add_enemy(BONE_SNAKE, 0x00, 0x00);
                BOSS.ID_BACK = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                sleep(0x50);

                while(BOSS.PHASE == 0x02) {
                    yield();
                }

                subtext("phase 3");

                while(BOSS.PHASE == 0x03) {
                    yield();
                }

                subtext("phase 4");

                while(BOSS.PHASE == 0x04) {
                    yield();
                }

                subtext("phase 5");

                add_enemy(SALABOG, 0x00, 0x00);
                BOSS.ID_BACK = <LAST_ENTITY>;
                attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                while(BOSS.PHASE == 0x05) {
                    yield();
                }

                control(BOSS.ID_CARLTRON, True);
                attribute(BOSS.ID_CARLTRON, INVINCIBLE, True);
                face(BOSS.ID_CARLTRON, SOUTH);
                animate(BOSS.ID_CARLTRON, ONCE, ANIMATION_ENEMY.CARLTRON_DROPPING);
                sleep(0x80);

                animate(BOSS.ID_CARLTRON, LOOP, ANIMATION_ENEMY.CARLTRON_LYING);
                destroy(BOSS.ID_LEFT);
                destroy(BOSS.ID_RIGHT);
                destroy(BOSS.ID_BACK);
                sleep(0d250);

                // destroy(BOSS.ID_CARLTRON);

                subtext("yatta!");
            }

            @install()
            @async()
            fun stack_t0123() {
                while(alive(BOSS.ID_CARLTRON)) {
                    BOSS.ID_LEFT[X] = BOSS.ID_CARLTRON[X] - 0x05;
                    BOSS.ID_LEFT[Y] = BOSS.ID_CARLTRON[Y] - 0x1a;

                    // sleep(0x02);
                    yield();

                    BOSS.ID_RIGHT[X] = BOSS.ID_CARLTRON[X] + 0x05;
                    BOSS.ID_RIGHT[Y] = BOSS.ID_CARLTRON[Y] - 0x1a;

                    // sleep(0x0);
                    yield();

                    BOSS.ID_BACK[X] = BOSS.ID_CARLTRON[X];
                    BOSS.ID_BACK[Y] = BOSS.ID_CARLTRON[Y] - 0x20;

                    // sleep(0x02);
                    yield();
                }
            }

            fun add_boss(x, y) {
                add_enemy(CARLTRON, x, y);
                BOSS.ID_CARLTRON = <LAST_ENTITY>;
                <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
                attach_script(LAST_ENTITY, DAMAGE, reference(abomination_triggered));

                abomination_watcher();
                stack_t0123();
            }

        };

        fun trigger_enter() {
            add_boss(0d20, 0d81);

            fade_in();
        }
    };
};

// experimental

area experimental_room() {
    fun character_selection(character:CHARACTER) {
        if(character == CHARACTER.BOY) {
            CUSTOM_FLAG.NO_DOG = True;

            available(BOY);
            destroy(DOG); // teleport(BOY, 0x00, 0x00);

            attribute(BOY, INVINCIBLE, True);
        } else if(character == CHARACTER.DOG) {
            CUSTOM_FLAG.NO_BOY = True;

            available(DOG);
            teleport(BOY, 0x00, 0x00);

            MEMORY.DOG_WRITE = DOG.TOASTER;

            attribute(DOG, INVINCIBLE, True);

            attach_script(DOG, DAMAGE_DEATH, reference(boy_death));
        }
    }

    fun general_boss_defeated() {
        attribute(ACTIVE, INVINCIBLE, True);

        subtext("Yatta!");

        sleep(0d250);
        sleep(0d250);
    }

    fun countdown(countdown) {
        if(countdown >= 0x03) {
            subtext("3...");
            sleep(0x3c);
        }
        if(countdown >= 0x02) {
            subtext("2...");
            sleep(0x3c);
        }
        if(countdown >= 0x01) {
            subtext("1...");
            sleep(0x3c);
        }
        if(countdown >= 0x00) {
            subtext("GO");
        }
    }

    map arena(RAPTORS) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = @install() {
                debug_subtext("S=0");
            },
            exit_south = @install() {
                debug_subtext("S=1");
            },
            center = @install() {
                debug_subtext("S=2");
            }
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            if!(FLAG.IN_ANIMATION) {

                // teleport(DOG, 0x19, 0x1d);
                <DOG>[X] += 0x20;
                <DOG>[Y] += 0x20;
                crash_land(BOTH);
            }
        }
    };

    map toaster_arena(RAPTORS) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum soundtrack {
            default = soundtrack(SPACE, 0xff)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        enum BOSS {
            HEAL_AMOUNT = 0x0f,

            HIT_COUNT_MEMORY = <0x2834>,
            HIT_COUNT = 0x0a,

            COUNTDOWN = 0x03
        }

        fun boss_defeated() {
            general_boss_defeated();

            map_transition(toaster_arena, center, NONE);
        }

        fun boss_hit() {
            BOSS.HIT_COUNT_MEMORY--;

            if(BOSS.HIT_COUNT_MEMORY <= 0x00) {
                boss_defeated();
            } else {
                MEMORY.STRING_PARAMETER_1 = BOSS.HIT_COUNT_MEMORY;
                MEMORY.STRING_PARAMETER_2 = BOSS.HIT_COUNT;

                subtext("[MEM1]/[MEM2]");
            }
        }

        @install()
        fun guardbot_down() {
            boss_hit();

            yield();
            attribute(SCRIPT_OWNER, INVINCIBLE, True);

            animate(SCRIPT_OWNER, ONCE_FREEZE, ANIMATION_ENEMY.GATE_BOT_DEAD);

            sleep(0d250);
            sleep(0d250);

            cast(SCRIPT_OWNER, SCRIPT_OWNER, HEAL, BOSS.HEAL_AMOUNT);
            sleep(0d250);

            animate(SCRIPT_OWNER, ONCE, DEFAULT);
            attribute(SCRIPT_OWNER, INVINCIBLE, False);
        }

        fun spawn_guardbot(x, y) {
            add_enemy(GATE_BOT, x, y);
            <LAST_ENTITY>[HP] = SYSTEM.HP_MAX;
            attach_script(LAST_ENTITY, DAMAGE, reference(guardbot_down));
        }

        fun trigger_enter() {
            default_init_room(True, False);
            character_selection(DOG);

            close_exits(True);

            BOSS.HIT_COUNT_MEMORY = BOSS.HIT_COUNT;

            spawn_guardbot(0x29, 0x2b);
            spawn_guardbot(0x13, 0x29);
            spawn_guardbot(0x29, 0x1b);
            spawn_guardbot(0x13, 0x19);

            countdown(BOSS.COUNTDOWN);
            attribute(DOG, INVINCIBLE, False);
        }
    };

    map bomb_arena(RAPTORS) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum BOSS {
            ID = memory(WORD, TEMP),
        }

        @install()
        fun boss_defeated() {
            general_boss_defeated();

            map_transition(bomb_arena, right, NONE);
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        fun memscan() {
            // animate(BOSS.ID, LOOP, ANIMATION_ENEMY.VIGOR_FLEX);
            // yield();

            debug_memory(BOSS.ID[0x36], BOSS.ID[HP]);

            if(BOSS.ID[DAMAGE_TYPE] > 0x00) {
                heal(SCRIPT_OWNER, 0x00, False);
            }

            sleep(0x50);

            debug_memory(BOSS.ID[0x36], BOSS.ID[HP]);
        }

        fun trigger_enter() {
            close_exits(True);
            character_selection(BOY);

            add_enemy(VIGOR, 0x15, 0x1e);
            BOSS.ID = <LAST_ENTITY>;
            attach_script(LAST_ENTITY, DEATH, reference(boss_defeated));
            attach_script(LAST_ENTITY, DAMAGE, reference(memscan));

            default_init_room(True, False);
            CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.BOMBS;

            countdown(0x03);
            // attribute(BOY, INVINCIBLE, False);

            SOULS_MEMORY.BOMB_ENABLED = True;
            unlock(ENERGY_CORE);
            subtext("Start = Bomb");

            sleep(0x50);
        }
    };

    map invisible_arena(RAPTORS) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum ROOM {
            REVEALER_ID = memory(WORD, TEMP),
        }

        enum BOSS {
            BOSS_ID = memory(WORD, TEMP),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        fun boss_defeated4() {
            general_boss_defeated();

            map_transition(invisible_arena, right, NONE);
        }

        @install()
        fun revealer_triggered() {
            destroy(ROOM.REVEALER_ID);

            attribute(BOSS.BOSS_ID, INVISIBLE, False);
        }

        @install()
        @async()
        fun stack_revealer_boss() {
            while(alive(ROOM.REVEALER_ID)) {
                ROOM.REVEALER_ID[X] = BOSS.BOSS_ID[X];
                ROOM.REVEALER_ID[Y] = BOSS.BOSS_ID[Y];
                yield();
            }
        }

        fun trigger_enter() {
            close_exits(True);

            add_enemy(MAGMAR, 0x1e, 0x21);
            attribute(LAST_ENTITY, INVISIBLE, True);
            BOSS.BOSS_ID = <LAST_ENTITY>;
            attach_script(LAST_ENTITY, DEATH, reference(boss_defeated4));

            default_init_room(True, False);

            add_enemy(REVEALER_TARGET_ENTITY, 0x1e, 0x21);
            ROOM.REVEALER_ID = <LAST_ENTITY>;

            special_script(REVEALER, reference(revealer_triggered));
            stack_revealer_boss();

            countdown(0x03);
            attribute(BOY, INVINCIBLE, False);

        }
    };

    map drone_arena(RAPTORS) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum BOSS {
            RIDER_1_ID = memory(WORD, TEMP),
            MOUNT_1_ID = memory(WORD, TEMP),

            RIDER_2_ID = memory(WORD, TEMP),
            MOUNT_2_ID = memory(WORD, TEMP),

            PHASE = memory(WORD, TEMP),
            TIMER = memory(WORD, TEMP),

            COUNTDOWN = 0x03,
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        @async()
        fun stack_t01_t23() {
            while(True) {
                if(alive(BOSS.RIDER_1_ID)) {
                    BOSS.RIDER_1_ID[X] = BOSS.MOUNT_1_ID[X];
                    BOSS.RIDER_1_ID[Y] = BOSS.MOUNT_1_ID[Y] - 0x15;
                    yield();
                }
                if(alive(BOSS.RIDER_2_ID)) {
                    BOSS.RIDER_2_ID[X] = BOSS.MOUNT_2_ID[X];
                    BOSS.RIDER_2_ID[Y] = BOSS.MOUNT_2_ID[Y] - 0x15;
                    yield();
                }

                yield();
            }
        }

        fun turret(id_1, id_2, x, y, mount_type) {
            add_enemy(GATE_BOT, x, y);
            id_1 = <LAST_ENTITY>;

            add_enemy(mount_type, x, y);
            id_2 = <LAST_ENTITY>;
            attribute(LAST_ENTITY, INVISIBLE, True);
            attribute(LAST_ENTITY, INVINCIBLE, True);
            attribute(LAST_ENTITY, MUTE, True);
        }

        fun spawn_boss(x, y) {
            turret(BOSS.RIDER_1_ID, BOSS.MOUNT_1_ID, x, y, ENEMY.MOSQUITO);
            turret(BOSS.RIDER_2_ID, BOSS.MOUNT_2_ID, x, y, ENEMY.BEE);
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            spawn_boss(0x10, 0x20);
            stack_t01_t23();
            // boss_watcher();

            character_selection(BOY);
            // character_selection(DOG);
            countdown(BOSS.COUNTDOWN);
            attribute(BOY, INVINCIBLE, False);
            // attribute(DOG, INVINCIBLE, False);
        }
    };

    map rats_arena(RAPTORS) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum soundtrack {
            default = soundtrack(SPACE_NOISE, 0x30)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        enum BOSS {
            RAT_1_ID = memory(WORD, TEMP),
            RAT_1_X = 0x13,
            RAT_1_Y = 0x19,
            RAT_2_ID = memory(WORD, TEMP),
            RAT_2_X = 0x29,
            RAT_2_Y = 0x1b,
            RAT_3_ID = memory(WORD, TEMP),
            RAT_3_X = 0x13,
            RAT_3_Y = 0x25,
            RAT_4_ID = memory(WORD, TEMP),
            RAT_4_X = 0x29,
            RAT_4_Y = 0x27,

            PHASE = memory(WORD, TEMP),
            TIMER = memory(WORD, TEMP),

            COUNTDOWN = 0x03,
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        fun rat_dead(x, y, death_trigger) {
            add_enemy(RAT, x, y);
            attach_script(LAST_ENTITY, DEATH, death_trigger);
            <LAST_ENTITY>[HP] = 0x0001;

            sleep(0x20);
            destroy(SCRIPT_OWNER);
        }

        @install()
        fun rat_1_dead() {
            rat_dead(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));
        }
        @install()
        fun rat_2_dead() {
            rat_dead(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));
        }
        @install()
        fun rat_3_dead() {
            rat_dead(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));
        }
        @install()
        fun rat_4_dead() {
            rat_dead(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
        }

        fun spawn_rat(x, y, death_trigger) {
            add_enemy(RAT, x, y);
            attach_script(LAST_ENTITY, DEATH, death_trigger);
            <LAST_ENTITY>[HP] = 0x0001;
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            character_selection(DOG);
            // character_selection(DOG);
            // countdown(BOSS.COUNTDOWN);
            attribute(DOG, INVINCIBLE, False);
            // attribute(DOG, INVINCIBLE, False);

            spawn_rat(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));
            spawn_rat(BOSS.RAT_1_X, BOSS.RAT_1_Y, reference(rat_1_dead));

            sleep(0x40);

            spawn_rat(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));
            spawn_rat(BOSS.RAT_2_X, BOSS.RAT_2_Y, reference(rat_2_dead));

            sleep(0x20);

            spawn_rat(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));
            spawn_rat(BOSS.RAT_3_X, BOSS.RAT_3_Y, reference(rat_3_dead));

            sleep(0x20);

            spawn_rat(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
            spawn_rat(BOSS.RAT_4_X, BOSS.RAT_4_Y, reference(rat_4_dead));
        }
    };

    map radahn3_arena(RAPTORS) {
        enum entrance {
            north = entrance(0x1b, 0x03, SOUTH),
            south = entrance(0x1d, 0x33, NORTH),

            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum soundtrack {
            default = soundtrack(BOSS, 0xff)
        }

        enum stepon_trigger {
            exit_north = nop(),
            exit_south = nop(),
            center = nop(),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        enum BOSS {
            DEBUG = False,

            RIDER_ID = memory(WORD, TEMP),
            MOUNT_ID = memory(WORD, TEMP),

            PHASE = memory(WORD, TEMP),
            TIMER = memory(WORD, TEMP),

            HP = 0d1000,

            GRAB_DISTANCE = 0d30,
            GRAB_DAMAGE = 0d10,

            // p1

            P1_THRESHOLD = 0x320, // 800
            P1_TIME_BEFORE_SALVAGE = 0x500,

            // p2

            P2_THRESHOLD = 0x1f4, // 500
            P2_TIME_BEFORE_SALVAGE = 0x300,

            RANDOM_SPELL = memory(WORD, TEMP),
            TIME_BEFORE_RANDOM_SPELL = 0x300,
        }

        fun boss_killed() {
            nop();
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while(alive(BOSS.MOUNT_ID)) {
                BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                BOSS.RIDER_ID[Y] = BOSS.MOUNT_ID[Y] - 0x15;
                BOSS.RIDER_ID[VELOCITY] = BOSS.MOUNT_ID[VELOCITY];
                
                sleep(0d2);
            }
        }

        fun cast_salvage(target:CHARACTER, count, level) {
            // TODO: flash/fireball, depending whether or not it's dodgeable?

            animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_CAST_1);

            if(count > 0d2) {
                cast(BOSS.RIDER_ID, target, FIREBALL, level);
            }
            cast(BOSS.RIDER_ID, target, FLASH, level);
            if(count > 0d2) {
                cast(BOSS.RIDER_ID, target, FIREBALL, level);
            }
            cast(BOSS.RIDER_ID, target, FLASH, level);
        }

        @install()
        fun boss_damage() {
            // animate(BOSS.RIDER_ID, ONCE, ANIMATION_ENEMY.VERMINATOR_DAMAGE);

            if(BOSS.PHASE == 0x00) {
                BOSS.TIMER = 0x00;

                if(BOSS.RIDER_ID[HP] < BOSS.P1_THRESHOLD) {
                    BOSS.PHASE = 0x01;
                }
            } else if(BOSS.PHASE == 0x01) {
                if(BOSS.RIDER_ID[HP] < BOSS.P2_THRESHOLD) {
                    BOSS.PHASE = 0x02;
                }
            } else if(BOSS.PHASE == 0x02) {
                BOSS.TIMER -= 0x60;
            }

            if(BOSS.DEBUG) {
                MEMORY.STRING_PARAMETER_1 = BOSS.RIDER_ID[HP];
                MEMORY.STRING_PARAMETER_2 = BOSS.HP;

                subtext("Rider = [MEM1]/[MEM2]");
            }
        }

        @install()
        @async()
        fun boss_watcher() {
            if(BOSS.DEBUG) {
                subtext("phase 0");
            }

            while(BOSS.PHASE == 0x00) {
                if(BOSS.TIMER > BOSS.P1_TIME_BEFORE_SALVAGE) {
                    cast_salvage(ACTIVE, 0d2, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[0x0b] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER++;
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext("phase 1");
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, FORCE_FIELD, 0x05);
            cast(BOSS.RIDER_ID, ACTIVE, CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                if(BOSS.TIMER > BOSS.P2_TIME_BEFORE_SALVAGE) {
                    cast_salvage(ACTIVE, 0d2, 0x00);

                    BOSS.TIMER = 0x00;
                }
            
                if(BOSS.RIDER_ID[PALETTE] == 0x0800) { // TODO: buggy, since menu resets paletts
                    BOSS.TIMER++;
                }
                yield();
            }

            BOSS.TIMER = 0x0000;
            cast(BOSS.RIDER_ID, BOSS.RIDER_ID, FORCE_FIELD, 0x05);
            cast(BOSS.RIDER_ID, ACTIVE, CONFOUND, 0x05);

            while(BOSS.PHASE == 0x01) {
                BOSS.TIMER++;

                if(BOSS.TIMER > BOSS.TIME_BEFORE_RANDOM_SPELL) {
                    BOSS.TIMER = 0x0000;

                    BOSS.RANDOM_SPELL = randrange(0x03);

                    if(BOSS.RANDOM_SPELL == 0x00) {
                        cast(BOSS.RIDER_ID, BOSS.RIDER_ID, FORCE_FIELD, 0x05);
                        cast(BOSS.RIDER_ID, ACTIVE, CONFOUND, 0x05);
                    } else if(BOSS.RANDOM_SPELL == 0x01) {
                        cast(BOSS.RIDER_ID, ACTIVE, DRAIN, 0x30);
                    } else if(BOSS.RANDOM_SPELL == 0x02) {
                        cast(BOSS.RIDER_ID, ACTIVE, PLAGUE, 0x01);
                    } 
                }
                yield();
            }

            if(BOSS.DEBUG) {
                subtext("phase 2");
            }

            boss_killed();
        }

        fun spawn_boss(x, y) {
            add_enemy(VERMINATOR, x, y);
            <LAST_ENTITY>[HP] = BOSS.HP;
            BOSS.RIDER_ID = <LAST_ENTITY>;
            attach_script(LAST_ENTITY, DAMAGE, reference(boss_damage));
            attribute(LAST_ENTITY, ROOT, True);

            add_enemy(STERLING, x, y);
            BOSS.MOUNT_ID = <LAST_ENTITY>;
            // attach_sterling_script_to_last_entity();
            // attribute(LAST_ENTITY, ROOT, True);
        }

        fun trigger_enter() {
            // character_selection(BOY);
            
            if!(FLAG.IN_ANIMATION) {
                crash_both();
            }

            default_init_room(True, False);

            if!(SOULS_MEMORY.DEAD_ARENA_RADAHN) {
                close_exits(True);

                spawn_boss(0d16, 0d19);

                attach_sterling_script(BOSS.MOUNT_ID, True, BOSS.GRAB_DISTANCE, 0d40, 0d25, 0x0118, BOSS.GRAB_DAMAGE);
                stack_t01_offset();
                boss_watcher();
            }
        }
    };

    map isaac3_arena(RAPTORS) { // unused
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = @install() {
                debug_subtext("S=0");
            },
            exit_south = @install() {
                debug_subtext("S=1");
            },
            center = @install() {
                debug_subtext("S=2");
            }
        }

        enum BOSS {
            MOUNT_ID = memory(WORD, TEMP),
            RIDER_ID = memory(WORD, TEMP),

            FOLLOWING = memory(WORD, TEMP),

            PUKE_HELPER = memory(WORD, TEMP),

            MOVE_RNG = memory(WORD, TEMP),

            CANNONBALL_X = memory(WORD, TEMP),
            CANNONBALL_Y = memory(WORD, TEMP),
            CANNONBALL_COUNT = memory(WORD, TEMP),
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @install()
        fun shoot_w() {
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x20, 0x80, 0x10, 0xff);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, -0x20, 0x80, 0x10, 0xff);
        }

        @install()
        fun shoot_line() {
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            sleep(0x0a);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            sleep(0x0a);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            sleep(0x0a);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            sleep(0x0a);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
            sleep(0x0a);
            shoot_entity_relative(BOSS.MOUNT_ID, ONION, 0x00, 0x80, 0x10, 0xff);
        }

        @async()
        @install()
        fun fly_left_right() {
            while(True) {
                while(BOSS.MOUNT_ID[X] < 0x150) {
                    BOSS.MOUNT_ID[X]++;
                    yield();
                }
                while(BOSS.MOUNT_ID[X] > 0x50) {
                    BOSS.MOUNT_ID[X]--;
                    yield();
                }
            }
        }

        @install()
        fun monstro_damage() {
            yield();
            // animate(BOSS.MOUNT_ID, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);

            // animate(BOSS.MOUNT_ID, LOOP, DEFAULT);
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while(alive(<BOY>)) {
                BOSS.RIDER_ID[X] = BOSS.MOUNT_ID[X];
                BOSS.RIDER_ID[Y] += 0x50;
                yield();

                // <DOG>[X] = <BOY>[X] - 0x05;
                // <DOG>[Y] = <BOY>[Y];
                // yield();
            }
        }

        fun move() {
            // control(BOSS.MOUNT_ID, True);
            sleep(0x20);

            BOSS.MOVE_RNG = randrange(0x03);

            if(BOSS.MOVE_RNG == 0x00) {
                shoot_w();
            } else if(BOSS.MOVE_RNG == 0x01) {
                shoot_line();
            } else {
                nop();
            }

            sleep(0x20);
            // control(BOSS.MOUNT_ID, False);
        }

        @async()
        @install()
        fun move_logic() {
            sleep(0x80);
            
            while(True) {
                move();
                
                sleep(0x60);
            }
        }

        fun spawn_boss(x, y) {
            add_enemy(RIMSALA_GOLD, x, y);
            BOSS.RIDER_ID = <LAST_ENTITY>;
            // animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.MAGMAR_ROLL);
            attach_script(LAST_ENTITY, DAMAGE, reference(monstro_damage));
            // attribute(LAST_ENTITY, ROOT, True);
            // attribute(LAST_ENTITY, INVISIBLE, True);
            // attribute(LAST_ENTITY, INVINCIBLE, True);

            // add_enemy(DRAKE, x, y, INACTIVE);
            // add_enemy(FOOTKNIGHT, x, y, INACTIVE);
            add_enemy(RIMSALA_HOLDER, x, y);
            BOSS.MOUNT_ID = <LAST_ENTITY>;
            // <LAST_ENTITY>[HP] = 0x100;
            attribute(LAST_ENTITY, INVINCIBLE, True);

            fly_left_right();
            move_logic();
            stack_t01_offset();
        }

        fun trigger_enter() {
            spawn_boss(0x10, 0x08);

            available(BOY);
            destroy(DOG); // teleport(BOY, 0x00, 0x00);

            default_init_room(True, False);
            CUSTOM_MEMORY.HOTKEY_START = BUTTON_MAP.ISAAC;

            close_exits(True);

            if!(FLAG.IN_ANIMATION) {
                // teleport(DOG, 0x19, 0x1d);
                <DOG>[X] += 0x20;
                <DOG>[Y] += 0x20;
                crash_land(BOTH);
            }
        }
    };

    map barrier_check_arena(RAPTORS) { // unused
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE)
        }

        enum stepon_trigger {
            exit_north = @install() {
                debug_subtext("S=0");
            },
            exit_south = @install() {
                debug_subtext("S=1");
            },
            center = @install() {
                debug_subtext("S=2");
            }
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        @async()
        @install()
        fun barrier_check() {
            // code(0xb5, param(THROWABLE.LIGHTNING), entity_t(LAST_ENTITY), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y]), param(0x00), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y] + 0x80), param(0xff), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
            
            add_enemy(AQUAGOTH_ENTITY, 0x15, 0x1c, 0x00);
            attribute(LAST_ENTITY, INVINCIBLE, True);
            // attribute(LAST_ENTITY, INVISIBLE, True);
            attribute(LAST_ENTITY, NO_CLIP, True);
            attach_to_script(LAST_ENTITY);
            <SCRIPT_OWNER>[Z_LEVEL] = 0xff;

            face(LAST_ENTITY, EAST);

            while(True) {
                code(0xb5, param(THROWABLE.ONION), entity_t(LAST_ENTITY), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y]), param(0x00), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y] + 0x30), param(0x05), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");

                sleep(0x1);

                // if(<DOG>[HP] <= 0x00) {
                //     <DOG>[X]++;
                // }

                arg[0x00] = <BOY>[X];
                arg[0x02] = <BOY>[Y];
                arg[0x04] = <SCRIPT_OWNER>[X];
                arg[0x06] = <SCRIPT_OWNER>[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    <BOY>[X]++;
                }

                arg[0x00] = <DOG>[X];
                arg[0x02] = <DOG>[Y];
                arg[0x04] = <SCRIPT_OWNER>[X];
                arg[0x06] = <SCRIPT_OWNER>[Y];

                if(arg[0x00] < arg[0x04]) {
                    arg[0x08] = arg[0x04] - arg[0x00];
                } else {
                    arg[0x08] = arg[0x00] - arg[0x04];
                }

                if(arg[0x02] < arg[0x06]) {
                    arg[0x0a] = arg[0x06] - arg[0x02];
                } else {
                    arg[0x0a] = arg[0x02] - arg[0x06];
                }

                if((arg[0x08] <= 0x20) && (arg[0x0a] <= 0x20)) {
                    <DOG>[X]++;
                }
            }
        }

        @async()
        @install()
        fun barrier_check_2() {
            add_enemy(AQUAGOTH_ENTITY, 0x15, 0x1c, 0x00);
            attribute(LAST_ENTITY, INVINCIBLE, True);
            // attribute(LAST_ENTITY, INVISIBLE, True);
            attribute(LAST_ENTITY, NO_CLIP, True);
            attach_to_script(LAST_ENTITY);
            <SCRIPT_OWNER>[Z_LEVEL] = 0xff;

            face(LAST_ENTITY, EAST);

            while(True) {
                code(0xb5, param(THROWABLE.LIGHTNING), entity_t(LAST_ENTITY), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y]), param(0x00), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y] + 0x30), param(0x30), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x20);

                code(0xb5, param(THROWABLE.LIGHTNING), entity_t(LAST_ENTITY), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y] + 0x50), param(0x00), calculate(<LAST_ENTITY>[X]), calculate(<LAST_ENTITY>[Y] + 0x20), param(0x30), "// (b5) REVEAL ENTITY?? args $2849 $2835 $2477 $2479 10 signed arg4 signed arg6 20");
                sleep(0x20);
            }
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            if!(FLAG.IN_ANIMATION) {
                // teleport(DOG, 0x19, 0x1d);
                <DOG>[X] += 0x20;
                <DOG>[Y] += 0x20;
                crash_land(BOTH);
            }

            // <DOG>[HP] = 0x0;

            // barrier_check();
            barrier_check_2();
        }
    };

    map river(CUTSCENE_RIVER) {
        enum entrance {
            center = entrance(0x32, 0x10, NONE),
            right = entrance(0x64, 0x10, WEST),
        }

        enum ROOM {
            DEBUG = False,

            SHIP_ID = memory(WORD, TEMP),

            ROCK_1 = memory(WORD, TEMP),
            ROCK_2 = memory(WORD, TEMP),
            ROCK_3 = memory(WORD, TEMP),
            ROCK_CRASH_SIZE = 0x0a,

            CRASH = memory(WORD, TEMP),
        }

        enum BOSS {
            ID = memory(WORD, TEMP),

            X = 0x52,
            Y = 0x07,

            HIDDEN = True,
        }

        fun yeet() {
            // source: call(0x94e9d8);
            
            control(NONE);

            // <0x24ab> = <BOY>[X];
            // <0x24af> = <BOY>[Y];

            // <0x24cf> = 0x0228;
            // <0x24d1> = 0x0058;

            // <0x24cf> += 0x05;
            // sleep(0x17);

            animate(BOY, LOOP, ANIMATION_BOY.LANDING);
            // sleep(0x03);
            // animate(DOG, LOOP, ANIMATION_DOG.ACT1_ANGRY);
            sleep(0x05);

            // call_async(0x94eb06);
            // call_async(0x94eb0c);

            animate(BOY, LOOP, ANIMATION_BOY.FALL_1);
            <BOY>[VELOCITY] = 0x20;

            while(<BOY>[X] > 0x70) {
                // teleport(<BOY>, <0x24ab>, <0x24af>);
                <BOY>[X]--;
                // teleport(DOG, <0x24ab>, <0x24af>);
                // teleport(0x2838, 0x24ab, 0x24af - 0x01);

                // <0x24ab>--;
                yield();

                // debug_memory(<0x24ab>, <0x24cf>);
                // sleep(0x20);
            }

            while(<BOY>[Y] < 0xd0) {
                // teleport(<BOY>, <0x24ab>, <0x24af>);
                <BOY>[Y] += 0x03;
                // teleport(DOG, <0x24ab>, <0x24af>);
                // teleport(0x2838, 0x24ab, 0x24af - 0x01);

                // <0x24ab>--;
                yield();

                // debug_memory(<0x24ab>, <0x24cf>);
                // sleep(0x20);
            }
        }

        @install()
        @async()
        fun stack_t01_offset() {
            while(alive(<BOY>)) {
                if(ROOM.CRASH) {
                    damage(BOY, 0xff, True);
                    yield();
                } else {
                    <BOY>[X] -= 0x02;

                    ROOM.SHIP_ID[X] = <BOY>[X];
                    ROOM.SHIP_ID[Y] = <BOY>[Y] - 0x03;
                    yield();
                    
                    if(<BOY>[Y] < 0x40) {
                        <BOY>[Y] = 0x40;
                    } else if(<BOY>[Y] > 0xd0) {
                        <BOY>[Y] = 0xd0;
                    }
                    // yield();

                    if(<BOY>[X] < 0xb0) {
                        yeet();

                        map_transition(junkyard_northwest, crash_west, NONE);
                    } 
                    yield();
                }
            }
        }

        @install()
        @async()
        fun boss_watcher() {
            while(alive(BOSS.ID)) {
                sleep(0d250);
                sleep(0d250);
                animate(LAST_ENTITY, ONCE_FREEZE, ANIMATION_ENEMY.SALABOG_DUCK);
                attribute(BOSS.ID, INVINCIBLE, True);
                sleep(0d250);
                animate(LAST_ENTITY, ONCE, DEFAULT);
                attribute(BOSS.ID, INVINCIBLE, False);
            }
        }

        fun spawn_boss() {
            add_enemy(SALABOG, BOSS.X, BOSS.Y);
            BOSS.ID = <LAST_ENTITY>;

            boss_watcher();
        }

        @install()
        fun revealer_triggered() {
            destroy(SCRIPT_OWNER);

            spawn_boss();
        }

        @install()
        fun crash() {
            ROOM.CRASH = 0x01;

            control(NONE);

            damage(BOY, 0xff, True);
            destroy(ROOM.SHIP_ID);

            
        }

        fun rock_check() {
            if(arg[0x00] < arg[0x04]) {
                arg[0x08] = arg[0x04] - arg[0x00];
            } else {
                arg[0x08] = arg[0x00] - arg[0x04];
            }

            if(arg[0x02] < arg[0x06]) {
                arg[0x0a] = arg[0x06] - arg[0x02];
            } else {
                arg[0x0a] = arg[0x02] - arg[0x06];
            }

            if((arg[0x08] <= ROOM.ROCK_CRASH_SIZE) && (arg[0x0a] <= ROOM.ROCK_CRASH_SIZE)) {
                crash();
                end();
            }
            sleep(0x05);

            if(ROOM.DEBUG) {
                debug_memory(arg[0x08], arg[0x0a]);
                sleep(0x20);
            }
        }

        @install()
        @async()
        fun rock_1_check() {
            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = ROOM.ROCK_1[X] + 0x0a;
                arg[0x06] = ROOM.ROCK_1[Y];

                rock_check();
            }
        }

        @install()
        @async()
        fun rock_2_check() {
            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = ROOM.ROCK_2[X] + 0x0a;
                arg[0x06] = ROOM.ROCK_2[Y];

                rock_check();
            }
        }
        @install()
        @async()
        fun rock_3_check() {
            while(True) {
                arg[0x00] = <ACTIVE>[X];
                arg[0x02] = <ACTIVE>[Y];
                arg[0x04] = ROOM.ROCK_3[X] + 0x0a;
                arg[0x06] = ROOM.ROCK_3[Y];

                rock_check();
            }
        }

        fun add_rock(x, y, id) {
            add_enemy(STONE, x, y, FLAG_ENEMY.INVISBLE_INVINCIBLE_INACTIVE);
            id = <LAST_ENTITY>;
        }

        fun trigger_enter() {
            available(BOY);
            destroy(DOG); // teleport(BOY, 0x00, 0x00);

            add_placeholder(ANIMATION_PLACEHOLDER.SHELL_BOAT, 0x00, 0x00);
            ROOM.SHIP_ID = <LAST_ENTITY>;

            stack_t01_offset();

            if(BOSS.HIDDEN) {
                add_enemy(REVEALER_TARGET_ENTITY, BOSS.X, BOSS.Y);
                special_script(REVEALER, reference(revealer_triggered));
            } else {
                spawn_boss();
            }
            
            fade_in();

            add_rock(0x45, 0x10, ROOM.ROCK_1);
            rock_1_check();
            yield();
            add_rock(0x2d, 0x16, ROOM.ROCK_2);
            rock_2_check();
            yield();
            add_rock(0x19, 0x10, ROOM.ROCK_3);
            rock_3_check();

            add_enemy(TENTACLE_WHIP, 0x21, 0x0c);
            // add_enemy(TENTACLE_SPIKE, 0x1e, 0x0b);
            add_enemy(TENTACLE_SPIKE, 0x1b, 0x0e);
        }
    };

    map rpg_arena(RAPTORS) {
        enum entrance {
            left = entrance(0x15, 0x1c, NONE),
            center = entrance(0x1e, 0x21, NONE),
            right = entrance(0x2a, 0x23, NONE),

            pokemon_left = entrance(0d26, 0d31, NONE),
            pokemon_right = entrance(0d31, 0d31, NONE),
        }

        enum stepon_trigger {
            exit_north = @install() {
                debug_subtext("S=0");
            },
            exit_south = @install() {
                debug_subtext("S=1");
            },
            center = @install() {
                debug_subtext("S=2");
            }
        }

        fun close_exits(close) {
            if(close) {
                object[0x04] = 0x04;
            } else {
                object[0x05] = 0x04;
            }
        }

        enum BOSS {
            ID = memory(WORD, TEMP),

            POKEMON = memory(WORD, TEMP),

            BEE_HP = 0d20,
            BEE_TAKLE_DAMAGE = 0d05,
            BEE_STING_DAMAGE = 0d15,

            CHAMELEON_HP = 0d40,
            CHAMELEON_TAKLE_DAMAGE = 0d07,
        }

        fun prepare_dog() {
            control(DOG, True);

            attribute(DOG, AI_RUN, True);
            walk(DOG, TILE_ABSOLUTE, 0d26, 0d31, DOG); // TODO: unlocks BOTH
            face(DOG, EAST);
            sleep(0d30);
        }
        fun prepare_boss_pokemon() {
            attribute(BOSS.POKEMON, AI_RUN, True);
            walk(BOSS.POKEMON, TILE_ABSOLUTE, 0d31, 0d31, BOSS.POKEMON);
            sleep(0d30);
        }

        fun move_attack() {
            MEMORY.STRING_PARAMETER_1 = 0d10;
            MEMORY.STRING_PARAMETER_2 = 0d01;
            _question("[SLOW]Choose your move[CHOICE][MEM1]/10 Tackle[CHOICE][MEM2]/5 Tackle");

            attribute(DOG, ROOT, True);

            if(MEMORY.QUESTION_ANSWER == 0d00) {
                animate(DOG, ONCE, SLASH_1);
                sleep(0d40);

                damage(BOSS.POKEMON, 0d05, True);
            } else if(MEMORY.QUESTION_ANSWER == 0d01) {
                animate(DOG, ONCE, ANIMATION_DOG.ACT1_ANGRY);
                sleep(0d20);

                damage(BOSS.POKEMON, 0d15, True);
            }

            attribute(DOG, ROOT, False);
        }
        fun move_item() {
            MEMORY.STRING_PARAMETER_1 = MEMORY.PETAL;
            MEMORY.STRING_PARAMETER_2 = MEMORY.WINGS;
            _question("[SLOW]Choose item:[CHOICE][MEM1] Potion[CHOICE][MEM2] Pokedoll");

            if(MEMORY.QUESTION_ANSWER == 0d00) {
                MEMORY.PETAL--;

                heal(DOG, 0d20, True);
            } else if(MEMORY.QUESTION_ANSWER == 0d01) {
                MEMORY.WINGS--;

                subtext("You escaped safely.");
                sleep(0d200);
                
                return_to_bonfire();
                end();
            }
        }

        fun move() {
            _question("[SLOW]Choose your action[CHOICE]Move[CHOICE]Item");

            if(MEMORY.QUESTION_ANSWER == 0d00) {
                move_attack();
            } else if(MEMORY.QUESTION_ANSWER == 0d01) {
                move_item();
            }
        }

        fun move_enemy_bee() {
            arg[0x10] = randrange(0d05);

            if(arg[0x10] <= 0d00) {
                subtext("Bee uses tackle");
                damage(DOG, 0d05, True);

                BOSS.POKEMON[X] -= 0d10;
                sleep(0d10);
                BOSS.POKEMON[X] += 0d10;
            } else {
                subtext("Bee uses…");

                if(False) {
                    BOSS.POKEMON[VELOCITY] = 0d100;
                } else {
                    BOSS.POKEMON[VELOCITY] = 0d20;
                }
                cast(BOSS.POKEMON, DOG, STING, 0d20);
                sleep(0d200);
            }
        }
        fun move_enemy_chameleon() {
            arg[0x10] = randrange(0d05);

            if(arg[0x10] <= 0d03) {
                subtext("Chameleon uses tackle");
                damage(DOG, 0d10, True);

                BOSS.POKEMON[X] -= 0d10;
                sleep(0d10);
                BOSS.POKEMON[X] += 0d10;
            } else {
                subtext("Chameleon uses…");

                BOSS.POKEMON[VELOCITY] = 0d20;
                cast(BOSS.POKEMON, DOG, FLASH, 0d30);
                sleep(0d200);
            }
        }

        fun boy_pokeball() {
            shoot_entity_absolute(BOY, BEACH_BALL, 0d26 * 0x08, 0d31 * 0x08, 0d50, 0d00);
        }
        fun boss_pokeball(pokemon) {
            subtext(pokemon);

            shoot_entity_absolute(BOSS.ID, BEACH_BALL, 0d31 * 0x08, 0d31 * 0x08, 0d50, 0d00);
        }

        fun boss_pokemon(enemy:ENEMY, hp) {
            add_enemy(enemy, 0d31, 0d31, INACTIVE);
            BOSS.POKEMON = <LAST_ENTITY>;
            <LAST_ENTITY>[HP] = hp;

            face(LAST_ENTITY, WEST);
        }

        fun fainted_check() {
            if(<DOG>[HP] <= 0d00) {
                subtext("You fainted.");
                animate(BOY, ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
                sleep(0d200);

                return_to_bonfire();
                end();
            }
        }

        fun trigger_enter() {
            default_init_room(True, False);

            close_exits(True);

            // character_selection(BOY);

            teleport(DOG, 0x00, 0x00);

            if!(FLAG.IN_ANIMATION) {

                // teleport(DOG, 0x19, 0x1d);
                // <DOG>[X] += 0x20;
                // <DOG>[Y] += 0x20;
                crash_land(BOTH);
            }

            add_enemy(VILLAGER_1_2, 0x2a, 0x23);
            BOSS.ID = <LAST_ENTITY>;
            control(LAST_ENTITY, True);
            face(LAST_ENTITY, WEST);

            sleep(0d60);

            control(DOG, True);
            face(DOG, EAST);

            control(BOY, True);
            face(BOY, EAST);

            fainted_check();

            MEMORY.QUESTION_ANSWER = 0xffff;
            while(MEMORY.QUESTION_ANSWER != 0d00) {
                _question("[SLOW]Choose your Pokemon:[CHOICE]Dog");
            }

            subtext("I choose you, dog!");

            set_camera(COORDINATE_CORNER, 0d110, 0d120, 0d10);

            boy_pokeball();
            boss_pokeball("I choose you, bee!");
            sleep(0d100);

            teleport(DOG, 0d26 * 0x08, 0d31 * 0x08);
            prepare_dog();

            boss_pokemon(BEE, BOSS.BEE_HP);
            sleep(0d60);

            while((<DOG>[HP] > 0d00) && (BOSS.POKEMON[HP] > 0d00)) {
                move();
                sleep(0d30);

                if(BOSS.POKEMON[HP] > 0d00) {
                    prepare_boss_pokemon();

                    move_enemy_bee();
                    sleep(0d30);

                    prepare_dog();
                }
            }

            fainted_check();

            boss_pokeball("I choose you, chameleon!");
            sleep(0d100);

            boss_pokemon(CHAMELEON, BOSS.CHAMELEON_HP);
            sleep(0d60);

            while((<DOG>[HP] > 0d00) && (BOSS.POKEMON[HP] > 0d00)) {
                move();
                sleep(0d30);

                if(BOSS.POKEMON[HP] > 0d00) {
                    prepare_boss_pokemon();

                    move_enemy_chameleon();
                    sleep(0d30);
                    
                    prepare_dog();
                }
            }

            fainted_check();

            debug_subtext("yatta?");
        }
    };
};
