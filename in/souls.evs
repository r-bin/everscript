#memory(
    string_key(0x0000)..string_key(0x232b), // all string keys
    function_key(0x0000)..function_key(0x232b), // TODO: all function keys?

    0x300000..0x3fffff, // extension

    <0x2272>
)
#include("in/core.evs")

#patch(
    // "void_maps",

    "skip_intro",
    // "brian",
    // "camera_hack",
    // "free_graveyard_ids",
    // "save_file_growth",

    // asm
    // "debug_menu", // uses 0x3f0000…???
    "_hook_input", // 0x3f0000…0x310000
        "hotkeys", // uses 0x3f00000…???
        // "room_timer", // uses 0x300000…???
    // "_hook_trigger",
)

// HELPER

@install()
fun cheat() {
    unlock(ITEM.WEAPONS);
    unlock(ITEM.JAGUAR_RING);
    unlock(ITEM.CONSUMABLES);
    
    // unlock(ITEM.SPEAR_1);
    unlock(ITEM.AXE_2);

    if(False) {
        unlock(ITEM.ALCHEMY);
        unlock(ITEM.INGREDIENTS);
        select_alchemy();
    }

}

fun test_map_palettes() {
    <0x2437> = 0x0000;
    sleep(0x30);
    <0x2437> = 0x0001;
    sleep(0x30);
    <0x2437> = 0x0002;
    sleep(0x30);
    <0x2437> = 0x0003;
    sleep(0x30);
    <0x2437> = 0x0004;
    sleep(0x30);
    <0x2437> = 0x0005;
    sleep(0x30);
    <0x2437> = 0x0006;
    sleep(0x30);
    <0x2437> = 0x0007;
    sleep(0x30);
    <0x2437> = 0x0008;
    sleep(0x30);
    <0x2437> = 0x0009;
    sleep(0x30);
    <0x2437> = 0x000a;
    sleep(0x30);
    <0x2437> = 0x000b;
    sleep(0x30);
    <0x2437> = 0x000c;
    sleep(0x30);
    <0x2437> = 0x000d;
    sleep(0x30);
    <0x2437> = 0x000e;
    sleep(0x30);
    <0x2437> = 0x000f;
    sleep(0x30);
}

fun branch_lady(x, y, id) {
    add_enemy(ENEMY.VILLAGER_2_4, x, y);
    entity_script_controlled(CHARACTER.LAST_ENTITY);
    face(CHARACTER.LAST_ENTITY, DIRECTION.WEST);
    attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, id);
    <CHARACTER.LAST_ENTITY>[0x0b] = 0x50;
}

@install(ADDRESS.INTRO_FIRST_CODE_EXECUTED)
fun intro_skip() {
    map_transition(inbetwixx, start, DIRECTION.NONE);
}

@install()
fun bomb_wall_triggered() {
    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_PLACEHOLDER.EXPLOSION_1);
    object[<0x2838>] = <0x283a>;

    sleep(0x50);

    destroy(CHARACTER.SCRIPT_OWNER);
}

// souls

enum SOULS_MEMORY {
    DUST_ENTITY = <0x2834>,
    DUST_DROP_X = <0x24ff>,
    DUST_DROP_Y = <0x2501>,
    DUST_DROP_MAP = <0x2503>,
    DUST_DROP_VARIANT = <0x2505>,

    BONFIRE_X = <0x2507>,
    BONFIRE_Y = <0x2509>,
    BONFIRE_MAP = <0x250b>,
    BONFIRE_VARIANT = <0x250d>,
    BONFIRE_TELEPORT_REQUIRED = flag()
}

@install()
fun dust_loot() {
    SOULS_MEMORY.DUST_DROP_MAP = 0xffff;
    SOULS_MEMORY.DUST_DROP_VARIANT = 0xffff;

    // attach_script(CHARACTER.SCRIPT_OWNER, SCRIPT_TRIGGER.LOOT, 0x172b);

    // subtext(string("Reclaimed souls"));

    currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.TALONS);

    // <0x2391> = 0x0000;
    // <0x2395> = 0x0000;
    // call_id(0x3d);
    animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.LOOT);

    destroy(SOULS_MEMORY.DUST_ENTITY);

    // sleep(0x80);

    show_currency(True);
    sleep(0x40);
    show_currency(False);
}

@install()
fun dust_drop() {
    // subtext(string("Souls in reach...[END]"));

    attach_script(CHARACTER.SCRIPT_OWNER, SCRIPT_TRIGGER.LOOT, reference(dust_loot));

    <0x23d9> = 0x0001;
    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.DUST);
    sleep(0x3c);
    <0x23d9> = 0x0001;
    animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.FREEZE, ANIMATION_ENEMY.DUST);
}

@install()
fun return_to_bonfire() {
    
    if(SOULS_MEMORY.BONFIRE_MAP == 0x26) { // TODO: inbetwixx map id
        set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
        map_transition(inbetwixx, start, DIRECTION.NONE); // TODO
    } else if(SOULS_MEMORY.BONFIRE_MAP == 0x1a) { // TODO: crossing map id
        set(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
        map_transition(east_crossing, crash, DIRECTION.NONE); // TODO
    }

    map_transition(inbetwixx, start, DIRECTION.NONE);
}

@install()
fun boy_death() {
    control(CHARACTER.NONE);

    show_currency(True);

    // subtext(string("Souls lost"));

    // damage(CHARACTER.DOG, 0x03e8);

    currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.GOLD_COINS);
    currency_convert(0x01, CURRENCY.TALONS, 0x01, CURRENCY.JEWELES);

    SOULS_MEMORY.DUST_DROP_X = <CHARACTER.BOY>[0x1a];
    SOULS_MEMORY.DUST_DROP_Y = <CHARACTER.BOY>[0x1c];
    // <0x2503> = MEMORY.MAP;
    SOULS_MEMORY.DUST_DROP_MAP = MEMORY.MAP & 0xff;
    SOULS_MEMORY.DUST_DROP_VARIANT = <0x2258>; // TODO

    // sleep(0x20);

    // currency_convert(0x01, CURRENCY.JEWELES, 0x01, CURRENCY.GOLD_COINS);
    destroy(0x2834);

    animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.DUST);
    animate(CHARACTER.DOG, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.DUST);

    sleep(0xa0);

    fade_out();

    show_currency(False);

    sleep(0x50);

    heal(CHARACTER.BOTH, False);

    return_to_bonfire();

    control(CHARACTER.BOTH);
}

@install()
fun bonfire_triggered() {
    // test_owner2();
    // end();
    
    subtext(string("bonfire[END]"));

    // bonfire_activate(<CHARACTER.SCRIPT_OWNER>[0x1a], <CHARACTER.SCRIPT_OWNER>[0x1c], reference(bonfire_triggered));

    // destroy(CHARACTER.SCRIPT_OWNER);

    SOULS_MEMORY.BONFIRE_X = <CHARACTER.ACTIVE>[0x1a];
    SOULS_MEMORY.BONFIRE_Y = <CHARACTER.ACTIVE>[0x1c];
    SOULS_MEMORY.BONFIRE_MAP = MEMORY.MAP & 0xff;
    SOULS_MEMORY.BONFIRE_VARIANT = <0x2258>; // TODO
}

fun bonfire(x, y, id) {
    // add_enemy_with_flags(ENEMY.LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE_IMORTAL);
    // attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, 0x181e);
    // entity_script_controlled(CHARACTER.LAST_ENTITY);

    if(SOULS_MEMORY.BONFIRE_MAP == MEMORY.MAP&0xff) {
        if(SOULS_MEMORY.BONFIRE_VARIANT == <0x2258>) { // TODO
            add_enemy_with_flags(ENEMY.LANTERN_LIGHT_RED, x, y, FLAG_ENEMY.INACTIVE);
        } else {
            add_enemy_with_flags(ENEMY.LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE);
        }
    } else {
        add_enemy_with_flags(ENEMY.LANTERN_LIGHT, x, y, FLAG_ENEMY.INACTIVE);
    }
    
    attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, id);
    <CHARACTER.LAST_ENTITY>[0x2a] = 0x0fff;
}

@install()
fun init_souls() {
    if(SOULS_MEMORY.DUST_DROP_MAP == MEMORY.MAP&0xff) {
        if(SOULS_MEMORY.DUST_DROP_VARIANT == <0x2258>) { // TODO
            add_dynamic_enemy_with_flags(ENEMY.BEE, SOULS_MEMORY.DUST_DROP_X, SOULS_MEMORY.DUST_DROP_Y, 0x00);
            SOULS_MEMORY.DUST_ENTITY = <CHARACTER.LAST_ENTITY>;
            attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DEATH, reference(dust_drop));
            
            attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);
            damage(CHARACTER.LAST_ENTITY, 0x03e8);
        }
    }

    if(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED) {
        // if(SOULS_MEMORY.BONFIRE_MAP == MEMORY.MAP&0xff) {
        //     if(SOULS_MEMORY.BONFIRE_VARIANT == <0x2258>) { // TODO
        //         if(SOULS_MEMORY.BONFIRE_X != 0x00) {
        //             if(SOULS_MEMORY.BONFIRE_Y != 0x00) { // TODO
                        <CHARACTER.BOY>[0x1a] = SOULS_MEMORY.BONFIRE_X;
                        <CHARACTER.BOY>[0x1c] = SOULS_MEMORY.BONFIRE_Y;

                        <CHARACTER.DOG>[0x1a] = SOULS_MEMORY.BONFIRE_X;
                        <CHARACTER.DOG>[0x1c] = SOULS_MEMORY.BONFIRE_Y;
        //             }
        //         }
        //     }
        // }
        unset(SOULS_MEMORY.BONFIRE_TELEPORT_REQUIRED);
    }

    attach_script(CHARACTER.BOY, SCRIPT_TRIGGER.DEATH, reference(boy_death));

    special_script(SPECIAL_SCRIPTS.WINGS, reference(return_to_bonfire));
}

// HOTKEYS

@install()
@inject(ADDRESS.HOTKEY_START)
fun hotkey_start() {
    subtext(string("Start[END]"));

    drop_bomb();
}
@install()
@inject(ADDRESS.HOTKEY_START_L)
fun hotkey_start_l() {
    subtext(string("Start+L[END]"));

    // map_transition(waterfall, south, DIRECTION.NORTH);
    // map_transition(arena, left, DIRECTION.NONE);
    map_transition(east_crossing, crash, DIRECTION.NONE);
    // map_transition(east_inbetwixx, east, DIRECTION.NONE);
}
@install()
@inject(ADDRESS.HOTKEY_START_R)
fun hotkey_start_r() {
    subtext(string("Start+R[END]"));

    // map_transition(arena, right, DIRECTION.NONE);
    
    attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.NO_CLIP);
}

// MAPS

fun default_init_room() {
    init_souls();
    
    music(0x14);
    // music(0x40);
    // music(0x3a);
    sfx_effect(SFX_EFFECT.RAIN, True);
    sfx_effect(SFX_EFFECT.NIGHT, True);

    fade_in();
}

// center

map inbetwixx(0x05) {
    enum entrance {
        north_1 = entrance(0x2d, 0x01, DIRECTION.SOUTH),
        east = entrance(0x5f, 0x4d, DIRECTION.WEST),
        west_1 = entrance(0x04, 0x71, DIRECTION.EAST),
        west_2 = entrance(0x04, 0x2f, DIRECTION.EAST),

        start = entrance(0x0f, 0x47, DIRECTION.NONE)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        exit_east = @install() fun test() {
            map_transition(east_inbetwixx, west_2, DIRECTION.EAST);
        },
        stepon_9 = @install() fun test() {
            subtext(string("exit? 9 [END]"));
        },
        exit_west_2_east = @install() fun test() {
            map_transition(northwest_inbetwixx, east, DIRECTION.WEST);
        },
        exit_west_1_exit = @install() fun test() {
            map_transition(west_inbetwixx, east_2, DIRECTION.WEST);
        },
        stepon_12 = @install() fun test() {
            subtext(string("exit? 12 [END]"));
        },
        stepon_13 = @install() fun test() {
            subtext(string("exit? 13 [END]"));
        },
        stepon_14 = @install() fun test() {
            subtext(string("exit? 14 [END]"));
        },
        stepon_15 = @install() fun test() {
            subtext(string("exit? 15 [END]"));
        },

        stepon_16 = @install() fun test() {
            subtext(string("exit? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("exit? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("exit? 18 [END]"));
        },
        stepon_19 = @install() fun test() {
            subtext(string("exit? 19 [END]"));
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            _axe2_wall(0x00);
        },
        b_trigger_1 = @install() fun test() {
            _axe2_wall(0x01);
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));

            currency_get(CURRENCY.TALONS, 0x23);
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        }
    }

    fun init_room() {
        default_init_room();

        subtext(string("Inbetwixx[END]"));
    }

    fun intro() {
        teleport(CHARACTER.DOG, 0x13, 0x49);
        animate(CHARACTER.DOG, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);

        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

        sleep(0x50);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
        sleep(0x30);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);
        sleep(0x40);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_DOWN);
        sleep(0x15);
        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_BOY.SLEEP_UP);

        animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_BOY.KNEEL);
    }

    fun bomb_wall_trigger(object, x, y) {
        // add_enemy_with_flags(ENEMY.THRAXX_HEART, x, y, 0x0000);
        add_enemy_with_flags(ENEMY.FACE_ENTITY, x, y, 0x0004);
        // <CHARACTER.LAST_ENTITY>[0x2a] = object;
        // <CHARACTER.LAST_ENTITY>[0x15] = 0x01;
        
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(bomb_wall_triggered));

        <0x2838> = object;
        <0x283a> = 0x01;
    }

    @install()
    fun trigger_enter() {
        init_room();

        if(!FLAG.IN_ANIMATION) {
            if(False) {
                intro();
            } else {
                animate(CHARACTER.DOG, ANIMATION_MODE.ONCE_FREEZE, ANIMATION_DOG.ACT1_SLEEP);

                cheat();
            }
            
            // code(0xa3, 0x18, "// (a3) CALL 'Prepare room change? North exit/south entrance outdoor-indoor?' (0x26)"); // TODO: 4x4 combinations, not 4
            // 19=ww, 1a=Ww, 1b=wn, 1c=ws, 1d=ee, 1e=Ee, 1f=EN
            // 20=ES, 21=SS, 22=Ss, 23=sW, 24=SW, 25=SE, 26=NN, 27=NN, 28=NE, 29=NW, 2a=NS, 2b=Ns, 2c=ns, 2d=ss

            // load_map(0x05, 0x0f, 0x47);
        }

        bonfire(0x31, 0x35, reference(bonfire_triggered));
        // bomb_wall_trigger(0x01, 0x3f, 0x3c);
        // bomb_wall_trigger(0x00, 0x43, 0x60);
    }
};

// east

map west_inbetwixx(0x5b) {
    enum entrance {
        north = entrance(0x12, 0x09, DIRECTION.SOUTH),
        east_1 = entrance(0x6d, 0x11, DIRECTION.WEST),
        east_2 = entrance(0x6d, 0x23, DIRECTION.WEST),
        east_3 = entrance(0x6d, 0x35, DIRECTION.WEST),
        west = entrance(0x01, 0x37, DIRECTION.EAST)
    }

    enum stepon_trigger {
        exit_east_1 = @install() fun test() {
            map_transition(west_inbetwixx, east_3, DIRECTION.EAST);
        },
        exit_east_3 = @install() fun test() {
            map_transition(west_inbetwixx, east_1, DIRECTION.EAST);
        },
        exit_east_2 = @install() fun test() {
            map_transition(inbetwixx, west_1, DIRECTION.EAST);
        },
        exit_west = @install() fun test() {
            map_transition(west_hut, east, DIRECTION.WEST);
        },
        exit_north = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        }
    }

    fun init_room() {
        init_map(0x00, 0x06, 0x6e, 0x52);
        default_init_room();

        subtext(string("West Inbetwixx[END]"));
    }

    @install()
    fun branch_triggered() {
        dialog(string("...[0x80][0x19][0x81][END]"));

        <CHARACTER.SCRIPT_OWNER>[0x0b] = 0x0800;
        control_enemy(CHARACTER.SCRIPT_OWNER, False);
    }
    
    fun trigger_enter() {
        branch_lady(0x58, 0x0f, reference(branch_triggered));
        
        init_room();
    }
};

map west_hut(0x33) {
    enum entrance {
        hut = entrance(0x13, 0x13, DIRECTION.SOUTH), // TODO: 13/15
        east = entrance(0x25, 0x12, DIRECTION.WEST)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            map_transition(west_hut2, door, DIRECTION.NORTH);
        },
        stepon_1 = @install() fun test() {
            map_transition(west_inbetwixx, west, DIRECTION.EAST);
        }
    }

    fun init_room() {
        default_init_room();
    }

    fun trigger_enter() {
        init_room();
    }
};

map west_hut2(0x34) {
    enum entrance {
        door = entrance(0x12, 0x23, DIRECTION.NORTH)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            map_transition(west_hut, hut, DIRECTION.SOUTH);
        }
    }

    fun init_room() {
        // init_souls();

        // sfx_effect(SFX_EFFECT.RAIN, True);
        sfx_effect(SFX_EFFECT.NIGHT, True);

        fade_in();
    }

    fun trigger_enter() {
        init_room();
    }
};

// north east

map northwest_inbetwixx(0x07) {
    enum entrance {
        east = entrance(0x44, 0x44, DIRECTION.WEST),
        west = entrance(0x01, 0x3d, DIRECTION.EAST),
        cave = entrance(0x41, 0x0b, DIRECTION.SOUTH)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            map_transition(waterfall, south, DIRECTION.NORTH);
        },
        stepon_7 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        exit_west = @install() fun test() {
            map_transition(inbetwixx, west_2, DIRECTION.EAST);
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            _axe2_wall(0x00);
        }
    }

    fun init_room() {
        default_init_room();
    }

    fun trigger_enter() {
        init_room();

        subtext(string("North West Inbetwixx[END]"));
    }
};

map waterfall(0x6b) {
    enum entrance {
        south = entrance(0x11, 0x3f, DIRECTION.NORTH)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            map_transition(northwest_inbetwixx, cave, DIRECTION.SOUTH);
        }
    }

    fun init_room() {
        // init_souls();

        // MEMORY.MAP_PALETTE = 0x0007;

        // sfx_effect(SFX_EFFECT.RAIN, True);
        sfx_effect(SFX_EFFECT.NIGHT, True);

        fade_in();
    }

    fun trigger_enter() {
        init_room();
    }
};

// east

map east_inbetwixx(0x59) {
    enum entrance {
        east = entrance(0x73, 0x22, DIRECTION.WEST),
        cave = entrance(0x42, 0x1a, DIRECTION.SOUTH),
        south_1 = entrance(0x44, 0x9e, DIRECTION.NORTH),
        south_2 = entrance(0x33, 0x9e, DIRECTION.NORTH),
        west_1 = entrance(0x01, 0x2a, DIRECTION.EAST),
        west_2 = entrance(0x01, 0x22, DIRECTION.EAST),
        west_3 = entrance(0x01, 0x15, DIRECTION.EAST)
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        stepon_9 = @install() fun test() {
            subtext(string("exit? 9 [END]"));
        },

        stepon_10 = @install() fun test() {
            subtext(string("exit? 10 [END]"));
        },
        stepon_11 = @install() fun test() {
            subtext(string("exit? 11 [END]"));
        },
        stepon_12 = @install() fun test() {
            subtext(string("exit? 12 [END]"));
        },
        stepon_13 = @install() fun test() {
            subtext(string("exit? 13 [END]"));
        },
        stepon_14 = @install() fun test() {
            subtext(string("exit? 14 [END]"));
        },
        stepon_15 = @install() fun test() {
            subtext(string("exit? 15 [END]"));
        },
        stepon_16 = @install() fun test() {
            subtext(string("exit? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("exit? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("exit? 18 [END]"));
        },
        stepon_19 = @install() fun test() {
            subtext(string("exit? 19 [END]"));
        },

        stepon_20 = @install() fun test() {
            subtext(string("exit? 20 [END]"));
        },
        stepon_21 = @install() fun test() {
            subtext(string("exit? 21 [END]"));
        },
        stepon_22 = @install() fun test() {
            subtext(string("exit? 22 [END]"));
        },
        stepon_23 = @install() fun test() {
            subtext(string("exit? 23 [END]"));
        },
        exit_west_1 = @install() fun test() {
            map_transition(east_inbetwixx, west_3, DIRECTION.WEST);
        },
        exit_cave = @install() fun test() {
            subtext(string("exit? 25 [END]"));
        },
        exit_south_1 = @install() fun test() {
            map_transition(east_crossing, crash, DIRECTION.SOUTH);
        },
        exit_south_2 = @install() fun test() {
            map_transition(east_crossing, north, DIRECTION.SOUTH);
        },
        exit_west_2 = @install() fun test() {
            map_transition(inbetwixx, east, DIRECTION.WEST);
        },
        exit_west_3 = @install() fun test() {
            map_transition(east_inbetwixx, west_1, DIRECTION.WEST);
        },

        stepon_30 = @install() fun test() {
            subtext(string("exit? 30 [END]"));
        },
        stepon_31 = @install() fun test() {
            subtext(string("exit? 31 [END]"));
        },
        stepon_32 = @install() fun test() {
            subtext(string("exit? 32 [END]"));
        },
        stepon_33 = @install() fun test() {
            subtext(string("exit? 33 [END]"));
        },
        stepon_34 = @install() fun test() {
            subtext(string("exit? 34 [END]"));
        },
        stepon_35 = @install() fun test() {
            subtext(string("exit? 35 [END]"));
        },
        stepon_36 = @install() fun test() {
            subtext(string("exit? 36 [END]"));
        },
        stepon_37 = @install() fun test() {
            subtext(string("exit? 37 [END]"));
        },
        stepon_38 = @install() fun test() {
            subtext(string("exit? 38 [END]"));
        },
        stepon_39 = @install() fun test() {
            subtext(string("exit? 39 [END]"));
        },

        stepon_40 = @install() fun test() {
            subtext(string("exit? 40 [END]"));
        },
        stepon_41 = @install() fun test() {
            subtext(string("exit? 41 [END]"));
        },
        stepon_42 = @install() fun test() {
            subtext(string("exit? 42 [END]"));
        },
        stepon_43 = @install() fun test() {
            subtext(string("exit? 43 [END]"));
        },
        stepon_44 = @install() fun test() {
            subtext(string("exit? 44 [END]"));
        },
        stepon_45 = @install() fun test() {
            subtext(string("exit? 45 [END]"));
        },
        stepon_46 = @install() fun test() {
            subtext(string("exit? 46 [END]"));
        },
        stepon_47 = @install() fun test() {
            subtext(string("exit? 47 [END]"));
        },
        stepon_48 = @install() fun test() {
            subtext(string("exit? 48 [END]"));
        },
        stepon_49 = @install() fun test() {
            subtext(string("exit? 49 [END]"));
        },

        stepon_50 = @install() fun test() {
            subtext(string("exit? 50 [END]"));
        },
        stepon_51 = @install() fun test() {
            subtext(string("exit? 51 [END]"));
        },
        stepon_52 = @install() fun test() {
            subtext(string("exit? 52 [END]"));
        },
        stepon_53 = @install() fun test() {
            subtext(string("exit? 53 [END]"));
        },
        stepon_54 = @install() fun test() {
            subtext(string("exit? 54 [END]"));
        },
        stepon_55 = @install() fun test() {
            subtext(string("exit? 55 [END]"));
        },
        stepon_56 = @install() fun test() {
            subtext(string("exit? 56 [END]"));
        },
        stepon_57 = @install() fun test() {
            subtext(string("exit? 57 [END]"));
        },
        stepon_58 = @install() fun test() {
            subtext(string("exit? 58 [END]"));
        },
        stepon_59 = @install() fun test() {
            subtext(string("exit? 59 [END]"));
        },

        stepon_60 = @install() fun test() {
            subtext(string("exit? 60 [END]"));
        },
        stepon_61 = @install() fun test() {
            subtext(string("exit? 61 [END]"));
        },
        stepon_62 = @install() fun test() {
            subtext(string("exit? 62 [END]"));
        },
        stepon_63 = @install() fun test() {
            subtext(string("exit? 63 [END]"));
        },
        exit_east = @install() fun test() {
            subtext(string("exit? 64 [END]"));
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        },
        b_trigger_16 = @install() fun test() {
            subtext(string("b? 16 [END]"));
        },
        b_trigger_17 = @install() fun test() {
            subtext(string("b? 17 [END]"));
        },
        b_trigger_18 = @install() fun test() {
            subtext(string("b? 18 [END]"));
        },
        b_trigger_19 = @install() fun test() {
            subtext(string("b? 19 [END]"));
        }
    }

    fun init_room() {
        default_init_room();
    }

    fun trigger_enter() {
        branch_lady(0x4e, 0x2c, reference(branch_triggered));

        init_room();
    }
};

map east_crossing(0x4f) {
    enum entrance {
        north = entrance(0x27, 0x01, DIRECTION.SOUTH),
        cave = entrance(0x15, 0x1a, DIRECTION.SOUTH),
        east = entrance(0x3f, 0x4b, DIRECTION.WEST),
        west = entrance(0x01, 0x4b, DIRECTION.EAST),

        crash = entrance(0x32, 0x1e, DIRECTION.NONE),
    }

    enum stepon_trigger {
        stepon_0 = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        stepon_1 = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        stepon_2 = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        },
        stepon_3 = @install() fun test() {
            subtext(string("exit? 3 [END]"));
        },
        stepon_4 = @install() fun test() {
            subtext(string("exit? 4 [END]"));
        },
        stepon_5 = @install() fun test() {
            subtext(string("exit? 5 [END]"));
        },
        stepon_6 = @install() fun test() {
            subtext(string("exit? 6 [END]"));
        },
        stepon_7 = @install() fun test() {
            subtext(string("exit? 7 [END]"));
        },
        stepon_8 = @install() fun test() {
            subtext(string("exit? 8 [END]"));
        },
        stepon_9 = @install() fun test() {
            subtext(string("exit? 9 [END]"));
        },

        stepon_10 = @install() fun test() {
            subtext(string("exit? 10 [END]"));
        },
        stepon_11 = @install() fun test() {
            subtext(string("exit? 11 [END]"));
        },
        stepon_12 = @install() fun test() {
            subtext(string("exit? 12 [END]"));
        },
        stepon_13 = @install() fun test() {
            subtext(string("exit? 13 [END]"));
        },
        stepon_14 = @install() fun test() {
            subtext(string("exit? 14 [END]"));
        },
        stepon_15 = @install() fun test() {
            subtext(string("exit? 15 [END]"));
        },
        stepon_16 = @install() fun test() {
            subtext(string("exit? 16 [END]"));
        },
        stepon_17 = @install() fun test() {
            subtext(string("exit? 17 [END]"));
        },
        stepon_18 = @install() fun test() {
            subtext(string("exit? 18 [END]"));
        },
        exit_east = @install() fun test() {
            subtext(string("exit? 19 [END]"));
        },

        exit_cave = @install() fun test() {
            subtext(string("exit? 20 [END]"));
        },
        exit_west = @install() fun test() {
            subtext(string("exit? 21 [END]"));
        },
        elevator_bottom = @install() fun test() {
            subtext(string("exit? 22 [END]"));
        },
        elevator_top = @install() fun test() {
            subtext(string("exit? 23 [END]"));
        },
        exit_north = @install() fun test() {
            map_transition(east_inbetwixx, south_2, DIRECTION.NORTH);
        }
    }

    enum b_trigger {
        b_trigger_0 = @install() fun test() {
            subtext(string("b? 0 [END]"));
        },
        b_trigger_1 = @install() fun test() {
            subtext(string("b? 1 [END]"));
        },
        b_trigger_2 = @install() fun test() {
            subtext(string("b? 2 [END]"));
        },
        b_trigger_3 = @install() fun test() {
            subtext(string("b? 3 [END]"));
        },
        b_trigger_4 = @install() fun test() {
            subtext(string("b? 4 [END]"));
        },
        b_trigger_5 = @install() fun test() {
            subtext(string("b? 5 [END]"));
        },
        b_trigger_6 = @install() fun test() {
            subtext(string("b? 6 [END]"));
        },
        b_trigger_7 = @install() fun test() {
            subtext(string("b? 7 [END]"));
        },
        b_trigger_8 = @install() fun test() {
            subtext(string("b? 8 [END]"));
        },
        b_trigger_9 = @install() fun test() {
            subtext(string("b? 9 [END]"));
        },

        b_trigger_10 = @install() fun test() {
            subtext(string("b? 10 [END]"));
        },
        b_trigger_11 = @install() fun test() {
            subtext(string("b? 11 [END]"));
        },
        b_trigger_12 = @install() fun test() {
            subtext(string("b? 12 [END]"));
        },
        b_trigger_13 = @install() fun test() {
            subtext(string("b? 13 [END]"));
        },
        b_trigger_14 = @install() fun test() {
            subtext(string("b? 14 [END]"));
        },
        b_trigger_15 = @install() fun test() {
            subtext(string("b? 15 [END]"));
        }
    }

    @install()
    fun stone_triggered() {
        if(<CHARACTER.ACTIVE> == <CHARACTER.BOY>) {
            animate(CHARACTER.BOY, ANIMATION_MODE.ONCE, ANIMATION_ALL.SLASH_2);

            <CHARACTER.SCRIPT_OWNER>[0x20] = 0x30;
            sleep(0x50);

            object[0x00] = 0x01;
            destroy(CHARACTER.SCRIPT_OWNER);
        }
    }

    fun init_room() {
        default_init_room();
    }

    fun trigger_enter() {
        add_enemy(ENEMY.STONE_ROUND, 0x24, 0x18);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.TALK, reference(stone_triggered));

        bonfire(0x2b, 0x20, reference(bonfire_triggered));

        init_room();

        if(!FLAG.IN_ANIMATION) {
            <CHARACTER.DOG>[0x1a] = <CHARACTER.DOG>[0x1a] - 0x20;
            <CHARACTER.DOG>[0x1c] = <CHARACTER.DOG>[0x1c] - 0x20;
            crash_land(CHARACTER.BOTH);
        }
    }
};

// misc

map arena(0x5c) {
    enum entrance {
        left = entrance(0x15, 0x1c, DIRECTION.NONE),
        center = entrance(0x1e, 0x21, DIRECTION.NONE),
        right = entrance(0x2a, 0x23, DIRECTION.NONE)
    }

    enum stepon_trigger {
        exit_north = @install() fun test() {
            subtext(string("exit? 0 [END]"));
        },
        exit_south = @install() fun test() {
            subtext(string("exit? 1 [END]"));
        },
        center = @install() fun test() {
            subtext(string("exit? 2 [END]"));
        }
    }

    fun init_room() {
        default_init_room();
    }

    fun close_exits(close) {
        if(close) {
            object[0x04] = 0x04;
        } else {
            object[0x05] = 0x04;
        }
    }

    fun trigger_enter() {
        init_room();

        subtext(string("Arena[END]"));

        if(!FLAG.IN_ANIMATION) {
            close_exits(True);

            // teleport(CHARACTER.DOG, 0x19, 0x1d);
            <CHARACTER.DOG>[0x1a] = <CHARACTER.DOG>[0x1a] + 0x20;
            <CHARACTER.DOG>[0x1c] = <CHARACTER.DOG>[0x1c] + 0x20;
            crash_land(CHARACTER.BOTH);
        }
    }
};
