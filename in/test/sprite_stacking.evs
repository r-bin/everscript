#memory(
    string_key(0x0000)..string_key(0x232b), // all string keys
    function_key(0x0000)..function_key(0x232b), // TODO: all function keys?

    0x300000..0x3fffff, // extension

    <0x2258>
)
#include("in/core.evs")

#patch(
    // "void_maps",

    "skip_intro",
    // "brian",
    // "camera_hack",
    // "free_graveyard_ids",
    // "save_file_growth",

    // asm
    // "debug_menu", // uses 0x3f0000…???
    "_hook_input", // 0x3f0000…0x310000
        "hotkeys", // uses 0x3f00000…???
        // "room_timer", // uses 0x300000…???
    // "_hook_trigger",
)

@install(ADDRESS.INTRO_FIRST_CODE_EXECUTED)
fun intro_skip() {
    map_transition(demo_map, center, DIRECTION.NONE);
}

// HOTKEYS

@install()
@inject(ADDRESS.HOTKEY_START)
fun hotkey_start() {
    subtext(string("Start[END]"));
}
@install()
@inject(ADDRESS.HOTKEY_START_L)
fun hotkey_start_l() {
    subtext(string("Start+L[END]"));
}
@install()
@inject(ADDRESS.HOTKEY_START_R)
fun hotkey_start_r() {
    subtext(string("Start+R[END]"));

    debug_memory(<0x283a>[0x76], <0x283c>[0x76]);
}

map demo_map(MAP.BRIAN) {
    enum entrance {
        center = entrance(0x1a, 0x1a, DIRECTION.NONE),
    }

    @install()
    @async()
    fun stack_t0123() {
        while!(dead(<0x2834>)) {
            <0x2836>[0x1a] = <0x2834>[0x1a] - 0x05;
            <0x2836>[0x1c] = <0x2834>[0x1c] - 0x1a;

            // sleep(0x02);
            yield();

            <0x2838>[0x1a] = <0x2834>[0x1a] + 0x05;
            <0x2838>[0x1c] = <0x2834>[0x1c] - 0x1a;

            // sleep(0x0);
            yield();

            <0x283a>[0x1a] = <0x2834>[0x1a];
            <0x283a>[0x1c] = <0x2834>[0x1c] - 0x20;

            // sleep(0x02);
            yield();
        }
    }

    @install()
    @async()
    fun stack_t0_t1_offset() {
        while!(dead(<0x2836>)) {
            <0x2836>[0x1a] = <0x2834>[0x1a];
            // <0x2836>[0x1c] = <0x2834>[0x1c] - 0x05;
            <0x2836>[0x1c] = <0x2834>[0x1c] - 0x15;
            // <0x2836>[0x1c] = <0x2834>[0x1c] - 0x20;
            yield();
        }
    }

    @install()
    @async()
    fun stack_t0_t1() {
        while!(dead(<0x2836>)) {
            <0x2836>[0x1a] = <0x2834>[0x1a];
            <0x2836>[0x1c] = <0x2834>[0x1c];
            yield();
        }
    }
    @install()
    @async()
    fun stack_t2_t3() {
        while!(dead(<0x283a>)) {
            <0x283a>[0x1a] = <0x2838>[0x1a];
            <0x283a>[0x1c] = <0x2838>[0x1c];
            yield();
        }
    }
    @install()
    @async()
    fun stack_t4_t5() {
        while!(dead(<0x283e>)) {
            <0x283e>[0x1a] = <0x283c>[0x1a];
            <0x283e>[0x1c] = <0x283c>[0x1c];
            yield();
        }
    }

    @install()
    @async()
    fun stack_01_23_45() {
        while(True) {
            // <0x2836>[0x1a] = <0x2834>[0x1a];
            // <0x2836>[0x1c] = <0x2834>[0x1c];

            // sleep(0x02);
            yield();

            <0x283a>[0x1a] = <0x2838>[0x1a];
            <0x283a>[0x1c] = <0x2838>[0x1c];

            // sleep(0x0);
            yield();

            <0x283e>[0x1a] = <0x283c>[0x1a];
            <0x283e>[0x1c] = <0x283c>[0x1c];

            // sleep(0x02);
            yield();
        }
    }


    fun shovable_stone() {
        add_enemy(ENEMY.STONE_ROUND, 0x00, 0x00);
        store_last_entity(0x2836);

        add_enemy(ENEMY.BOMB, 0x15, 0x13);
        store_last_entity(0x2834);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
    }
    fun flying_turret(id_1, id_2) {
        add_enemy(ENEMY.GATE_BOT, 0x10, 0x13);
        // add_enemy(ENEMY.FLOWER_ORANGE, 0x10, 0x13);
        store_last_entity(id_1);

        add_enemy(ENEMY.MOSQUITO, 0x10, 0x13);
        // add_enemy(ENEMY.BEE, 0x10, 0x13);
        store_last_entity(id_2);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);


        // <0x283a>[0x00] = <0x283c>[0x00];
        // <0x283a>[0x02] = <0x283c>[0x02];
    }
    fun flying_turret_2(id_1, id_2) {
        add_enemy(ENEMY.GATE_BOT, 0x10, 0x13);
        // add_enemy(ENEMY.FLOWER_ORANGE, 0x10, 0x13);
        store_last_entity(id_1);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

        // add_enemy(ENEMY.MOSQUITO, 0x10, 0x13);
        // add_enemy(ENEMY.BEE, 0x10, 0x13);
        // add_enemy(ENEMY.RAPTOR_GREEN, 0x10, 0x13);
        // add_enemy(ENEMY.MEGATAUR, 0x10, 0x13);
        add_enemy(ENEMY.SPARK, 0x10, 0x13);
        store_last_entity(id_2);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);


        // <0x283a>[0x00] = <0x283c>[0x00];
        // <0x283a>[0x02] = <0x283c>[0x02];
    }

    fun riding_verminator(id_1, id_2) {
        add_enemy(ENEMY.VERMINATOR, 0x10, 0x13);
        // add_enemy(ENEMY.FLOWER_ORANGE, 0x10, 0x13);
        store_last_entity(id_1);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

        // add_enemy(ENEMY.MOSQUITO, 0x10, 0x13);
        // add_enemy(ENEMY.BEE, 0x10, 0x13);
        // add_enemy(ENEMY.RAPTOR_GREEN, 0x10, 0x13);
        // add_enemy(ENEMY.STERLING, 0x10, 0x13);
        // add_enemy(ENEMY.QUEEN_JUMP, 0x10, 0x13);
        // add_enemy(ENEMY.MINITAUR, 0x10, 0x13);
        add_enemy(ENEMY.MEGATAUR, 0x10, 0x13);
        // add_enemy(ENEMY.GUARD_BOT, 0x10, 0x13);
        store_last_entity(id_2);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);


        // <0x283a>[0x00] = <0x283c>[0x00];
        // <0x283a>[0x02] = <0x283c>[0x02];
    }

    fun riding_salabog(id_1, id_2) {
        add_enemy(ENEMY.SALABOG, 0x10, 0x13);
        store_last_entity(id_1);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

        // add_enemy(ENEMY.MOSQUITO, 0x10, 0x13);
        // add_enemy(ENEMY.BEE, 0x10, 0x13);
        // add_enemy(ENEMY.RAPTOR_GREEN, 0x10, 0x13);
        // add_enemy(ENEMY.VIGOR, 0x10, 0x13);
        // add_enemy(ENEMY.MEGATAUR, 0x10, 0x13);
        add_enemy(ENEMY.FORESTDRAKE, 0x10, 0x13);
        // add_enemy(ENEMY.GUARD_BOT, 0x10, 0x13);
        store_last_entity(id_2);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);


        // <0x283a>[0x00] = <0x283c>[0x00];
        // <0x283a>[0x02] = <0x283c>[0x02];
    }

    enum BOSS {
        ID_CARLTRON = <0x2834>,
        ID_LEFT = <0x2836>,
        ID_RIGHT = <0x2838>,
        ID_BACK = <0x283a>,

        PHASE = <0x2890>
    }

    @install()
    fun abomination_triggered() {
        if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_CARLTRON) {
            // subtext(string("c[END]"));

            
            attribute_bit(BOSS.ID_CARLTRON, ATTRIBUTE_BITS.NO_CLIP);
            control(CHARACTER.NONE);
            face(CHARACTER.ACTIVE, DIRECTION.NORTH);
            animate(CHARACTER.ACTIVE, ANIMATION_MODE.ONCE, ANIMATION_ALL.KNOCKBACK);
            damage(CHARACTER.BOY, 0x05);
            sleep(0x01);
            attribute_bit(BOSS.ID_CARLTRON, ATTRIBUTE_BITS.CLIP);

            animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_TALK);
            sleep(0x50);
            animate(CHARACTER.SCRIPT_OWNER, ANIMATION_MODE.ONCE, ANIMATION_ALL.DEFAULT);

            control(CHARACTER.BOTH);

            if(BOSS.PHASE == 0x00) {
                BOSS.PHASE = 0x01;
            }
        } else if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_LEFT) {
            // subtext(string("l[END]"));

            if(BOSS.PHASE == 0x01) {
                if(dead(<CHARACTER.SCRIPT_OWNER>)) {
                    BOSS.PHASE = 0x02;
                }
            }
        } else if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_RIGHT) {
            if(BOSS.PHASE >= 0x02) {
                if(dead(<CHARACTER.SCRIPT_OWNER>)) {
                    BOSS.PHASE = BOSS.PHASE + 0x01;
                }
            }
        } else if(<CHARACTER.SCRIPT_OWNER> == BOSS.ID_BACK) {
            if(BOSS.PHASE >= 0x02) {
                if(dead(<CHARACTER.SCRIPT_OWNER>)) {
                    BOSS.PHASE = BOSS.PHASE + 0x01;
                }
            }
        }
    }
    @install()
    @async()
    fun abomination_watcher() {
        subtext(string("phase 0[END]"));

        while(BOSS.PHASE == 0x00) {
            yield();
        }

        subtext(string("phase 1[END]"));

        animate(BOSS.ID_CARLTRON, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_SMUG);

        add_enemy(ENEMY.THRAXX_LEFT_ARM, 0x00, 0x00);
        store_last_entity(BOSS.ID_LEFT);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        sleep(0x50);

        while(BOSS.PHASE == 0x01) {
            yield();
        }

        subtext(string("phase 2[END]"));

        animate(BOSS.ID_CARLTRON, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_SMUG);

        add_enemy(ENEMY.THRAXX2_LEFT_ARM, 0x00, 0x00);
        store_last_entity(BOSS.ID_LEFT);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        sleep(0x50);

        add_enemy(ENEMY.THRAXX_RIGHT_ARM, 0x00, 0x00);
        store_last_entity(BOSS.ID_RIGHT);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        sleep(0x50);

        add_enemy(ENEMY.BONE_SNAKE, 0x00, 0x00);
        store_last_entity(BOSS.ID_BACK);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        sleep(0x50);

        while(BOSS.PHASE == 0x02) {
            yield();
        }

        subtext(string("phase 3[END]"));

        while(BOSS.PHASE == 0x03) {
            yield();
        }

        subtext(string("phase 4[END]"));

        while(BOSS.PHASE == 0x04) {
            yield();
        }

        subtext(string("phase 5[END]"));

        add_enemy(ENEMY.SALABOG, 0x00, 0x00);
        store_last_entity(BOSS.ID_BACK);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        while(BOSS.PHASE == 0x05) {
            yield();
        }

        control_enemy(BOSS.ID_CARLTRON, True);
        attribute_bit(BOSS.ID_CARLTRON, ATTRIBUTE_BITS.INVINCIBLE);
        face(BOSS.ID_CARLTRON, DIRECTION.SOUTH);
        animate(BOSS.ID_CARLTRON, ANIMATION_MODE.ONCE, ANIMATION_ENEMY.CARLTRON_DROPPING);
        sleep(0x80);

        animate(BOSS.ID_CARLTRON, ANIMATION_MODE.LOOP, ANIMATION_ENEMY.CARLTRON_LYING);
        destroy(BOSS.ID_LEFT);
        destroy(BOSS.ID_RIGHT);
        destroy(BOSS.ID_BACK);
        sleep(0xff);

        // destroy(BOSS.ID_CARLTRON);

        subtext(string("yatta![END]"));
    }

    fun abomination() {
        add_enemy(ENEMY.CARLTRON, 0x10, 0x13);
        store_last_entity(0x2834);
        <CHARACTER.LAST_ENTITY>[0x2a] = 0x0fff;
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);
        attach_script(CHARACTER.LAST_ENTITY, SCRIPT_TRIGGER.DAMAGE, reference(abomination_triggered));

        abomination_watcher();
    }

    fun random_stack(id_1, id_2) {
        add_placeholder(0x1e, 0x10, 0x13);
        face(CHARACTER.LAST_ENTITY, DIRECTION.EAST);
        // add_enemy(ENEMY.FLOWER_ORANGE, 0x10, 0x13);
        store_last_entity(id_1);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

        // add_enemy(ENEMY.MOSQUITO, 0x10, 0x13);
        // add_enemy(ENEMY.BEE, 0x10, 0x13);
        // add_enemy(ENEMY.RAPTOR_GREEN, 0x10, 0x13);
        // add_enemy(ENEMY.STERLING, 0x10, 0x13);
        // add_enemy(ENEMY.QUEEN_JUMP, 0x10, 0x13);
        // add_enemy(ENEMY.MINITAUR, 0x10, 0x13);
        add_enemy(ENEMY.FLOWER_PURPLE, 0x10, 0x13);
        // add_enemy(ENEMY.GUARD_BOT, 0x10, 0x13);
        store_last_entity(id_2);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);


        // <0x283a>[0x00] = <0x283c>[0x00];
        // <0x283a>[0x02] = <0x283c>[0x02];
    }

    fun reverse_stack(id_1, id_2) {
        add_enemy(ENEMY.GUARD_BOT, 0x10, 0x13);
        store_last_entity(id_1);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVINCIBLE);

        add_enemy(ENEMY.RAPTOR_BLACK, 0x10, 0x13);
        // add_enemy(ENEMY.BOY_BLACK, 0x10, 0x13);
        store_last_entity(id_2);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.INVISIBLE);
        // attribute_bit(CHARACTER.LAST_ENTITY, ATTRIBUTE_BITS.MUTE);


        // <0x283a>[0x00] = <0x283c>[0x00];
        // <0x283a>[0x02] = <0x283c>[0x02];
    }

    fun trigger_enter() {
        // sfx_effect(SFX_EFFECT.RAIN, True);
        // sfx_effect(SFX_EFFECT.NIGHT, True);

        available(CHARACTER.BOY);
        teleport(CHARACTER.DOG, 0xff, 0xff);

        // attribute_bit(CHARACTER.BOY, ATTRIBUTE_BITS.INVINCIBLE);
        unlock(ITEM.ALL);
        // select_alchemy();

        fade_in();

        // shovable_stone();
        // stack_t0_t1();
        
        // flying_turret(0x283a, 0x2838);
        // stack_t2_t3();

        // flying_turret_2(0x283e, 0x283c);
        // stack_t4_t5();

        // stack_01_23_45();

        // riding_verminator(0x2836, 0x2834);
        // stack_t0_t1_offset();

        // riding_salabog(0x2836, 0x2834);
        // stack_t0_t1_offset();

        // abomination();
        // stack_t0123();

        random_stack(0x2836, 0x2834);
        stack_t0_t1_offset();

        // reverse_stack(0x2836, 0x2834);
        // stack_t0_t1_offset();

        // best stacks:
        // verminator = raptor - 0x05
        // verminator = sterling - 0x20
        // verminator = megataur - 0x15
        // abomination
        // boxer = maggot
    }
};