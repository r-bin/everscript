#memory(
    // <0x2266>,

    string_key(0x0546)..string_key(0x232b), // last half of string keys
    // string_key(0x0000)..string_key(0x232b), // all string keys
    function_key(0x0000)..function_key(0x1716), // 0x1719 seems to be used by the engine

    0x350000..0x3fffff, // extension

    <0x2834>..<0x28ff>
)
#include("in/core.evs")

#patch(
    "camera_hack"
)

@install()
@inject(ADDRESS.HOTKEY_START)
@count_limit(0x20)
fun hotkey_start() {
    debug_subtext("Start");

    question("[CHOICE_INLINE]1[CHOICE]2[CHOICE]3");
    arg[0x00] = MEMORY.QUESTION_ANSWER + 0d1;
    question("[CHOICE_INLINE]1[CHOICE]2[CHOICE]3");
    arg[0x02] = MEMORY.QUESTION_ANSWER + 0d1;
    question("[CHOICE_INLINE]1[CHOICE]2[CHOICE]3");
    arg[0x04] = MEMORY.QUESTION_ANSWER + 0d1;

    debug_memory(arg[0x00], arg[0x02], arg[0x04]);
    sleep(0d60);
    subtext("go!");
    sleep(0d60);

    while(True) {
        while((arg[0x10] != arg[0x00]) || (arg[0x12] == arg[0x02]) || (arg[0x14] == arg[0x04])) {
            // sleep(randrange(0d10));

            arg[0x10] = randrange(0d3) + 0d1; // a1
            arg[0x12] = randrange(0d3) + 0d1; // a2
            arg[0x14] = randrange(0d3) + 0d1; // a3
            arg[0x20] = randrange(0d3) + 0d1; // c1
            arg[0x22] = randrange(0d3) + 0d1; // c2
            arg[0x24] = randrange(0d3) + 0d1; // c3
        }

        // debug_memory(arg[0x20], arg[0x22], arg[0x24]);

        arg[0x20]--;
        arg[0x22]--;
        arg[0x24]--;

        arg[0x26] = 0x2834;
        arg[0x28] = arg[0x20] + (arg[0x22] * 0d3) + (arg[0x24] * 0d9);
        arg[0x28] *= 0d2;

        arg[0x26][arg[0x28]]++;

        if(arg[0x26][arg[0x28]] == 0xffff) {
            while(True) {
                subtext("suceess!");
                sleep(0d60);

                arg[0x28] = 0d0;
                while(arg[0x28] < 0d27) {
                    debug_memory(arg[0x28], arg[0x26][arg[0x28] * 0d2]);
                    sleep(0d180);

                    arg[0x28] += 0d2;
                }
            }
        }

        // sleep(0d60);

        arg[0x10] = 0d0; // a1
        arg[0x12] = 0d0; // a2
        arg[0x14] = 0d0; // a3
        arg[0x20] = 0d0; // c1
        arg[0x22] = 0d0; // c2
        arg[0x24] = 0d0; // c3
    }

    end();

    question("[CHOICE_INLINE]1[CHOICE]2[CHOICE]3");
    arg[0x00] = MEMORY.QUESTION_ANSWER + 0d1;
    question("[CHOICE_INLINE]1[CHOICE]2[CHOICE]3");
    arg[0x02] = MEMORY.QUESTION_ANSWER + 0d1;
    question("[CHOICE_INLINE]1[CHOICE]2[CHOICE]3");
    arg[0x04] = MEMORY.QUESTION_ANSWER + 0d1;

    debug_memory(arg[0x00], arg[0x02], arg[0x04]);
    sleep(0d60);
    subtext("go!");
    sleep(0d60);

    while(True) {
        while((arg[0x10] != arg[0x00]) || (arg[0x12] == arg[0x02]) || (arg[0x14] == arg[0x04])) {
            // sleep(randrange(0d10));

            arg[0x10] = randrange(0d3) + 0d1; // a1
            arg[0x12] = randrange(0d3) + 0d1; // a2
            arg[0x14] = randrange(0d3) + 0d1; // a3
            arg[0x20] = randrange(0d3) + 0d1; // c1
            arg[0x22] = randrange(0d3) + 0d1; // c2
            arg[0x24] = randrange(0d3) + 0d1; // c3
        }

        debug_memory(arg[0x20], arg[0x22], arg[0x24]);
        sleep(0d60);

        arg[0x10] = 0d0; // a1
        arg[0x12] = 0d0; // a2
        arg[0x14] = 0d0; // a3
        arg[0x20] = 0d0; // c1
        arg[0x22] = 0d0; // c2
        arg[0x24] = 0d0; // c3
    }

    end();

    arg[0x00] = 0d1;
    arg[0x02] = 0d1;
    arg[0x04] = 0d1;

    while((arg[0x10] != arg[0x00]) || (arg[0x12] == arg[0x02]) || (arg[0x14] == arg[0x04])) {
        arg[0x10] = randrange(0d3) + 0d1; // a1
        arg[0x12] = randrange(0d3) + 0d1; // a2
        arg[0x14] = randrange(0d3) + 0d1; // a3
        arg[0x20] = randrange(0d3) + 0d1; // c1
        arg[0x22] = randrange(0d3) + 0d1; // c2
        arg[0x24] = randrange(0d3) + 0d1; // c3
    }

    if((arg[0x10] == arg[0x00]) && (arg[0x12] == arg[0x02]) && (arg[0x14] == arg[0x04])) {
        debug_memory(arg[0x20], arg[0x22], arg[0x24]);
    } else {
        debug_memory(arg[0x20], arg[0x22], arg[0x24]);
    }
}

@install(ADDRESS.INTRO_FIRST_CODE_EXECUTED)
fun intro_skip() {
    map_transition(brians_room, center, NONE);
}

map brians_room(MAP.BRIAN) {
    enum entrance {
        center = entrance(0x17, 0d40, NONE)
    }

    fun trigger_enter() {
        fade_in();

        hotkey_start();
    }
};
