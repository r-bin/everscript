#memory(
    // <0x2266>,

    string_key(0x0000)..string_key(0x232b), // all string keys

    0x300000..0x3fffff // extension
)
#include("in/core.evs")

enum STRING {
    GOURD_1 = string("[0x96][0x8b]Unlock everything[LF][0x8b]Atlas[LF][0x8b]Poison[END]"),

    PORTAL_ACT_1_1 = string("[0x96][0x8b]Oil[LF][0x8b]Intro skip[LF][0x8b]Thraxx[LF][0x8b]Next[END]"),
    PORTAL_ACT_1_2 = string("[0x96][0x8b]Solar[LF][0x8b]Magmar[END]"),

    PORTAL_ACT_1_1_THRAXX = string("[0x96][0x8b]Normal[LF][0x8b]Intro skip[LF][0x8b]Zombie boy[END]"),
    
    PORTAL_ACT_2_1 = string("[0x96][0x8b]Blimp[LF][0x8b]Atlas[LF][0x8b]Market[LF][0x8b]Next[END]"),
    PORTAL_ACT_2_2 = string("[0x96][0x8b]Vigor[LF][0x8b]Temple[LF][0x8b]Pyramid[LF][0x8b]Next[END]"),
    PORTAL_ACT_2_3 = string("[0x96][0x8b]Diamon Eyes[LF][0x8b]Aegis[LF][0x8b]Aquagoth[END]"),

    PORTAL_ACT_2_1_ATLAS = string("[0x96][0x8b]Normal[LF][0x8b]Poisoned[LF][0x8b]Speed[END]"),
    PORTAL_ACT_2_1_MARKET = string("[0x96][0x8b]Normal[LF][0x8b]Wealthy[END]"),
    
    PORTAL_ACT_3_1 = string("[0x96][0x8b]FootKnight[LF][0x8b]Bad Boys[LF][0x8b]Timberdrake[LF][0x8b]Next[END]"),
    PORTAL_ACT_3_2 = string("[0x96][0x8b]Verminator[LF][0x8b]Sterling[LF][0x8b]Mungola[LF][0x8b]Gauge[END]"),
    
    PORTAL_ACT_4_1 = string("[0x96][0x8b]Saturn[LF][0x8b]Carltron[END]")
}
fun store_last_entity(tmp) {
    code(0x19, tmp - 0x2834, 0xad, "// (19) WRITE $283b = last entity ($0341)");
}

fun entity_script_controlled(tmp) {
    code(0x2a, 0x8d, tmp - 0x2834, "// (2a) Make $283b script controlled");
}

fun fake_level(level) {
    level(level);
    // heal(CHARACTER.BOTH, True);
    // MEMORY.BOY_CURRENT_HP = 0x03e7;

    MEMORY.BOY_XP_REQUIRED = 0x00;
    add_enemy_with_flags(ENEMY.MOSQUITO, 0x00, 0x00, FLAG_ENEMY.MOSQUITO);
    store_last_entity(0x2835);

    // eval("ac 8d 01 00 b4 82 96 8d 01 00 b0 // (ac) $2835 CASTS SPELL 28 POWER 0x96 ON $2837 if alive");
    eval("93 8d 01 00 84 e8 03 // (93) DAMAGE $2843 FOR 0x03e8");
}
fun fake_atlas() {
    <0x4F29> = 0xefff;

    // <0x4ECF> = 0x0090;
    // eval("17 77 2c 98 00                      // write status effect 1 = 0x0090");
    // eval("10 5a ed 07 5a ed 29 31 9a          // write status effect count += 1");
    
    <0x4ECF> = 0x0008;
    eval("10 5a ed 07 5a ed 29 31 9a // write status effect count += 1");
    yield();
    <0x4ECF> = 0xFFFF;

    
    eval("10 5a ed 07 5a ed 29 31 9a // write status effect count += 1");
}

fun fake_poison(start) {
    <0x4ECF> = 0x0090;
    <0x4ED1> = start;
    <0x4ED3> = start;
    eval("10 5a ed 07 5a ed 29 31 9a // write status effect count += 1");
}

fun fake_confound(start) {
    cast_character(0x18, 0xdc, CHARACTER.BOTH);

    // <0x4ECF> = 0x0060;
    sleep(0xf0);
    yield();
    <0x4ED1> = start;
    // eval("10 5a ed 07 5a ed 29 31 9a // write status effect count += 1");
}

fun fake_dog(dog) {
    MEMORY.DOG = dog;
    yield();
}

@install()
@inject(0x94d5c7)
fun portal_act_1() {
    question(STRING.PORTAL_ACT_1_1);

    if(MEMORY.QUESTION_ANSWER == 0x00) { // Oil
        transition(0x25, 0x6f, 0x49, DIRECTION.NORTH, DIRECTION.SOUTH);
    } else if(MEMORY.QUESTION_ANSWER == 0x01) { // Intro skip
        transition(0x17, 0x39, 0x44, DIRECTION.NORTH, DIRECTION.WEST);
    } else if(MEMORY.QUESTION_ANSWER == 0x02) { // Thraxx
        question(STRING.PORTAL_ACT_1_1_THRAXX);
    
        if(MEMORY.QUESTION_ANSWER == 0x00) { // Normal
            transition(MAP.THRAXX, 0x17, 0x3f, DIRECTION.NORTH, DIRECTION.NORTH);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) { // Intro skip
            transition(MAP.THRAXX, 0x17, 0x3f, DIRECTION.NORTH, DIRECTION.WEST);
        } else if(MEMORY.QUESTION_ANSWER == 0x02) { // Zombie boy
            MEMORY.BOY_CURRENT_HP = 0x0000;
            transition(MAP.THRAXX, 0x17, 0x3f, DIRECTION.NORTH, DIRECTION.NORTH);
        }
    } else if(MEMORY.QUESTION_ANSWER == 0x03) { // Next
        question(STRING.PORTAL_ACT_1_2);

        if(MEMORY.QUESTION_ANSWER == 0x00) { // Solar
            fake_level(0x0007);
            transition(0x3b, 0x51, 0xb1, DIRECTION.NORTH, DIRECTION.NORTH);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) { // Magmar
            fake_level(0x0007);
            transition(MAP.MAGMAR, 0x18, 0x47, DIRECTION.NORTH, DIRECTION.NORTH);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) {
            nop();
        } else if(MEMORY.QUESTION_ANSWER == 0x02) {
            nop();
        }
    }
}

@install()
@inject(0x96db1c)
fun portal_act_2() {
    question(STRING.PORTAL_ACT_2_1);

    if(MEMORY.QUESTION_ANSWER == 0x00) { // blimp
        set(FLAG.DOG_UNAVAILABLE);
        fake_level(0x0005);
        transition(0x4f, 0x01, 0x4b, DIRECTION.EAST, DIRECTION.EAST);
    } else if(MEMORY.QUESTION_ANSWER == 0x01) { // atlas
        question(STRING.PORTAL_ACT_2_1_ATLAS);
    
        if(MEMORY.QUESTION_ANSWER == 0x00) { // Normal
            set(FLAG.DOG_UNAVAILABLE);
            set(FLAG.BLIMP_BRIDGE);

            fake_level(0x0005);
            transition(0x1b, 0x49, 0xc7, DIRECTION.NORTH, DIRECTION.NORTH);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) { // Poisoned
            set(FLAG.DOG_UNAVAILABLE);
            set(FLAG.BLIMP_BRIDGE);

            fake_level(0x0005);
            fake_poison(0x0115);
            transition(0x4f, 0x27, 0x01, DIRECTION.UNKNOWN, DIRECTION.SOUTH);
        } else if(MEMORY.QUESTION_ANSWER == 0x02) { // Speed
            set(FLAG.DOG_UNAVAILABLE);
            set(FLAG.BLIMP_BRIDGE);

            fake_level(0x0007);
            fake_poison(0x0115);
            transition(0x4f, 0x27, 0x01, DIRECTION.UNKNOWN, DIRECTION.SOUTH);
        }
    } else if(MEMORY.QUESTION_ANSWER == 0x02) { // market
        question(STRING.PORTAL_ACT_2_1_MARKET);
    
        if(MEMORY.QUESTION_ANSWER == 0x00) { // normal
            fake_level(0x0005);
            transition(0x0a, 0x05, 0x4b, DIRECTION.NORTH, DIRECTION.EAST);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) { // wealthy
            nop();
        }
    } else if(MEMORY.QUESTION_ANSWER == 0x03) { // Next
        question(STRING.PORTAL_ACT_2_2);

        if(MEMORY.QUESTION_ANSWER == 0x00) { // vigor
            fake_level(0x000c);
            load_map(0x1d, 0x20, 0x07);
        } else if(MEMORY.QUESTION_ANSWER == 0x01) { // temple
            fake_level(0x000c);
            transition(0x2a, 0x41, 0x53, DIRECTION.NORTH, DIRECTION.NORTH);
        } else if(MEMORY.QUESTION_ANSWER == 0x02) { // pyramid
            fake_level(0x000c);
            transition(0x58, 0x21, 0x3e, DIRECTION.NORTH, DIRECTION.NORTH);
        } else if(MEMORY.QUESTION_ANSWER == 0x03) { // next
            question(STRING.PORTAL_ACT_2_3);

            if(MEMORY.QUESTION_ANSWER == 0x00) { // diamond eyes
                set(<0x22d8, 0x40>);
                set(<0x22d8, 0x80>);

                fake_level(0x000c);
                fake_confound(0x0630);
                transition(0x05, 0x04, 0x71, DIRECTION.NORTH, DIRECTION.EAST);
            } else if(MEMORY.QUESTION_ANSWER == 0x01) { // aegis
                fake_level(0x000c);
                transition(0x09, 0x21, 0x41, DIRECTION.NORTH, DIRECTION.EAST);
            } else if(MEMORY.QUESTION_ANSWER == 0x02) { // aquagoth
                fake_level(0x000c);
                transition(0x6d, 0x1b, 0x51, DIRECTION.NORTH, DIRECTION.NORTH);
            } else if(MEMORY.QUESTION_ANSWER == 0x03) {
                nop();
            }
        }
    }
}

@install()
@inject(0x98ef5e)
fun portal_act_3() {
    question(STRING.PORTAL_ACT_3_1);

    if(MEMORY.QUESTION_ANSWER == 0x00) { // footknight
        fake_dog(DOG.POODLE);
        fake_level(0x000c);
        transition(0x19, 0x01, 0x42, DIRECTION.NORTH, DIRECTION.EAST);
    } else if(MEMORY.QUESTION_ANSWER == 0x01) { // bad boys
        fake_level(0x000c);
        transition(0x1f, 0x05, 0x20, DIRECTION.NORTH, DIRECTION.NORTH);
    } else if(MEMORY.QUESTION_ANSWER == 0x02) { // timberdrake
        fake_level(0x000c);
        transition(0x20, 0x1b, 0x29, DIRECTION.NORTH, DIRECTION.EAST);
    } else if(MEMORY.QUESTION_ANSWER == 0x03) { // next
            question(STRING.PORTAL_ACT_3_2);

            if(MEMORY.QUESTION_ANSWER == 0x00) { // verminator
                fake_dog(DOG.POODLE);
                fake_level(0x000c);
                transition(0x5e, 0x16, 0x65, DIRECTION.NORTH, DIRECTION.NORTH);
            } else if(MEMORY.QUESTION_ANSWER == 0x01) { // sterling
                fake_level(0x000c);
                transition(0x37, 0x55, 0xf9, DIRECTION.NORTH, DIRECTION.NORTH);
            } else if(MEMORY.QUESTION_ANSWER == 0x02) { // mungola
                set(<0x22dd, 0x02>);
                fake_level(0x000c);
                transition(0x77, 0x39, 0x24, DIRECTION.NORTH, DIRECTION.WEST);
            } else if(MEMORY.QUESTION_ANSWER == 0x03) { // gauge
                fake_level(0x000c);
                transition(0x69, 0x6b, 0x83, DIRECTION.NORTH, DIRECTION.WEST);
            }
    }
}

@install()
@inject(0x9bcf23)
fun portal_act_4() {
    question(STRING.PORTAL_ACT_4_1);

    if(MEMORY.QUESTION_ANSWER == 0x00) { // saturn
        fake_dog(DOG.TOASTER);
        fake_level(0x000c);
        load_map(0x48, 0x17, 0x00);
    } else if(MEMORY.QUESTION_ANSWER == 0x01) { // carltron
        fake_level(0x000c);
        transition(0x4a, 0x14, 0x25, DIRECTION.NORTH, DIRECTION.NORTH);
    } else if(MEMORY.QUESTION_ANSWER == 0x01) {
        nop();
    } else if(MEMORY.QUESTION_ANSWER == 0x02) {
        nop();
    }
}

@install()
@inject(ADDRESS.SOUTH_JUNGLE_ENTER)
fun south_forest_enter() {
    MEMORY.DOG = DOG.WOLF;

    unlock(ITEM.SPEAR_1);
    unlock(ITEM.JAGUAR_RING);

    price(0x1, 0xa, 0x0800, 0x1);
    price(0x2, 0x5, 0x0805, 0x1);
    price(0x3, 0x2, 0x0001, 0x1);

    // MEMORY.DOG = DOG.TOASTER;

    if(!FLAG.IN_ANIMATION) {
        teleport(CHARACTER.BOTH, 0x50, 0x83);
    }

    music_volume(MUSIC.START, 0x64);
    fade_in();

    add_enemy_with_flags(0x2a, 0x45, 0x81, 0x0020); // FE
    store_last_entity(0x2835);
    eval("3d 8d 01 00 57 18 // (3d) WRITE $2835+x66=0x1857, $2835+x68=0x0040 (talk script): Fire Eyes");
    
    // 0x94d5c7 = 0x14d5c7 = 0x14BD70 + 0x001857
    // (3d) WRITE $2835+x66=0x1857, $2835+x68=0x0040 (talk script): Fire Eyes
    // 3d 8d 01 00 57 18

    add_enemy_with_flags(0x8a, 0x47, 0x81, 0x0020); // horace
    store_last_entity(0x2835);
    eval("3d 8d 01 00 6b 19 // (3d) WRITE $2455+x66=0x196b, $2455+x68=0x0040 (talk script): Horace Camp Madronius");

    add_enemy_with_flags(0x98, 0x4a, 0x81, 0x0002); // queen
    store_last_entity(0x2835);
    entity_script_controlled(0x2835);
    eval("3d 8d 01 00 49 1a // (3d) WRITE $2836+x66=0x1a49, $2836+x68=0x0040 (talk script): Unnamed NPC talk script 0x1a49");

    add_enemy(0x57, 0x4d, 0x81); // prof
    store_last_entity(0x2835);
    entity_script_controlled(0x2835);
    eval("3d 8d 01 00 72 1b // (3d) WRITE $285b+x66=0x1b72, $285b+x68=0x0040 (talk script): Prof. Ruffelburg");
}
@install()
@inject(ADDRESS.SOUTH_JUNGLE_ENTER_GOURD_1)
fun first_gourd() {
    question(STRING.GOURD_1);

    if(MEMORY.QUESTION_ANSWER == 0x00) { // unlock everything
        unlock(ITEM.ALL);

        select_alchemy();
    } else if(MEMORY.QUESTION_ANSWER == 0x01) { // atlas
        fake_atlas();
    } else if(MEMORY.QUESTION_ANSWER == 0x02) { // poison
        fake_poison(0x0000);
    } else if(MEMORY.QUESTION_ANSWER == 0x03) {
        nop();
    }
}
